<?php
/**
 * AutoOrderApi
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use ultracart\v2\ApiException;
use ultracart\v2\Configuration;
use ultracart\v2\HeaderSelector;
use ultracart\v2\ObjectSerializer;

/**
 * AutoOrderApi Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AutoOrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAutoOrder
     *
     * Retrieve an auto order
     *
     * @param  int $auto_order_oid The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\AutoOrderResponse
     */
    public function getAutoOrder($auto_order_oid, $_expand = null)
    {
        list($response) = $this->getAutoOrderWithHttpInfo($auto_order_oid, $_expand);
        return $response;
    }

    /**
     * Operation getAutoOrderWithHttpInfo
     *
     * Retrieve an auto order
     *
     * @param  int $auto_order_oid The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\AutoOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutoOrderWithHttpInfo($auto_order_oid, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrderResponse';
        $request = $this->getAutoOrderRequest($auto_order_oid, $_expand);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\AutoOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutoOrderAsync
     *
     * Retrieve an auto order
     *
     * @param  int $auto_order_oid The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrderAsync($auto_order_oid, $_expand = null)
    {
        return $this->getAutoOrderAsyncWithHttpInfo($auto_order_oid, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutoOrderAsyncWithHttpInfo
     *
     * Retrieve an auto order
     *
     * @param  int $auto_order_oid The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrderAsyncWithHttpInfo($auto_order_oid, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrderResponse';
        $request = $this->getAutoOrderRequest($auto_order_oid, $_expand);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutoOrder'
     *
     * @param  int $auto_order_oid The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAutoOrderRequest($auto_order_oid, $_expand = null)
    {
        // verify the required parameter 'auto_order_oid' is set
        if ($auto_order_oid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_order_oid when calling getAutoOrder'
            );
        }

        $resourcePath = '/auto_order/auto_orders/{auto_order_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($auto_order_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'auto_order_oid' . '}',
                ObjectSerializer::toPathValue($auto_order_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutoOrderByCode
     *
     * Retrieve an auto order
     *
     * @param  string $auto_order_code The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\AutoOrderResponse
     */
    public function getAutoOrderByCode($auto_order_code, $_expand = null)
    {
        list($response) = $this->getAutoOrderByCodeWithHttpInfo($auto_order_code, $_expand);
        return $response;
    }

    /**
     * Operation getAutoOrderByCodeWithHttpInfo
     *
     * Retrieve an auto order
     *
     * @param  string $auto_order_code The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\AutoOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutoOrderByCodeWithHttpInfo($auto_order_code, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrderResponse';
        $request = $this->getAutoOrderByCodeRequest($auto_order_code, $_expand);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\AutoOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutoOrderByCodeAsync
     *
     * Retrieve an auto order
     *
     * @param  string $auto_order_code The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrderByCodeAsync($auto_order_code, $_expand = null)
    {
        return $this->getAutoOrderByCodeAsyncWithHttpInfo($auto_order_code, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutoOrderByCodeAsyncWithHttpInfo
     *
     * Retrieve an auto order
     *
     * @param  string $auto_order_code The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrderByCodeAsyncWithHttpInfo($auto_order_code, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrderResponse';
        $request = $this->getAutoOrderByCodeRequest($auto_order_code, $_expand);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutoOrderByCode'
     *
     * @param  string $auto_order_code The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAutoOrderByCodeRequest($auto_order_code, $_expand = null)
    {
        // verify the required parameter 'auto_order_code' is set
        if ($auto_order_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_order_code when calling getAutoOrderByCode'
            );
        }

        $resourcePath = '/auto_order/auto_orders/code/{auto_order_code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($auto_order_code !== null) {
            $resourcePath = str_replace(
                '{' . 'auto_order_code' . '}',
                ObjectSerializer::toPathValue($auto_order_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutoOrderByReferenceOrderId
     *
     * Retrieve an auto order
     *
     * @param  string $reference_order_id The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\AutoOrderResponse
     */
    public function getAutoOrderByReferenceOrderId($reference_order_id, $_expand = null)
    {
        list($response) = $this->getAutoOrderByReferenceOrderIdWithHttpInfo($reference_order_id, $_expand);
        return $response;
    }

    /**
     * Operation getAutoOrderByReferenceOrderIdWithHttpInfo
     *
     * Retrieve an auto order
     *
     * @param  string $reference_order_id The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\AutoOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutoOrderByReferenceOrderIdWithHttpInfo($reference_order_id, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrderResponse';
        $request = $this->getAutoOrderByReferenceOrderIdRequest($reference_order_id, $_expand);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\AutoOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutoOrderByReferenceOrderIdAsync
     *
     * Retrieve an auto order
     *
     * @param  string $reference_order_id The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrderByReferenceOrderIdAsync($reference_order_id, $_expand = null)
    {
        return $this->getAutoOrderByReferenceOrderIdAsyncWithHttpInfo($reference_order_id, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutoOrderByReferenceOrderIdAsyncWithHttpInfo
     *
     * Retrieve an auto order
     *
     * @param  string $reference_order_id The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrderByReferenceOrderIdAsyncWithHttpInfo($reference_order_id, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrderResponse';
        $request = $this->getAutoOrderByReferenceOrderIdRequest($reference_order_id, $_expand);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutoOrderByReferenceOrderId'
     *
     * @param  string $reference_order_id The auto order oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAutoOrderByReferenceOrderIdRequest($reference_order_id, $_expand = null)
    {
        // verify the required parameter 'reference_order_id' is set
        if ($reference_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_order_id when calling getAutoOrderByReferenceOrderId'
            );
        }

        $resourcePath = '/auto_order/auto_orders/reference_order_id/{reference_order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($reference_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reference_order_id' . '}',
                ObjectSerializer::toPathValue($reference_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutoOrders
     *
     * Retrieve auto orders
     *
     * @param  string $auto_order_code Auto order code (optional)
     * @param  string $original_order_id Original order id (optional)
     * @param  string $first_name First name (optional)
     * @param  string $last_name Last name (optional)
     * @param  string $company Company (optional)
     * @param  string $city City (optional)
     * @param  string $state State (optional)
     * @param  string $postal_code Postal code (optional)
     * @param  string $country_code Country code (ISO-3166 two letter) (optional)
     * @param  string $phone Phone (optional)
     * @param  string $email Email (optional)
     * @param  string $original_order_date_begin Original order date begin (optional)
     * @param  string $original_order_date_end Original order date end (optional)
     * @param  string $next_shipment_date_begin Next shipment date begin (optional)
     * @param  string $next_shipment_date_end Next shipment date end (optional)
     * @param  string $card_type Card type (optional)
     * @param  string $item_id Item ID (optional)
     * @param  string $status Status (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\AutoOrdersResponse
     */
    public function getAutoOrders($auto_order_code = null, $original_order_id = null, $first_name = null, $last_name = null, $company = null, $city = null, $state = null, $postal_code = null, $country_code = null, $phone = null, $email = null, $original_order_date_begin = null, $original_order_date_end = null, $next_shipment_date_begin = null, $next_shipment_date_end = null, $card_type = null, $item_id = null, $status = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        list($response) = $this->getAutoOrdersWithHttpInfo($auto_order_code, $original_order_id, $first_name, $last_name, $company, $city, $state, $postal_code, $country_code, $phone, $email, $original_order_date_begin, $original_order_date_end, $next_shipment_date_begin, $next_shipment_date_end, $card_type, $item_id, $status, $_limit, $_offset, $_since, $_sort, $_expand);
        return $response;
    }

    /**
     * Operation getAutoOrdersWithHttpInfo
     *
     * Retrieve auto orders
     *
     * @param  string $auto_order_code Auto order code (optional)
     * @param  string $original_order_id Original order id (optional)
     * @param  string $first_name First name (optional)
     * @param  string $last_name Last name (optional)
     * @param  string $company Company (optional)
     * @param  string $city City (optional)
     * @param  string $state State (optional)
     * @param  string $postal_code Postal code (optional)
     * @param  string $country_code Country code (ISO-3166 two letter) (optional)
     * @param  string $phone Phone (optional)
     * @param  string $email Email (optional)
     * @param  string $original_order_date_begin Original order date begin (optional)
     * @param  string $original_order_date_end Original order date end (optional)
     * @param  string $next_shipment_date_begin Next shipment date begin (optional)
     * @param  string $next_shipment_date_end Next shipment date end (optional)
     * @param  string $card_type Card type (optional)
     * @param  string $item_id Item ID (optional)
     * @param  string $status Status (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\AutoOrdersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutoOrdersWithHttpInfo($auto_order_code = null, $original_order_id = null, $first_name = null, $last_name = null, $company = null, $city = null, $state = null, $postal_code = null, $country_code = null, $phone = null, $email = null, $original_order_date_begin = null, $original_order_date_end = null, $next_shipment_date_begin = null, $next_shipment_date_end = null, $card_type = null, $item_id = null, $status = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrdersResponse';
        $request = $this->getAutoOrdersRequest($auto_order_code, $original_order_id, $first_name, $last_name, $company, $city, $state, $postal_code, $country_code, $phone, $email, $original_order_date_begin, $original_order_date_end, $next_shipment_date_begin, $next_shipment_date_end, $card_type, $item_id, $status, $_limit, $_offset, $_since, $_sort, $_expand);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\AutoOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutoOrdersAsync
     *
     * Retrieve auto orders
     *
     * @param  string $auto_order_code Auto order code (optional)
     * @param  string $original_order_id Original order id (optional)
     * @param  string $first_name First name (optional)
     * @param  string $last_name Last name (optional)
     * @param  string $company Company (optional)
     * @param  string $city City (optional)
     * @param  string $state State (optional)
     * @param  string $postal_code Postal code (optional)
     * @param  string $country_code Country code (ISO-3166 two letter) (optional)
     * @param  string $phone Phone (optional)
     * @param  string $email Email (optional)
     * @param  string $original_order_date_begin Original order date begin (optional)
     * @param  string $original_order_date_end Original order date end (optional)
     * @param  string $next_shipment_date_begin Next shipment date begin (optional)
     * @param  string $next_shipment_date_end Next shipment date end (optional)
     * @param  string $card_type Card type (optional)
     * @param  string $item_id Item ID (optional)
     * @param  string $status Status (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrdersAsync($auto_order_code = null, $original_order_id = null, $first_name = null, $last_name = null, $company = null, $city = null, $state = null, $postal_code = null, $country_code = null, $phone = null, $email = null, $original_order_date_begin = null, $original_order_date_end = null, $next_shipment_date_begin = null, $next_shipment_date_end = null, $card_type = null, $item_id = null, $status = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        return $this->getAutoOrdersAsyncWithHttpInfo($auto_order_code, $original_order_id, $first_name, $last_name, $company, $city, $state, $postal_code, $country_code, $phone, $email, $original_order_date_begin, $original_order_date_end, $next_shipment_date_begin, $next_shipment_date_end, $card_type, $item_id, $status, $_limit, $_offset, $_since, $_sort, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutoOrdersAsyncWithHttpInfo
     *
     * Retrieve auto orders
     *
     * @param  string $auto_order_code Auto order code (optional)
     * @param  string $original_order_id Original order id (optional)
     * @param  string $first_name First name (optional)
     * @param  string $last_name Last name (optional)
     * @param  string $company Company (optional)
     * @param  string $city City (optional)
     * @param  string $state State (optional)
     * @param  string $postal_code Postal code (optional)
     * @param  string $country_code Country code (ISO-3166 two letter) (optional)
     * @param  string $phone Phone (optional)
     * @param  string $email Email (optional)
     * @param  string $original_order_date_begin Original order date begin (optional)
     * @param  string $original_order_date_end Original order date end (optional)
     * @param  string $next_shipment_date_begin Next shipment date begin (optional)
     * @param  string $next_shipment_date_end Next shipment date end (optional)
     * @param  string $card_type Card type (optional)
     * @param  string $item_id Item ID (optional)
     * @param  string $status Status (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrdersAsyncWithHttpInfo($auto_order_code = null, $original_order_id = null, $first_name = null, $last_name = null, $company = null, $city = null, $state = null, $postal_code = null, $country_code = null, $phone = null, $email = null, $original_order_date_begin = null, $original_order_date_end = null, $next_shipment_date_begin = null, $next_shipment_date_end = null, $card_type = null, $item_id = null, $status = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrdersResponse';
        $request = $this->getAutoOrdersRequest($auto_order_code, $original_order_id, $first_name, $last_name, $company, $city, $state, $postal_code, $country_code, $phone, $email, $original_order_date_begin, $original_order_date_end, $next_shipment_date_begin, $next_shipment_date_end, $card_type, $item_id, $status, $_limit, $_offset, $_since, $_sort, $_expand);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutoOrders'
     *
     * @param  string $auto_order_code Auto order code (optional)
     * @param  string $original_order_id Original order id (optional)
     * @param  string $first_name First name (optional)
     * @param  string $last_name Last name (optional)
     * @param  string $company Company (optional)
     * @param  string $city City (optional)
     * @param  string $state State (optional)
     * @param  string $postal_code Postal code (optional)
     * @param  string $country_code Country code (ISO-3166 two letter) (optional)
     * @param  string $phone Phone (optional)
     * @param  string $email Email (optional)
     * @param  string $original_order_date_begin Original order date begin (optional)
     * @param  string $original_order_date_end Original order date end (optional)
     * @param  string $next_shipment_date_begin Next shipment date begin (optional)
     * @param  string $next_shipment_date_end Next shipment date end (optional)
     * @param  string $card_type Card type (optional)
     * @param  string $item_id Item ID (optional)
     * @param  string $status Status (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAutoOrdersRequest($auto_order_code = null, $original_order_id = null, $first_name = null, $last_name = null, $company = null, $city = null, $state = null, $postal_code = null, $country_code = null, $phone = null, $email = null, $original_order_date_begin = null, $original_order_date_end = null, $next_shipment_date_begin = null, $next_shipment_date_end = null, $card_type = null, $item_id = null, $status = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {

        $resourcePath = '/auto_order/auto_orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($auto_order_code !== null) {
            $queryParams['auto_order_code'] = ObjectSerializer::toQueryValue($auto_order_code);
        }
        // query params
        if ($original_order_id !== null) {
            $queryParams['original_order_id'] = ObjectSerializer::toQueryValue($original_order_id);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['first_name'] = ObjectSerializer::toQueryValue($first_name);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['last_name'] = ObjectSerializer::toQueryValue($last_name);
        }
        // query params
        if ($company !== null) {
            $queryParams['company'] = ObjectSerializer::toQueryValue($company);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($postal_code !== null) {
            $queryParams['postal_code'] = ObjectSerializer::toQueryValue($postal_code);
        }
        // query params
        if ($country_code !== null) {
            $queryParams['country_code'] = ObjectSerializer::toQueryValue($country_code);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = ObjectSerializer::toQueryValue($phone);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($original_order_date_begin !== null) {
            $queryParams['original_order_date_begin'] = ObjectSerializer::toQueryValue($original_order_date_begin);
        }
        // query params
        if ($original_order_date_end !== null) {
            $queryParams['original_order_date_end'] = ObjectSerializer::toQueryValue($original_order_date_end);
        }
        // query params
        if ($next_shipment_date_begin !== null) {
            $queryParams['next_shipment_date_begin'] = ObjectSerializer::toQueryValue($next_shipment_date_begin);
        }
        // query params
        if ($next_shipment_date_end !== null) {
            $queryParams['next_shipment_date_end'] = ObjectSerializer::toQueryValue($next_shipment_date_end);
        }
        // query params
        if ($card_type !== null) {
            $queryParams['card_type'] = ObjectSerializer::toQueryValue($card_type);
        }
        // query params
        if ($item_id !== null) {
            $queryParams['item_id'] = ObjectSerializer::toQueryValue($item_id);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_since !== null) {
            $queryParams['_since'] = ObjectSerializer::toQueryValue($_since);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }
        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutoOrdersByQuery
     *
     * Retrieve auto orders
     *
     * @param  \ultracart\v2\models\AutoOrderQuery $auto_order_query Auto order query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\AutoOrdersResponse
     */
    public function getAutoOrdersByQuery($auto_order_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        list($response) = $this->getAutoOrdersByQueryWithHttpInfo($auto_order_query, $_limit, $_offset, $_sort, $_expand);
        return $response;
    }

    /**
     * Operation getAutoOrdersByQueryWithHttpInfo
     *
     * Retrieve auto orders
     *
     * @param  \ultracart\v2\models\AutoOrderQuery $auto_order_query Auto order query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\AutoOrdersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutoOrdersByQueryWithHttpInfo($auto_order_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrdersResponse';
        $request = $this->getAutoOrdersByQueryRequest($auto_order_query, $_limit, $_offset, $_sort, $_expand);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\AutoOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutoOrdersByQueryAsync
     *
     * Retrieve auto orders
     *
     * @param  \ultracart\v2\models\AutoOrderQuery $auto_order_query Auto order query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrdersByQueryAsync($auto_order_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        return $this->getAutoOrdersByQueryAsyncWithHttpInfo($auto_order_query, $_limit, $_offset, $_sort, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutoOrdersByQueryAsyncWithHttpInfo
     *
     * Retrieve auto orders
     *
     * @param  \ultracart\v2\models\AutoOrderQuery $auto_order_query Auto order query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoOrdersByQueryAsyncWithHttpInfo($auto_order_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrdersResponse';
        $request = $this->getAutoOrdersByQueryRequest($auto_order_query, $_limit, $_offset, $_sort, $_expand);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutoOrdersByQuery'
     *
     * @param  \ultracart\v2\models\AutoOrderQuery $auto_order_query Auto order query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAutoOrdersByQueryRequest($auto_order_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        // verify the required parameter 'auto_order_query' is set
        if ($auto_order_query === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_order_query when calling getAutoOrdersByQuery'
            );
        }

        $resourcePath = '/auto_order/auto_orders/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }
        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;
        if (isset($auto_order_query)) {
            $_tempBody = $auto_order_query;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAutoOrder
     *
     * Update an auto order
     *
     * @param  \ultracart\v2\models\AutoOrder $auto_order Auto order to update (required)
     * @param  int $auto_order_oid The auto order oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\AutoOrderResponse
     */
    public function updateAutoOrder($auto_order, $auto_order_oid, $_expand = null)
    {
        list($response) = $this->updateAutoOrderWithHttpInfo($auto_order, $auto_order_oid, $_expand);
        return $response;
    }

    /**
     * Operation updateAutoOrderWithHttpInfo
     *
     * Update an auto order
     *
     * @param  \ultracart\v2\models\AutoOrder $auto_order Auto order to update (required)
     * @param  int $auto_order_oid The auto order oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\AutoOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAutoOrderWithHttpInfo($auto_order, $auto_order_oid, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrderResponse';
        $request = $this->updateAutoOrderRequest($auto_order, $auto_order_oid, $_expand);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\AutoOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAutoOrderAsync
     *
     * Update an auto order
     *
     * @param  \ultracart\v2\models\AutoOrder $auto_order Auto order to update (required)
     * @param  int $auto_order_oid The auto order oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAutoOrderAsync($auto_order, $auto_order_oid, $_expand = null)
    {
        return $this->updateAutoOrderAsyncWithHttpInfo($auto_order, $auto_order_oid, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAutoOrderAsyncWithHttpInfo
     *
     * Update an auto order
     *
     * @param  \ultracart\v2\models\AutoOrder $auto_order Auto order to update (required)
     * @param  int $auto_order_oid The auto order oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAutoOrderAsyncWithHttpInfo($auto_order, $auto_order_oid, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\AutoOrderResponse';
        $request = $this->updateAutoOrderRequest($auto_order, $auto_order_oid, $_expand);

        return $this->client
            ->sendAsync($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAutoOrder'
     *
     * @param  \ultracart\v2\models\AutoOrder $auto_order Auto order to update (required)
     * @param  int $auto_order_oid The auto order oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAutoOrderRequest($auto_order, $auto_order_oid, $_expand = null)
    {
        // verify the required parameter 'auto_order' is set
        if ($auto_order === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_order when calling updateAutoOrder'
            );
        }
        // verify the required parameter 'auto_order_oid' is set
        if ($auto_order_oid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_order_oid when calling updateAutoOrder'
            );
        }

        $resourcePath = '/auto_order/auto_orders/{auto_order_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($auto_order_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'auto_order_oid' . '}',
                ObjectSerializer::toPathValue($auto_order_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($auto_order)) {
            $_tempBody = $auto_order;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

}
