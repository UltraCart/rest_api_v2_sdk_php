<?php
/**
 * StorefrontApi
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ultracart\v2\ApiException;
use ultracart\v2\Configuration;
use ultracart\v2\HeaderSelector;
use ultracart\v2\ObjectSerializer;

/**
 * StorefrontApi Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StorefrontApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }


    /**
     * @param string $simple_key api key
     * @param int $max_retry_seconds 0 to disable, else the maximum number of seconds to wait and automatically retry when rate limit is hit
     * @param string $verify passed to Guzzle to enable/disable ssl verify
     */
    public static function usingApiKey( $simple_key, $max_retry_seconds = 0, $verify = true) {
        $config = new Configuration();
        $config->setApiKey('x-ultracart-simple-key', $simple_key);
        $config->setMaxRetrySeconds($max_retry_seconds);

        $client = new Client(['verify' => $verify, 'debug' => false]);
        $headerSelector = new HeaderSelector(/* leave null for version tied to this sdk version */);
        $api = new StorefrontApi($client, $config, $headerSelector);
        return $api;
    }


    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addToLibrary
     *
     * Add to library
     *
     * @param  \ultracart\v2\models\AddLibraryItemRequest $add_library_request New library item request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemResponse
     */
    public function addToLibrary($add_library_request)
    {
        list($response) = $this->addToLibraryWithHttpInfo($add_library_request);
        return $response;
    }


    /**
     * Operation addToLibraryWithHttpInfo
     *
     * Add to library
     *
     * @param  \ultracart\v2\models\AddLibraryItemRequest $add_library_request New library item request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addToLibraryWithHttpInfo($add_library_request)
    {
        return $this->addToLibraryWithHttpInfoRetry(true ,   $add_library_request);
    }


    /**
     * Operation addToLibraryWithHttpInfoRetry
     *
     * Add to library
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\AddLibraryItemRequest $add_library_request New library item request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addToLibraryWithHttpInfoRetry($retry ,  $add_library_request)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->addToLibraryRequest($add_library_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->addToLibraryWithHttpInfoRetry(false ,   $add_library_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addToLibraryAsync
     *
     * Add to library
     *
     * @param  \ultracart\v2\models\AddLibraryItemRequest $add_library_request New library item request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addToLibraryAsync($add_library_request)
    {
        return $this->addToLibraryAsyncWithHttpInfo($add_library_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addToLibraryAsyncWithHttpInfo
     *
     * Add to library
     *
     * @param  \ultracart\v2\models\AddLibraryItemRequest $add_library_request New library item request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addToLibraryAsyncWithHttpInfo($add_library_request)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->addToLibraryRequest($add_library_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addToLibrary'
     *
     * @param  \ultracart\v2\models\AddLibraryItemRequest $add_library_request New library item request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addToLibraryRequest($add_library_request)
    {
        // verify the required parameter 'add_library_request' is set
        if ($add_library_request === null || (is_array($add_library_request) && count($add_library_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_library_request when calling addToLibrary'
            );
        }

        $resourcePath = '/storefront/code_library';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($add_library_request)) {
            $_tempBody = $add_library_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation applyToStoreFront
     *
     * Apply library item to storefront.
     *
     * @param  \ultracart\v2\models\ApplyLibraryItemRequest $apply_library_request New library item (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ApplyLibraryItemResponse
     */
    public function applyToStoreFront($apply_library_request)
    {
        list($response) = $this->applyToStoreFrontWithHttpInfo($apply_library_request);
        return $response;
    }


    /**
     * Operation applyToStoreFrontWithHttpInfo
     *
     * Apply library item to storefront.
     *
     * @param  \ultracart\v2\models\ApplyLibraryItemRequest $apply_library_request New library item (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ApplyLibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyToStoreFrontWithHttpInfo($apply_library_request)
    {
        return $this->applyToStoreFrontWithHttpInfoRetry(true ,   $apply_library_request);
    }


    /**
     * Operation applyToStoreFrontWithHttpInfoRetry
     *
     * Apply library item to storefront.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\ApplyLibraryItemRequest $apply_library_request New library item (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ApplyLibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyToStoreFrontWithHttpInfoRetry($retry ,  $apply_library_request)
    {
        $returnType = '\ultracart\v2\models\ApplyLibraryItemResponse';
        $request = $this->applyToStoreFrontRequest($apply_library_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->applyToStoreFrontWithHttpInfoRetry(false ,   $apply_library_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ApplyLibraryItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyToStoreFrontAsync
     *
     * Apply library item to storefront.
     *
     * @param  \ultracart\v2\models\ApplyLibraryItemRequest $apply_library_request New library item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyToStoreFrontAsync($apply_library_request)
    {
        return $this->applyToStoreFrontAsyncWithHttpInfo($apply_library_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyToStoreFrontAsyncWithHttpInfo
     *
     * Apply library item to storefront.
     *
     * @param  \ultracart\v2\models\ApplyLibraryItemRequest $apply_library_request New library item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyToStoreFrontAsyncWithHttpInfo($apply_library_request)
    {
        $returnType = '\ultracart\v2\models\ApplyLibraryItemResponse';
        $request = $this->applyToStoreFrontRequest($apply_library_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyToStoreFront'
     *
     * @param  \ultracart\v2\models\ApplyLibraryItemRequest $apply_library_request New library item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function applyToStoreFrontRequest($apply_library_request)
    {
        // verify the required parameter 'apply_library_request' is set
        if ($apply_library_request === null || (is_array($apply_library_request) && count($apply_library_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apply_library_request when calling applyToStoreFront'
            );
        }

        $resourcePath = '/storefront/code_library/apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($apply_library_request)) {
            $_tempBody = $apply_library_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation archiveEmailList
     *
     * Archive email list
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_uuid email_list_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListArchiveResponse
     */
    public function archiveEmailList($storefront_oid, $email_list_uuid)
    {
        list($response) = $this->archiveEmailListWithHttpInfo($storefront_oid, $email_list_uuid);
        return $response;
    }


    /**
     * Operation archiveEmailListWithHttpInfo
     *
     * Archive email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListArchiveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveEmailListWithHttpInfo($storefront_oid, $email_list_uuid)
    {
        return $this->archiveEmailListWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_uuid);
    }


    /**
     * Operation archiveEmailListWithHttpInfoRetry
     *
     * Archive email list
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListArchiveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveEmailListWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailListArchiveResponse';
        $request = $this->archiveEmailListRequest($storefront_oid, $email_list_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->archiveEmailListWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListArchiveResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation archiveEmailListAsync
     *
     * Archive email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveEmailListAsync($storefront_oid, $email_list_uuid)
    {
        return $this->archiveEmailListAsyncWithHttpInfo($storefront_oid, $email_list_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveEmailListAsyncWithHttpInfo
     *
     * Archive email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveEmailListAsyncWithHttpInfo($storefront_oid, $email_list_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailListArchiveResponse';
        $request = $this->archiveEmailListRequest($storefront_oid, $email_list_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveEmailList'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function archiveEmailListRequest($storefront_oid, $email_list_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling archiveEmailList'
            );
        }
        // verify the required parameter 'email_list_uuid' is set
        if ($email_list_uuid === null || (is_array($email_list_uuid) && count($email_list_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_uuid when calling archiveEmailList'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation archiveEmailSegment
     *
     * Archive email segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_segment_uuid email_segment_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSegmentArchiveResponse
     */
    public function archiveEmailSegment($storefront_oid, $email_segment_uuid)
    {
        list($response) = $this->archiveEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid);
        return $response;
    }


    /**
     * Operation archiveEmailSegmentWithHttpInfo
     *
     * Archive email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentArchiveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid)
    {
        return $this->archiveEmailSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $email_segment_uuid);
    }


    /**
     * Operation archiveEmailSegmentWithHttpInfoRetry
     *
     * Archive email segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentArchiveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveEmailSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $email_segment_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentArchiveResponse';
        $request = $this->archiveEmailSegmentRequest($storefront_oid, $email_segment_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->archiveEmailSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $email_segment_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSegmentArchiveResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation archiveEmailSegmentAsync
     *
     * Archive email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveEmailSegmentAsync($storefront_oid, $email_segment_uuid)
    {
        return $this->archiveEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveEmailSegmentAsyncWithHttpInfo
     *
     * Archive email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentArchiveResponse';
        $request = $this->archiveEmailSegmentRequest($storefront_oid, $email_segment_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveEmailSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function archiveEmailSegmentRequest($storefront_oid, $email_segment_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling archiveEmailSegment'
            );
        }
        // verify the required parameter 'email_segment_uuid' is set
        if ($email_segment_uuid === null || (is_array($email_segment_uuid) && count($email_segment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment_uuid when calling archiveEmailSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_segment_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_segment_uuid' . '}',
                ObjectSerializer::toPathValue($email_segment_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation backPopulateEmailFlow
     *
     * Back populate email flow
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_flow_uuid email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowBackPopulateRequest $back_populate_request The request to back populate (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowBackPopulateResponse
     */
    public function backPopulateEmailFlow($storefront_oid, $email_flow_uuid, $back_populate_request)
    {
        list($response) = $this->backPopulateEmailFlowWithHttpInfo($storefront_oid, $email_flow_uuid, $back_populate_request);
        return $response;
    }


    /**
     * Operation backPopulateEmailFlowWithHttpInfo
     *
     * Back populate email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowBackPopulateRequest $back_populate_request The request to back populate (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowBackPopulateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function backPopulateEmailFlowWithHttpInfo($storefront_oid, $email_flow_uuid, $back_populate_request)
    {
        return $this->backPopulateEmailFlowWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow_uuid,   $back_populate_request);
    }


    /**
     * Operation backPopulateEmailFlowWithHttpInfoRetry
     *
     * Back populate email flow
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowBackPopulateRequest $back_populate_request The request to back populate (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowBackPopulateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function backPopulateEmailFlowWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow_uuid,  $back_populate_request)
    {
        $returnType = '\ultracart\v2\models\EmailFlowBackPopulateResponse';
        $request = $this->backPopulateEmailFlowRequest($storefront_oid, $email_flow_uuid, $back_populate_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->backPopulateEmailFlowWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow_uuid,   $back_populate_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowBackPopulateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation backPopulateEmailFlowAsync
     *
     * Back populate email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowBackPopulateRequest $back_populate_request The request to back populate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function backPopulateEmailFlowAsync($storefront_oid, $email_flow_uuid, $back_populate_request)
    {
        return $this->backPopulateEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow_uuid, $back_populate_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation backPopulateEmailFlowAsyncWithHttpInfo
     *
     * Back populate email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowBackPopulateRequest $back_populate_request The request to back populate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function backPopulateEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow_uuid, $back_populate_request)
    {
        $returnType = '\ultracart\v2\models\EmailFlowBackPopulateResponse';
        $request = $this->backPopulateEmailFlowRequest($storefront_oid, $email_flow_uuid, $back_populate_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'backPopulateEmailFlow'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowBackPopulateRequest $back_populate_request The request to back populate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function backPopulateEmailFlowRequest($storefront_oid, $email_flow_uuid, $back_populate_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling backPopulateEmailFlow'
            );
        }
        // verify the required parameter 'email_flow_uuid' is set
        if ($email_flow_uuid === null || (is_array($email_flow_uuid) && count($email_flow_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_uuid when calling backPopulateEmailFlow'
            );
        }
        // verify the required parameter 'back_populate_request' is set
        if ($back_populate_request === null || (is_array($back_populate_request) && count($back_populate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $back_populate_request when calling backPopulateEmailFlow'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_flow_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_flow_uuid' . '}',
                ObjectSerializer::toPathValue($email_flow_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($back_populate_request)) {
            $_tempBody = $back_populate_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkDownloadEmailSegment
     *
     * Check download of email segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_segment_uuid email_segment_uuid (required)
     * @param  string $email_segment_rebuild_uuid email_segment_rebuild_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSegmentDownloadPrepareResponse
     */
    public function checkDownloadEmailSegment($storefront_oid, $email_segment_uuid, $email_segment_rebuild_uuid)
    {
        list($response) = $this->checkDownloadEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid, $email_segment_rebuild_uuid);
        return $response;
    }


    /**
     * Operation checkDownloadEmailSegmentWithHttpInfo
     *
     * Check download of email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_segment_rebuild_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentDownloadPrepareResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkDownloadEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid, $email_segment_rebuild_uuid)
    {
        return $this->checkDownloadEmailSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $email_segment_uuid,   $email_segment_rebuild_uuid);
    }


    /**
     * Operation checkDownloadEmailSegmentWithHttpInfoRetry
     *
     * Check download of email segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_segment_rebuild_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentDownloadPrepareResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkDownloadEmailSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $email_segment_uuid,  $email_segment_rebuild_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentDownloadPrepareResponse';
        $request = $this->checkDownloadEmailSegmentRequest($storefront_oid, $email_segment_uuid, $email_segment_rebuild_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->checkDownloadEmailSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $email_segment_uuid,   $email_segment_rebuild_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSegmentDownloadPrepareResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkDownloadEmailSegmentAsync
     *
     * Check download of email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_segment_rebuild_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDownloadEmailSegmentAsync($storefront_oid, $email_segment_uuid, $email_segment_rebuild_uuid)
    {
        return $this->checkDownloadEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $email_segment_rebuild_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkDownloadEmailSegmentAsyncWithHttpInfo
     *
     * Check download of email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_segment_rebuild_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDownloadEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $email_segment_rebuild_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentDownloadPrepareResponse';
        $request = $this->checkDownloadEmailSegmentRequest($storefront_oid, $email_segment_uuid, $email_segment_rebuild_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkDownloadEmailSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_segment_rebuild_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkDownloadEmailSegmentRequest($storefront_oid, $email_segment_uuid, $email_segment_rebuild_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling checkDownloadEmailSegment'
            );
        }
        // verify the required parameter 'email_segment_uuid' is set
        if ($email_segment_uuid === null || (is_array($email_segment_uuid) && count($email_segment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment_uuid when calling checkDownloadEmailSegment'
            );
        }
        // verify the required parameter 'email_segment_rebuild_uuid' is set
        if ($email_segment_rebuild_uuid === null || (is_array($email_segment_rebuild_uuid) && count($email_segment_rebuild_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment_rebuild_uuid when calling checkDownloadEmailSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_segment_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_segment_uuid' . '}',
                ObjectSerializer::toPathValue($email_segment_uuid),
                $resourcePath
            );
        }
        // path params
        if ($email_segment_rebuild_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_segment_rebuild_uuid' . '}',
                ObjectSerializer::toPathValue($email_segment_rebuild_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cloneEmailCampaign
     *
     * Clone email campaign
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_campaign_uuid email_campaign_uuid (required)
     * @param  int $target_storefront_oid target_storefront_oid (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignResponse
     */
    public function cloneEmailCampaign($storefront_oid, $email_campaign_uuid, $target_storefront_oid = null)
    {
        list($response) = $this->cloneEmailCampaignWithHttpInfo($storefront_oid, $email_campaign_uuid, $target_storefront_oid);
        return $response;
    }


    /**
     * Operation cloneEmailCampaignWithHttpInfo
     *
     * Clone email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneEmailCampaignWithHttpInfo($storefront_oid, $email_campaign_uuid, $target_storefront_oid = null)
    {
        return $this->cloneEmailCampaignWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign_uuid,   $target_storefront_oid);
    }


    /**
     * Operation cloneEmailCampaignWithHttpInfoRetry
     *
     * Clone email campaign
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneEmailCampaignWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign_uuid,  $target_storefront_oid = null)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignResponse';
        $request = $this->cloneEmailCampaignRequest($storefront_oid, $email_campaign_uuid, $target_storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->cloneEmailCampaignWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign_uuid,   $target_storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cloneEmailCampaignAsync
     *
     * Clone email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneEmailCampaignAsync($storefront_oid, $email_campaign_uuid, $target_storefront_oid = null)
    {
        return $this->cloneEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid, $target_storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cloneEmailCampaignAsyncWithHttpInfo
     *
     * Clone email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid, $target_storefront_oid = null)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignResponse';
        $request = $this->cloneEmailCampaignRequest($storefront_oid, $email_campaign_uuid, $target_storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cloneEmailCampaign'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cloneEmailCampaignRequest($storefront_oid, $email_campaign_uuid, $target_storefront_oid = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling cloneEmailCampaign'
            );
        }
        // verify the required parameter 'email_campaign_uuid' is set
        if ($email_campaign_uuid === null || (is_array($email_campaign_uuid) && count($email_campaign_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_uuid when calling cloneEmailCampaign'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($target_storefront_oid !== null) {
            $queryParams['target_storefront_oid'] = ObjectSerializer::toQueryValue($target_storefront_oid);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_campaign_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_uuid' . '}',
                ObjectSerializer::toPathValue($email_campaign_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cloneEmailFlow
     *
     * Clone email flow
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_flow_uuid email_flow_uuid (required)
     * @param  int $target_storefront_oid target_storefront_oid (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowResponse
     */
    public function cloneEmailFlow($storefront_oid, $email_flow_uuid, $target_storefront_oid = null)
    {
        list($response) = $this->cloneEmailFlowWithHttpInfo($storefront_oid, $email_flow_uuid, $target_storefront_oid);
        return $response;
    }


    /**
     * Operation cloneEmailFlowWithHttpInfo
     *
     * Clone email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneEmailFlowWithHttpInfo($storefront_oid, $email_flow_uuid, $target_storefront_oid = null)
    {
        return $this->cloneEmailFlowWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow_uuid,   $target_storefront_oid);
    }


    /**
     * Operation cloneEmailFlowWithHttpInfoRetry
     *
     * Clone email flow
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneEmailFlowWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow_uuid,  $target_storefront_oid = null)
    {
        $returnType = '\ultracart\v2\models\EmailFlowResponse';
        $request = $this->cloneEmailFlowRequest($storefront_oid, $email_flow_uuid, $target_storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->cloneEmailFlowWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow_uuid,   $target_storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cloneEmailFlowAsync
     *
     * Clone email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneEmailFlowAsync($storefront_oid, $email_flow_uuid, $target_storefront_oid = null)
    {
        return $this->cloneEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow_uuid, $target_storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cloneEmailFlowAsyncWithHttpInfo
     *
     * Clone email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow_uuid, $target_storefront_oid = null)
    {
        $returnType = '\ultracart\v2\models\EmailFlowResponse';
        $request = $this->cloneEmailFlowRequest($storefront_oid, $email_flow_uuid, $target_storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cloneEmailFlow'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  int $target_storefront_oid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cloneEmailFlowRequest($storefront_oid, $email_flow_uuid, $target_storefront_oid = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling cloneEmailFlow'
            );
        }
        // verify the required parameter 'email_flow_uuid' is set
        if ($email_flow_uuid === null || (is_array($email_flow_uuid) && count($email_flow_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_uuid when calling cloneEmailFlow'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($target_storefront_oid !== null) {
            $queryParams['target_storefront_oid'] = ObjectSerializer::toQueryValue($target_storefront_oid);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_flow_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_flow_uuid' . '}',
                ObjectSerializer::toPathValue($email_flow_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEmailSendingDomain
     *
     * Create email campaign
     *
     * @param  string $domain domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSendingDomainResponse
     */
    public function createEmailSendingDomain($domain)
    {
        list($response) = $this->createEmailSendingDomainWithHttpInfo($domain);
        return $response;
    }


    /**
     * Operation createEmailSendingDomainWithHttpInfo
     *
     * Create email campaign
     *
     * @param  string $domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailSendingDomainWithHttpInfo($domain)
    {
        return $this->createEmailSendingDomainWithHttpInfoRetry(true ,   $domain);
    }


    /**
     * Operation createEmailSendingDomainWithHttpInfoRetry
     *
     * Create email campaign
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailSendingDomainWithHttpInfoRetry($retry ,  $domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->createEmailSendingDomainRequest($domain);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->createEmailSendingDomainWithHttpInfoRetry(false ,   $domain);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSendingDomainResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmailSendingDomainAsync
     *
     * Create email campaign
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailSendingDomainAsync($domain)
    {
        return $this->createEmailSendingDomainAsyncWithHttpInfo($domain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmailSendingDomainAsyncWithHttpInfo
     *
     * Create email campaign
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailSendingDomainAsyncWithHttpInfo($domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->createEmailSendingDomainRequest($domain);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmailSendingDomain'
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createEmailSendingDomainRequest($domain)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling createEmailSendingDomain'
            );
        }

        $resourcePath = '/storefront/email/sending_domains/{domain}/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEmailSendingDomain2
     *
     * Create email sending domain for various providers
     *
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSendingDomainResponse
     */
    public function createEmailSendingDomain2($email_domain)
    {
        list($response) = $this->createEmailSendingDomain2WithHttpInfo($email_domain);
        return $response;
    }


    /**
     * Operation createEmailSendingDomain2WithHttpInfo
     *
     * Create email sending domain for various providers
     *
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailSendingDomain2WithHttpInfo($email_domain)
    {
        return $this->createEmailSendingDomain2WithHttpInfoRetry(true ,   $email_domain);
    }


    /**
     * Operation createEmailSendingDomain2WithHttpInfoRetry
     *
     * Create email sending domain for various providers
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailSendingDomain2WithHttpInfoRetry($retry ,  $email_domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->createEmailSendingDomain2Request($email_domain);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->createEmailSendingDomain2WithHttpInfoRetry(false ,   $email_domain);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSendingDomainResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmailSendingDomain2Async
     *
     * Create email sending domain for various providers
     *
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailSendingDomain2Async($email_domain)
    {
        return $this->createEmailSendingDomain2AsyncWithHttpInfo($email_domain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmailSendingDomain2AsyncWithHttpInfo
     *
     * Create email sending domain for various providers
     *
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailSendingDomain2AsyncWithHttpInfo($email_domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->createEmailSendingDomain2Request($email_domain);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmailSendingDomain2'
     *
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createEmailSendingDomain2Request($email_domain)
    {
        // verify the required parameter 'email_domain' is set
        if ($email_domain === null || (is_array($email_domain) && count($email_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_domain when calling createEmailSendingDomain2'
            );
        }

        $resourcePath = '/storefront/email/sending_domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($email_domain)) {
            $_tempBody = $email_domain;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTwilioAccount
     *
     * Create Twilio account
     *
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\TwilioResponse
     */
    public function createTwilioAccount($twilio)
    {
        list($response) = $this->createTwilioAccountWithHttpInfo($twilio);
        return $response;
    }


    /**
     * Operation createTwilioAccountWithHttpInfo
     *
     * Create Twilio account
     *
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TwilioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTwilioAccountWithHttpInfo($twilio)
    {
        return $this->createTwilioAccountWithHttpInfoRetry(true ,   $twilio);
    }


    /**
     * Operation createTwilioAccountWithHttpInfoRetry
     *
     * Create Twilio account
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TwilioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTwilioAccountWithHttpInfoRetry($retry ,  $twilio)
    {
        $returnType = '\ultracart\v2\models\TwilioResponse';
        $request = $this->createTwilioAccountRequest($twilio);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->createTwilioAccountWithHttpInfoRetry(false ,   $twilio);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\TwilioResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTwilioAccountAsync
     *
     * Create Twilio account
     *
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTwilioAccountAsync($twilio)
    {
        return $this->createTwilioAccountAsyncWithHttpInfo($twilio)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTwilioAccountAsyncWithHttpInfo
     *
     * Create Twilio account
     *
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTwilioAccountAsyncWithHttpInfo($twilio)
    {
        $returnType = '\ultracart\v2\models\TwilioResponse';
        $request = $this->createTwilioAccountRequest($twilio);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTwilioAccount'
     *
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTwilioAccountRequest($twilio)
    {
        // verify the required parameter 'twilio' is set
        if ($twilio === null || (is_array($twilio) && count($twilio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $twilio when calling createTwilioAccount'
            );
        }

        $resourcePath = '/storefront/twilio/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($twilio)) {
            $_tempBody = $twilio;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailCampaignFolder
     *
     * Delete email campaignFolder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_campaign_folder_uuid email_campaign_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function deleteEmailCampaignFolder($storefront_oid, $email_campaign_folder_uuid)
    {
        list($response) = $this->deleteEmailCampaignFolderWithHttpInfo($storefront_oid, $email_campaign_folder_uuid);
        return $response;
    }


    /**
     * Operation deleteEmailCampaignFolderWithHttpInfo
     *
     * Delete email campaignFolder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailCampaignFolderWithHttpInfo($storefront_oid, $email_campaign_folder_uuid)
    {
        return $this->deleteEmailCampaignFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign_folder_uuid);
    }


    /**
     * Operation deleteEmailCampaignFolderWithHttpInfoRetry
     *
     * Delete email campaignFolder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailCampaignFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->deleteEmailCampaignFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign_folder_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailCampaignFolderAsync
     *
     * Delete email campaignFolder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailCampaignFolderAsync($storefront_oid, $email_campaign_folder_uuid)
    {
        return $this->deleteEmailCampaignFolderAsyncWithHttpInfo($storefront_oid, $email_campaign_folder_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailCampaignFolderAsyncWithHttpInfo
     *
     * Delete email campaignFolder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailCampaignFolderAsyncWithHttpInfo($storefront_oid, $email_campaign_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailCampaignFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteEmailCampaignFolder'
            );
        }
        // verify the required parameter 'email_campaign_folder_uuid' is set
        if ($email_campaign_folder_uuid === null || (is_array($email_campaign_folder_uuid) && count($email_campaign_folder_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_folder_uuid when calling deleteEmailCampaignFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_campaign_folder_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_folder_uuid' . '}',
                ObjectSerializer::toPathValue($email_campaign_folder_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailCommseqStat
     *
     * Delete communication sequence stats
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEmailCommseqStat($storefront_oid, $commseq_uuid)
    {
        $this->deleteEmailCommseqStatWithHttpInfo($storefront_oid, $commseq_uuid);
    }


    /**
     * Operation deleteEmailCommseqStatWithHttpInfo
     *
     * Delete communication sequence stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailCommseqStatWithHttpInfo($storefront_oid, $commseq_uuid)
    {
        $this->deleteEmailCommseqStatWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid);
    }


    /**
     * Operation deleteEmailCommseqStatWithHttpInfoRetry
     *
     * Delete communication sequence stats
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailCommseqStatWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid)
    {
        $returnType = '';
        $request = $this->deleteEmailCommseqStatRequest($storefront_oid, $commseq_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteEmailCommseqStatWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailCommseqStatAsync
     *
     * Delete communication sequence stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailCommseqStatAsync($storefront_oid, $commseq_uuid)
    {
        return $this->deleteEmailCommseqStatAsyncWithHttpInfo($storefront_oid, $commseq_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailCommseqStatAsyncWithHttpInfo
     *
     * Delete communication sequence stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailCommseqStatAsyncWithHttpInfo($storefront_oid, $commseq_uuid)
    {
        $returnType = '';
        $request = $this->deleteEmailCommseqStatRequest($storefront_oid, $commseq_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailCommseqStat'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailCommseqStatRequest($storefront_oid, $commseq_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteEmailCommseqStat'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling deleteEmailCommseqStat'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailEmail
     *
     * Delete email email
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_email_uuid commseq_email_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function deleteEmailEmail($storefront_oid, $commseq_email_uuid)
    {
        list($response) = $this->deleteEmailEmailWithHttpInfo($storefront_oid, $commseq_email_uuid);
        return $response;
    }


    /**
     * Operation deleteEmailEmailWithHttpInfo
     *
     * Delete email email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailEmailWithHttpInfo($storefront_oid, $commseq_email_uuid)
    {
        return $this->deleteEmailEmailWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_email_uuid);
    }


    /**
     * Operation deleteEmailEmailWithHttpInfoRetry
     *
     * Delete email email
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailEmailWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_email_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailEmailRequest($storefront_oid, $commseq_email_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->deleteEmailEmailWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_email_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailEmailAsync
     *
     * Delete email email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailEmailAsync($storefront_oid, $commseq_email_uuid)
    {
        return $this->deleteEmailEmailAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailEmailAsyncWithHttpInfo
     *
     * Delete email email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailEmailAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailEmailRequest($storefront_oid, $commseq_email_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailEmail'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailEmailRequest($storefront_oid, $commseq_email_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteEmailEmail'
            );
        }
        // verify the required parameter 'commseq_email_uuid' is set
        if ($commseq_email_uuid === null || (is_array($commseq_email_uuid) && count($commseq_email_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_email_uuid when calling deleteEmailEmail'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_email_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_email_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_email_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailFlowFolder
     *
     * Delete email flowFolder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_flow_folder_uuid email_flow_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function deleteEmailFlowFolder($storefront_oid, $email_flow_folder_uuid)
    {
        list($response) = $this->deleteEmailFlowFolderWithHttpInfo($storefront_oid, $email_flow_folder_uuid);
        return $response;
    }


    /**
     * Operation deleteEmailFlowFolderWithHttpInfo
     *
     * Delete email flowFolder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailFlowFolderWithHttpInfo($storefront_oid, $email_flow_folder_uuid)
    {
        return $this->deleteEmailFlowFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow_folder_uuid);
    }


    /**
     * Operation deleteEmailFlowFolderWithHttpInfoRetry
     *
     * Delete email flowFolder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailFlowFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailFlowFolderRequest($storefront_oid, $email_flow_folder_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->deleteEmailFlowFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow_folder_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailFlowFolderAsync
     *
     * Delete email flowFolder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailFlowFolderAsync($storefront_oid, $email_flow_folder_uuid)
    {
        return $this->deleteEmailFlowFolderAsyncWithHttpInfo($storefront_oid, $email_flow_folder_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailFlowFolderAsyncWithHttpInfo
     *
     * Delete email flowFolder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailFlowFolderAsyncWithHttpInfo($storefront_oid, $email_flow_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailFlowFolderRequest($storefront_oid, $email_flow_folder_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailFlowFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailFlowFolderRequest($storefront_oid, $email_flow_folder_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteEmailFlowFolder'
            );
        }
        // verify the required parameter 'email_flow_folder_uuid' is set
        if ($email_flow_folder_uuid === null || (is_array($email_flow_folder_uuid) && count($email_flow_folder_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_folder_uuid when calling deleteEmailFlowFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_flow_folder_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_flow_folder_uuid' . '}',
                ObjectSerializer::toPathValue($email_flow_folder_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailListCustomer
     *
     * Delete email list customer
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_uuid email_list_uuid (required)
     * @param  string $email_customer_uuid email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function deleteEmailListCustomer($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        list($response) = $this->deleteEmailListCustomerWithHttpInfo($storefront_oid, $email_list_uuid, $email_customer_uuid);
        return $response;
    }


    /**
     * Operation deleteEmailListCustomerWithHttpInfo
     *
     * Delete email list customer
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailListCustomerWithHttpInfo($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        return $this->deleteEmailListCustomerWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_uuid,   $email_customer_uuid);
    }


    /**
     * Operation deleteEmailListCustomerWithHttpInfoRetry
     *
     * Delete email list customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailListCustomerWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_uuid,  $email_customer_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailListCustomerRequest($storefront_oid, $email_list_uuid, $email_customer_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->deleteEmailListCustomerWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_uuid,   $email_customer_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailListCustomerAsync
     *
     * Delete email list customer
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailListCustomerAsync($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        return $this->deleteEmailListCustomerAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $email_customer_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailListCustomerAsyncWithHttpInfo
     *
     * Delete email list customer
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailListCustomerAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailListCustomerRequest($storefront_oid, $email_list_uuid, $email_customer_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailListCustomer'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailListCustomerRequest($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteEmailListCustomer'
            );
        }
        // verify the required parameter 'email_list_uuid' is set
        if ($email_list_uuid === null || (is_array($email_list_uuid) && count($email_list_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_uuid when calling deleteEmailListCustomer'
            );
        }
        // verify the required parameter 'email_customer_uuid' is set
        if ($email_customer_uuid === null || (is_array($email_customer_uuid) && count($email_customer_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_customer_uuid when calling deleteEmailListCustomer'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_uuid),
                $resourcePath
            );
        }
        // path params
        if ($email_customer_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_customer_uuid' . '}',
                ObjectSerializer::toPathValue($email_customer_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailListSegmentFolder
     *
     * Delete email ListSegmentFolder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid email_list_segment_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function deleteEmailListSegmentFolder($storefront_oid, $email_list_segment_folder_uuid)
    {
        list($response) = $this->deleteEmailListSegmentFolderWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid);
        return $response;
    }


    /**
     * Operation deleteEmailListSegmentFolderWithHttpInfo
     *
     * Delete email ListSegmentFolder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailListSegmentFolderWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid)
    {
        return $this->deleteEmailListSegmentFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_segment_folder_uuid);
    }


    /**
     * Operation deleteEmailListSegmentFolderWithHttpInfoRetry
     *
     * Delete email ListSegmentFolder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailListSegmentFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_segment_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->deleteEmailListSegmentFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_segment_folder_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailListSegmentFolderAsync
     *
     * Delete email ListSegmentFolder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailListSegmentFolderAsync($storefront_oid, $email_list_segment_folder_uuid)
    {
        return $this->deleteEmailListSegmentFolderAsyncWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailListSegmentFolderAsyncWithHttpInfo
     *
     * Delete email ListSegmentFolder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailListSegmentFolderAsyncWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailListSegmentFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteEmailListSegmentFolder'
            );
        }
        // verify the required parameter 'email_list_segment_folder_uuid' is set
        if ($email_list_segment_folder_uuid === null || (is_array($email_list_segment_folder_uuid) && count($email_list_segment_folder_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_segment_folder_uuid when calling deleteEmailListSegmentFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_segment_folder_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_segment_folder_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_segment_folder_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailPostcard
     *
     * Delete email postcard
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_postcard_uuid commseq_postcard_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function deleteEmailPostcard($storefront_oid, $commseq_postcard_uuid)
    {
        list($response) = $this->deleteEmailPostcardWithHttpInfo($storefront_oid, $commseq_postcard_uuid);
        return $response;
    }


    /**
     * Operation deleteEmailPostcardWithHttpInfo
     *
     * Delete email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailPostcardWithHttpInfo($storefront_oid, $commseq_postcard_uuid)
    {
        return $this->deleteEmailPostcardWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_postcard_uuid);
    }


    /**
     * Operation deleteEmailPostcardWithHttpInfoRetry
     *
     * Delete email postcard
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailPostcardWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_postcard_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailPostcardRequest($storefront_oid, $commseq_postcard_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->deleteEmailPostcardWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_postcard_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailPostcardAsync
     *
     * Delete email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailPostcardAsync($storefront_oid, $commseq_postcard_uuid)
    {
        return $this->deleteEmailPostcardAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailPostcardAsyncWithHttpInfo
     *
     * Delete email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailPostcardAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailPostcardRequest($storefront_oid, $commseq_postcard_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailPostcard'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailPostcardRequest($storefront_oid, $commseq_postcard_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteEmailPostcard'
            );
        }
        // verify the required parameter 'commseq_postcard_uuid' is set
        if ($commseq_postcard_uuid === null || (is_array($commseq_postcard_uuid) && count($commseq_postcard_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_postcard_uuid when calling deleteEmailPostcard'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_postcard_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_postcard_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_postcard_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailSendingDomain
     *
     * delete email campaign
     *
     * @param  string $domain domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function deleteEmailSendingDomain($domain)
    {
        list($response) = $this->deleteEmailSendingDomainWithHttpInfo($domain);
        return $response;
    }


    /**
     * Operation deleteEmailSendingDomainWithHttpInfo
     *
     * delete email campaign
     *
     * @param  string $domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailSendingDomainWithHttpInfo($domain)
    {
        return $this->deleteEmailSendingDomainWithHttpInfoRetry(true ,   $domain);
    }


    /**
     * Operation deleteEmailSendingDomainWithHttpInfoRetry
     *
     * delete email campaign
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailSendingDomainWithHttpInfoRetry($retry ,  $domain)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailSendingDomainRequest($domain);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->deleteEmailSendingDomainWithHttpInfoRetry(false ,   $domain);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailSendingDomainAsync
     *
     * delete email campaign
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailSendingDomainAsync($domain)
    {
        return $this->deleteEmailSendingDomainAsyncWithHttpInfo($domain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailSendingDomainAsyncWithHttpInfo
     *
     * delete email campaign
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailSendingDomainAsyncWithHttpInfo($domain)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteEmailSendingDomainRequest($domain);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailSendingDomain'
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailSendingDomainRequest($domain)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling deleteEmailSendingDomain'
            );
        }

        $resourcePath = '/storefront/email/sending_domains/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteExperiment
     *
     * Delete experiment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $storefront_experiment_oid storefront_experiment_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteExperiment($storefront_oid, $storefront_experiment_oid)
    {
        $this->deleteExperimentWithHttpInfo($storefront_oid, $storefront_experiment_oid);
    }


    /**
     * Operation deleteExperimentWithHttpInfo
     *
     * Delete experiment
     *
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExperimentWithHttpInfo($storefront_oid, $storefront_experiment_oid)
    {
        $this->deleteExperimentWithHttpInfoRetry(true ,   $storefront_oid,   $storefront_experiment_oid);
    }


    /**
     * Operation deleteExperimentWithHttpInfoRetry
     *
     * Delete experiment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExperimentWithHttpInfoRetry($retry ,  $storefront_oid,  $storefront_experiment_oid)
    {
        $returnType = '';
        $request = $this->deleteExperimentRequest($storefront_oid, $storefront_experiment_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteExperimentWithHttpInfoRetry(false ,   $storefront_oid,   $storefront_experiment_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExperimentAsync
     *
     * Delete experiment
     *
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExperimentAsync($storefront_oid, $storefront_experiment_oid)
    {
        return $this->deleteExperimentAsyncWithHttpInfo($storefront_oid, $storefront_experiment_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExperimentAsyncWithHttpInfo
     *
     * Delete experiment
     *
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExperimentAsyncWithHttpInfo($storefront_oid, $storefront_experiment_oid)
    {
        $returnType = '';
        $request = $this->deleteExperimentRequest($storefront_oid, $storefront_experiment_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteExperiment'
     *
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteExperimentRequest($storefront_oid, $storefront_experiment_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteExperiment'
            );
        }
        // verify the required parameter 'storefront_experiment_oid' is set
        if ($storefront_experiment_oid === null || (is_array($storefront_experiment_oid) && count($storefront_experiment_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_experiment_oid when calling deleteExperiment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($storefront_experiment_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_experiment_oid' . '}',
                ObjectSerializer::toPathValue($storefront_experiment_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHeatmap
     *
     * Delete screen recording heatmap
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapReset $query Query (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHeatmap($storefront_oid, $query)
    {
        $this->deleteHeatmapWithHttpInfo($storefront_oid, $query);
    }


    /**
     * Operation deleteHeatmapWithHttpInfo
     *
     * Delete screen recording heatmap
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapReset $query Query (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHeatmapWithHttpInfo($storefront_oid, $query)
    {
        $this->deleteHeatmapWithHttpInfoRetry(true ,   $storefront_oid,   $query);
    }


    /**
     * Operation deleteHeatmapWithHttpInfoRetry
     *
     * Delete screen recording heatmap
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapReset $query Query (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHeatmapWithHttpInfoRetry($retry ,  $storefront_oid,  $query)
    {
        $returnType = '';
        $request = $this->deleteHeatmapRequest($storefront_oid, $query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteHeatmapWithHttpInfoRetry(false ,   $storefront_oid,   $query);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHeatmapAsync
     *
     * Delete screen recording heatmap
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapReset $query Query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHeatmapAsync($storefront_oid, $query)
    {
        return $this->deleteHeatmapAsyncWithHttpInfo($storefront_oid, $query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHeatmapAsyncWithHttpInfo
     *
     * Delete screen recording heatmap
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapReset $query Query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHeatmapAsyncWithHttpInfo($storefront_oid, $query)
    {
        $returnType = '';
        $request = $this->deleteHeatmapRequest($storefront_oid, $query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHeatmap'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapReset $query Query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteHeatmapRequest($storefront_oid, $query)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteHeatmap'
            );
        }
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling deleteHeatmap'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/heatmap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLibraryItem
     *
     * Delete library item
     *
     * @param  int $library_item_oid library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLibraryItem($library_item_oid)
    {
        $this->deleteLibraryItemWithHttpInfo($library_item_oid);
    }


    /**
     * Operation deleteLibraryItemWithHttpInfo
     *
     * Delete library item
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLibraryItemWithHttpInfo($library_item_oid)
    {
        $this->deleteLibraryItemWithHttpInfoRetry(true ,   $library_item_oid);
    }


    /**
     * Operation deleteLibraryItemWithHttpInfoRetry
     *
     * Delete library item
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLibraryItemWithHttpInfoRetry($retry ,  $library_item_oid)
    {
        $returnType = '';
        $request = $this->deleteLibraryItemRequest($library_item_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteLibraryItemWithHttpInfoRetry(false ,   $library_item_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLibraryItemAsync
     *
     * Delete library item
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLibraryItemAsync($library_item_oid)
    {
        return $this->deleteLibraryItemAsyncWithHttpInfo($library_item_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLibraryItemAsyncWithHttpInfo
     *
     * Delete library item
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLibraryItemAsyncWithHttpInfo($library_item_oid)
    {
        $returnType = '';
        $request = $this->deleteLibraryItemRequest($library_item_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLibraryItem'
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLibraryItemRequest($library_item_oid)
    {
        // verify the required parameter 'library_item_oid' is set
        if ($library_item_oid === null || (is_array($library_item_oid) && count($library_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $library_item_oid when calling deleteLibraryItem'
            );
        }

        $resourcePath = '/storefront/code_library/{library_item_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($library_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'library_item_oid' . '}',
                ObjectSerializer::toPathValue($library_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLibraryItemPublishedVersions
     *
     * Delete all published versions for a library item, including anything in review.
     *
     * @param  int $library_item_oid library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLibraryItemPublishedVersions($library_item_oid)
    {
        $this->deleteLibraryItemPublishedVersionsWithHttpInfo($library_item_oid);
    }


    /**
     * Operation deleteLibraryItemPublishedVersionsWithHttpInfo
     *
     * Delete all published versions for a library item, including anything in review.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLibraryItemPublishedVersionsWithHttpInfo($library_item_oid)
    {
        $this->deleteLibraryItemPublishedVersionsWithHttpInfoRetry(true ,   $library_item_oid);
    }


    /**
     * Operation deleteLibraryItemPublishedVersionsWithHttpInfoRetry
     *
     * Delete all published versions for a library item, including anything in review.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLibraryItemPublishedVersionsWithHttpInfoRetry($retry ,  $library_item_oid)
    {
        $returnType = '';
        $request = $this->deleteLibraryItemPublishedVersionsRequest($library_item_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteLibraryItemPublishedVersionsWithHttpInfoRetry(false ,   $library_item_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLibraryItemPublishedVersionsAsync
     *
     * Delete all published versions for a library item, including anything in review.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLibraryItemPublishedVersionsAsync($library_item_oid)
    {
        return $this->deleteLibraryItemPublishedVersionsAsyncWithHttpInfo($library_item_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLibraryItemPublishedVersionsAsyncWithHttpInfo
     *
     * Delete all published versions for a library item, including anything in review.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLibraryItemPublishedVersionsAsyncWithHttpInfo($library_item_oid)
    {
        $returnType = '';
        $request = $this->deleteLibraryItemPublishedVersionsRequest($library_item_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLibraryItemPublishedVersions'
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLibraryItemPublishedVersionsRequest($library_item_oid)
    {
        // verify the required parameter 'library_item_oid' is set
        if ($library_item_oid === null || (is_array($library_item_oid) && count($library_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $library_item_oid when calling deleteLibraryItemPublishedVersions'
            );
        }

        $resourcePath = '/storefront/code_library/{library_item_oid}/published_versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($library_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'library_item_oid' . '}',
                ObjectSerializer::toPathValue($library_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteScreenRecordingSegment
     *
     * Delete screen recording segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $screen_recording_segment_oid screen_recording_segment_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteScreenRecordingSegment($storefront_oid, $screen_recording_segment_oid)
    {
        $this->deleteScreenRecordingSegmentWithHttpInfo($storefront_oid, $screen_recording_segment_oid);
    }


    /**
     * Operation deleteScreenRecordingSegmentWithHttpInfo
     *
     * Delete screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScreenRecordingSegmentWithHttpInfo($storefront_oid, $screen_recording_segment_oid)
    {
        $this->deleteScreenRecordingSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_segment_oid);
    }


    /**
     * Operation deleteScreenRecordingSegmentWithHttpInfoRetry
     *
     * Delete screen recording segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteScreenRecordingSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_segment_oid)
    {
        $returnType = '';
        $request = $this->deleteScreenRecordingSegmentRequest($storefront_oid, $screen_recording_segment_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteScreenRecordingSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_segment_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteScreenRecordingSegmentAsync
     *
     * Delete screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteScreenRecordingSegmentAsync($storefront_oid, $screen_recording_segment_oid)
    {
        return $this->deleteScreenRecordingSegmentAsyncWithHttpInfo($storefront_oid, $screen_recording_segment_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteScreenRecordingSegmentAsyncWithHttpInfo
     *
     * Delete screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteScreenRecordingSegmentAsyncWithHttpInfo($storefront_oid, $screen_recording_segment_oid)
    {
        $returnType = '';
        $request = $this->deleteScreenRecordingSegmentRequest($storefront_oid, $screen_recording_segment_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteScreenRecordingSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteScreenRecordingSegmentRequest($storefront_oid, $screen_recording_segment_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling deleteScreenRecordingSegment'
            );
        }
        // verify the required parameter 'screen_recording_segment_oid' is set
        if ($screen_recording_segment_oid === null || (is_array($screen_recording_segment_oid) && count($screen_recording_segment_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_segment_oid when calling deleteScreenRecordingSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_segment_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_segment_oid' . '}',
                ObjectSerializer::toPathValue($screen_recording_segment_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTwilioAccount
     *
     * delete Twilio account
     *
     * @param  string $esp_twilio_uuid esp_twilio_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function deleteTwilioAccount($esp_twilio_uuid)
    {
        list($response) = $this->deleteTwilioAccountWithHttpInfo($esp_twilio_uuid);
        return $response;
    }


    /**
     * Operation deleteTwilioAccountWithHttpInfo
     *
     * delete Twilio account
     *
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTwilioAccountWithHttpInfo($esp_twilio_uuid)
    {
        return $this->deleteTwilioAccountWithHttpInfoRetry(true ,   $esp_twilio_uuid);
    }


    /**
     * Operation deleteTwilioAccountWithHttpInfoRetry
     *
     * delete Twilio account
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTwilioAccountWithHttpInfoRetry($retry ,  $esp_twilio_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteTwilioAccountRequest($esp_twilio_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->deleteTwilioAccountWithHttpInfoRetry(false ,   $esp_twilio_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTwilioAccountAsync
     *
     * delete Twilio account
     *
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTwilioAccountAsync($esp_twilio_uuid)
    {
        return $this->deleteTwilioAccountAsyncWithHttpInfo($esp_twilio_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTwilioAccountAsyncWithHttpInfo
     *
     * delete Twilio account
     *
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTwilioAccountAsyncWithHttpInfo($esp_twilio_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->deleteTwilioAccountRequest($esp_twilio_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTwilioAccount'
     *
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTwilioAccountRequest($esp_twilio_uuid)
    {
        // verify the required parameter 'esp_twilio_uuid' is set
        if ($esp_twilio_uuid === null || (is_array($esp_twilio_uuid) && count($esp_twilio_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $esp_twilio_uuid when calling deleteTwilioAccount'
            );
        }

        $resourcePath = '/storefront/twilio/accounts/{esp_twilio_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($esp_twilio_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'esp_twilio_uuid' . '}',
                ObjectSerializer::toPathValue($esp_twilio_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation duplicateLibraryItem
     *
     * Duplicate library item.
     *
     * @param  int $library_item_oid library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemResponse
     */
    public function duplicateLibraryItem($library_item_oid)
    {
        list($response) = $this->duplicateLibraryItemWithHttpInfo($library_item_oid);
        return $response;
    }


    /**
     * Operation duplicateLibraryItemWithHttpInfo
     *
     * Duplicate library item.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicateLibraryItemWithHttpInfo($library_item_oid)
    {
        return $this->duplicateLibraryItemWithHttpInfoRetry(true ,   $library_item_oid);
    }


    /**
     * Operation duplicateLibraryItemWithHttpInfoRetry
     *
     * Duplicate library item.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function duplicateLibraryItemWithHttpInfoRetry($retry ,  $library_item_oid)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->duplicateLibraryItemRequest($library_item_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->duplicateLibraryItemWithHttpInfoRetry(false ,   $library_item_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation duplicateLibraryItemAsync
     *
     * Duplicate library item.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateLibraryItemAsync($library_item_oid)
    {
        return $this->duplicateLibraryItemAsyncWithHttpInfo($library_item_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation duplicateLibraryItemAsyncWithHttpInfo
     *
     * Duplicate library item.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function duplicateLibraryItemAsyncWithHttpInfo($library_item_oid)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->duplicateLibraryItemRequest($library_item_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'duplicateLibraryItem'
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function duplicateLibraryItemRequest($library_item_oid)
    {
        // verify the required parameter 'library_item_oid' is set
        if ($library_item_oid === null || (is_array($library_item_oid) && count($library_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $library_item_oid when calling duplicateLibraryItem'
            );
        }

        $resourcePath = '/storefront/code_library/{library_item_oid}/duplicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($library_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'library_item_oid' . '}',
                ObjectSerializer::toPathValue($library_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation favoriteScreenRecording
     *
     * Update favorite flag on screen recording
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $screen_recording_uuid screen_recording_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function favoriteScreenRecording($storefront_oid, $screen_recording_uuid)
    {
        $this->favoriteScreenRecordingWithHttpInfo($storefront_oid, $screen_recording_uuid);
    }


    /**
     * Operation favoriteScreenRecordingWithHttpInfo
     *
     * Update favorite flag on screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function favoriteScreenRecordingWithHttpInfo($storefront_oid, $screen_recording_uuid)
    {
        $this->favoriteScreenRecordingWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_uuid);
    }


    /**
     * Operation favoriteScreenRecordingWithHttpInfoRetry
     *
     * Update favorite flag on screen recording
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function favoriteScreenRecordingWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_uuid)
    {
        $returnType = '';
        $request = $this->favoriteScreenRecordingRequest($storefront_oid, $screen_recording_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->favoriteScreenRecordingWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation favoriteScreenRecordingAsync
     *
     * Update favorite flag on screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function favoriteScreenRecordingAsync($storefront_oid, $screen_recording_uuid)
    {
        return $this->favoriteScreenRecordingAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation favoriteScreenRecordingAsyncWithHttpInfo
     *
     * Update favorite flag on screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function favoriteScreenRecordingAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid)
    {
        $returnType = '';
        $request = $this->favoriteScreenRecordingRequest($storefront_oid, $screen_recording_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'favoriteScreenRecording'
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function favoriteScreenRecordingRequest($storefront_oid, $screen_recording_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling favoriteScreenRecording'
            );
        }
        // verify the required parameter 'screen_recording_uuid' is set
        if ($screen_recording_uuid === null || (is_array($screen_recording_uuid) && count($screen_recording_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_uuid when calling favoriteScreenRecording'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_uuid' . '}',
                ObjectSerializer::toPathValue($screen_recording_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geocodeAddress
     *
     * Obtain lat/long for an address
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\GeocodeRequest $geocode_request geocode request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\GeocodeResponse
     */
    public function geocodeAddress($storefront_oid, $geocode_request)
    {
        list($response) = $this->geocodeAddressWithHttpInfo($storefront_oid, $geocode_request);
        return $response;
    }


    /**
     * Operation geocodeAddressWithHttpInfo
     *
     * Obtain lat/long for an address
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\GeocodeRequest $geocode_request geocode request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\GeocodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function geocodeAddressWithHttpInfo($storefront_oid, $geocode_request)
    {
        return $this->geocodeAddressWithHttpInfoRetry(true ,   $storefront_oid,   $geocode_request);
    }


    /**
     * Operation geocodeAddressWithHttpInfoRetry
     *
     * Obtain lat/long for an address
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\GeocodeRequest $geocode_request geocode request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\GeocodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function geocodeAddressWithHttpInfoRetry($retry ,  $storefront_oid,  $geocode_request)
    {
        $returnType = '\ultracart\v2\models\GeocodeResponse';
        $request = $this->geocodeAddressRequest($storefront_oid, $geocode_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->geocodeAddressWithHttpInfoRetry(false ,   $storefront_oid,   $geocode_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\GeocodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geocodeAddressAsync
     *
     * Obtain lat/long for an address
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\GeocodeRequest $geocode_request geocode request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geocodeAddressAsync($storefront_oid, $geocode_request)
    {
        return $this->geocodeAddressAsyncWithHttpInfo($storefront_oid, $geocode_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geocodeAddressAsyncWithHttpInfo
     *
     * Obtain lat/long for an address
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\GeocodeRequest $geocode_request geocode request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geocodeAddressAsyncWithHttpInfo($storefront_oid, $geocode_request)
    {
        $returnType = '\ultracart\v2\models\GeocodeResponse';
        $request = $this->geocodeAddressRequest($storefront_oid, $geocode_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geocodeAddress'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\GeocodeRequest $geocode_request geocode request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function geocodeAddressRequest($storefront_oid, $geocode_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling geocodeAddress'
            );
        }
        // verify the required parameter 'geocode_request' is set
        if ($geocode_request === null || (is_array($geocode_request) && count($geocode_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geocode_request when calling geocodeAddress'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/geocode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($geocode_request)) {
            $_tempBody = $geocode_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCountries
     *
     * Get countries
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CountriesResponse
     */
    public function getCountries($storefront_oid)
    {
        list($response) = $this->getCountriesWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getCountriesWithHttpInfo
     *
     * Get countries
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CountriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountriesWithHttpInfo($storefront_oid)
    {
        return $this->getCountriesWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getCountriesWithHttpInfoRetry
     *
     * Get countries
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CountriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountriesWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\CountriesResponse';
        $request = $this->getCountriesRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCountriesWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CountriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCountriesAsync
     *
     * Get countries
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountriesAsync($storefront_oid)
    {
        return $this->getCountriesAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCountriesAsyncWithHttpInfo
     *
     * Get countries
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountriesAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\CountriesResponse';
        $request = $this->getCountriesRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCountries'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCountriesRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getCountries'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEditorToken
     *
     * Gets editor token
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailEditorTokenResponse
     */
    public function getEditorToken($storefront_oid)
    {
        list($response) = $this->getEditorTokenWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEditorTokenWithHttpInfo
     *
     * Gets editor token
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailEditorTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEditorTokenWithHttpInfo($storefront_oid)
    {
        return $this->getEditorTokenWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEditorTokenWithHttpInfoRetry
     *
     * Gets editor token
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailEditorTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEditorTokenWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailEditorTokenResponse';
        $request = $this->getEditorTokenRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEditorTokenWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailEditorTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEditorTokenAsync
     *
     * Gets editor token
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEditorTokenAsync($storefront_oid)
    {
        return $this->getEditorTokenAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEditorTokenAsyncWithHttpInfo
     *
     * Gets editor token
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEditorTokenAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailEditorTokenResponse';
        $request = $this->getEditorTokenRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEditorToken'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEditorTokenRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEditorToken'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/editor_token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailBaseTemplates
     *
     * Get email communication base templates
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailBaseTemplateListResponse
     */
    public function getEmailBaseTemplates($storefront_oid)
    {
        list($response) = $this->getEmailBaseTemplatesWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailBaseTemplatesWithHttpInfo
     *
     * Get email communication base templates
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailBaseTemplateListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailBaseTemplatesWithHttpInfo($storefront_oid)
    {
        return $this->getEmailBaseTemplatesWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailBaseTemplatesWithHttpInfoRetry
     *
     * Get email communication base templates
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailBaseTemplateListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailBaseTemplatesWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailBaseTemplateListResponse';
        $request = $this->getEmailBaseTemplatesRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailBaseTemplatesWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailBaseTemplateListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailBaseTemplatesAsync
     *
     * Get email communication base templates
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailBaseTemplatesAsync($storefront_oid)
    {
        return $this->getEmailBaseTemplatesAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailBaseTemplatesAsyncWithHttpInfo
     *
     * Get email communication base templates
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailBaseTemplatesAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailBaseTemplateListResponse';
        $request = $this->getEmailBaseTemplatesRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailBaseTemplates'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailBaseTemplatesRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailBaseTemplates'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/baseTemplates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaign
     *
     * Get email campaign
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_campaign_uuid email_campaign_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignResponse
     */
    public function getEmailCampaign($storefront_oid, $email_campaign_uuid)
    {
        list($response) = $this->getEmailCampaignWithHttpInfo($storefront_oid, $email_campaign_uuid);
        return $response;
    }


    /**
     * Operation getEmailCampaignWithHttpInfo
     *
     * Get email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignWithHttpInfo($storefront_oid, $email_campaign_uuid)
    {
        return $this->getEmailCampaignWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign_uuid);
    }


    /**
     * Operation getEmailCampaignWithHttpInfoRetry
     *
     * Get email campaign
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignResponse';
        $request = $this->getEmailCampaignRequest($storefront_oid, $email_campaign_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCampaignWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignAsync
     *
     * Get email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignAsync($storefront_oid, $email_campaign_uuid)
    {
        return $this->getEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignAsyncWithHttpInfo
     *
     * Get email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignResponse';
        $request = $this->getEmailCampaignRequest($storefront_oid, $email_campaign_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaign'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCampaignRequest($storefront_oid, $email_campaign_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCampaign'
            );
        }
        // verify the required parameter 'email_campaign_uuid' is set
        if ($email_campaign_uuid === null || (is_array($email_campaign_uuid) && count($email_campaign_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_uuid when calling getEmailCampaign'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_campaign_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_uuid' . '}',
                ObjectSerializer::toPathValue($email_campaign_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignFolder
     *
     * Get email campaign folder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_campaign_folder_uuid email_campaign_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignFolderResponse
     */
    public function getEmailCampaignFolder($storefront_oid, $email_campaign_folder_uuid)
    {
        list($response) = $this->getEmailCampaignFolderWithHttpInfo($storefront_oid, $email_campaign_folder_uuid);
        return $response;
    }


    /**
     * Operation getEmailCampaignFolderWithHttpInfo
     *
     * Get email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignFolderWithHttpInfo($storefront_oid, $email_campaign_folder_uuid)
    {
        return $this->getEmailCampaignFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign_folder_uuid);
    }


    /**
     * Operation getEmailCampaignFolderWithHttpInfoRetry
     *
     * Get email campaign folder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignFolderResponse';
        $request = $this->getEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCampaignFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign_folder_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignFolderAsync
     *
     * Get email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignFolderAsync($storefront_oid, $email_campaign_folder_uuid)
    {
        return $this->getEmailCampaignFolderAsyncWithHttpInfo($storefront_oid, $email_campaign_folder_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignFolderAsyncWithHttpInfo
     *
     * Get email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignFolderAsyncWithHttpInfo($storefront_oid, $email_campaign_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignFolderResponse';
        $request = $this->getEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCampaignFolder'
            );
        }
        // verify the required parameter 'email_campaign_folder_uuid' is set
        if ($email_campaign_folder_uuid === null || (is_array($email_campaign_folder_uuid) && count($email_campaign_folder_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_folder_uuid when calling getEmailCampaignFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_campaign_folder_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_folder_uuid' . '}',
                ObjectSerializer::toPathValue($email_campaign_folder_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignFolders
     *
     * Get email campaign folders
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignFoldersResponse
     */
    public function getEmailCampaignFolders($storefront_oid)
    {
        list($response) = $this->getEmailCampaignFoldersWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailCampaignFoldersWithHttpInfo
     *
     * Get email campaign folders
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignFoldersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignFoldersWithHttpInfo($storefront_oid)
    {
        return $this->getEmailCampaignFoldersWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailCampaignFoldersWithHttpInfoRetry
     *
     * Get email campaign folders
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignFoldersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignFoldersWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignFoldersResponse';
        $request = $this->getEmailCampaignFoldersRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCampaignFoldersWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignFoldersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignFoldersAsync
     *
     * Get email campaign folders
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignFoldersAsync($storefront_oid)
    {
        return $this->getEmailCampaignFoldersAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignFoldersAsyncWithHttpInfo
     *
     * Get email campaign folders
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignFoldersAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignFoldersResponse';
        $request = $this->getEmailCampaignFoldersRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignFolders'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCampaignFoldersRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCampaignFolders'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaign_folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignScreenshots
     *
     * Get email campaign screenshots
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_campaign_uuid email_campaign_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenshotsResponse
     */
    public function getEmailCampaignScreenshots($storefront_oid, $email_campaign_uuid)
    {
        list($response) = $this->getEmailCampaignScreenshotsWithHttpInfo($storefront_oid, $email_campaign_uuid);
        return $response;
    }


    /**
     * Operation getEmailCampaignScreenshotsWithHttpInfo
     *
     * Get email campaign screenshots
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenshotsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignScreenshotsWithHttpInfo($storefront_oid, $email_campaign_uuid)
    {
        return $this->getEmailCampaignScreenshotsWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign_uuid);
    }


    /**
     * Operation getEmailCampaignScreenshotsWithHttpInfoRetry
     *
     * Get email campaign screenshots
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenshotsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignScreenshotsWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign_uuid)
    {
        $returnType = '\ultracart\v2\models\ScreenshotsResponse';
        $request = $this->getEmailCampaignScreenshotsRequest($storefront_oid, $email_campaign_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCampaignScreenshotsWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenshotsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignScreenshotsAsync
     *
     * Get email campaign screenshots
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignScreenshotsAsync($storefront_oid, $email_campaign_uuid)
    {
        return $this->getEmailCampaignScreenshotsAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignScreenshotsAsyncWithHttpInfo
     *
     * Get email campaign screenshots
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignScreenshotsAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid)
    {
        $returnType = '\ultracart\v2\models\ScreenshotsResponse';
        $request = $this->getEmailCampaignScreenshotsRequest($storefront_oid, $email_campaign_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignScreenshots'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCampaignScreenshotsRequest($storefront_oid, $email_campaign_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCampaignScreenshots'
            );
        }
        // verify the required parameter 'email_campaign_uuid' is set
        if ($email_campaign_uuid === null || (is_array($email_campaign_uuid) && count($email_campaign_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_uuid when calling getEmailCampaignScreenshots'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_campaign_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_uuid' . '}',
                ObjectSerializer::toPathValue($email_campaign_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaigns
     *
     * Get email campaigns
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignsResponse
     */
    public function getEmailCampaigns($storefront_oid)
    {
        list($response) = $this->getEmailCampaignsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailCampaignsWithHttpInfo
     *
     * Get email campaigns
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignsWithHttpInfo($storefront_oid)
    {
        return $this->getEmailCampaignsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailCampaignsWithHttpInfoRetry
     *
     * Get email campaigns
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignsResponse';
        $request = $this->getEmailCampaignsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCampaignsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignsAsync
     *
     * Get email campaigns
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignsAsync($storefront_oid)
    {
        return $this->getEmailCampaignsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignsAsyncWithHttpInfo
     *
     * Get email campaigns
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignsResponse';
        $request = $this->getEmailCampaignsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaigns'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCampaignsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCampaigns'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCampaignsWithStats
     *
     * Get email campaigns with stats
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $stat_days stat_days (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignsResponse
     */
    public function getEmailCampaignsWithStats($storefront_oid, $stat_days)
    {
        list($response) = $this->getEmailCampaignsWithStatsWithHttpInfo($storefront_oid, $stat_days);
        return $response;
    }


    /**
     * Operation getEmailCampaignsWithStatsWithHttpInfo
     *
     * Get email campaigns with stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $stat_days (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignsWithStatsWithHttpInfo($storefront_oid, $stat_days)
    {
        return $this->getEmailCampaignsWithStatsWithHttpInfoRetry(true ,   $storefront_oid,   $stat_days);
    }


    /**
     * Operation getEmailCampaignsWithStatsWithHttpInfoRetry
     *
     * Get email campaigns with stats
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $stat_days (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCampaignsWithStatsWithHttpInfoRetry($retry ,  $storefront_oid,  $stat_days)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignsResponse';
        $request = $this->getEmailCampaignsWithStatsRequest($storefront_oid, $stat_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCampaignsWithStatsWithHttpInfoRetry(false ,   $storefront_oid,   $stat_days);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCampaignsWithStatsAsync
     *
     * Get email campaigns with stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $stat_days (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignsWithStatsAsync($storefront_oid, $stat_days)
    {
        return $this->getEmailCampaignsWithStatsAsyncWithHttpInfo($storefront_oid, $stat_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCampaignsWithStatsAsyncWithHttpInfo
     *
     * Get email campaigns with stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $stat_days (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCampaignsWithStatsAsyncWithHttpInfo($storefront_oid, $stat_days)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignsResponse';
        $request = $this->getEmailCampaignsWithStatsRequest($storefront_oid, $stat_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCampaignsWithStats'
     *
     * @param  int $storefront_oid (required)
     * @param  string $stat_days (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCampaignsWithStatsRequest($storefront_oid, $stat_days)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCampaignsWithStats'
            );
        }
        // verify the required parameter 'stat_days' is set
        if ($stat_days === null || (is_array($stat_days) && count($stat_days) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stat_days when calling getEmailCampaignsWithStats'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($stat_days !== null) {
            $resourcePath = str_replace(
                '{' . 'stat_days' . '}',
                ObjectSerializer::toPathValue($stat_days),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCommseq
     *
     * Get email commseq
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqResponse
     */
    public function getEmailCommseq($storefront_oid, $commseq_uuid)
    {
        list($response) = $this->getEmailCommseqWithHttpInfo($storefront_oid, $commseq_uuid);
        return $response;
    }


    /**
     * Operation getEmailCommseqWithHttpInfo
     *
     * Get email commseq
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqWithHttpInfo($storefront_oid, $commseq_uuid)
    {
        return $this->getEmailCommseqWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid);
    }


    /**
     * Operation getEmailCommseqWithHttpInfoRetry
     *
     * Get email commseq
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqResponse';
        $request = $this->getEmailCommseqRequest($storefront_oid, $commseq_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCommseqWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCommseqAsync
     *
     * Get email commseq
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqAsync($storefront_oid, $commseq_uuid)
    {
        return $this->getEmailCommseqAsyncWithHttpInfo($storefront_oid, $commseq_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCommseqAsyncWithHttpInfo
     *
     * Get email commseq
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqAsyncWithHttpInfo($storefront_oid, $commseq_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqResponse';
        $request = $this->getEmailCommseqRequest($storefront_oid, $commseq_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCommseq'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCommseqRequest($storefront_oid, $commseq_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCommseq'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailCommseq'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCommseqEmailStats
     *
     * Get email communication sequence emails stats
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailStatSummaryResponse
     */
    public function getEmailCommseqEmailStats($storefront_oid, $commseq_uuid, $stats_request)
    {
        list($response) = $this->getEmailCommseqEmailStatsWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request);
        return $response;
    }


    /**
     * Operation getEmailCommseqEmailStatsWithHttpInfo
     *
     * Get email communication sequence emails stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailStatSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqEmailStatsWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request)
    {
        return $this->getEmailCommseqEmailStatsWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $stats_request);
    }


    /**
     * Operation getEmailCommseqEmailStatsWithHttpInfoRetry
     *
     * Get email communication sequence emails stats
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailStatSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqEmailStatsWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $stats_request)
    {
        $returnType = '\ultracart\v2\models\EmailStatSummaryResponse';
        $request = $this->getEmailCommseqEmailStatsRequest($storefront_oid, $commseq_uuid, $stats_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCommseqEmailStatsWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $stats_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailStatSummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCommseqEmailStatsAsync
     *
     * Get email communication sequence emails stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqEmailStatsAsync($storefront_oid, $commseq_uuid, $stats_request)
    {
        return $this->getEmailCommseqEmailStatsAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCommseqEmailStatsAsyncWithHttpInfo
     *
     * Get email communication sequence emails stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqEmailStatsAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request)
    {
        $returnType = '\ultracart\v2\models\EmailStatSummaryResponse';
        $request = $this->getEmailCommseqEmailStatsRequest($storefront_oid, $commseq_uuid, $stats_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCommseqEmailStats'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCommseqEmailStatsRequest($storefront_oid, $commseq_uuid, $stats_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCommseqEmailStats'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailCommseqEmailStats'
            );
        }
        // verify the required parameter 'stats_request' is set
        if ($stats_request === null || (is_array($stats_request) && count($stats_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stats_request when calling getEmailCommseqEmailStats'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($stats_request)) {
            $_tempBody = $stats_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCommseqPostcardStats
     *
     * Get email communication sequence postcard stats
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatPostcardSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailStatPostcardSummaryResponse
     */
    public function getEmailCommseqPostcardStats($storefront_oid, $commseq_uuid, $stats_request)
    {
        list($response) = $this->getEmailCommseqPostcardStatsWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request);
        return $response;
    }


    /**
     * Operation getEmailCommseqPostcardStatsWithHttpInfo
     *
     * Get email communication sequence postcard stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatPostcardSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailStatPostcardSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqPostcardStatsWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request)
    {
        return $this->getEmailCommseqPostcardStatsWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $stats_request);
    }


    /**
     * Operation getEmailCommseqPostcardStatsWithHttpInfoRetry
     *
     * Get email communication sequence postcard stats
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatPostcardSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailStatPostcardSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqPostcardStatsWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $stats_request)
    {
        $returnType = '\ultracart\v2\models\EmailStatPostcardSummaryResponse';
        $request = $this->getEmailCommseqPostcardStatsRequest($storefront_oid, $commseq_uuid, $stats_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCommseqPostcardStatsWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $stats_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailStatPostcardSummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCommseqPostcardStatsAsync
     *
     * Get email communication sequence postcard stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatPostcardSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqPostcardStatsAsync($storefront_oid, $commseq_uuid, $stats_request)
    {
        return $this->getEmailCommseqPostcardStatsAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCommseqPostcardStatsAsyncWithHttpInfo
     *
     * Get email communication sequence postcard stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatPostcardSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqPostcardStatsAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request)
    {
        $returnType = '\ultracart\v2\models\EmailStatPostcardSummaryResponse';
        $request = $this->getEmailCommseqPostcardStatsRequest($storefront_oid, $commseq_uuid, $stats_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCommseqPostcardStats'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStatPostcardSummaryRequest $stats_request StatsRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCommseqPostcardStatsRequest($storefront_oid, $commseq_uuid, $stats_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCommseqPostcardStats'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailCommseqPostcardStats'
            );
        }
        // verify the required parameter 'stats_request' is set
        if ($stats_request === null || (is_array($stats_request) && count($stats_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stats_request when calling getEmailCommseqPostcardStats'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($stats_request)) {
            $_tempBody = $stats_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCommseqPostcardTracking
     *
     * Get email communication postcard tracking
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_postcard_uuid commseq_postcard_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailPostcardTrackingResponse
     */
    public function getEmailCommseqPostcardTracking($storefront_oid, $commseq_postcard_uuid)
    {
        list($response) = $this->getEmailCommseqPostcardTrackingWithHttpInfo($storefront_oid, $commseq_postcard_uuid);
        return $response;
    }


    /**
     * Operation getEmailCommseqPostcardTrackingWithHttpInfo
     *
     * Get email communication postcard tracking
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailPostcardTrackingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqPostcardTrackingWithHttpInfo($storefront_oid, $commseq_postcard_uuid)
    {
        return $this->getEmailCommseqPostcardTrackingWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_postcard_uuid);
    }


    /**
     * Operation getEmailCommseqPostcardTrackingWithHttpInfoRetry
     *
     * Get email communication postcard tracking
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailPostcardTrackingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqPostcardTrackingWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_postcard_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailPostcardTrackingResponse';
        $request = $this->getEmailCommseqPostcardTrackingRequest($storefront_oid, $commseq_postcard_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCommseqPostcardTrackingWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_postcard_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailPostcardTrackingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCommseqPostcardTrackingAsync
     *
     * Get email communication postcard tracking
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqPostcardTrackingAsync($storefront_oid, $commseq_postcard_uuid)
    {
        return $this->getEmailCommseqPostcardTrackingAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCommseqPostcardTrackingAsyncWithHttpInfo
     *
     * Get email communication postcard tracking
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqPostcardTrackingAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailPostcardTrackingResponse';
        $request = $this->getEmailCommseqPostcardTrackingRequest($storefront_oid, $commseq_postcard_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCommseqPostcardTracking'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCommseqPostcardTrackingRequest($storefront_oid, $commseq_postcard_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCommseqPostcardTracking'
            );
        }
        // verify the required parameter 'commseq_postcard_uuid' is set
        if ($commseq_postcard_uuid === null || (is_array($commseq_postcard_uuid) && count($commseq_postcard_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_postcard_uuid when calling getEmailCommseqPostcardTracking'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_postcard_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_postcard_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_postcard_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCommseqStatOverall
     *
     * Get communication sequence stats overall
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqStatResponse
     */
    public function getEmailCommseqStatOverall($storefront_oid, $commseq_uuid)
    {
        list($response) = $this->getEmailCommseqStatOverallWithHttpInfo($storefront_oid, $commseq_uuid);
        return $response;
    }


    /**
     * Operation getEmailCommseqStatOverallWithHttpInfo
     *
     * Get communication sequence stats overall
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqStatResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqStatOverallWithHttpInfo($storefront_oid, $commseq_uuid)
    {
        return $this->getEmailCommseqStatOverallWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid);
    }


    /**
     * Operation getEmailCommseqStatOverallWithHttpInfoRetry
     *
     * Get communication sequence stats overall
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqStatResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqStatOverallWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqStatResponse';
        $request = $this->getEmailCommseqStatOverallRequest($storefront_oid, $commseq_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCommseqStatOverallWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqStatResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCommseqStatOverallAsync
     *
     * Get communication sequence stats overall
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqStatOverallAsync($storefront_oid, $commseq_uuid)
    {
        return $this->getEmailCommseqStatOverallAsyncWithHttpInfo($storefront_oid, $commseq_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCommseqStatOverallAsyncWithHttpInfo
     *
     * Get communication sequence stats overall
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqStatOverallAsyncWithHttpInfo($storefront_oid, $commseq_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqStatResponse';
        $request = $this->getEmailCommseqStatOverallRequest($storefront_oid, $commseq_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCommseqStatOverall'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCommseqStatOverallRequest($storefront_oid, $commseq_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCommseqStatOverall'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailCommseqStatOverall'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCommseqStepStats
     *
     * Get email communication sequence step stats
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepStatRequest $stats_request StatsRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailStepStatResponse
     */
    public function getEmailCommseqStepStats($storefront_oid, $commseq_uuid, $stats_request)
    {
        list($response) = $this->getEmailCommseqStepStatsWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request);
        return $response;
    }


    /**
     * Operation getEmailCommseqStepStatsWithHttpInfo
     *
     * Get email communication sequence step stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepStatRequest $stats_request StatsRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailStepStatResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqStepStatsWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request)
    {
        return $this->getEmailCommseqStepStatsWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $stats_request);
    }


    /**
     * Operation getEmailCommseqStepStatsWithHttpInfoRetry
     *
     * Get email communication sequence step stats
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepStatRequest $stats_request StatsRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailStepStatResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqStepStatsWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $stats_request)
    {
        $returnType = '\ultracart\v2\models\EmailStepStatResponse';
        $request = $this->getEmailCommseqStepStatsRequest($storefront_oid, $commseq_uuid, $stats_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCommseqStepStatsWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $stats_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailStepStatResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCommseqStepStatsAsync
     *
     * Get email communication sequence step stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepStatRequest $stats_request StatsRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqStepStatsAsync($storefront_oid, $commseq_uuid, $stats_request)
    {
        return $this->getEmailCommseqStepStatsAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCommseqStepStatsAsyncWithHttpInfo
     *
     * Get email communication sequence step stats
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepStatRequest $stats_request StatsRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqStepStatsAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $stats_request)
    {
        $returnType = '\ultracart\v2\models\EmailStepStatResponse';
        $request = $this->getEmailCommseqStepStatsRequest($storefront_oid, $commseq_uuid, $stats_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCommseqStepStats'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepStatRequest $stats_request StatsRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCommseqStepStatsRequest($storefront_oid, $commseq_uuid, $stats_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCommseqStepStats'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailCommseqStepStats'
            );
        }
        // verify the required parameter 'stats_request' is set
        if ($stats_request === null || (is_array($stats_request) && count($stats_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stats_request when calling getEmailCommseqStepStats'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($stats_request)) {
            $_tempBody = $stats_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCommseqStepWaiting
     *
     * Get email communication sequence customers waiting at each requested step
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepWaitingRequest $waiting_request WaitingRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailStepWaitingResponse
     */
    public function getEmailCommseqStepWaiting($storefront_oid, $commseq_uuid, $waiting_request)
    {
        list($response) = $this->getEmailCommseqStepWaitingWithHttpInfo($storefront_oid, $commseq_uuid, $waiting_request);
        return $response;
    }


    /**
     * Operation getEmailCommseqStepWaitingWithHttpInfo
     *
     * Get email communication sequence customers waiting at each requested step
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepWaitingRequest $waiting_request WaitingRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailStepWaitingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqStepWaitingWithHttpInfo($storefront_oid, $commseq_uuid, $waiting_request)
    {
        return $this->getEmailCommseqStepWaitingWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $waiting_request);
    }


    /**
     * Operation getEmailCommseqStepWaitingWithHttpInfoRetry
     *
     * Get email communication sequence customers waiting at each requested step
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepWaitingRequest $waiting_request WaitingRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailStepWaitingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqStepWaitingWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $waiting_request)
    {
        $returnType = '\ultracart\v2\models\EmailStepWaitingResponse';
        $request = $this->getEmailCommseqStepWaitingRequest($storefront_oid, $commseq_uuid, $waiting_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCommseqStepWaitingWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $waiting_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailStepWaitingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCommseqStepWaitingAsync
     *
     * Get email communication sequence customers waiting at each requested step
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepWaitingRequest $waiting_request WaitingRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqStepWaitingAsync($storefront_oid, $commseq_uuid, $waiting_request)
    {
        return $this->getEmailCommseqStepWaitingAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $waiting_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCommseqStepWaitingAsyncWithHttpInfo
     *
     * Get email communication sequence customers waiting at each requested step
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepWaitingRequest $waiting_request WaitingRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqStepWaitingAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $waiting_request)
    {
        $returnType = '\ultracart\v2\models\EmailStepWaitingResponse';
        $request = $this->getEmailCommseqStepWaitingRequest($storefront_oid, $commseq_uuid, $waiting_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCommseqStepWaiting'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailStepWaitingRequest $waiting_request WaitingRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCommseqStepWaitingRequest($storefront_oid, $commseq_uuid, $waiting_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCommseqStepWaiting'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailCommseqStepWaiting'
            );
        }
        // verify the required parameter 'waiting_request' is set
        if ($waiting_request === null || (is_array($waiting_request) && count($waiting_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waiting_request when calling getEmailCommseqStepWaiting'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($waiting_request)) {
            $_tempBody = $waiting_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCommseqWebhookEditorValues
     *
     * Get email webhook editor values
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailWebhookEditorValuesResponse
     */
    public function getEmailCommseqWebhookEditorValues($storefront_oid, $commseq_uuid)
    {
        list($response) = $this->getEmailCommseqWebhookEditorValuesWithHttpInfo($storefront_oid, $commseq_uuid);
        return $response;
    }


    /**
     * Operation getEmailCommseqWebhookEditorValuesWithHttpInfo
     *
     * Get email webhook editor values
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailWebhookEditorValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqWebhookEditorValuesWithHttpInfo($storefront_oid, $commseq_uuid)
    {
        return $this->getEmailCommseqWebhookEditorValuesWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid);
    }


    /**
     * Operation getEmailCommseqWebhookEditorValuesWithHttpInfoRetry
     *
     * Get email webhook editor values
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailWebhookEditorValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqWebhookEditorValuesWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailWebhookEditorValuesResponse';
        $request = $this->getEmailCommseqWebhookEditorValuesRequest($storefront_oid, $commseq_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCommseqWebhookEditorValuesWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailWebhookEditorValuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCommseqWebhookEditorValuesAsync
     *
     * Get email webhook editor values
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqWebhookEditorValuesAsync($storefront_oid, $commseq_uuid)
    {
        return $this->getEmailCommseqWebhookEditorValuesAsyncWithHttpInfo($storefront_oid, $commseq_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCommseqWebhookEditorValuesAsyncWithHttpInfo
     *
     * Get email webhook editor values
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqWebhookEditorValuesAsyncWithHttpInfo($storefront_oid, $commseq_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailWebhookEditorValuesResponse';
        $request = $this->getEmailCommseqWebhookEditorValuesRequest($storefront_oid, $commseq_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCommseqWebhookEditorValues'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCommseqWebhookEditorValuesRequest($storefront_oid, $commseq_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCommseqWebhookEditorValues'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailCommseqWebhookEditorValues'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/webhookEditorValues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCommseqs
     *
     * Get email commseqs
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqsResponse
     */
    public function getEmailCommseqs($storefront_oid)
    {
        list($response) = $this->getEmailCommseqsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailCommseqsWithHttpInfo
     *
     * Get email commseqs
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqsWithHttpInfo($storefront_oid)
    {
        return $this->getEmailCommseqsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailCommseqsWithHttpInfoRetry
     *
     * Get email commseqs
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCommseqsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqsResponse';
        $request = $this->getEmailCommseqsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCommseqsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCommseqsAsync
     *
     * Get email commseqs
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqsAsync($storefront_oid)
    {
        return $this->getEmailCommseqsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCommseqsAsyncWithHttpInfo
     *
     * Get email commseqs
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCommseqsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqsResponse';
        $request = $this->getEmailCommseqsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCommseqs'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCommseqsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCommseqs'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCustomerEditorUrl
     *
     * Get customers editor URL
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_customer_uuid email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCustomerEditorUrlResponse
     */
    public function getEmailCustomerEditorUrl($storefront_oid, $email_customer_uuid)
    {
        list($response) = $this->getEmailCustomerEditorUrlWithHttpInfo($storefront_oid, $email_customer_uuid);
        return $response;
    }


    /**
     * Operation getEmailCustomerEditorUrlWithHttpInfo
     *
     * Get customers editor URL
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomerEditorUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCustomerEditorUrlWithHttpInfo($storefront_oid, $email_customer_uuid)
    {
        return $this->getEmailCustomerEditorUrlWithHttpInfoRetry(true ,   $storefront_oid,   $email_customer_uuid);
    }


    /**
     * Operation getEmailCustomerEditorUrlWithHttpInfoRetry
     *
     * Get customers editor URL
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomerEditorUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCustomerEditorUrlWithHttpInfoRetry($retry ,  $storefront_oid,  $email_customer_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCustomerEditorUrlResponse';
        $request = $this->getEmailCustomerEditorUrlRequest($storefront_oid, $email_customer_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCustomerEditorUrlWithHttpInfoRetry(false ,   $storefront_oid,   $email_customer_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCustomerEditorUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCustomerEditorUrlAsync
     *
     * Get customers editor URL
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCustomerEditorUrlAsync($storefront_oid, $email_customer_uuid)
    {
        return $this->getEmailCustomerEditorUrlAsyncWithHttpInfo($storefront_oid, $email_customer_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCustomerEditorUrlAsyncWithHttpInfo
     *
     * Get customers editor URL
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCustomerEditorUrlAsyncWithHttpInfo($storefront_oid, $email_customer_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCustomerEditorUrlResponse';
        $request = $this->getEmailCustomerEditorUrlRequest($storefront_oid, $email_customer_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCustomerEditorUrl'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCustomerEditorUrlRequest($storefront_oid, $email_customer_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCustomerEditorUrl'
            );
        }
        // verify the required parameter 'email_customer_uuid' is set
        if ($email_customer_uuid === null || (is_array($email_customer_uuid) && count($email_customer_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_customer_uuid when calling getEmailCustomerEditorUrl'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_customer_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_customer_uuid' . '}',
                ObjectSerializer::toPathValue($email_customer_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailCustomers
     *
     * Get email customers
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $page_number page_number (optional)
     * @param  int $page_size page_size (optional)
     * @param  string $search_email_prefix search_email_prefix (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCustomersResponse
     */
    public function getEmailCustomers($storefront_oid, $page_number = null, $page_size = null, $search_email_prefix = null)
    {
        list($response) = $this->getEmailCustomersWithHttpInfo($storefront_oid, $page_number, $page_size, $search_email_prefix);
        return $response;
    }


    /**
     * Operation getEmailCustomersWithHttpInfo
     *
     * Get email customers
     *
     * @param  int $storefront_oid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     * @param  string $search_email_prefix (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCustomersWithHttpInfo($storefront_oid, $page_number = null, $page_size = null, $search_email_prefix = null)
    {
        return $this->getEmailCustomersWithHttpInfoRetry(true ,   $storefront_oid,   $page_number,   $page_size,   $search_email_prefix);
    }


    /**
     * Operation getEmailCustomersWithHttpInfoRetry
     *
     * Get email customers
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     * @param  string $search_email_prefix (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailCustomersWithHttpInfoRetry($retry ,  $storefront_oid,  $page_number = null,  $page_size = null,  $search_email_prefix = null)
    {
        $returnType = '\ultracart\v2\models\EmailCustomersResponse';
        $request = $this->getEmailCustomersRequest($storefront_oid, $page_number, $page_size, $search_email_prefix);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailCustomersWithHttpInfoRetry(false ,   $storefront_oid,   $page_number,   $page_size,   $search_email_prefix);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCustomersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailCustomersAsync
     *
     * Get email customers
     *
     * @param  int $storefront_oid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     * @param  string $search_email_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCustomersAsync($storefront_oid, $page_number = null, $page_size = null, $search_email_prefix = null)
    {
        return $this->getEmailCustomersAsyncWithHttpInfo($storefront_oid, $page_number, $page_size, $search_email_prefix)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailCustomersAsyncWithHttpInfo
     *
     * Get email customers
     *
     * @param  int $storefront_oid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     * @param  string $search_email_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailCustomersAsyncWithHttpInfo($storefront_oid, $page_number = null, $page_size = null, $search_email_prefix = null)
    {
        $returnType = '\ultracart\v2\models\EmailCustomersResponse';
        $request = $this->getEmailCustomersRequest($storefront_oid, $page_number, $page_size, $search_email_prefix);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailCustomers'
     *
     * @param  int $storefront_oid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     * @param  string $search_email_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailCustomersRequest($storefront_oid, $page_number = null, $page_size = null, $search_email_prefix = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailCustomers'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($search_email_prefix !== null) {
            $queryParams['searchEmailPrefix'] = ObjectSerializer::toQueryValue($search_email_prefix);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailDashboardActivity
     *
     * Get email dashboard activity
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $last_records last_records (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailDashboardActivityResponse
     */
    public function getEmailDashboardActivity($storefront_oid, $last_records = null)
    {
        list($response) = $this->getEmailDashboardActivityWithHttpInfo($storefront_oid, $last_records);
        return $response;
    }


    /**
     * Operation getEmailDashboardActivityWithHttpInfo
     *
     * Get email dashboard activity
     *
     * @param  int $storefront_oid (required)
     * @param  int $last_records (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailDashboardActivityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDashboardActivityWithHttpInfo($storefront_oid, $last_records = null)
    {
        return $this->getEmailDashboardActivityWithHttpInfoRetry(true ,   $storefront_oid,   $last_records);
    }


    /**
     * Operation getEmailDashboardActivityWithHttpInfoRetry
     *
     * Get email dashboard activity
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $last_records (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailDashboardActivityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDashboardActivityWithHttpInfoRetry($retry ,  $storefront_oid,  $last_records = null)
    {
        $returnType = '\ultracart\v2\models\EmailDashboardActivityResponse';
        $request = $this->getEmailDashboardActivityRequest($storefront_oid, $last_records);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailDashboardActivityWithHttpInfoRetry(false ,   $storefront_oid,   $last_records);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailDashboardActivityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailDashboardActivityAsync
     *
     * Get email dashboard activity
     *
     * @param  int $storefront_oid (required)
     * @param  int $last_records (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDashboardActivityAsync($storefront_oid, $last_records = null)
    {
        return $this->getEmailDashboardActivityAsyncWithHttpInfo($storefront_oid, $last_records)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailDashboardActivityAsyncWithHttpInfo
     *
     * Get email dashboard activity
     *
     * @param  int $storefront_oid (required)
     * @param  int $last_records (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDashboardActivityAsyncWithHttpInfo($storefront_oid, $last_records = null)
    {
        $returnType = '\ultracart\v2\models\EmailDashboardActivityResponse';
        $request = $this->getEmailDashboardActivityRequest($storefront_oid, $last_records);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailDashboardActivity'
     *
     * @param  int $storefront_oid (required)
     * @param  int $last_records (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailDashboardActivityRequest($storefront_oid, $last_records = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailDashboardActivity'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/dashboard_activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($last_records !== null) {
            $queryParams['last_records'] = ObjectSerializer::toQueryValue($last_records);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailDashboardStats
     *
     * Get dashboard stats
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $days days (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailDashboardStatsResponse
     */
    public function getEmailDashboardStats($storefront_oid, $days = null)
    {
        list($response) = $this->getEmailDashboardStatsWithHttpInfo($storefront_oid, $days);
        return $response;
    }


    /**
     * Operation getEmailDashboardStatsWithHttpInfo
     *
     * Get dashboard stats
     *
     * @param  int $storefront_oid (required)
     * @param  int $days (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailDashboardStatsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDashboardStatsWithHttpInfo($storefront_oid, $days = null)
    {
        return $this->getEmailDashboardStatsWithHttpInfoRetry(true ,   $storefront_oid,   $days);
    }


    /**
     * Operation getEmailDashboardStatsWithHttpInfoRetry
     *
     * Get dashboard stats
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $days (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailDashboardStatsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDashboardStatsWithHttpInfoRetry($retry ,  $storefront_oid,  $days = null)
    {
        $returnType = '\ultracart\v2\models\EmailDashboardStatsResponse';
        $request = $this->getEmailDashboardStatsRequest($storefront_oid, $days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailDashboardStatsWithHttpInfoRetry(false ,   $storefront_oid,   $days);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailDashboardStatsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailDashboardStatsAsync
     *
     * Get dashboard stats
     *
     * @param  int $storefront_oid (required)
     * @param  int $days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDashboardStatsAsync($storefront_oid, $days = null)
    {
        return $this->getEmailDashboardStatsAsyncWithHttpInfo($storefront_oid, $days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailDashboardStatsAsyncWithHttpInfo
     *
     * Get dashboard stats
     *
     * @param  int $storefront_oid (required)
     * @param  int $days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDashboardStatsAsyncWithHttpInfo($storefront_oid, $days = null)
    {
        $returnType = '\ultracart\v2\models\EmailDashboardStatsResponse';
        $request = $this->getEmailDashboardStatsRequest($storefront_oid, $days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailDashboardStats'
     *
     * @param  int $storefront_oid (required)
     * @param  int $days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailDashboardStatsRequest($storefront_oid, $days = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailDashboardStats'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/dashboard_stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($days !== null) {
            $queryParams['days'] = ObjectSerializer::toQueryValue($days);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailDispatchLogs
     *
     * Get email dispatch logs
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  string $commseq_step_uuid commseq_step_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqStepLogsResponse
     */
    public function getEmailDispatchLogs($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        list($response) = $this->getEmailDispatchLogsWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid);
        return $response;
    }


    /**
     * Operation getEmailDispatchLogsWithHttpInfo
     *
     * Get email dispatch logs
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqStepLogsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDispatchLogsWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        return $this->getEmailDispatchLogsWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $commseq_step_uuid);
    }


    /**
     * Operation getEmailDispatchLogsWithHttpInfoRetry
     *
     * Get email dispatch logs
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqStepLogsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDispatchLogsWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $commseq_step_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqStepLogsResponse';
        $request = $this->getEmailDispatchLogsRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailDispatchLogsWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $commseq_step_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqStepLogsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailDispatchLogsAsync
     *
     * Get email dispatch logs
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDispatchLogsAsync($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        return $this->getEmailDispatchLogsAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailDispatchLogsAsyncWithHttpInfo
     *
     * Get email dispatch logs
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDispatchLogsAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqStepLogsResponse';
        $request = $this->getEmailDispatchLogsRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailDispatchLogs'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailDispatchLogsRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailDispatchLogs'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailDispatchLogs'
            );
        }
        // verify the required parameter 'commseq_step_uuid' is set
        if ($commseq_step_uuid === null || (is_array($commseq_step_uuid) && count($commseq_step_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_step_uuid when calling getEmailDispatchLogs'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_step_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_step_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_step_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailEmail
     *
     * Get email email
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_email_uuid commseq_email_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqEmailResponse
     */
    public function getEmailEmail($storefront_oid, $commseq_email_uuid)
    {
        list($response) = $this->getEmailEmailWithHttpInfo($storefront_oid, $commseq_email_uuid);
        return $response;
    }


    /**
     * Operation getEmailEmailWithHttpInfo
     *
     * Get email email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailWithHttpInfo($storefront_oid, $commseq_email_uuid)
    {
        return $this->getEmailEmailWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_email_uuid);
    }


    /**
     * Operation getEmailEmailWithHttpInfoRetry
     *
     * Get email email
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_email_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailResponse';
        $request = $this->getEmailEmailRequest($storefront_oid, $commseq_email_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailEmailWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_email_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailEmailAsync
     *
     * Get email email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailAsync($storefront_oid, $commseq_email_uuid)
    {
        return $this->getEmailEmailAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailEmailAsyncWithHttpInfo
     *
     * Get email email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailResponse';
        $request = $this->getEmailEmailRequest($storefront_oid, $commseq_email_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailEmail'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailEmailRequest($storefront_oid, $commseq_email_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailEmail'
            );
        }
        // verify the required parameter 'commseq_email_uuid' is set
        if ($commseq_email_uuid === null || (is_array($commseq_email_uuid) && count($commseq_email_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_email_uuid when calling getEmailEmail'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_email_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_email_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_email_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailEmailClicks
     *
     * Get email email clicks
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  string $commseq_step_uuid commseq_step_uuid (required)
     * @param  string $commseq_email_uuid commseq_email_uuid (required)
     * @param  int $days days (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailClicksResponse
     */
    public function getEmailEmailClicks($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        list($response) = $this->getEmailEmailClicksWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days);
        return $response;
    }


    /**
     * Operation getEmailEmailClicksWithHttpInfo
     *
     * Get email email clicks
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailClicksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailClicksWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        return $this->getEmailEmailClicksWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $commseq_step_uuid,   $commseq_email_uuid,   $days);
    }


    /**
     * Operation getEmailEmailClicksWithHttpInfoRetry
     *
     * Get email email clicks
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailClicksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailClicksWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $commseq_step_uuid,  $commseq_email_uuid,  $days = null)
    {
        $returnType = '\ultracart\v2\models\EmailClicksResponse';
        $request = $this->getEmailEmailClicksRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailEmailClicksWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $commseq_step_uuid,   $commseq_email_uuid,   $days);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailClicksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailEmailClicksAsync
     *
     * Get email email clicks
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailClicksAsync($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        return $this->getEmailEmailClicksAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailEmailClicksAsyncWithHttpInfo
     *
     * Get email email clicks
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailClicksAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        $returnType = '\ultracart\v2\models\EmailClicksResponse';
        $request = $this->getEmailEmailClicksRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailEmailClicks'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailEmailClicksRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailEmailClicks'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailEmailClicks'
            );
        }
        // verify the required parameter 'commseq_step_uuid' is set
        if ($commseq_step_uuid === null || (is_array($commseq_step_uuid) && count($commseq_step_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_step_uuid when calling getEmailEmailClicks'
            );
        }
        // verify the required parameter 'commseq_email_uuid' is set
        if ($commseq_email_uuid === null || (is_array($commseq_email_uuid) && count($commseq_email_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_email_uuid when calling getEmailEmailClicks'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($days !== null) {
            $queryParams['days'] = ObjectSerializer::toQueryValue($days);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_step_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_step_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_step_uuid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_email_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_email_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_email_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailEmailCustomerEditorUrl
     *
     * Get email order customer editor url
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_email_uuid commseq_email_uuid (required)
     * @param  string $order_id order_id (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCustomerEditorUrlResponse
     */
    public function getEmailEmailCustomerEditorUrl($storefront_oid, $commseq_email_uuid, $order_id)
    {
        list($response) = $this->getEmailEmailCustomerEditorUrlWithHttpInfo($storefront_oid, $commseq_email_uuid, $order_id);
        return $response;
    }


    /**
     * Operation getEmailEmailCustomerEditorUrlWithHttpInfo
     *
     * Get email order customer editor url
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  string $order_id (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomerEditorUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailCustomerEditorUrlWithHttpInfo($storefront_oid, $commseq_email_uuid, $order_id)
    {
        return $this->getEmailEmailCustomerEditorUrlWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_email_uuid,   $order_id);
    }


    /**
     * Operation getEmailEmailCustomerEditorUrlWithHttpInfoRetry
     *
     * Get email order customer editor url
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  string $order_id (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomerEditorUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailCustomerEditorUrlWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_email_uuid,  $order_id)
    {
        $returnType = '\ultracart\v2\models\EmailCustomerEditorUrlResponse';
        $request = $this->getEmailEmailCustomerEditorUrlRequest($storefront_oid, $commseq_email_uuid, $order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailEmailCustomerEditorUrlWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_email_uuid,   $order_id);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCustomerEditorUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailEmailCustomerEditorUrlAsync
     *
     * Get email order customer editor url
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  string $order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailCustomerEditorUrlAsync($storefront_oid, $commseq_email_uuid, $order_id)
    {
        return $this->getEmailEmailCustomerEditorUrlAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid, $order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailEmailCustomerEditorUrlAsyncWithHttpInfo
     *
     * Get email order customer editor url
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  string $order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailCustomerEditorUrlAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid, $order_id)
    {
        $returnType = '\ultracart\v2\models\EmailCustomerEditorUrlResponse';
        $request = $this->getEmailEmailCustomerEditorUrlRequest($storefront_oid, $commseq_email_uuid, $order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailEmailCustomerEditorUrl'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  string $order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailEmailCustomerEditorUrlRequest($storefront_oid, $commseq_email_uuid, $order_id)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailEmailCustomerEditorUrl'
            );
        }
        // verify the required parameter 'commseq_email_uuid' is set
        if ($commseq_email_uuid === null || (is_array($commseq_email_uuid) && count($commseq_email_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_email_uuid when calling getEmailEmailCustomerEditorUrl'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getEmailEmailCustomerEditorUrl'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_email_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_email_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_email_uuid),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailEmailOrders
     *
     * Get email email orders
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  string $commseq_step_uuid commseq_step_uuid (required)
     * @param  string $commseq_email_uuid commseq_email_uuid (required)
     * @param  int $days days (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailOrdersResponse
     */
    public function getEmailEmailOrders($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        list($response) = $this->getEmailEmailOrdersWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days);
        return $response;
    }


    /**
     * Operation getEmailEmailOrdersWithHttpInfo
     *
     * Get email email orders
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailOrdersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailOrdersWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        return $this->getEmailEmailOrdersWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $commseq_step_uuid,   $commseq_email_uuid,   $days);
    }


    /**
     * Operation getEmailEmailOrdersWithHttpInfoRetry
     *
     * Get email email orders
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailOrdersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailOrdersWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $commseq_step_uuid,  $commseq_email_uuid,  $days = null)
    {
        $returnType = '\ultracart\v2\models\EmailOrdersResponse';
        $request = $this->getEmailEmailOrdersRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailEmailOrdersWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $commseq_step_uuid,   $commseq_email_uuid,   $days);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailEmailOrdersAsync
     *
     * Get email email orders
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailOrdersAsync($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        return $this->getEmailEmailOrdersAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailEmailOrdersAsyncWithHttpInfo
     *
     * Get email email orders
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailOrdersAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        $returnType = '\ultracart\v2\models\EmailOrdersResponse';
        $request = $this->getEmailEmailOrdersRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailEmailOrders'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  int $days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailEmailOrdersRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid, $commseq_email_uuid, $days = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailEmailOrders'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling getEmailEmailOrders'
            );
        }
        // verify the required parameter 'commseq_step_uuid' is set
        if ($commseq_step_uuid === null || (is_array($commseq_step_uuid) && count($commseq_step_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_step_uuid when calling getEmailEmailOrders'
            );
        }
        // verify the required parameter 'commseq_email_uuid' is set
        if ($commseq_email_uuid === null || (is_array($commseq_email_uuid) && count($commseq_email_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_email_uuid when calling getEmailEmailOrders'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($days !== null) {
            $queryParams['days'] = ObjectSerializer::toQueryValue($days);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_step_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_step_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_step_uuid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_email_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_email_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_email_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailEmails
     *
     * Get email emails
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqEmailsResponse
     */
    public function getEmailEmails($storefront_oid)
    {
        list($response) = $this->getEmailEmailsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailEmailsWithHttpInfo
     *
     * Get email emails
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailsWithHttpInfo($storefront_oid)
    {
        return $this->getEmailEmailsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailEmailsWithHttpInfoRetry
     *
     * Get email emails
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailsResponse';
        $request = $this->getEmailEmailsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailEmailsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqEmailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailEmailsAsync
     *
     * Get email emails
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailsAsync($storefront_oid)
    {
        return $this->getEmailEmailsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailEmailsAsyncWithHttpInfo
     *
     * Get email emails
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailsResponse';
        $request = $this->getEmailEmailsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailEmails'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailEmailsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailEmails'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailEmailsMultiple
     *
     * Get email emails multiple
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailsRequest $email_commseq_emails_request Request of email uuids (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqEmailsResponse
     */
    public function getEmailEmailsMultiple($storefront_oid, $email_commseq_emails_request)
    {
        list($response) = $this->getEmailEmailsMultipleWithHttpInfo($storefront_oid, $email_commseq_emails_request);
        return $response;
    }


    /**
     * Operation getEmailEmailsMultipleWithHttpInfo
     *
     * Get email emails multiple
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailsRequest $email_commseq_emails_request Request of email uuids (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailsMultipleWithHttpInfo($storefront_oid, $email_commseq_emails_request)
    {
        return $this->getEmailEmailsMultipleWithHttpInfoRetry(true ,   $storefront_oid,   $email_commseq_emails_request);
    }


    /**
     * Operation getEmailEmailsMultipleWithHttpInfoRetry
     *
     * Get email emails multiple
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailsRequest $email_commseq_emails_request Request of email uuids (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailEmailsMultipleWithHttpInfoRetry($retry ,  $storefront_oid,  $email_commseq_emails_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailsResponse';
        $request = $this->getEmailEmailsMultipleRequest($storefront_oid, $email_commseq_emails_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailEmailsMultipleWithHttpInfoRetry(false ,   $storefront_oid,   $email_commseq_emails_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqEmailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailEmailsMultipleAsync
     *
     * Get email emails multiple
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailsRequest $email_commseq_emails_request Request of email uuids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailsMultipleAsync($storefront_oid, $email_commseq_emails_request)
    {
        return $this->getEmailEmailsMultipleAsyncWithHttpInfo($storefront_oid, $email_commseq_emails_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailEmailsMultipleAsyncWithHttpInfo
     *
     * Get email emails multiple
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailsRequest $email_commseq_emails_request Request of email uuids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailEmailsMultipleAsyncWithHttpInfo($storefront_oid, $email_commseq_emails_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailsResponse';
        $request = $this->getEmailEmailsMultipleRequest($storefront_oid, $email_commseq_emails_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailEmailsMultiple'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailsRequest $email_commseq_emails_request Request of email uuids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailEmailsMultipleRequest($storefront_oid, $email_commseq_emails_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailEmailsMultiple'
            );
        }
        // verify the required parameter 'email_commseq_emails_request' is set
        if ($email_commseq_emails_request === null || (is_array($email_commseq_emails_request) && count($email_commseq_emails_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_emails_request when calling getEmailEmailsMultiple'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/emails/multiple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_emails_request)) {
            $_tempBody = $email_commseq_emails_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailFlow
     *
     * Get email flow
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_flow_uuid email_flow_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowResponse
     */
    public function getEmailFlow($storefront_oid, $email_flow_uuid)
    {
        list($response) = $this->getEmailFlowWithHttpInfo($storefront_oid, $email_flow_uuid);
        return $response;
    }


    /**
     * Operation getEmailFlowWithHttpInfo
     *
     * Get email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowWithHttpInfo($storefront_oid, $email_flow_uuid)
    {
        return $this->getEmailFlowWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow_uuid);
    }


    /**
     * Operation getEmailFlowWithHttpInfoRetry
     *
     * Get email flow
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailFlowResponse';
        $request = $this->getEmailFlowRequest($storefront_oid, $email_flow_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailFlowWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailFlowAsync
     *
     * Get email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowAsync($storefront_oid, $email_flow_uuid)
    {
        return $this->getEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailFlowAsyncWithHttpInfo
     *
     * Get email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailFlowResponse';
        $request = $this->getEmailFlowRequest($storefront_oid, $email_flow_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailFlow'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailFlowRequest($storefront_oid, $email_flow_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailFlow'
            );
        }
        // verify the required parameter 'email_flow_uuid' is set
        if ($email_flow_uuid === null || (is_array($email_flow_uuid) && count($email_flow_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_uuid when calling getEmailFlow'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_flow_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_flow_uuid' . '}',
                ObjectSerializer::toPathValue($email_flow_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailFlowFolder
     *
     * Get email flow folder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_flow_folder_uuid email_flow_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowFolderResponse
     */
    public function getEmailFlowFolder($storefront_oid, $email_flow_folder_uuid)
    {
        list($response) = $this->getEmailFlowFolderWithHttpInfo($storefront_oid, $email_flow_folder_uuid);
        return $response;
    }


    /**
     * Operation getEmailFlowFolderWithHttpInfo
     *
     * Get email flow folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowFolderWithHttpInfo($storefront_oid, $email_flow_folder_uuid)
    {
        return $this->getEmailFlowFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow_folder_uuid);
    }


    /**
     * Operation getEmailFlowFolderWithHttpInfoRetry
     *
     * Get email flow folder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailFlowFolderResponse';
        $request = $this->getEmailFlowFolderRequest($storefront_oid, $email_flow_folder_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailFlowFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow_folder_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailFlowFolderAsync
     *
     * Get email flow folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowFolderAsync($storefront_oid, $email_flow_folder_uuid)
    {
        return $this->getEmailFlowFolderAsyncWithHttpInfo($storefront_oid, $email_flow_folder_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailFlowFolderAsyncWithHttpInfo
     *
     * Get email flow folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowFolderAsyncWithHttpInfo($storefront_oid, $email_flow_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailFlowFolderResponse';
        $request = $this->getEmailFlowFolderRequest($storefront_oid, $email_flow_folder_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailFlowFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailFlowFolderRequest($storefront_oid, $email_flow_folder_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailFlowFolder'
            );
        }
        // verify the required parameter 'email_flow_folder_uuid' is set
        if ($email_flow_folder_uuid === null || (is_array($email_flow_folder_uuid) && count($email_flow_folder_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_folder_uuid when calling getEmailFlowFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_flow_folder_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_flow_folder_uuid' . '}',
                ObjectSerializer::toPathValue($email_flow_folder_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailFlowFolders
     *
     * Get email flow folders
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowFoldersResponse
     */
    public function getEmailFlowFolders($storefront_oid)
    {
        list($response) = $this->getEmailFlowFoldersWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailFlowFoldersWithHttpInfo
     *
     * Get email flow folders
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowFoldersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowFoldersWithHttpInfo($storefront_oid)
    {
        return $this->getEmailFlowFoldersWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailFlowFoldersWithHttpInfoRetry
     *
     * Get email flow folders
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowFoldersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowFoldersWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailFlowFoldersResponse';
        $request = $this->getEmailFlowFoldersRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailFlowFoldersWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowFoldersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailFlowFoldersAsync
     *
     * Get email flow folders
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowFoldersAsync($storefront_oid)
    {
        return $this->getEmailFlowFoldersAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailFlowFoldersAsyncWithHttpInfo
     *
     * Get email flow folders
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowFoldersAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailFlowFoldersResponse';
        $request = $this->getEmailFlowFoldersRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailFlowFolders'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailFlowFoldersRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailFlowFolders'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flow_folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailFlowScreenshots
     *
     * Get email flow screenshots
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_flow_uuid email_flow_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenshotsResponse
     */
    public function getEmailFlowScreenshots($storefront_oid, $email_flow_uuid)
    {
        list($response) = $this->getEmailFlowScreenshotsWithHttpInfo($storefront_oid, $email_flow_uuid);
        return $response;
    }


    /**
     * Operation getEmailFlowScreenshotsWithHttpInfo
     *
     * Get email flow screenshots
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenshotsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowScreenshotsWithHttpInfo($storefront_oid, $email_flow_uuid)
    {
        return $this->getEmailFlowScreenshotsWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow_uuid);
    }


    /**
     * Operation getEmailFlowScreenshotsWithHttpInfoRetry
     *
     * Get email flow screenshots
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenshotsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowScreenshotsWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow_uuid)
    {
        $returnType = '\ultracart\v2\models\ScreenshotsResponse';
        $request = $this->getEmailFlowScreenshotsRequest($storefront_oid, $email_flow_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailFlowScreenshotsWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenshotsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailFlowScreenshotsAsync
     *
     * Get email flow screenshots
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowScreenshotsAsync($storefront_oid, $email_flow_uuid)
    {
        return $this->getEmailFlowScreenshotsAsyncWithHttpInfo($storefront_oid, $email_flow_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailFlowScreenshotsAsyncWithHttpInfo
     *
     * Get email flow screenshots
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowScreenshotsAsyncWithHttpInfo($storefront_oid, $email_flow_uuid)
    {
        $returnType = '\ultracart\v2\models\ScreenshotsResponse';
        $request = $this->getEmailFlowScreenshotsRequest($storefront_oid, $email_flow_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailFlowScreenshots'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailFlowScreenshotsRequest($storefront_oid, $email_flow_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailFlowScreenshots'
            );
        }
        // verify the required parameter 'email_flow_uuid' is set
        if ($email_flow_uuid === null || (is_array($email_flow_uuid) && count($email_flow_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_uuid when calling getEmailFlowScreenshots'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_flow_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_flow_uuid' . '}',
                ObjectSerializer::toPathValue($email_flow_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailFlows
     *
     * Get email flows
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowsResponse
     */
    public function getEmailFlows($storefront_oid)
    {
        list($response) = $this->getEmailFlowsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailFlowsWithHttpInfo
     *
     * Get email flows
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowsWithHttpInfo($storefront_oid)
    {
        return $this->getEmailFlowsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailFlowsWithHttpInfoRetry
     *
     * Get email flows
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailFlowsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailFlowsResponse';
        $request = $this->getEmailFlowsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailFlowsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailFlowsAsync
     *
     * Get email flows
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowsAsync($storefront_oid)
    {
        return $this->getEmailFlowsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailFlowsAsyncWithHttpInfo
     *
     * Get email flows
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailFlowsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailFlowsResponse';
        $request = $this->getEmailFlowsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailFlows'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailFlowsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailFlows'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailGlobalSettings
     *
     * Get email globalsettings
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailGlobalSettingsResponse
     */
    public function getEmailGlobalSettings()
    {
        list($response) = $this->getEmailGlobalSettingsWithHttpInfo();
        return $response;
    }


    /**
     * Operation getEmailGlobalSettingsWithHttpInfo
     *
     * Get email globalsettings
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailGlobalSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailGlobalSettingsWithHttpInfo()
    {
        return $this->getEmailGlobalSettingsWithHttpInfoRetry(true );
    }


    /**
     * Operation getEmailGlobalSettingsWithHttpInfoRetry
     *
     * Get email globalsettings
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailGlobalSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailGlobalSettingsWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\EmailGlobalSettingsResponse';
        $request = $this->getEmailGlobalSettingsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailGlobalSettingsWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailGlobalSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailGlobalSettingsAsync
     *
     * Get email globalsettings
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailGlobalSettingsAsync()
    {
        return $this->getEmailGlobalSettingsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailGlobalSettingsAsyncWithHttpInfo
     *
     * Get email globalsettings
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailGlobalSettingsAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\EmailGlobalSettingsResponse';
        $request = $this->getEmailGlobalSettingsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailGlobalSettings'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailGlobalSettingsRequest()
    {

        $resourcePath = '/storefront/email/global_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailList
     *
     * Get email list
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_uuid email_list_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListResponse
     */
    public function getEmailList($storefront_oid, $email_list_uuid)
    {
        list($response) = $this->getEmailListWithHttpInfo($storefront_oid, $email_list_uuid);
        return $response;
    }


    /**
     * Operation getEmailListWithHttpInfo
     *
     * Get email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListWithHttpInfo($storefront_oid, $email_list_uuid)
    {
        return $this->getEmailListWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_uuid);
    }


    /**
     * Operation getEmailListWithHttpInfoRetry
     *
     * Get email list
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailListResponse';
        $request = $this->getEmailListRequest($storefront_oid, $email_list_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailListWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailListAsync
     *
     * Get email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListAsync($storefront_oid, $email_list_uuid)
    {
        return $this->getEmailListAsyncWithHttpInfo($storefront_oid, $email_list_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailListAsyncWithHttpInfo
     *
     * Get email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListAsyncWithHttpInfo($storefront_oid, $email_list_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailListResponse';
        $request = $this->getEmailListRequest($storefront_oid, $email_list_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailList'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailListRequest($storefront_oid, $email_list_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailList'
            );
        }
        // verify the required parameter 'email_list_uuid' is set
        if ($email_list_uuid === null || (is_array($email_list_uuid) && count($email_list_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_uuid when calling getEmailList'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists/{email_list_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailListCustomerEditorUrl
     *
     * Get email list customer editor url
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_uuid email_list_uuid (required)
     * @param  string $email_customer_uuid email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCustomerEditorUrlResponse
     */
    public function getEmailListCustomerEditorUrl($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        list($response) = $this->getEmailListCustomerEditorUrlWithHttpInfo($storefront_oid, $email_list_uuid, $email_customer_uuid);
        return $response;
    }


    /**
     * Operation getEmailListCustomerEditorUrlWithHttpInfo
     *
     * Get email list customer editor url
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomerEditorUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListCustomerEditorUrlWithHttpInfo($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        return $this->getEmailListCustomerEditorUrlWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_uuid,   $email_customer_uuid);
    }


    /**
     * Operation getEmailListCustomerEditorUrlWithHttpInfoRetry
     *
     * Get email list customer editor url
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomerEditorUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListCustomerEditorUrlWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_uuid,  $email_customer_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCustomerEditorUrlResponse';
        $request = $this->getEmailListCustomerEditorUrlRequest($storefront_oid, $email_list_uuid, $email_customer_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailListCustomerEditorUrlWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_uuid,   $email_customer_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCustomerEditorUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailListCustomerEditorUrlAsync
     *
     * Get email list customer editor url
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListCustomerEditorUrlAsync($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        return $this->getEmailListCustomerEditorUrlAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $email_customer_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailListCustomerEditorUrlAsyncWithHttpInfo
     *
     * Get email list customer editor url
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListCustomerEditorUrlAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCustomerEditorUrlResponse';
        $request = $this->getEmailListCustomerEditorUrlRequest($storefront_oid, $email_list_uuid, $email_customer_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailListCustomerEditorUrl'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailListCustomerEditorUrlRequest($storefront_oid, $email_list_uuid, $email_customer_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailListCustomerEditorUrl'
            );
        }
        // verify the required parameter 'email_list_uuid' is set
        if ($email_list_uuid === null || (is_array($email_list_uuid) && count($email_list_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_uuid when calling getEmailListCustomerEditorUrl'
            );
        }
        // verify the required parameter 'email_customer_uuid' is set
        if ($email_customer_uuid === null || (is_array($email_customer_uuid) && count($email_customer_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_customer_uuid when calling getEmailListCustomerEditorUrl'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_uuid),
                $resourcePath
            );
        }
        // path params
        if ($email_customer_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_customer_uuid' . '}',
                ObjectSerializer::toPathValue($email_customer_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailListCustomers
     *
     * Get email list customers
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_uuid email_list_uuid (required)
     * @param  int $page_number page_number (optional)
     * @param  int $page_size page_size (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListCustomersResponse
     */
    public function getEmailListCustomers($storefront_oid, $email_list_uuid, $page_number = null, $page_size = null)
    {
        list($response) = $this->getEmailListCustomersWithHttpInfo($storefront_oid, $email_list_uuid, $page_number, $page_size);
        return $response;
    }


    /**
     * Operation getEmailListCustomersWithHttpInfo
     *
     * Get email list customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListCustomersWithHttpInfo($storefront_oid, $email_list_uuid, $page_number = null, $page_size = null)
    {
        return $this->getEmailListCustomersWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_uuid,   $page_number,   $page_size);
    }


    /**
     * Operation getEmailListCustomersWithHttpInfoRetry
     *
     * Get email list customers
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListCustomersWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_uuid,  $page_number = null,  $page_size = null)
    {
        $returnType = '\ultracart\v2\models\EmailListCustomersResponse';
        $request = $this->getEmailListCustomersRequest($storefront_oid, $email_list_uuid, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailListCustomersWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_uuid,   $page_number,   $page_size);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListCustomersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailListCustomersAsync
     *
     * Get email list customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListCustomersAsync($storefront_oid, $email_list_uuid, $page_number = null, $page_size = null)
    {
        return $this->getEmailListCustomersAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailListCustomersAsyncWithHttpInfo
     *
     * Get email list customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListCustomersAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $page_number = null, $page_size = null)
    {
        $returnType = '\ultracart\v2\models\EmailListCustomersResponse';
        $request = $this->getEmailListCustomersRequest($storefront_oid, $email_list_uuid, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailListCustomers'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailListCustomersRequest($storefront_oid, $email_list_uuid, $page_number = null, $page_size = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailListCustomers'
            );
        }
        // verify the required parameter 'email_list_uuid' is set
        if ($email_list_uuid === null || (is_array($email_list_uuid) && count($email_list_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_uuid when calling getEmailListCustomers'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailListSegmentFolder
     *
     * Get email campaign folder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid email_list_segment_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListSegmentFolderResponse
     */
    public function getEmailListSegmentFolder($storefront_oid, $email_list_segment_folder_uuid)
    {
        list($response) = $this->getEmailListSegmentFolderWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid);
        return $response;
    }


    /**
     * Operation getEmailListSegmentFolderWithHttpInfo
     *
     * Get email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSegmentFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListSegmentFolderWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid)
    {
        return $this->getEmailListSegmentFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_segment_folder_uuid);
    }


    /**
     * Operation getEmailListSegmentFolderWithHttpInfoRetry
     *
     * Get email campaign folder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSegmentFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListSegmentFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_segment_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailListSegmentFolderResponse';
        $request = $this->getEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailListSegmentFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_segment_folder_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListSegmentFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailListSegmentFolderAsync
     *
     * Get email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListSegmentFolderAsync($storefront_oid, $email_list_segment_folder_uuid)
    {
        return $this->getEmailListSegmentFolderAsyncWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailListSegmentFolderAsyncWithHttpInfo
     *
     * Get email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListSegmentFolderAsyncWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailListSegmentFolderResponse';
        $request = $this->getEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailListSegmentFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailListSegmentFolder'
            );
        }
        // verify the required parameter 'email_list_segment_folder_uuid' is set
        if ($email_list_segment_folder_uuid === null || (is_array($email_list_segment_folder_uuid) && count($email_list_segment_folder_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_segment_folder_uuid when calling getEmailListSegmentFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_segment_folder_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_segment_folder_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_segment_folder_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailListSegmentFolders
     *
     * Get email campaign folders
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListSegmentFoldersResponse
     */
    public function getEmailListSegmentFolders($storefront_oid)
    {
        list($response) = $this->getEmailListSegmentFoldersWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailListSegmentFoldersWithHttpInfo
     *
     * Get email campaign folders
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSegmentFoldersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListSegmentFoldersWithHttpInfo($storefront_oid)
    {
        return $this->getEmailListSegmentFoldersWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailListSegmentFoldersWithHttpInfoRetry
     *
     * Get email campaign folders
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSegmentFoldersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListSegmentFoldersWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailListSegmentFoldersResponse';
        $request = $this->getEmailListSegmentFoldersRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailListSegmentFoldersWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListSegmentFoldersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailListSegmentFoldersAsync
     *
     * Get email campaign folders
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListSegmentFoldersAsync($storefront_oid)
    {
        return $this->getEmailListSegmentFoldersAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailListSegmentFoldersAsyncWithHttpInfo
     *
     * Get email campaign folders
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListSegmentFoldersAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailListSegmentFoldersResponse';
        $request = $this->getEmailListSegmentFoldersRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailListSegmentFolders'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailListSegmentFoldersRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailListSegmentFolders'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/list_segment_folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailLists
     *
     * Get email lists
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListsResponse
     */
    public function getEmailLists($storefront_oid)
    {
        list($response) = $this->getEmailListsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailListsWithHttpInfo
     *
     * Get email lists
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListsWithHttpInfo($storefront_oid)
    {
        return $this->getEmailListsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailListsWithHttpInfoRetry
     *
     * Get email lists
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailListsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailListsResponse';
        $request = $this->getEmailListsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailListsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailListsAsync
     *
     * Get email lists
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListsAsync($storefront_oid)
    {
        return $this->getEmailListsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailListsAsyncWithHttpInfo
     *
     * Get email lists
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailListsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailListsResponse';
        $request = $this->getEmailListsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailLists'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailListsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailLists'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailPerformance
     *
     * Get email performance
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailPerformanceResponse
     */
    public function getEmailPerformance($storefront_oid)
    {
        list($response) = $this->getEmailPerformanceWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailPerformanceWithHttpInfo
     *
     * Get email performance
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailPerformanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPerformanceWithHttpInfo($storefront_oid)
    {
        return $this->getEmailPerformanceWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailPerformanceWithHttpInfoRetry
     *
     * Get email performance
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailPerformanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPerformanceWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailPerformanceResponse';
        $request = $this->getEmailPerformanceRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailPerformanceWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailPerformanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailPerformanceAsync
     *
     * Get email performance
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPerformanceAsync($storefront_oid)
    {
        return $this->getEmailPerformanceAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailPerformanceAsyncWithHttpInfo
     *
     * Get email performance
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPerformanceAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailPerformanceResponse';
        $request = $this->getEmailPerformanceRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailPerformance'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailPerformanceRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailPerformance'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailPlan
     *
     * Get email plan
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailPlanResponse
     */
    public function getEmailPlan($storefront_oid)
    {
        list($response) = $this->getEmailPlanWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailPlanWithHttpInfo
     *
     * Get email plan
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPlanWithHttpInfo($storefront_oid)
    {
        return $this->getEmailPlanWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailPlanWithHttpInfoRetry
     *
     * Get email plan
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPlanWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailPlanResponse';
        $request = $this->getEmailPlanRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailPlanWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailPlanAsync
     *
     * Get email plan
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPlanAsync($storefront_oid)
    {
        return $this->getEmailPlanAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailPlanAsyncWithHttpInfo
     *
     * Get email plan
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPlanAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailPlanResponse';
        $request = $this->getEmailPlanRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailPlan'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailPlanRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailPlan'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailPostcard
     *
     * Get email postcard
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_postcard_uuid commseq_postcard_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqPostcardResponse
     */
    public function getEmailPostcard($storefront_oid, $commseq_postcard_uuid)
    {
        list($response) = $this->getEmailPostcardWithHttpInfo($storefront_oid, $commseq_postcard_uuid);
        return $response;
    }


    /**
     * Operation getEmailPostcardWithHttpInfo
     *
     * Get email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPostcardWithHttpInfo($storefront_oid, $commseq_postcard_uuid)
    {
        return $this->getEmailPostcardWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_postcard_uuid);
    }


    /**
     * Operation getEmailPostcardWithHttpInfoRetry
     *
     * Get email postcard
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPostcardWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_postcard_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardResponse';
        $request = $this->getEmailPostcardRequest($storefront_oid, $commseq_postcard_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailPostcardWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_postcard_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqPostcardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailPostcardAsync
     *
     * Get email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPostcardAsync($storefront_oid, $commseq_postcard_uuid)
    {
        return $this->getEmailPostcardAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailPostcardAsyncWithHttpInfo
     *
     * Get email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPostcardAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardResponse';
        $request = $this->getEmailPostcardRequest($storefront_oid, $commseq_postcard_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailPostcard'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailPostcardRequest($storefront_oid, $commseq_postcard_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailPostcard'
            );
        }
        // verify the required parameter 'commseq_postcard_uuid' is set
        if ($commseq_postcard_uuid === null || (is_array($commseq_postcard_uuid) && count($commseq_postcard_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_postcard_uuid when calling getEmailPostcard'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_postcard_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_postcard_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_postcard_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailPostcards
     *
     * Get email postcards
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqPostcardsResponse
     */
    public function getEmailPostcards($storefront_oid)
    {
        list($response) = $this->getEmailPostcardsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailPostcardsWithHttpInfo
     *
     * Get email postcards
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPostcardsWithHttpInfo($storefront_oid)
    {
        return $this->getEmailPostcardsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailPostcardsWithHttpInfoRetry
     *
     * Get email postcards
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPostcardsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardsResponse';
        $request = $this->getEmailPostcardsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailPostcardsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqPostcardsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailPostcardsAsync
     *
     * Get email postcards
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPostcardsAsync($storefront_oid)
    {
        return $this->getEmailPostcardsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailPostcardsAsyncWithHttpInfo
     *
     * Get email postcards
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPostcardsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardsResponse';
        $request = $this->getEmailPostcardsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailPostcards'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailPostcardsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailPostcards'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/postcards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailPostcardsMultiple
     *
     * Get email postcards multiple
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardsRequest $email_commseq_postcards_request Request of postcard uuids (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqPostcardsResponse
     */
    public function getEmailPostcardsMultiple($storefront_oid, $email_commseq_postcards_request)
    {
        list($response) = $this->getEmailPostcardsMultipleWithHttpInfo($storefront_oid, $email_commseq_postcards_request);
        return $response;
    }


    /**
     * Operation getEmailPostcardsMultipleWithHttpInfo
     *
     * Get email postcards multiple
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardsRequest $email_commseq_postcards_request Request of postcard uuids (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPostcardsMultipleWithHttpInfo($storefront_oid, $email_commseq_postcards_request)
    {
        return $this->getEmailPostcardsMultipleWithHttpInfoRetry(true ,   $storefront_oid,   $email_commseq_postcards_request);
    }


    /**
     * Operation getEmailPostcardsMultipleWithHttpInfoRetry
     *
     * Get email postcards multiple
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardsRequest $email_commseq_postcards_request Request of postcard uuids (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailPostcardsMultipleWithHttpInfoRetry($retry ,  $storefront_oid,  $email_commseq_postcards_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardsResponse';
        $request = $this->getEmailPostcardsMultipleRequest($storefront_oid, $email_commseq_postcards_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailPostcardsMultipleWithHttpInfoRetry(false ,   $storefront_oid,   $email_commseq_postcards_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqPostcardsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailPostcardsMultipleAsync
     *
     * Get email postcards multiple
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardsRequest $email_commseq_postcards_request Request of postcard uuids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPostcardsMultipleAsync($storefront_oid, $email_commseq_postcards_request)
    {
        return $this->getEmailPostcardsMultipleAsyncWithHttpInfo($storefront_oid, $email_commseq_postcards_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailPostcardsMultipleAsyncWithHttpInfo
     *
     * Get email postcards multiple
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardsRequest $email_commseq_postcards_request Request of postcard uuids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailPostcardsMultipleAsyncWithHttpInfo($storefront_oid, $email_commseq_postcards_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardsResponse';
        $request = $this->getEmailPostcardsMultipleRequest($storefront_oid, $email_commseq_postcards_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailPostcardsMultiple'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardsRequest $email_commseq_postcards_request Request of postcard uuids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailPostcardsMultipleRequest($storefront_oid, $email_commseq_postcards_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailPostcardsMultiple'
            );
        }
        // verify the required parameter 'email_commseq_postcards_request' is set
        if ($email_commseq_postcards_request === null || (is_array($email_commseq_postcards_request) && count($email_commseq_postcards_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_postcards_request when calling getEmailPostcardsMultiple'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/postcards/multiple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_postcards_request)) {
            $_tempBody = $email_commseq_postcards_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSegment
     *
     * Get email segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_segment_uuid email_segment_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSegmentResponse
     */
    public function getEmailSegment($storefront_oid, $email_segment_uuid)
    {
        list($response) = $this->getEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid);
        return $response;
    }


    /**
     * Operation getEmailSegmentWithHttpInfo
     *
     * Get email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid)
    {
        return $this->getEmailSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $email_segment_uuid);
    }


    /**
     * Operation getEmailSegmentWithHttpInfoRetry
     *
     * Get email segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $email_segment_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentResponse';
        $request = $this->getEmailSegmentRequest($storefront_oid, $email_segment_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $email_segment_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSegmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSegmentAsync
     *
     * Get email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSegmentAsync($storefront_oid, $email_segment_uuid)
    {
        return $this->getEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSegmentAsyncWithHttpInfo
     *
     * Get email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentResponse';
        $request = $this->getEmailSegmentRequest($storefront_oid, $email_segment_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSegmentRequest($storefront_oid, $email_segment_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailSegment'
            );
        }
        // verify the required parameter 'email_segment_uuid' is set
        if ($email_segment_uuid === null || (is_array($email_segment_uuid) && count($email_segment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment_uuid when calling getEmailSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_segment_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_segment_uuid' . '}',
                ObjectSerializer::toPathValue($email_segment_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSegmentCustomerEditorUrl
     *
     * Get email segment customers editor URL
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_segment_uuid email_segment_uuid (required)
     * @param  string $email_customer_uuid email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCustomerEditorUrlResponse
     */
    public function getEmailSegmentCustomerEditorUrl($storefront_oid, $email_segment_uuid, $email_customer_uuid)
    {
        list($response) = $this->getEmailSegmentCustomerEditorUrlWithHttpInfo($storefront_oid, $email_segment_uuid, $email_customer_uuid);
        return $response;
    }


    /**
     * Operation getEmailSegmentCustomerEditorUrlWithHttpInfo
     *
     * Get email segment customers editor URL
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomerEditorUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSegmentCustomerEditorUrlWithHttpInfo($storefront_oid, $email_segment_uuid, $email_customer_uuid)
    {
        return $this->getEmailSegmentCustomerEditorUrlWithHttpInfoRetry(true ,   $storefront_oid,   $email_segment_uuid,   $email_customer_uuid);
    }


    /**
     * Operation getEmailSegmentCustomerEditorUrlWithHttpInfoRetry
     *
     * Get email segment customers editor URL
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCustomerEditorUrlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSegmentCustomerEditorUrlWithHttpInfoRetry($retry ,  $storefront_oid,  $email_segment_uuid,  $email_customer_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCustomerEditorUrlResponse';
        $request = $this->getEmailSegmentCustomerEditorUrlRequest($storefront_oid, $email_segment_uuid, $email_customer_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailSegmentCustomerEditorUrlWithHttpInfoRetry(false ,   $storefront_oid,   $email_segment_uuid,   $email_customer_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCustomerEditorUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSegmentCustomerEditorUrlAsync
     *
     * Get email segment customers editor URL
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSegmentCustomerEditorUrlAsync($storefront_oid, $email_segment_uuid, $email_customer_uuid)
    {
        return $this->getEmailSegmentCustomerEditorUrlAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $email_customer_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSegmentCustomerEditorUrlAsyncWithHttpInfo
     *
     * Get email segment customers editor URL
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSegmentCustomerEditorUrlAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $email_customer_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailCustomerEditorUrlResponse';
        $request = $this->getEmailSegmentCustomerEditorUrlRequest($storefront_oid, $email_segment_uuid, $email_customer_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSegmentCustomerEditorUrl'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $email_customer_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSegmentCustomerEditorUrlRequest($storefront_oid, $email_segment_uuid, $email_customer_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailSegmentCustomerEditorUrl'
            );
        }
        // verify the required parameter 'email_segment_uuid' is set
        if ($email_segment_uuid === null || (is_array($email_segment_uuid) && count($email_segment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment_uuid when calling getEmailSegmentCustomerEditorUrl'
            );
        }
        // verify the required parameter 'email_customer_uuid' is set
        if ($email_customer_uuid === null || (is_array($email_customer_uuid) && count($email_customer_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_customer_uuid when calling getEmailSegmentCustomerEditorUrl'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_segment_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_segment_uuid' . '}',
                ObjectSerializer::toPathValue($email_segment_uuid),
                $resourcePath
            );
        }
        // path params
        if ($email_customer_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_customer_uuid' . '}',
                ObjectSerializer::toPathValue($email_customer_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSegmentCustomers
     *
     * Get email segment customers
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_segment_uuid email_segment_uuid (required)
     * @param  int $page_number page_number (optional)
     * @param  int $page_size page_size (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSegmentCustomersResponse
     */
    public function getEmailSegmentCustomers($storefront_oid, $email_segment_uuid, $page_number = null, $page_size = null)
    {
        list($response) = $this->getEmailSegmentCustomersWithHttpInfo($storefront_oid, $email_segment_uuid, $page_number, $page_size);
        return $response;
    }


    /**
     * Operation getEmailSegmentCustomersWithHttpInfo
     *
     * Get email segment customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSegmentCustomersWithHttpInfo($storefront_oid, $email_segment_uuid, $page_number = null, $page_size = null)
    {
        return $this->getEmailSegmentCustomersWithHttpInfoRetry(true ,   $storefront_oid,   $email_segment_uuid,   $page_number,   $page_size);
    }


    /**
     * Operation getEmailSegmentCustomersWithHttpInfoRetry
     *
     * Get email segment customers
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSegmentCustomersWithHttpInfoRetry($retry ,  $storefront_oid,  $email_segment_uuid,  $page_number = null,  $page_size = null)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentCustomersResponse';
        $request = $this->getEmailSegmentCustomersRequest($storefront_oid, $email_segment_uuid, $page_number, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailSegmentCustomersWithHttpInfoRetry(false ,   $storefront_oid,   $email_segment_uuid,   $page_number,   $page_size);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSegmentCustomersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSegmentCustomersAsync
     *
     * Get email segment customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSegmentCustomersAsync($storefront_oid, $email_segment_uuid, $page_number = null, $page_size = null)
    {
        return $this->getEmailSegmentCustomersAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $page_number, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSegmentCustomersAsyncWithHttpInfo
     *
     * Get email segment customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSegmentCustomersAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $page_number = null, $page_size = null)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentCustomersResponse';
        $request = $this->getEmailSegmentCustomersRequest($storefront_oid, $email_segment_uuid, $page_number, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSegmentCustomers'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  int $page_number (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSegmentCustomersRequest($storefront_oid, $email_segment_uuid, $page_number = null, $page_size = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailSegmentCustomers'
            );
        }
        // verify the required parameter 'email_segment_uuid' is set
        if ($email_segment_uuid === null || (is_array($email_segment_uuid) && count($email_segment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment_uuid when calling getEmailSegmentCustomers'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_segment_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_segment_uuid' . '}',
                ObjectSerializer::toPathValue($email_segment_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSegments
     *
     * Get email segments
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSegmentsResponse
     */
    public function getEmailSegments($storefront_oid)
    {
        list($response) = $this->getEmailSegmentsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailSegmentsWithHttpInfo
     *
     * Get email segments
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSegmentsWithHttpInfo($storefront_oid)
    {
        return $this->getEmailSegmentsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailSegmentsWithHttpInfoRetry
     *
     * Get email segments
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSegmentsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentsResponse';
        $request = $this->getEmailSegmentsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailSegmentsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSegmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSegmentsAsync
     *
     * Get email segments
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSegmentsAsync($storefront_oid)
    {
        return $this->getEmailSegmentsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSegmentsAsyncWithHttpInfo
     *
     * Get email segments
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSegmentsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentsResponse';
        $request = $this->getEmailSegmentsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSegments'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSegmentsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailSegments'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSendingDomain
     *
     * Get email sending domain
     *
     * @param  string $domain domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSendingDomainResponse
     */
    public function getEmailSendingDomain($domain)
    {
        list($response) = $this->getEmailSendingDomainWithHttpInfo($domain);
        return $response;
    }


    /**
     * Operation getEmailSendingDomainWithHttpInfo
     *
     * Get email sending domain
     *
     * @param  string $domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSendingDomainWithHttpInfo($domain)
    {
        return $this->getEmailSendingDomainWithHttpInfoRetry(true ,   $domain);
    }


    /**
     * Operation getEmailSendingDomainWithHttpInfoRetry
     *
     * Get email sending domain
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSendingDomainWithHttpInfoRetry($retry ,  $domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->getEmailSendingDomainRequest($domain);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailSendingDomainWithHttpInfoRetry(false ,   $domain);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSendingDomainResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSendingDomainAsync
     *
     * Get email sending domain
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendingDomainAsync($domain)
    {
        return $this->getEmailSendingDomainAsyncWithHttpInfo($domain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSendingDomainAsyncWithHttpInfo
     *
     * Get email sending domain
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendingDomainAsyncWithHttpInfo($domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->getEmailSendingDomainRequest($domain);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSendingDomain'
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSendingDomainRequest($domain)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling getEmailSendingDomain'
            );
        }

        $resourcePath = '/storefront/email/sending_domain/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSendingDomainStatus
     *
     * Get email sending domain status
     *
     * @param  string $domain domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSendingDomainResponse
     */
    public function getEmailSendingDomainStatus($domain)
    {
        list($response) = $this->getEmailSendingDomainStatusWithHttpInfo($domain);
        return $response;
    }


    /**
     * Operation getEmailSendingDomainStatusWithHttpInfo
     *
     * Get email sending domain status
     *
     * @param  string $domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSendingDomainStatusWithHttpInfo($domain)
    {
        return $this->getEmailSendingDomainStatusWithHttpInfoRetry(true ,   $domain);
    }


    /**
     * Operation getEmailSendingDomainStatusWithHttpInfoRetry
     *
     * Get email sending domain status
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $domain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSendingDomainStatusWithHttpInfoRetry($retry ,  $domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->getEmailSendingDomainStatusRequest($domain);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailSendingDomainStatusWithHttpInfoRetry(false ,   $domain);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSendingDomainResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSendingDomainStatusAsync
     *
     * Get email sending domain status
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendingDomainStatusAsync($domain)
    {
        return $this->getEmailSendingDomainStatusAsyncWithHttpInfo($domain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSendingDomainStatusAsyncWithHttpInfo
     *
     * Get email sending domain status
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendingDomainStatusAsyncWithHttpInfo($domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->getEmailSendingDomainStatusRequest($domain);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSendingDomainStatus'
     *
     * @param  string $domain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSendingDomainStatusRequest($domain)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling getEmailSendingDomainStatus'
            );
        }

        $resourcePath = '/storefront/email/sending_domains/{domain}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSendingDomains
     *
     * Get email sending domains
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSendingDomainsResponse
     */
    public function getEmailSendingDomains()
    {
        list($response) = $this->getEmailSendingDomainsWithHttpInfo();
        return $response;
    }


    /**
     * Operation getEmailSendingDomainsWithHttpInfo
     *
     * Get email sending domains
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSendingDomainsWithHttpInfo()
    {
        return $this->getEmailSendingDomainsWithHttpInfoRetry(true );
    }


    /**
     * Operation getEmailSendingDomainsWithHttpInfoRetry
     *
     * Get email sending domains
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSendingDomainsWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainsResponse';
        $request = $this->getEmailSendingDomainsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailSendingDomainsWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSendingDomainsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSendingDomainsAsync
     *
     * Get email sending domains
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendingDomainsAsync()
    {
        return $this->getEmailSendingDomainsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSendingDomainsAsyncWithHttpInfo
     *
     * Get email sending domains
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendingDomainsAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainsResponse';
        $request = $this->getEmailSendingDomainsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSendingDomains'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSendingDomainsRequest()
    {

        $resourcePath = '/storefront/email/sending_domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSettings
     *
     * Get email settings
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSettingsResponse
     */
    public function getEmailSettings($storefront_oid)
    {
        list($response) = $this->getEmailSettingsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailSettingsWithHttpInfo
     *
     * Get email settings
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSettingsWithHttpInfo($storefront_oid)
    {
        return $this->getEmailSettingsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailSettingsWithHttpInfoRetry
     *
     * Get email settings
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSettingsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailSettingsResponse';
        $request = $this->getEmailSettingsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailSettingsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSettingsAsync
     *
     * Get email settings
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSettingsAsync($storefront_oid)
    {
        return $this->getEmailSettingsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSettingsAsyncWithHttpInfo
     *
     * Get email settings
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSettingsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailSettingsResponse';
        $request = $this->getEmailSettingsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSettings'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSettingsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailSettings'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailTemplate
     *
     * Get email template
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $email_template_oid email_template_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailTemplate
     */
    public function getEmailTemplate($storefront_oid, $email_template_oid)
    {
        list($response) = $this->getEmailTemplateWithHttpInfo($storefront_oid, $email_template_oid);
        return $response;
    }


    /**
     * Operation getEmailTemplateWithHttpInfo
     *
     * Get email template
     *
     * @param  int $storefront_oid (required)
     * @param  int $email_template_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailTemplateWithHttpInfo($storefront_oid, $email_template_oid)
    {
        return $this->getEmailTemplateWithHttpInfoRetry(true ,   $storefront_oid,   $email_template_oid);
    }


    /**
     * Operation getEmailTemplateWithHttpInfoRetry
     *
     * Get email template
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $email_template_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailTemplateWithHttpInfoRetry($retry ,  $storefront_oid,  $email_template_oid)
    {
        $returnType = '\ultracart\v2\models\EmailTemplate';
        $request = $this->getEmailTemplateRequest($storefront_oid, $email_template_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailTemplateWithHttpInfoRetry(false ,   $storefront_oid,   $email_template_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailTemplateAsync
     *
     * Get email template
     *
     * @param  int $storefront_oid (required)
     * @param  int $email_template_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailTemplateAsync($storefront_oid, $email_template_oid)
    {
        return $this->getEmailTemplateAsyncWithHttpInfo($storefront_oid, $email_template_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailTemplateAsyncWithHttpInfo
     *
     * Get email template
     *
     * @param  int $storefront_oid (required)
     * @param  int $email_template_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailTemplateAsyncWithHttpInfo($storefront_oid, $email_template_oid)
    {
        $returnType = '\ultracart\v2\models\EmailTemplate';
        $request = $this->getEmailTemplateRequest($storefront_oid, $email_template_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailTemplate'
     *
     * @param  int $storefront_oid (required)
     * @param  int $email_template_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailTemplateRequest($storefront_oid, $email_template_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailTemplate'
            );
        }
        // verify the required parameter 'email_template_oid' is set
        if ($email_template_oid === null || (is_array($email_template_oid) && count($email_template_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_template_oid when calling getEmailTemplate'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/templates/{email_template_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_template_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_template_oid' . '}',
                ObjectSerializer::toPathValue($email_template_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailTemplates
     *
     * Get email templates
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $trigger_type trigger_type (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailTemplatesResponse
     */
    public function getEmailTemplates($storefront_oid, $trigger_type = null)
    {
        list($response) = $this->getEmailTemplatesWithHttpInfo($storefront_oid, $trigger_type);
        return $response;
    }


    /**
     * Operation getEmailTemplatesWithHttpInfo
     *
     * Get email templates
     *
     * @param  int $storefront_oid (required)
     * @param  string $trigger_type (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailTemplatesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailTemplatesWithHttpInfo($storefront_oid, $trigger_type = null)
    {
        return $this->getEmailTemplatesWithHttpInfoRetry(true ,   $storefront_oid,   $trigger_type);
    }


    /**
     * Operation getEmailTemplatesWithHttpInfoRetry
     *
     * Get email templates
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $trigger_type (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailTemplatesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailTemplatesWithHttpInfoRetry($retry ,  $storefront_oid,  $trigger_type = null)
    {
        $returnType = '\ultracart\v2\models\EmailTemplatesResponse';
        $request = $this->getEmailTemplatesRequest($storefront_oid, $trigger_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailTemplatesWithHttpInfoRetry(false ,   $storefront_oid,   $trigger_type);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailTemplatesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailTemplatesAsync
     *
     * Get email templates
     *
     * @param  int $storefront_oid (required)
     * @param  string $trigger_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailTemplatesAsync($storefront_oid, $trigger_type = null)
    {
        return $this->getEmailTemplatesAsyncWithHttpInfo($storefront_oid, $trigger_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailTemplatesAsyncWithHttpInfo
     *
     * Get email templates
     *
     * @param  int $storefront_oid (required)
     * @param  string $trigger_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailTemplatesAsyncWithHttpInfo($storefront_oid, $trigger_type = null)
    {
        $returnType = '\ultracart\v2\models\EmailTemplatesResponse';
        $request = $this->getEmailTemplatesRequest($storefront_oid, $trigger_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailTemplates'
     *
     * @param  int $storefront_oid (required)
     * @param  string $trigger_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailTemplatesRequest($storefront_oid, $trigger_type = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailTemplates'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($trigger_type !== null) {
            $queryParams['trigger_type'] = ObjectSerializer::toQueryValue($trigger_type);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailThirdPartyProviders
     *
     * Get a list of third party email providers
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailThirdPartyProvidersResponse
     */
    public function getEmailThirdPartyProviders($storefront_oid)
    {
        list($response) = $this->getEmailThirdPartyProvidersWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getEmailThirdPartyProvidersWithHttpInfo
     *
     * Get a list of third party email providers
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailThirdPartyProvidersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailThirdPartyProvidersWithHttpInfo($storefront_oid)
    {
        return $this->getEmailThirdPartyProvidersWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getEmailThirdPartyProvidersWithHttpInfoRetry
     *
     * Get a list of third party email providers
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailThirdPartyProvidersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailThirdPartyProvidersWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailThirdPartyProvidersResponse';
        $request = $this->getEmailThirdPartyProvidersRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailThirdPartyProvidersWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailThirdPartyProvidersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailThirdPartyProvidersAsync
     *
     * Get a list of third party email providers
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailThirdPartyProvidersAsync($storefront_oid)
    {
        return $this->getEmailThirdPartyProvidersAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailThirdPartyProvidersAsyncWithHttpInfo
     *
     * Get a list of third party email providers
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailThirdPartyProvidersAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\EmailThirdPartyProvidersResponse';
        $request = $this->getEmailThirdPartyProvidersRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailThirdPartyProviders'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailThirdPartyProvidersRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getEmailThirdPartyProviders'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/third_party_providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExperiments
     *
     * Get experiments
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ExperimentsResponse
     */
    public function getExperiments($storefront_oid)
    {
        list($response) = $this->getExperimentsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getExperimentsWithHttpInfo
     *
     * Get experiments
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ExperimentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExperimentsWithHttpInfo($storefront_oid)
    {
        return $this->getExperimentsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getExperimentsWithHttpInfoRetry
     *
     * Get experiments
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ExperimentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExperimentsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\ExperimentsResponse';
        $request = $this->getExperimentsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getExperimentsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ExperimentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExperimentsAsync
     *
     * Get experiments
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExperimentsAsync($storefront_oid)
    {
        return $this->getExperimentsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExperimentsAsyncWithHttpInfo
     *
     * Get experiments
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExperimentsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\ExperimentsResponse';
        $request = $this->getExperimentsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExperiments'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExperimentsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getExperiments'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/experiments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHeatmap
     *
     * Get screen recording heatmap
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapRequest $query Query (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingHeatmapResponse
     */
    public function getHeatmap($storefront_oid, $query)
    {
        list($response) = $this->getHeatmapWithHttpInfo($storefront_oid, $query);
        return $response;
    }


    /**
     * Operation getHeatmapWithHttpInfo
     *
     * Get screen recording heatmap
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapRequest $query Query (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingHeatmapResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHeatmapWithHttpInfo($storefront_oid, $query)
    {
        return $this->getHeatmapWithHttpInfoRetry(true ,   $storefront_oid,   $query);
    }


    /**
     * Operation getHeatmapWithHttpInfoRetry
     *
     * Get screen recording heatmap
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapRequest $query Query (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingHeatmapResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHeatmapWithHttpInfoRetry($retry ,  $storefront_oid,  $query)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingHeatmapResponse';
        $request = $this->getHeatmapRequest($storefront_oid, $query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getHeatmapWithHttpInfoRetry(false ,   $storefront_oid,   $query);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingHeatmapResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHeatmapAsync
     *
     * Get screen recording heatmap
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapRequest $query Query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeatmapAsync($storefront_oid, $query)
    {
        return $this->getHeatmapAsyncWithHttpInfo($storefront_oid, $query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHeatmapAsyncWithHttpInfo
     *
     * Get screen recording heatmap
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapRequest $query Query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeatmapAsyncWithHttpInfo($storefront_oid, $query)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingHeatmapResponse';
        $request = $this->getHeatmapRequest($storefront_oid, $query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHeatmap'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapRequest $query Query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHeatmapRequest($storefront_oid, $query)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getHeatmap'
            );
        }
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling getHeatmap'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/heatmap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHeatmapIndex
     *
     * Get screen recording heatmap index
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapIndexRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingHeatmapIndexResponse
     */
    public function getHeatmapIndex($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        list($response) = $this->getHeatmapIndexWithHttpInfo($storefront_oid, $query, $_limit, $_offset, $_sort);
        return $response;
    }


    /**
     * Operation getHeatmapIndexWithHttpInfo
     *
     * Get screen recording heatmap index
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapIndexRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingHeatmapIndexResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHeatmapIndexWithHttpInfo($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        return $this->getHeatmapIndexWithHttpInfoRetry(true ,   $storefront_oid,   $query,   $_limit,   $_offset,   $_sort);
    }


    /**
     * Operation getHeatmapIndexWithHttpInfoRetry
     *
     * Get screen recording heatmap index
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapIndexRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingHeatmapIndexResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHeatmapIndexWithHttpInfoRetry($retry ,  $storefront_oid,  $query,  $_limit = '100',  $_offset = '0',  $_sort = null)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingHeatmapIndexResponse';
        $request = $this->getHeatmapIndexRequest($storefront_oid, $query, $_limit, $_offset, $_sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getHeatmapIndexWithHttpInfoRetry(false ,   $storefront_oid,   $query,   $_limit,   $_offset,   $_sort);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingHeatmapIndexResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHeatmapIndexAsync
     *
     * Get screen recording heatmap index
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapIndexRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeatmapIndexAsync($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        return $this->getHeatmapIndexAsyncWithHttpInfo($storefront_oid, $query, $_limit, $_offset, $_sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHeatmapIndexAsyncWithHttpInfo
     *
     * Get screen recording heatmap index
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapIndexRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeatmapIndexAsyncWithHttpInfo($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingHeatmapIndexResponse';
        $request = $this->getHeatmapIndexRequest($storefront_oid, $query, $_limit, $_offset, $_sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHeatmapIndex'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingHeatmapIndexRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHeatmapIndexRequest($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getHeatmapIndex'
            );
        }
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling getHeatmapIndex'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/heatmap/index';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistogramPropertyNames
     *
     * Get histogram property names
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $property_type property_type (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailHistogramPropertyNamesResponse
     */
    public function getHistogramPropertyNames($storefront_oid, $property_type = null)
    {
        list($response) = $this->getHistogramPropertyNamesWithHttpInfo($storefront_oid, $property_type);
        return $response;
    }


    /**
     * Operation getHistogramPropertyNamesWithHttpInfo
     *
     * Get histogram property names
     *
     * @param  int $storefront_oid (required)
     * @param  string $property_type (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailHistogramPropertyNamesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistogramPropertyNamesWithHttpInfo($storefront_oid, $property_type = null)
    {
        return $this->getHistogramPropertyNamesWithHttpInfoRetry(true ,   $storefront_oid,   $property_type);
    }


    /**
     * Operation getHistogramPropertyNamesWithHttpInfoRetry
     *
     * Get histogram property names
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $property_type (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailHistogramPropertyNamesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistogramPropertyNamesWithHttpInfoRetry($retry ,  $storefront_oid,  $property_type = null)
    {
        $returnType = '\ultracart\v2\models\EmailHistogramPropertyNamesResponse';
        $request = $this->getHistogramPropertyNamesRequest($storefront_oid, $property_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getHistogramPropertyNamesWithHttpInfoRetry(false ,   $storefront_oid,   $property_type);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailHistogramPropertyNamesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistogramPropertyNamesAsync
     *
     * Get histogram property names
     *
     * @param  int $storefront_oid (required)
     * @param  string $property_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistogramPropertyNamesAsync($storefront_oid, $property_type = null)
    {
        return $this->getHistogramPropertyNamesAsyncWithHttpInfo($storefront_oid, $property_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistogramPropertyNamesAsyncWithHttpInfo
     *
     * Get histogram property names
     *
     * @param  int $storefront_oid (required)
     * @param  string $property_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistogramPropertyNamesAsyncWithHttpInfo($storefront_oid, $property_type = null)
    {
        $returnType = '\ultracart\v2\models\EmailHistogramPropertyNamesResponse';
        $request = $this->getHistogramPropertyNamesRequest($storefront_oid, $property_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistogramPropertyNames'
     *
     * @param  int $storefront_oid (required)
     * @param  string $property_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistogramPropertyNamesRequest($storefront_oid, $property_type = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getHistogramPropertyNames'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/histogram/property_names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($property_type !== null) {
            $queryParams['property_type'] = ObjectSerializer::toQueryValue($property_type);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistogramPropertyValues
     *
     * Get histogram property values
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $property_name property_name (optional)
     * @param  string $property_type property_type (optional)
     * @param  int $limit limit (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailHistogramPropertyValuesResponse
     */
    public function getHistogramPropertyValues($storefront_oid, $property_name = null, $property_type = null, $limit = null)
    {
        list($response) = $this->getHistogramPropertyValuesWithHttpInfo($storefront_oid, $property_name, $property_type, $limit);
        return $response;
    }


    /**
     * Operation getHistogramPropertyValuesWithHttpInfo
     *
     * Get histogram property values
     *
     * @param  int $storefront_oid (required)
     * @param  string $property_name (optional)
     * @param  string $property_type (optional)
     * @param  int $limit (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailHistogramPropertyValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistogramPropertyValuesWithHttpInfo($storefront_oid, $property_name = null, $property_type = null, $limit = null)
    {
        return $this->getHistogramPropertyValuesWithHttpInfoRetry(true ,   $storefront_oid,   $property_name,   $property_type,   $limit);
    }


    /**
     * Operation getHistogramPropertyValuesWithHttpInfoRetry
     *
     * Get histogram property values
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $property_name (optional)
     * @param  string $property_type (optional)
     * @param  int $limit (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailHistogramPropertyValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistogramPropertyValuesWithHttpInfoRetry($retry ,  $storefront_oid,  $property_name = null,  $property_type = null,  $limit = null)
    {
        $returnType = '\ultracart\v2\models\EmailHistogramPropertyValuesResponse';
        $request = $this->getHistogramPropertyValuesRequest($storefront_oid, $property_name, $property_type, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getHistogramPropertyValuesWithHttpInfoRetry(false ,   $storefront_oid,   $property_name,   $property_type,   $limit);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailHistogramPropertyValuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistogramPropertyValuesAsync
     *
     * Get histogram property values
     *
     * @param  int $storefront_oid (required)
     * @param  string $property_name (optional)
     * @param  string $property_type (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistogramPropertyValuesAsync($storefront_oid, $property_name = null, $property_type = null, $limit = null)
    {
        return $this->getHistogramPropertyValuesAsyncWithHttpInfo($storefront_oid, $property_name, $property_type, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistogramPropertyValuesAsyncWithHttpInfo
     *
     * Get histogram property values
     *
     * @param  int $storefront_oid (required)
     * @param  string $property_name (optional)
     * @param  string $property_type (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistogramPropertyValuesAsyncWithHttpInfo($storefront_oid, $property_name = null, $property_type = null, $limit = null)
    {
        $returnType = '\ultracart\v2\models\EmailHistogramPropertyValuesResponse';
        $request = $this->getHistogramPropertyValuesRequest($storefront_oid, $property_name, $property_type, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistogramPropertyValues'
     *
     * @param  int $storefront_oid (required)
     * @param  string $property_name (optional)
     * @param  string $property_type (optional)
     * @param  int $limit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistogramPropertyValuesRequest($storefront_oid, $property_name = null, $property_type = null, $limit = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getHistogramPropertyValues'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/histogram/property_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($property_name !== null) {
            $queryParams['property_name'] = ObjectSerializer::toQueryValue($property_name);
        }
        // query params
        if ($property_type !== null) {
            $queryParams['property_type'] = ObjectSerializer::toQueryValue($property_type);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLibraryFilterValues
     *
     * Get library values used to populate drop down boxes for filtering.
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryFilterValuesResponse
     */
    public function getLibraryFilterValues()
    {
        list($response) = $this->getLibraryFilterValuesWithHttpInfo();
        return $response;
    }


    /**
     * Operation getLibraryFilterValuesWithHttpInfo
     *
     * Get library values used to populate drop down boxes for filtering.
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryFilterValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLibraryFilterValuesWithHttpInfo()
    {
        return $this->getLibraryFilterValuesWithHttpInfoRetry(true );
    }


    /**
     * Operation getLibraryFilterValuesWithHttpInfoRetry
     *
     * Get library values used to populate drop down boxes for filtering.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryFilterValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLibraryFilterValuesWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\LibraryFilterValuesResponse';
        $request = $this->getLibraryFilterValuesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getLibraryFilterValuesWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryFilterValuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLibraryFilterValuesAsync
     *
     * Get library values used to populate drop down boxes for filtering.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLibraryFilterValuesAsync()
    {
        return $this->getLibraryFilterValuesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLibraryFilterValuesAsyncWithHttpInfo
     *
     * Get library values used to populate drop down boxes for filtering.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLibraryFilterValuesAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\LibraryFilterValuesResponse';
        $request = $this->getLibraryFilterValuesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLibraryFilterValues'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLibraryFilterValuesRequest()
    {

        $resourcePath = '/storefront/code_library/filter_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLibraryItem
     *
     * Get library item.
     *
     * @param  int $library_item_oid library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemResponse
     */
    public function getLibraryItem($library_item_oid)
    {
        list($response) = $this->getLibraryItemWithHttpInfo($library_item_oid);
        return $response;
    }


    /**
     * Operation getLibraryItemWithHttpInfo
     *
     * Get library item.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLibraryItemWithHttpInfo($library_item_oid)
    {
        return $this->getLibraryItemWithHttpInfoRetry(true ,   $library_item_oid);
    }


    /**
     * Operation getLibraryItemWithHttpInfoRetry
     *
     * Get library item.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLibraryItemWithHttpInfoRetry($retry ,  $library_item_oid)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->getLibraryItemRequest($library_item_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getLibraryItemWithHttpInfoRetry(false ,   $library_item_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLibraryItemAsync
     *
     * Get library item.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLibraryItemAsync($library_item_oid)
    {
        return $this->getLibraryItemAsyncWithHttpInfo($library_item_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLibraryItemAsyncWithHttpInfo
     *
     * Get library item.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLibraryItemAsyncWithHttpInfo($library_item_oid)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->getLibraryItemRequest($library_item_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLibraryItem'
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLibraryItemRequest($library_item_oid)
    {
        // verify the required parameter 'library_item_oid' is set
        if ($library_item_oid === null || (is_array($library_item_oid) && count($library_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $library_item_oid when calling getLibraryItem'
            );
        }

        $resourcePath = '/storefront/code_library/{library_item_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($library_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'library_item_oid' . '}',
                ObjectSerializer::toPathValue($library_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLibraryItemPublishedVersions
     *
     * Get all published versions for a library item.
     *
     * @param  int $library_item_oid library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemsResponse
     */
    public function getLibraryItemPublishedVersions($library_item_oid)
    {
        list($response) = $this->getLibraryItemPublishedVersionsWithHttpInfo($library_item_oid);
        return $response;
    }


    /**
     * Operation getLibraryItemPublishedVersionsWithHttpInfo
     *
     * Get all published versions for a library item.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLibraryItemPublishedVersionsWithHttpInfo($library_item_oid)
    {
        return $this->getLibraryItemPublishedVersionsWithHttpInfoRetry(true ,   $library_item_oid);
    }


    /**
     * Operation getLibraryItemPublishedVersionsWithHttpInfoRetry
     *
     * Get all published versions for a library item.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $library_item_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLibraryItemPublishedVersionsWithHttpInfoRetry($retry ,  $library_item_oid)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->getLibraryItemPublishedVersionsRequest($library_item_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getLibraryItemPublishedVersionsWithHttpInfoRetry(false ,   $library_item_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLibraryItemPublishedVersionsAsync
     *
     * Get all published versions for a library item.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLibraryItemPublishedVersionsAsync($library_item_oid)
    {
        return $this->getLibraryItemPublishedVersionsAsyncWithHttpInfo($library_item_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLibraryItemPublishedVersionsAsyncWithHttpInfo
     *
     * Get all published versions for a library item.
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLibraryItemPublishedVersionsAsyncWithHttpInfo($library_item_oid)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->getLibraryItemPublishedVersionsRequest($library_item_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLibraryItemPublishedVersions'
     *
     * @param  int $library_item_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLibraryItemPublishedVersionsRequest($library_item_oid)
    {
        // verify the required parameter 'library_item_oid' is set
        if ($library_item_oid === null || (is_array($library_item_oid) && count($library_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $library_item_oid when calling getLibraryItemPublishedVersions'
            );
        }

        $resourcePath = '/storefront/code_library/{library_item_oid}/published_versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($library_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'library_item_oid' . '}',
                ObjectSerializer::toPathValue($library_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScreenRecording
     *
     * Get screen recording
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $screen_recording_uuid screen_recording_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingResponse
     */
    public function getScreenRecording($storefront_oid, $screen_recording_uuid)
    {
        list($response) = $this->getScreenRecordingWithHttpInfo($storefront_oid, $screen_recording_uuid);
        return $response;
    }


    /**
     * Operation getScreenRecordingWithHttpInfo
     *
     * Get screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingWithHttpInfo($storefront_oid, $screen_recording_uuid)
    {
        return $this->getScreenRecordingWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_uuid);
    }


    /**
     * Operation getScreenRecordingWithHttpInfoRetry
     *
     * Get screen recording
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_uuid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingResponse';
        $request = $this->getScreenRecordingRequest($storefront_oid, $screen_recording_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getScreenRecordingWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScreenRecordingAsync
     *
     * Get screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingAsync($storefront_oid, $screen_recording_uuid)
    {
        return $this->getScreenRecordingAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScreenRecordingAsyncWithHttpInfo
     *
     * Get screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingResponse';
        $request = $this->getScreenRecordingRequest($storefront_oid, $screen_recording_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScreenRecording'
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScreenRecordingRequest($storefront_oid, $screen_recording_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getScreenRecording'
            );
        }
        // verify the required parameter 'screen_recording_uuid' is set
        if ($screen_recording_uuid === null || (is_array($screen_recording_uuid) && count($screen_recording_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_uuid when calling getScreenRecording'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_uuid' . '}',
                ObjectSerializer::toPathValue($screen_recording_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScreenRecordingPageViewData
     *
     * Get screen recording page view data
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $screen_recording_uuid screen_recording_uuid (required)
     * @param  string $screen_recording_page_view_uuid screen_recording_page_view_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingPageViewDataResponse
     */
    public function getScreenRecordingPageViewData($storefront_oid, $screen_recording_uuid, $screen_recording_page_view_uuid)
    {
        list($response) = $this->getScreenRecordingPageViewDataWithHttpInfo($storefront_oid, $screen_recording_uuid, $screen_recording_page_view_uuid);
        return $response;
    }


    /**
     * Operation getScreenRecordingPageViewDataWithHttpInfo
     *
     * Get screen recording page view data
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  string $screen_recording_page_view_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingPageViewDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingPageViewDataWithHttpInfo($storefront_oid, $screen_recording_uuid, $screen_recording_page_view_uuid)
    {
        return $this->getScreenRecordingPageViewDataWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_uuid,   $screen_recording_page_view_uuid);
    }


    /**
     * Operation getScreenRecordingPageViewDataWithHttpInfoRetry
     *
     * Get screen recording page view data
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  string $screen_recording_page_view_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingPageViewDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingPageViewDataWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_uuid,  $screen_recording_page_view_uuid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingPageViewDataResponse';
        $request = $this->getScreenRecordingPageViewDataRequest($storefront_oid, $screen_recording_uuid, $screen_recording_page_view_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getScreenRecordingPageViewDataWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_uuid,   $screen_recording_page_view_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingPageViewDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScreenRecordingPageViewDataAsync
     *
     * Get screen recording page view data
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  string $screen_recording_page_view_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingPageViewDataAsync($storefront_oid, $screen_recording_uuid, $screen_recording_page_view_uuid)
    {
        return $this->getScreenRecordingPageViewDataAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid, $screen_recording_page_view_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScreenRecordingPageViewDataAsyncWithHttpInfo
     *
     * Get screen recording page view data
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  string $screen_recording_page_view_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingPageViewDataAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid, $screen_recording_page_view_uuid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingPageViewDataResponse';
        $request = $this->getScreenRecordingPageViewDataRequest($storefront_oid, $screen_recording_uuid, $screen_recording_page_view_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScreenRecordingPageViewData'
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  string $screen_recording_page_view_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScreenRecordingPageViewDataRequest($storefront_oid, $screen_recording_uuid, $screen_recording_page_view_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getScreenRecordingPageViewData'
            );
        }
        // verify the required parameter 'screen_recording_uuid' is set
        if ($screen_recording_uuid === null || (is_array($screen_recording_uuid) && count($screen_recording_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_uuid when calling getScreenRecordingPageViewData'
            );
        }
        // verify the required parameter 'screen_recording_page_view_uuid' is set
        if ($screen_recording_page_view_uuid === null || (is_array($screen_recording_page_view_uuid) && count($screen_recording_page_view_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_page_view_uuid when calling getScreenRecordingPageViewData'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/page_view_data/{screen_recording_page_view_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_uuid' . '}',
                ObjectSerializer::toPathValue($screen_recording_uuid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_page_view_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_page_view_uuid' . '}',
                ObjectSerializer::toPathValue($screen_recording_page_view_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScreenRecordingSegment
     *
     * Get screen recording segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $screen_recording_segment_oid screen_recording_segment_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingSegmentResponse
     */
    public function getScreenRecordingSegment($storefront_oid, $screen_recording_segment_oid)
    {
        list($response) = $this->getScreenRecordingSegmentWithHttpInfo($storefront_oid, $screen_recording_segment_oid);
        return $response;
    }


    /**
     * Operation getScreenRecordingSegmentWithHttpInfo
     *
     * Get screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingSegmentWithHttpInfo($storefront_oid, $screen_recording_segment_oid)
    {
        return $this->getScreenRecordingSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_segment_oid);
    }


    /**
     * Operation getScreenRecordingSegmentWithHttpInfoRetry
     *
     * Get screen recording segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_segment_oid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSegmentResponse';
        $request = $this->getScreenRecordingSegmentRequest($storefront_oid, $screen_recording_segment_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getScreenRecordingSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_segment_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingSegmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScreenRecordingSegmentAsync
     *
     * Get screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingSegmentAsync($storefront_oid, $screen_recording_segment_oid)
    {
        return $this->getScreenRecordingSegmentAsyncWithHttpInfo($storefront_oid, $screen_recording_segment_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScreenRecordingSegmentAsyncWithHttpInfo
     *
     * Get screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingSegmentAsyncWithHttpInfo($storefront_oid, $screen_recording_segment_oid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSegmentResponse';
        $request = $this->getScreenRecordingSegmentRequest($storefront_oid, $screen_recording_segment_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScreenRecordingSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScreenRecordingSegmentRequest($storefront_oid, $screen_recording_segment_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getScreenRecordingSegment'
            );
        }
        // verify the required parameter 'screen_recording_segment_oid' is set
        if ($screen_recording_segment_oid === null || (is_array($screen_recording_segment_oid) && count($screen_recording_segment_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_segment_oid when calling getScreenRecordingSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_segment_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_segment_oid' . '}',
                ObjectSerializer::toPathValue($screen_recording_segment_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScreenRecordingSegments
     *
     * Get screen recording segments
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingSegmentsResponse
     */
    public function getScreenRecordingSegments($storefront_oid)
    {
        list($response) = $this->getScreenRecordingSegmentsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getScreenRecordingSegmentsWithHttpInfo
     *
     * Get screen recording segments
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSegmentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingSegmentsWithHttpInfo($storefront_oid)
    {
        return $this->getScreenRecordingSegmentsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getScreenRecordingSegmentsWithHttpInfoRetry
     *
     * Get screen recording segments
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSegmentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingSegmentsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSegmentsResponse';
        $request = $this->getScreenRecordingSegmentsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getScreenRecordingSegmentsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingSegmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScreenRecordingSegmentsAsync
     *
     * Get screen recording segments
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingSegmentsAsync($storefront_oid)
    {
        return $this->getScreenRecordingSegmentsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScreenRecordingSegmentsAsyncWithHttpInfo
     *
     * Get screen recording segments
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingSegmentsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSegmentsResponse';
        $request = $this->getScreenRecordingSegmentsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScreenRecordingSegments'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScreenRecordingSegmentsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getScreenRecordingSegments'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/segments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScreenRecordingSettings
     *
     * Get screen recording settings
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingSettingsResponse
     */
    public function getScreenRecordingSettings($storefront_oid)
    {
        list($response) = $this->getScreenRecordingSettingsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getScreenRecordingSettingsWithHttpInfo
     *
     * Get screen recording settings
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingSettingsWithHttpInfo($storefront_oid)
    {
        return $this->getScreenRecordingSettingsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getScreenRecordingSettingsWithHttpInfoRetry
     *
     * Get screen recording settings
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingSettingsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSettingsResponse';
        $request = $this->getScreenRecordingSettingsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getScreenRecordingSettingsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScreenRecordingSettingsAsync
     *
     * Get screen recording settings
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingSettingsAsync($storefront_oid)
    {
        return $this->getScreenRecordingSettingsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScreenRecordingSettingsAsyncWithHttpInfo
     *
     * Get screen recording settings
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingSettingsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSettingsResponse';
        $request = $this->getScreenRecordingSettingsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScreenRecordingSettings'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScreenRecordingSettingsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getScreenRecordingSettings'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScreenRecordingTags
     *
     * Get tags used by screen recording
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingTagsResponse
     */
    public function getScreenRecordingTags($storefront_oid)
    {
        list($response) = $this->getScreenRecordingTagsWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getScreenRecordingTagsWithHttpInfo
     *
     * Get tags used by screen recording
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingTagsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingTagsWithHttpInfo($storefront_oid)
    {
        return $this->getScreenRecordingTagsWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getScreenRecordingTagsWithHttpInfoRetry
     *
     * Get tags used by screen recording
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingTagsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingTagsWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingTagsResponse';
        $request = $this->getScreenRecordingTagsRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getScreenRecordingTagsWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingTagsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScreenRecordingTagsAsync
     *
     * Get tags used by screen recording
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingTagsAsync($storefront_oid)
    {
        return $this->getScreenRecordingTagsAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScreenRecordingTagsAsyncWithHttpInfo
     *
     * Get tags used by screen recording
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingTagsAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingTagsResponse';
        $request = $this->getScreenRecordingTagsRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScreenRecordingTags'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScreenRecordingTagsRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getScreenRecordingTags'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScreenRecordingsByQuery
     *
     * Query screen recordings
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingQueryRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingQueryResponse
     */
    public function getScreenRecordingsByQuery($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        list($response) = $this->getScreenRecordingsByQueryWithHttpInfo($storefront_oid, $query, $_limit, $_offset, $_sort);
        return $response;
    }


    /**
     * Operation getScreenRecordingsByQueryWithHttpInfo
     *
     * Query screen recordings
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingQueryRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingQueryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingsByQueryWithHttpInfo($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        return $this->getScreenRecordingsByQueryWithHttpInfoRetry(true ,   $storefront_oid,   $query,   $_limit,   $_offset,   $_sort);
    }


    /**
     * Operation getScreenRecordingsByQueryWithHttpInfoRetry
     *
     * Query screen recordings
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingQueryRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingQueryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingsByQueryWithHttpInfoRetry($retry ,  $storefront_oid,  $query,  $_limit = '100',  $_offset = '0',  $_sort = null)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingQueryResponse';
        $request = $this->getScreenRecordingsByQueryRequest($storefront_oid, $query, $_limit, $_offset, $_sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getScreenRecordingsByQueryWithHttpInfoRetry(false ,   $storefront_oid,   $query,   $_limit,   $_offset,   $_sort);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingQueryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScreenRecordingsByQueryAsync
     *
     * Query screen recordings
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingQueryRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingsByQueryAsync($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        return $this->getScreenRecordingsByQueryAsyncWithHttpInfo($storefront_oid, $query, $_limit, $_offset, $_sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScreenRecordingsByQueryAsyncWithHttpInfo
     *
     * Query screen recordings
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingQueryRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingsByQueryAsyncWithHttpInfo($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingQueryResponse';
        $request = $this->getScreenRecordingsByQueryRequest($storefront_oid, $query, $_limit, $_offset, $_sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScreenRecordingsByQuery'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingQueryRequest $query Query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScreenRecordingsByQueryRequest($storefront_oid, $query, $_limit = '100', $_offset = '0', $_sort = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getScreenRecordingsByQuery'
            );
        }
        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling getScreenRecordingsByQuery'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScreenRecordingsBySegment
     *
     * Get screen recordings by segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $screen_recording_segment_oid screen_recording_segment_oid (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingQueryResponse
     */
    public function getScreenRecordingsBySegment($storefront_oid, $screen_recording_segment_oid, $_limit = '100', $_offset = '0', $_sort = null)
    {
        list($response) = $this->getScreenRecordingsBySegmentWithHttpInfo($storefront_oid, $screen_recording_segment_oid, $_limit, $_offset, $_sort);
        return $response;
    }


    /**
     * Operation getScreenRecordingsBySegmentWithHttpInfo
     *
     * Get screen recordings by segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingQueryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingsBySegmentWithHttpInfo($storefront_oid, $screen_recording_segment_oid, $_limit = '100', $_offset = '0', $_sort = null)
    {
        return $this->getScreenRecordingsBySegmentWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_segment_oid,   $_limit,   $_offset,   $_sort);
    }


    /**
     * Operation getScreenRecordingsBySegmentWithHttpInfoRetry
     *
     * Get screen recordings by segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingQueryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScreenRecordingsBySegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_segment_oid,  $_limit = '100',  $_offset = '0',  $_sort = null)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingQueryResponse';
        $request = $this->getScreenRecordingsBySegmentRequest($storefront_oid, $screen_recording_segment_oid, $_limit, $_offset, $_sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getScreenRecordingsBySegmentWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_segment_oid,   $_limit,   $_offset,   $_sort);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingQueryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScreenRecordingsBySegmentAsync
     *
     * Get screen recordings by segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingsBySegmentAsync($storefront_oid, $screen_recording_segment_oid, $_limit = '100', $_offset = '0', $_sort = null)
    {
        return $this->getScreenRecordingsBySegmentAsyncWithHttpInfo($storefront_oid, $screen_recording_segment_oid, $_limit, $_offset, $_sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScreenRecordingsBySegmentAsyncWithHttpInfo
     *
     * Get screen recordings by segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getScreenRecordingsBySegmentAsyncWithHttpInfo($storefront_oid, $screen_recording_segment_oid, $_limit = '100', $_offset = '0', $_sort = null)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingQueryResponse';
        $request = $this->getScreenRecordingsBySegmentRequest($storefront_oid, $screen_recording_segment_oid, $_limit, $_offset, $_sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScreenRecordingsBySegment'
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getScreenRecordingsBySegmentRequest($storefront_oid, $screen_recording_segment_oid, $_limit = '100', $_offset = '0', $_sort = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getScreenRecordingsBySegment'
            );
        }
        // verify the required parameter 'screen_recording_segment_oid' is set
        if ($screen_recording_segment_oid === null || (is_array($screen_recording_segment_oid) && count($screen_recording_segment_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_segment_oid when calling getScreenRecordingsBySegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_segment_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_segment_oid' . '}',
                ObjectSerializer::toPathValue($screen_recording_segment_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreFrontPricingTiers
     *
     * Retrieve pricing tiers
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\PricingTiersResponse
     */
    public function getStoreFrontPricingTiers($_expand = null)
    {
        list($response) = $this->getStoreFrontPricingTiersWithHttpInfo($_expand);
        return $response;
    }


    /**
     * Operation getStoreFrontPricingTiersWithHttpInfo
     *
     * Retrieve pricing tiers
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\PricingTiersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreFrontPricingTiersWithHttpInfo($_expand = null)
    {
        return $this->getStoreFrontPricingTiersWithHttpInfoRetry(true ,   $_expand);
    }


    /**
     * Operation getStoreFrontPricingTiersWithHttpInfoRetry
     *
     * Retrieve pricing tiers
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\PricingTiersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreFrontPricingTiersWithHttpInfoRetry($retry ,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\PricingTiersResponse';
        $request = $this->getStoreFrontPricingTiersRequest($_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getStoreFrontPricingTiersWithHttpInfoRetry(false ,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\PricingTiersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreFrontPricingTiersAsync
     *
     * Retrieve pricing tiers
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreFrontPricingTiersAsync($_expand = null)
    {
        return $this->getStoreFrontPricingTiersAsyncWithHttpInfo($_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoreFrontPricingTiersAsyncWithHttpInfo
     *
     * Retrieve pricing tiers
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreFrontPricingTiersAsyncWithHttpInfo($_expand = null)
    {
        $returnType = '\ultracart\v2\models\PricingTiersResponse';
        $request = $this->getStoreFrontPricingTiersRequest($_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreFrontPricingTiers'
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStoreFrontPricingTiersRequest($_expand = null)
    {

        $resourcePath = '/storefront/pricing_tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreFronts
     *
     * Get storefronts (internal use only for security reasons)
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\StoreFrontsResponse
     */
    public function getStoreFronts()
    {
        list($response) = $this->getStoreFrontsWithHttpInfo();
        return $response;
    }


    /**
     * Operation getStoreFrontsWithHttpInfo
     *
     * Get storefronts (internal use only for security reasons)
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\StoreFrontsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreFrontsWithHttpInfo()
    {
        return $this->getStoreFrontsWithHttpInfoRetry(true );
    }


    /**
     * Operation getStoreFrontsWithHttpInfoRetry
     *
     * Get storefronts (internal use only for security reasons)
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\StoreFrontsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreFrontsWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\StoreFrontsResponse';
        $request = $this->getStoreFrontsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getStoreFrontsWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\StoreFrontsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreFrontsAsync
     *
     * Get storefronts (internal use only for security reasons)
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreFrontsAsync()
    {
        return $this->getStoreFrontsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoreFrontsAsyncWithHttpInfo
     *
     * Get storefronts (internal use only for security reasons)
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreFrontsAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\StoreFrontsResponse';
        $request = $this->getStoreFrontsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreFronts'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStoreFrontsRequest()
    {

        $resourcePath = '/storefront';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getThumbnailParameters
     *
     * Get thumbnail parameters
     *
     * @param  \ultracart\v2\models\ThumbnailParametersRequest $thumbnail_parameters Thumbnail Parameters (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ThumbnailParametersResponse
     */
    public function getThumbnailParameters($thumbnail_parameters)
    {
        list($response) = $this->getThumbnailParametersWithHttpInfo($thumbnail_parameters);
        return $response;
    }


    /**
     * Operation getThumbnailParametersWithHttpInfo
     *
     * Get thumbnail parameters
     *
     * @param  \ultracart\v2\models\ThumbnailParametersRequest $thumbnail_parameters Thumbnail Parameters (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ThumbnailParametersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThumbnailParametersWithHttpInfo($thumbnail_parameters)
    {
        return $this->getThumbnailParametersWithHttpInfoRetry(true ,   $thumbnail_parameters);
    }


    /**
     * Operation getThumbnailParametersWithHttpInfoRetry
     *
     * Get thumbnail parameters
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\ThumbnailParametersRequest $thumbnail_parameters Thumbnail Parameters (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ThumbnailParametersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThumbnailParametersWithHttpInfoRetry($retry ,  $thumbnail_parameters)
    {
        $returnType = '\ultracart\v2\models\ThumbnailParametersResponse';
        $request = $this->getThumbnailParametersRequest($thumbnail_parameters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getThumbnailParametersWithHttpInfoRetry(false ,   $thumbnail_parameters);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ThumbnailParametersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getThumbnailParametersAsync
     *
     * Get thumbnail parameters
     *
     * @param  \ultracart\v2\models\ThumbnailParametersRequest $thumbnail_parameters Thumbnail Parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThumbnailParametersAsync($thumbnail_parameters)
    {
        return $this->getThumbnailParametersAsyncWithHttpInfo($thumbnail_parameters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getThumbnailParametersAsyncWithHttpInfo
     *
     * Get thumbnail parameters
     *
     * @param  \ultracart\v2\models\ThumbnailParametersRequest $thumbnail_parameters Thumbnail Parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThumbnailParametersAsyncWithHttpInfo($thumbnail_parameters)
    {
        $returnType = '\ultracart\v2\models\ThumbnailParametersResponse';
        $request = $this->getThumbnailParametersRequest($thumbnail_parameters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getThumbnailParameters'
     *
     * @param  \ultracart\v2\models\ThumbnailParametersRequest $thumbnail_parameters Thumbnail Parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getThumbnailParametersRequest($thumbnail_parameters)
    {
        // verify the required parameter 'thumbnail_parameters' is set
        if ($thumbnail_parameters === null || (is_array($thumbnail_parameters) && count($thumbnail_parameters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thumbnail_parameters when calling getThumbnailParameters'
            );
        }

        $resourcePath = '/storefront/thumbnailParameters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($thumbnail_parameters)) {
            $_tempBody = $thumbnail_parameters;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionEmail
     *
     * Gets a transaction email object
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_id email_id (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\TransactionEmailResponse
     */
    public function getTransactionEmail($storefront_oid, $email_id)
    {
        list($response) = $this->getTransactionEmailWithHttpInfo($storefront_oid, $email_id);
        return $response;
    }


    /**
     * Operation getTransactionEmailWithHttpInfo
     *
     * Gets a transaction email object
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TransactionEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionEmailWithHttpInfo($storefront_oid, $email_id)
    {
        return $this->getTransactionEmailWithHttpInfoRetry(true ,   $storefront_oid,   $email_id);
    }


    /**
     * Operation getTransactionEmailWithHttpInfoRetry
     *
     * Gets a transaction email object
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TransactionEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionEmailWithHttpInfoRetry($retry ,  $storefront_oid,  $email_id)
    {
        $returnType = '\ultracart\v2\models\TransactionEmailResponse';
        $request = $this->getTransactionEmailRequest($storefront_oid, $email_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getTransactionEmailWithHttpInfoRetry(false ,   $storefront_oid,   $email_id);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\TransactionEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionEmailAsync
     *
     * Gets a transaction email object
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionEmailAsync($storefront_oid, $email_id)
    {
        return $this->getTransactionEmailAsyncWithHttpInfo($storefront_oid, $email_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionEmailAsyncWithHttpInfo
     *
     * Gets a transaction email object
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionEmailAsyncWithHttpInfo($storefront_oid, $email_id)
    {
        $returnType = '\ultracart\v2\models\TransactionEmailResponse';
        $request = $this->getTransactionEmailRequest($storefront_oid, $email_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionEmail'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionEmailRequest($storefront_oid, $email_id)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getTransactionEmail'
            );
        }
        // verify the required parameter 'email_id' is set
        if ($email_id === null || (is_array($email_id) && count($email_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_id when calling getTransactionEmail'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/transaction_email/list/{email_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_id !== null) {
            $resourcePath = str_replace(
                '{' . 'email_id' . '}',
                ObjectSerializer::toPathValue($email_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionEmailList
     *
     * Gets a list of transaction email names
     *
     * @param  int $storefront_oid storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\TransactionEmailListResponse
     */
    public function getTransactionEmailList($storefront_oid)
    {
        list($response) = $this->getTransactionEmailListWithHttpInfo($storefront_oid);
        return $response;
    }


    /**
     * Operation getTransactionEmailListWithHttpInfo
     *
     * Gets a list of transaction email names
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TransactionEmailListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionEmailListWithHttpInfo($storefront_oid)
    {
        return $this->getTransactionEmailListWithHttpInfoRetry(true ,   $storefront_oid);
    }


    /**
     * Operation getTransactionEmailListWithHttpInfoRetry
     *
     * Gets a list of transaction email names
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TransactionEmailListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionEmailListWithHttpInfoRetry($retry ,  $storefront_oid)
    {
        $returnType = '\ultracart\v2\models\TransactionEmailListResponse';
        $request = $this->getTransactionEmailListRequest($storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getTransactionEmailListWithHttpInfoRetry(false ,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\TransactionEmailListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionEmailListAsync
     *
     * Gets a list of transaction email names
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionEmailListAsync($storefront_oid)
    {
        return $this->getTransactionEmailListAsyncWithHttpInfo($storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionEmailListAsyncWithHttpInfo
     *
     * Gets a list of transaction email names
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionEmailListAsyncWithHttpInfo($storefront_oid)
    {
        $returnType = '\ultracart\v2\models\TransactionEmailListResponse';
        $request = $this->getTransactionEmailListRequest($storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionEmailList'
     *
     * @param  int $storefront_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionEmailListRequest($storefront_oid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getTransactionEmailList'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/transaction_email/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionEmailScreenshots
     *
     * Get transactional email screenshots
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_id email_id (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenshotsResponse
     */
    public function getTransactionEmailScreenshots($storefront_oid, $email_id)
    {
        list($response) = $this->getTransactionEmailScreenshotsWithHttpInfo($storefront_oid, $email_id);
        return $response;
    }


    /**
     * Operation getTransactionEmailScreenshotsWithHttpInfo
     *
     * Get transactional email screenshots
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenshotsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionEmailScreenshotsWithHttpInfo($storefront_oid, $email_id)
    {
        return $this->getTransactionEmailScreenshotsWithHttpInfoRetry(true ,   $storefront_oid,   $email_id);
    }


    /**
     * Operation getTransactionEmailScreenshotsWithHttpInfoRetry
     *
     * Get transactional email screenshots
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenshotsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionEmailScreenshotsWithHttpInfoRetry($retry ,  $storefront_oid,  $email_id)
    {
        $returnType = '\ultracart\v2\models\ScreenshotsResponse';
        $request = $this->getTransactionEmailScreenshotsRequest($storefront_oid, $email_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getTransactionEmailScreenshotsWithHttpInfoRetry(false ,   $storefront_oid,   $email_id);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenshotsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionEmailScreenshotsAsync
     *
     * Get transactional email screenshots
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionEmailScreenshotsAsync($storefront_oid, $email_id)
    {
        return $this->getTransactionEmailScreenshotsAsyncWithHttpInfo($storefront_oid, $email_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionEmailScreenshotsAsyncWithHttpInfo
     *
     * Get transactional email screenshots
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionEmailScreenshotsAsyncWithHttpInfo($storefront_oid, $email_id)
    {
        $returnType = '\ultracart\v2\models\ScreenshotsResponse';
        $request = $this->getTransactionEmailScreenshotsRequest($storefront_oid, $email_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionEmailScreenshots'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionEmailScreenshotsRequest($storefront_oid, $email_id)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling getTransactionEmailScreenshots'
            );
        }
        // verify the required parameter 'email_id' is set
        if ($email_id === null || (is_array($email_id) && count($email_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_id when calling getTransactionEmailScreenshots'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_id !== null) {
            $resourcePath = str_replace(
                '{' . 'email_id' . '}',
                ObjectSerializer::toPathValue($email_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTwilioAccount
     *
     * Get Twilio account
     *
     * @param  string $esp_twilio_uuid esp_twilio_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\TwilioResponse
     */
    public function getTwilioAccount($esp_twilio_uuid)
    {
        list($response) = $this->getTwilioAccountWithHttpInfo($esp_twilio_uuid);
        return $response;
    }


    /**
     * Operation getTwilioAccountWithHttpInfo
     *
     * Get Twilio account
     *
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TwilioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTwilioAccountWithHttpInfo($esp_twilio_uuid)
    {
        return $this->getTwilioAccountWithHttpInfoRetry(true ,   $esp_twilio_uuid);
    }


    /**
     * Operation getTwilioAccountWithHttpInfoRetry
     *
     * Get Twilio account
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TwilioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTwilioAccountWithHttpInfoRetry($retry ,  $esp_twilio_uuid)
    {
        $returnType = '\ultracart\v2\models\TwilioResponse';
        $request = $this->getTwilioAccountRequest($esp_twilio_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getTwilioAccountWithHttpInfoRetry(false ,   $esp_twilio_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\TwilioResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTwilioAccountAsync
     *
     * Get Twilio account
     *
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTwilioAccountAsync($esp_twilio_uuid)
    {
        return $this->getTwilioAccountAsyncWithHttpInfo($esp_twilio_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTwilioAccountAsyncWithHttpInfo
     *
     * Get Twilio account
     *
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTwilioAccountAsyncWithHttpInfo($esp_twilio_uuid)
    {
        $returnType = '\ultracart\v2\models\TwilioResponse';
        $request = $this->getTwilioAccountRequest($esp_twilio_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTwilioAccount'
     *
     * @param  string $esp_twilio_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTwilioAccountRequest($esp_twilio_uuid)
    {
        // verify the required parameter 'esp_twilio_uuid' is set
        if ($esp_twilio_uuid === null || (is_array($esp_twilio_uuid) && count($esp_twilio_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $esp_twilio_uuid when calling getTwilioAccount'
            );
        }

        $resourcePath = '/storefront/twilio/accounts/{esp_twilio_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($esp_twilio_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'esp_twilio_uuid' . '}',
                ObjectSerializer::toPathValue($esp_twilio_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTwilioAccounts
     *
     * Get all Twilio accounts
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\TwiliosResponse
     */
    public function getTwilioAccounts()
    {
        list($response) = $this->getTwilioAccountsWithHttpInfo();
        return $response;
    }


    /**
     * Operation getTwilioAccountsWithHttpInfo
     *
     * Get all Twilio accounts
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TwiliosResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTwilioAccountsWithHttpInfo()
    {
        return $this->getTwilioAccountsWithHttpInfoRetry(true );
    }


    /**
     * Operation getTwilioAccountsWithHttpInfoRetry
     *
     * Get all Twilio accounts
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TwiliosResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTwilioAccountsWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\TwiliosResponse';
        $request = $this->getTwilioAccountsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getTwilioAccountsWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\TwiliosResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTwilioAccountsAsync
     *
     * Get all Twilio accounts
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTwilioAccountsAsync()
    {
        return $this->getTwilioAccountsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTwilioAccountsAsyncWithHttpInfo
     *
     * Get all Twilio accounts
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTwilioAccountsAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\TwiliosResponse';
        $request = $this->getTwilioAccountsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTwilioAccounts'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTwilioAccountsRequest()
    {

        $resourcePath = '/storefront/twilio/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation globalUnsubscribe
     *
     * Globally unsubscribe a customer
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailGlobalUnsubscribeRequest $unsubscribe Unsubscribe (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailGlobalUnsubscribeResponse
     */
    public function globalUnsubscribe($storefront_oid, $unsubscribe)
    {
        list($response) = $this->globalUnsubscribeWithHttpInfo($storefront_oid, $unsubscribe);
        return $response;
    }


    /**
     * Operation globalUnsubscribeWithHttpInfo
     *
     * Globally unsubscribe a customer
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailGlobalUnsubscribeRequest $unsubscribe Unsubscribe (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailGlobalUnsubscribeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function globalUnsubscribeWithHttpInfo($storefront_oid, $unsubscribe)
    {
        return $this->globalUnsubscribeWithHttpInfoRetry(true ,   $storefront_oid,   $unsubscribe);
    }


    /**
     * Operation globalUnsubscribeWithHttpInfoRetry
     *
     * Globally unsubscribe a customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailGlobalUnsubscribeRequest $unsubscribe Unsubscribe (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailGlobalUnsubscribeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function globalUnsubscribeWithHttpInfoRetry($retry ,  $storefront_oid,  $unsubscribe)
    {
        $returnType = '\ultracart\v2\models\EmailGlobalUnsubscribeResponse';
        $request = $this->globalUnsubscribeRequest($storefront_oid, $unsubscribe);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->globalUnsubscribeWithHttpInfoRetry(false ,   $storefront_oid,   $unsubscribe);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailGlobalUnsubscribeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation globalUnsubscribeAsync
     *
     * Globally unsubscribe a customer
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailGlobalUnsubscribeRequest $unsubscribe Unsubscribe (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function globalUnsubscribeAsync($storefront_oid, $unsubscribe)
    {
        return $this->globalUnsubscribeAsyncWithHttpInfo($storefront_oid, $unsubscribe)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation globalUnsubscribeAsyncWithHttpInfo
     *
     * Globally unsubscribe a customer
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailGlobalUnsubscribeRequest $unsubscribe Unsubscribe (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function globalUnsubscribeAsyncWithHttpInfo($storefront_oid, $unsubscribe)
    {
        $returnType = '\ultracart\v2\models\EmailGlobalUnsubscribeResponse';
        $request = $this->globalUnsubscribeRequest($storefront_oid, $unsubscribe);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'globalUnsubscribe'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailGlobalUnsubscribeRequest $unsubscribe Unsubscribe (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function globalUnsubscribeRequest($storefront_oid, $unsubscribe)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling globalUnsubscribe'
            );
        }
        // verify the required parameter 'unsubscribe' is set
        if ($unsubscribe === null || (is_array($unsubscribe) && count($unsubscribe) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unsubscribe when calling globalUnsubscribe'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/globalUnsubscribe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($unsubscribe)) {
            $_tempBody = $unsubscribe;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importEmailThirdPartyProviderList
     *
     * Import a third party provider list
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailThirdPartyListImportRequest $import_request lists to import (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function importEmailThirdPartyProviderList($storefront_oid, $import_request)
    {
        $this->importEmailThirdPartyProviderListWithHttpInfo($storefront_oid, $import_request);
    }


    /**
     * Operation importEmailThirdPartyProviderListWithHttpInfo
     *
     * Import a third party provider list
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailThirdPartyListImportRequest $import_request lists to import (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importEmailThirdPartyProviderListWithHttpInfo($storefront_oid, $import_request)
    {
        $this->importEmailThirdPartyProviderListWithHttpInfoRetry(true ,   $storefront_oid,   $import_request);
    }


    /**
     * Operation importEmailThirdPartyProviderListWithHttpInfoRetry
     *
     * Import a third party provider list
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailThirdPartyListImportRequest $import_request lists to import (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importEmailThirdPartyProviderListWithHttpInfoRetry($retry ,  $storefront_oid,  $import_request)
    {
        $returnType = '';
        $request = $this->importEmailThirdPartyProviderListRequest($storefront_oid, $import_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->importEmailThirdPartyProviderListWithHttpInfoRetry(false ,   $storefront_oid,   $import_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importEmailThirdPartyProviderListAsync
     *
     * Import a third party provider list
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailThirdPartyListImportRequest $import_request lists to import (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importEmailThirdPartyProviderListAsync($storefront_oid, $import_request)
    {
        return $this->importEmailThirdPartyProviderListAsyncWithHttpInfo($storefront_oid, $import_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importEmailThirdPartyProviderListAsyncWithHttpInfo
     *
     * Import a third party provider list
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailThirdPartyListImportRequest $import_request lists to import (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importEmailThirdPartyProviderListAsyncWithHttpInfo($storefront_oid, $import_request)
    {
        $returnType = '';
        $request = $this->importEmailThirdPartyProviderListRequest($storefront_oid, $import_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importEmailThirdPartyProviderList'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailThirdPartyListImportRequest $import_request lists to import (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importEmailThirdPartyProviderListRequest($storefront_oid, $import_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling importEmailThirdPartyProviderList'
            );
        }
        // verify the required parameter 'import_request' is set
        if ($import_request === null || (is_array($import_request) && count($import_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $import_request when calling importEmailThirdPartyProviderList'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/third_party_providers/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($import_request)) {
            $_tempBody = $import_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailCampaign
     *
     * Insert email campaign
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignResponse
     */
    public function insertEmailCampaign($storefront_oid, $email_campaign)
    {
        list($response) = $this->insertEmailCampaignWithHttpInfo($storefront_oid, $email_campaign);
        return $response;
    }


    /**
     * Operation insertEmailCampaignWithHttpInfo
     *
     * Insert email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailCampaignWithHttpInfo($storefront_oid, $email_campaign)
    {
        return $this->insertEmailCampaignWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign);
    }


    /**
     * Operation insertEmailCampaignWithHttpInfoRetry
     *
     * Insert email campaign
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailCampaignWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignResponse';
        $request = $this->insertEmailCampaignRequest($storefront_oid, $email_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailCampaignWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailCampaignAsync
     *
     * Insert email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailCampaignAsync($storefront_oid, $email_campaign)
    {
        return $this->insertEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailCampaignAsyncWithHttpInfo
     *
     * Insert email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignResponse';
        $request = $this->insertEmailCampaignRequest($storefront_oid, $email_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailCampaign'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailCampaignRequest($storefront_oid, $email_campaign)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailCampaign'
            );
        }
        // verify the required parameter 'email_campaign' is set
        if ($email_campaign === null || (is_array($email_campaign) && count($email_campaign) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign when calling insertEmailCampaign'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_campaign)) {
            $_tempBody = $email_campaign;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailCampaignFolder
     *
     * Insert email campaign folder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignFolderResponse
     */
    public function insertEmailCampaignFolder($storefront_oid, $email_campaign_folder)
    {
        list($response) = $this->insertEmailCampaignFolderWithHttpInfo($storefront_oid, $email_campaign_folder);
        return $response;
    }


    /**
     * Operation insertEmailCampaignFolderWithHttpInfo
     *
     * Insert email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailCampaignFolderWithHttpInfo($storefront_oid, $email_campaign_folder)
    {
        return $this->insertEmailCampaignFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign_folder);
    }


    /**
     * Operation insertEmailCampaignFolderWithHttpInfoRetry
     *
     * Insert email campaign folder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailCampaignFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign_folder)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignFolderResponse';
        $request = $this->insertEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailCampaignFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign_folder);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailCampaignFolderAsync
     *
     * Insert email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailCampaignFolderAsync($storefront_oid, $email_campaign_folder)
    {
        return $this->insertEmailCampaignFolderAsyncWithHttpInfo($storefront_oid, $email_campaign_folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailCampaignFolderAsyncWithHttpInfo
     *
     * Insert email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailCampaignFolderAsyncWithHttpInfo($storefront_oid, $email_campaign_folder)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignFolderResponse';
        $request = $this->insertEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailCampaignFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailCampaignFolder'
            );
        }
        // verify the required parameter 'email_campaign_folder' is set
        if ($email_campaign_folder === null || (is_array($email_campaign_folder) && count($email_campaign_folder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_folder when calling insertEmailCampaignFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaign_folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_campaign_folder)) {
            $_tempBody = $email_campaign_folder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailCommseq
     *
     * Insert email commseq
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqResponse
     */
    public function insertEmailCommseq($storefront_oid, $email_commseq)
    {
        list($response) = $this->insertEmailCommseqWithHttpInfo($storefront_oid, $email_commseq);
        return $response;
    }


    /**
     * Operation insertEmailCommseqWithHttpInfo
     *
     * Insert email commseq
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailCommseqWithHttpInfo($storefront_oid, $email_commseq)
    {
        return $this->insertEmailCommseqWithHttpInfoRetry(true ,   $storefront_oid,   $email_commseq);
    }


    /**
     * Operation insertEmailCommseqWithHttpInfoRetry
     *
     * Insert email commseq
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailCommseqWithHttpInfoRetry($retry ,  $storefront_oid,  $email_commseq)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqResponse';
        $request = $this->insertEmailCommseqRequest($storefront_oid, $email_commseq);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailCommseqWithHttpInfoRetry(false ,   $storefront_oid,   $email_commseq);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailCommseqAsync
     *
     * Insert email commseq
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailCommseqAsync($storefront_oid, $email_commseq)
    {
        return $this->insertEmailCommseqAsyncWithHttpInfo($storefront_oid, $email_commseq)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailCommseqAsyncWithHttpInfo
     *
     * Insert email commseq
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailCommseqAsyncWithHttpInfo($storefront_oid, $email_commseq)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqResponse';
        $request = $this->insertEmailCommseqRequest($storefront_oid, $email_commseq);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailCommseq'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailCommseqRequest($storefront_oid, $email_commseq)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailCommseq'
            );
        }
        // verify the required parameter 'email_commseq' is set
        if ($email_commseq === null || (is_array($email_commseq) && count($email_commseq) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq when calling insertEmailCommseq'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq)) {
            $_tempBody = $email_commseq;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailEmail
     *
     * Insert email email
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email email (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqEmailResponse
     */
    public function insertEmailEmail($storefront_oid, $email_commseq_email)
    {
        list($response) = $this->insertEmailEmailWithHttpInfo($storefront_oid, $email_commseq_email);
        return $response;
    }


    /**
     * Operation insertEmailEmailWithHttpInfo
     *
     * Insert email email
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email email (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailEmailWithHttpInfo($storefront_oid, $email_commseq_email)
    {
        return $this->insertEmailEmailWithHttpInfoRetry(true ,   $storefront_oid,   $email_commseq_email);
    }


    /**
     * Operation insertEmailEmailWithHttpInfoRetry
     *
     * Insert email email
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email email (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailEmailWithHttpInfoRetry($retry ,  $storefront_oid,  $email_commseq_email)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailResponse';
        $request = $this->insertEmailEmailRequest($storefront_oid, $email_commseq_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailEmailWithHttpInfoRetry(false ,   $storefront_oid,   $email_commseq_email);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailEmailAsync
     *
     * Insert email email
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailEmailAsync($storefront_oid, $email_commseq_email)
    {
        return $this->insertEmailEmailAsyncWithHttpInfo($storefront_oid, $email_commseq_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailEmailAsyncWithHttpInfo
     *
     * Insert email email
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailEmailAsyncWithHttpInfo($storefront_oid, $email_commseq_email)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailResponse';
        $request = $this->insertEmailEmailRequest($storefront_oid, $email_commseq_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailEmail'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailEmailRequest($storefront_oid, $email_commseq_email)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailEmail'
            );
        }
        // verify the required parameter 'email_commseq_email' is set
        if ($email_commseq_email === null || (is_array($email_commseq_email) && count($email_commseq_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_email when calling insertEmailEmail'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_email)) {
            $_tempBody = $email_commseq_email;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailFlow
     *
     * Insert email flow
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowResponse
     */
    public function insertEmailFlow($storefront_oid, $email_flow)
    {
        list($response) = $this->insertEmailFlowWithHttpInfo($storefront_oid, $email_flow);
        return $response;
    }


    /**
     * Operation insertEmailFlowWithHttpInfo
     *
     * Insert email flow
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailFlowWithHttpInfo($storefront_oid, $email_flow)
    {
        return $this->insertEmailFlowWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow);
    }


    /**
     * Operation insertEmailFlowWithHttpInfoRetry
     *
     * Insert email flow
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailFlowWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow)
    {
        $returnType = '\ultracart\v2\models\EmailFlowResponse';
        $request = $this->insertEmailFlowRequest($storefront_oid, $email_flow);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailFlowWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailFlowAsync
     *
     * Insert email flow
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailFlowAsync($storefront_oid, $email_flow)
    {
        return $this->insertEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailFlowAsyncWithHttpInfo
     *
     * Insert email flow
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow)
    {
        $returnType = '\ultracart\v2\models\EmailFlowResponse';
        $request = $this->insertEmailFlowRequest($storefront_oid, $email_flow);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailFlow'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailFlowRequest($storefront_oid, $email_flow)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailFlow'
            );
        }
        // verify the required parameter 'email_flow' is set
        if ($email_flow === null || (is_array($email_flow) && count($email_flow) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow when calling insertEmailFlow'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_flow)) {
            $_tempBody = $email_flow;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailFlowFolder
     *
     * Insert email flow folder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowFolderResponse
     */
    public function insertEmailFlowFolder($storefront_oid, $email_flow_folder)
    {
        list($response) = $this->insertEmailFlowFolderWithHttpInfo($storefront_oid, $email_flow_folder);
        return $response;
    }


    /**
     * Operation insertEmailFlowFolderWithHttpInfo
     *
     * Insert email flow folder
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailFlowFolderWithHttpInfo($storefront_oid, $email_flow_folder)
    {
        return $this->insertEmailFlowFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow_folder);
    }


    /**
     * Operation insertEmailFlowFolderWithHttpInfoRetry
     *
     * Insert email flow folder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailFlowFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow_folder)
    {
        $returnType = '\ultracart\v2\models\EmailFlowFolderResponse';
        $request = $this->insertEmailFlowFolderRequest($storefront_oid, $email_flow_folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailFlowFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow_folder);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailFlowFolderAsync
     *
     * Insert email flow folder
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailFlowFolderAsync($storefront_oid, $email_flow_folder)
    {
        return $this->insertEmailFlowFolderAsyncWithHttpInfo($storefront_oid, $email_flow_folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailFlowFolderAsyncWithHttpInfo
     *
     * Insert email flow folder
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailFlowFolderAsyncWithHttpInfo($storefront_oid, $email_flow_folder)
    {
        $returnType = '\ultracart\v2\models\EmailFlowFolderResponse';
        $request = $this->insertEmailFlowFolderRequest($storefront_oid, $email_flow_folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailFlowFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailFlowFolderRequest($storefront_oid, $email_flow_folder)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailFlowFolder'
            );
        }
        // verify the required parameter 'email_flow_folder' is set
        if ($email_flow_folder === null || (is_array($email_flow_folder) && count($email_flow_folder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_folder when calling insertEmailFlowFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flow_folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_flow_folder)) {
            $_tempBody = $email_flow_folder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailList
     *
     * Insert email list
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListResponse
     */
    public function insertEmailList($storefront_oid, $email_list)
    {
        list($response) = $this->insertEmailListWithHttpInfo($storefront_oid, $email_list);
        return $response;
    }


    /**
     * Operation insertEmailListWithHttpInfo
     *
     * Insert email list
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailListWithHttpInfo($storefront_oid, $email_list)
    {
        return $this->insertEmailListWithHttpInfoRetry(true ,   $storefront_oid,   $email_list);
    }


    /**
     * Operation insertEmailListWithHttpInfoRetry
     *
     * Insert email list
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailListWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list)
    {
        $returnType = '\ultracart\v2\models\EmailListResponse';
        $request = $this->insertEmailListRequest($storefront_oid, $email_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailListWithHttpInfoRetry(false ,   $storefront_oid,   $email_list);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailListAsync
     *
     * Insert email list
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailListAsync($storefront_oid, $email_list)
    {
        return $this->insertEmailListAsyncWithHttpInfo($storefront_oid, $email_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailListAsyncWithHttpInfo
     *
     * Insert email list
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailListAsyncWithHttpInfo($storefront_oid, $email_list)
    {
        $returnType = '\ultracart\v2\models\EmailListResponse';
        $request = $this->insertEmailListRequest($storefront_oid, $email_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailList'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailListRequest($storefront_oid, $email_list)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailList'
            );
        }
        // verify the required parameter 'email_list' is set
        if ($email_list === null || (is_array($email_list) && count($email_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list when calling insertEmailList'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_list)) {
            $_tempBody = $email_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailListSegmentFolder
     *
     * Insert email campaign folder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListSegmentFolderResponse
     */
    public function insertEmailListSegmentFolder($storefront_oid, $email_list_segment_folder)
    {
        list($response) = $this->insertEmailListSegmentFolderWithHttpInfo($storefront_oid, $email_list_segment_folder);
        return $response;
    }


    /**
     * Operation insertEmailListSegmentFolderWithHttpInfo
     *
     * Insert email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSegmentFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailListSegmentFolderWithHttpInfo($storefront_oid, $email_list_segment_folder)
    {
        return $this->insertEmailListSegmentFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_segment_folder);
    }


    /**
     * Operation insertEmailListSegmentFolderWithHttpInfoRetry
     *
     * Insert email campaign folder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSegmentFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailListSegmentFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_segment_folder)
    {
        $returnType = '\ultracart\v2\models\EmailListSegmentFolderResponse';
        $request = $this->insertEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailListSegmentFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_segment_folder);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListSegmentFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailListSegmentFolderAsync
     *
     * Insert email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailListSegmentFolderAsync($storefront_oid, $email_list_segment_folder)
    {
        return $this->insertEmailListSegmentFolderAsyncWithHttpInfo($storefront_oid, $email_list_segment_folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailListSegmentFolderAsyncWithHttpInfo
     *
     * Insert email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailListSegmentFolderAsyncWithHttpInfo($storefront_oid, $email_list_segment_folder)
    {
        $returnType = '\ultracart\v2\models\EmailListSegmentFolderResponse';
        $request = $this->insertEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailListSegmentFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailListSegmentFolder'
            );
        }
        // verify the required parameter 'email_list_segment_folder' is set
        if ($email_list_segment_folder === null || (is_array($email_list_segment_folder) && count($email_list_segment_folder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_segment_folder when calling insertEmailListSegmentFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/list_segment_folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_list_segment_folder)) {
            $_tempBody = $email_list_segment_folder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailPostcard
     *
     * Insert email postcard
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email postcard (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqPostcardResponse
     */
    public function insertEmailPostcard($storefront_oid, $email_commseq_postcard)
    {
        list($response) = $this->insertEmailPostcardWithHttpInfo($storefront_oid, $email_commseq_postcard);
        return $response;
    }


    /**
     * Operation insertEmailPostcardWithHttpInfo
     *
     * Insert email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email postcard (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailPostcardWithHttpInfo($storefront_oid, $email_commseq_postcard)
    {
        return $this->insertEmailPostcardWithHttpInfoRetry(true ,   $storefront_oid,   $email_commseq_postcard);
    }


    /**
     * Operation insertEmailPostcardWithHttpInfoRetry
     *
     * Insert email postcard
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email postcard (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailPostcardWithHttpInfoRetry($retry ,  $storefront_oid,  $email_commseq_postcard)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardResponse';
        $request = $this->insertEmailPostcardRequest($storefront_oid, $email_commseq_postcard);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailPostcardWithHttpInfoRetry(false ,   $storefront_oid,   $email_commseq_postcard);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqPostcardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailPostcardAsync
     *
     * Insert email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email postcard (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailPostcardAsync($storefront_oid, $email_commseq_postcard)
    {
        return $this->insertEmailPostcardAsyncWithHttpInfo($storefront_oid, $email_commseq_postcard)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailPostcardAsyncWithHttpInfo
     *
     * Insert email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email postcard (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailPostcardAsyncWithHttpInfo($storefront_oid, $email_commseq_postcard)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardResponse';
        $request = $this->insertEmailPostcardRequest($storefront_oid, $email_commseq_postcard);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailPostcard'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email postcard (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailPostcardRequest($storefront_oid, $email_commseq_postcard)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailPostcard'
            );
        }
        // verify the required parameter 'email_commseq_postcard' is set
        if ($email_commseq_postcard === null || (is_array($email_commseq_postcard) && count($email_commseq_postcard) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_postcard when calling insertEmailPostcard'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/postcards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_postcard)) {
            $_tempBody = $email_commseq_postcard;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertEmailSegment
     *
     * Insert email segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSegmentResponse
     */
    public function insertEmailSegment($storefront_oid, $email_segment)
    {
        list($response) = $this->insertEmailSegmentWithHttpInfo($storefront_oid, $email_segment);
        return $response;
    }


    /**
     * Operation insertEmailSegmentWithHttpInfo
     *
     * Insert email segment
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailSegmentWithHttpInfo($storefront_oid, $email_segment)
    {
        return $this->insertEmailSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $email_segment);
    }


    /**
     * Operation insertEmailSegmentWithHttpInfoRetry
     *
     * Insert email segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertEmailSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $email_segment)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentResponse';
        $request = $this->insertEmailSegmentRequest($storefront_oid, $email_segment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertEmailSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $email_segment);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSegmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertEmailSegmentAsync
     *
     * Insert email segment
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailSegmentAsync($storefront_oid, $email_segment)
    {
        return $this->insertEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertEmailSegmentAsyncWithHttpInfo
     *
     * Insert email segment
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentResponse';
        $request = $this->insertEmailSegmentRequest($storefront_oid, $email_segment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertEmailSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertEmailSegmentRequest($storefront_oid, $email_segment)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertEmailSegment'
            );
        }
        // verify the required parameter 'email_segment' is set
        if ($email_segment === null || (is_array($email_segment) && count($email_segment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment when calling insertEmailSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_segment)) {
            $_tempBody = $email_segment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertScreenRecordingSegment
     *
     * Insert screen recording segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingSegmentResponse
     */
    public function insertScreenRecordingSegment($storefront_oid, $segment)
    {
        list($response) = $this->insertScreenRecordingSegmentWithHttpInfo($storefront_oid, $segment);
        return $response;
    }


    /**
     * Operation insertScreenRecordingSegmentWithHttpInfo
     *
     * Insert screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertScreenRecordingSegmentWithHttpInfo($storefront_oid, $segment)
    {
        return $this->insertScreenRecordingSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $segment);
    }


    /**
     * Operation insertScreenRecordingSegmentWithHttpInfoRetry
     *
     * Insert screen recording segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertScreenRecordingSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $segment)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSegmentResponse';
        $request = $this->insertScreenRecordingSegmentRequest($storefront_oid, $segment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertScreenRecordingSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $segment);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingSegmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertScreenRecordingSegmentAsync
     *
     * Insert screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertScreenRecordingSegmentAsync($storefront_oid, $segment)
    {
        return $this->insertScreenRecordingSegmentAsyncWithHttpInfo($storefront_oid, $segment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertScreenRecordingSegmentAsyncWithHttpInfo
     *
     * Insert screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertScreenRecordingSegmentAsyncWithHttpInfo($storefront_oid, $segment)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSegmentResponse';
        $request = $this->insertScreenRecordingSegmentRequest($storefront_oid, $segment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertScreenRecordingSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertScreenRecordingSegmentRequest($storefront_oid, $segment)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling insertScreenRecordingSegment'
            );
        }
        // verify the required parameter 'segment' is set
        if ($segment === null || (is_array($segment) && count($segment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment when calling insertScreenRecordingSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/segments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($segment)) {
            $_tempBody = $segment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation prepareDownloadEmailSegment
     *
     * Prepare download of email segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_segment_uuid email_segment_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSegmentDownloadPrepareResponse
     */
    public function prepareDownloadEmailSegment($storefront_oid, $email_segment_uuid)
    {
        list($response) = $this->prepareDownloadEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid);
        return $response;
    }


    /**
     * Operation prepareDownloadEmailSegmentWithHttpInfo
     *
     * Prepare download of email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentDownloadPrepareResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function prepareDownloadEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid)
    {
        return $this->prepareDownloadEmailSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $email_segment_uuid);
    }


    /**
     * Operation prepareDownloadEmailSegmentWithHttpInfoRetry
     *
     * Prepare download of email segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentDownloadPrepareResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function prepareDownloadEmailSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $email_segment_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentDownloadPrepareResponse';
        $request = $this->prepareDownloadEmailSegmentRequest($storefront_oid, $email_segment_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->prepareDownloadEmailSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $email_segment_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSegmentDownloadPrepareResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation prepareDownloadEmailSegmentAsync
     *
     * Prepare download of email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prepareDownloadEmailSegmentAsync($storefront_oid, $email_segment_uuid)
    {
        return $this->prepareDownloadEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation prepareDownloadEmailSegmentAsyncWithHttpInfo
     *
     * Prepare download of email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function prepareDownloadEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentDownloadPrepareResponse';
        $request = $this->prepareDownloadEmailSegmentRequest($storefront_oid, $email_segment_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'prepareDownloadEmailSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function prepareDownloadEmailSegmentRequest($storefront_oid, $email_segment_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling prepareDownloadEmailSegment'
            );
        }
        // verify the required parameter 'email_segment_uuid' is set
        if ($email_segment_uuid === null || (is_array($email_segment_uuid) && count($email_segment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment_uuid when calling prepareDownloadEmailSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_segment_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_segment_uuid' . '}',
                ObjectSerializer::toPathValue($email_segment_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publishLibraryItem
     *
     * Publish library item.
     *
     * @param  int $library_item_oid library_item_oid (required)
     * @param  \ultracart\v2\models\PublishLibraryItemRequest $publish_library_request Publish library item request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemResponse
     */
    public function publishLibraryItem($library_item_oid, $publish_library_request)
    {
        list($response) = $this->publishLibraryItemWithHttpInfo($library_item_oid, $publish_library_request);
        return $response;
    }


    /**
     * Operation publishLibraryItemWithHttpInfo
     *
     * Publish library item.
     *
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\PublishLibraryItemRequest $publish_library_request Publish library item request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function publishLibraryItemWithHttpInfo($library_item_oid, $publish_library_request)
    {
        return $this->publishLibraryItemWithHttpInfoRetry(true ,   $library_item_oid,   $publish_library_request);
    }


    /**
     * Operation publishLibraryItemWithHttpInfoRetry
     *
     * Publish library item.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\PublishLibraryItemRequest $publish_library_request Publish library item request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function publishLibraryItemWithHttpInfoRetry($retry ,  $library_item_oid,  $publish_library_request)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->publishLibraryItemRequest($library_item_oid, $publish_library_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->publishLibraryItemWithHttpInfoRetry(false ,   $library_item_oid,   $publish_library_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publishLibraryItemAsync
     *
     * Publish library item.
     *
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\PublishLibraryItemRequest $publish_library_request Publish library item request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishLibraryItemAsync($library_item_oid, $publish_library_request)
    {
        return $this->publishLibraryItemAsyncWithHttpInfo($library_item_oid, $publish_library_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publishLibraryItemAsyncWithHttpInfo
     *
     * Publish library item.
     *
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\PublishLibraryItemRequest $publish_library_request Publish library item request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishLibraryItemAsyncWithHttpInfo($library_item_oid, $publish_library_request)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->publishLibraryItemRequest($library_item_oid, $publish_library_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publishLibraryItem'
     *
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\PublishLibraryItemRequest $publish_library_request Publish library item request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publishLibraryItemRequest($library_item_oid, $publish_library_request)
    {
        // verify the required parameter 'library_item_oid' is set
        if ($library_item_oid === null || (is_array($library_item_oid) && count($library_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $library_item_oid when calling publishLibraryItem'
            );
        }
        // verify the required parameter 'publish_library_request' is set
        if ($publish_library_request === null || (is_array($publish_library_request) && count($publish_library_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publish_library_request when calling publishLibraryItem'
            );
        }

        $resourcePath = '/storefront/code_library/{library_item_oid}/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($library_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'library_item_oid' . '}',
                ObjectSerializer::toPathValue($library_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($publish_library_request)) {
            $_tempBody = $publish_library_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseLibraryItem
     *
     * Purchase public library item, which creates a copy of the item in your personal code library
     *
     * @param  int $library_item_oid library_item_oid (required)
     * @param  int $storefront_oid storefront_oid (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemResponse
     */
    public function purchaseLibraryItem($library_item_oid, $storefront_oid = null)
    {
        list($response) = $this->purchaseLibraryItemWithHttpInfo($library_item_oid, $storefront_oid);
        return $response;
    }


    /**
     * Operation purchaseLibraryItemWithHttpInfo
     *
     * Purchase public library item, which creates a copy of the item in your personal code library
     *
     * @param  int $library_item_oid (required)
     * @param  int $storefront_oid (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseLibraryItemWithHttpInfo($library_item_oid, $storefront_oid = null)
    {
        return $this->purchaseLibraryItemWithHttpInfoRetry(true ,   $library_item_oid,   $storefront_oid);
    }


    /**
     * Operation purchaseLibraryItemWithHttpInfoRetry
     *
     * Purchase public library item, which creates a copy of the item in your personal code library
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $library_item_oid (required)
     * @param  int $storefront_oid (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseLibraryItemWithHttpInfoRetry($retry ,  $library_item_oid,  $storefront_oid = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->purchaseLibraryItemRequest($library_item_oid, $storefront_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->purchaseLibraryItemWithHttpInfoRetry(false ,   $library_item_oid,   $storefront_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseLibraryItemAsync
     *
     * Purchase public library item, which creates a copy of the item in your personal code library
     *
     * @param  int $library_item_oid (required)
     * @param  int $storefront_oid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseLibraryItemAsync($library_item_oid, $storefront_oid = null)
    {
        return $this->purchaseLibraryItemAsyncWithHttpInfo($library_item_oid, $storefront_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseLibraryItemAsyncWithHttpInfo
     *
     * Purchase public library item, which creates a copy of the item in your personal code library
     *
     * @param  int $library_item_oid (required)
     * @param  int $storefront_oid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseLibraryItemAsyncWithHttpInfo($library_item_oid, $storefront_oid = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->purchaseLibraryItemRequest($library_item_oid, $storefront_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseLibraryItem'
     *
     * @param  int $library_item_oid (required)
     * @param  int $storefront_oid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseLibraryItemRequest($library_item_oid, $storefront_oid = null)
    {
        // verify the required parameter 'library_item_oid' is set
        if ($library_item_oid === null || (is_array($library_item_oid) && count($library_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $library_item_oid when calling purchaseLibraryItem'
            );
        }

        $resourcePath = '/storefront/code_library/{library_item_oid}/purchase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($storefront_oid !== null) {
            $queryParams['storefront_oid'] = ObjectSerializer::toQueryValue($storefront_oid);
        }

        // path params
        if ($library_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'library_item_oid' . '}',
                ObjectSerializer::toPathValue($library_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation releaseEmailCommseqStepWaiting
     *
     * Release email communication sequence customers waiting at the specified step
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  string $commseq_step_uuid commseq_step_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function releaseEmailCommseqStepWaiting($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        $this->releaseEmailCommseqStepWaitingWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid);
    }


    /**
     * Operation releaseEmailCommseqStepWaitingWithHttpInfo
     *
     * Release email communication sequence customers waiting at the specified step
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function releaseEmailCommseqStepWaitingWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        $this->releaseEmailCommseqStepWaitingWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $commseq_step_uuid);
    }


    /**
     * Operation releaseEmailCommseqStepWaitingWithHttpInfoRetry
     *
     * Release email communication sequence customers waiting at the specified step
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function releaseEmailCommseqStepWaitingWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $commseq_step_uuid)
    {
        $returnType = '';
        $request = $this->releaseEmailCommseqStepWaitingRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->releaseEmailCommseqStepWaitingWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $commseq_step_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation releaseEmailCommseqStepWaitingAsync
     *
     * Release email communication sequence customers waiting at the specified step
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseEmailCommseqStepWaitingAsync($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        return $this->releaseEmailCommseqStepWaitingAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation releaseEmailCommseqStepWaitingAsyncWithHttpInfo
     *
     * Release email communication sequence customers waiting at the specified step
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseEmailCommseqStepWaitingAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        $returnType = '';
        $request = $this->releaseEmailCommseqStepWaitingRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'releaseEmailCommseqStepWaiting'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  string $commseq_step_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function releaseEmailCommseqStepWaitingRequest($storefront_oid, $commseq_uuid, $commseq_step_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling releaseEmailCommseqStepWaiting'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling releaseEmailCommseqStepWaiting'
            );
        }
        // verify the required parameter 'commseq_step_uuid' is set
        if ($commseq_step_uuid === null || (is_array($commseq_step_uuid) && count($commseq_step_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_step_uuid when calling releaseEmailCommseqStepWaiting'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_step_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_step_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_step_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation review
     *
     * Request a review of an email
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_email_uuid commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_review_request Email commseq email review request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqEmailSendTestResponse
     */
    public function review($storefront_oid, $commseq_email_uuid, $email_commseq_email_review_request)
    {
        list($response) = $this->reviewWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email_review_request);
        return $response;
    }


    /**
     * Operation reviewWithHttpInfo
     *
     * Request a review of an email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_review_request Email commseq email review request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailSendTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email_review_request)
    {
        return $this->reviewWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_email_uuid,   $email_commseq_email_review_request);
    }


    /**
     * Operation reviewWithHttpInfoRetry
     *
     * Request a review of an email
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_review_request Email commseq email review request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailSendTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_email_uuid,  $email_commseq_email_review_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailSendTestResponse';
        $request = $this->reviewRequest($storefront_oid, $commseq_email_uuid, $email_commseq_email_review_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->reviewWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_email_uuid,   $email_commseq_email_review_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqEmailSendTestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewAsync
     *
     * Request a review of an email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_review_request Email commseq email review request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewAsync($storefront_oid, $commseq_email_uuid, $email_commseq_email_review_request)
    {
        return $this->reviewAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email_review_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewAsyncWithHttpInfo
     *
     * Request a review of an email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_review_request Email commseq email review request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reviewAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email_review_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailSendTestResponse';
        $request = $this->reviewRequest($storefront_oid, $commseq_email_uuid, $email_commseq_email_review_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'review'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_review_request Email commseq email review request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reviewRequest($storefront_oid, $commseq_email_uuid, $email_commseq_email_review_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling review'
            );
        }
        // verify the required parameter 'commseq_email_uuid' is set
        if ($commseq_email_uuid === null || (is_array($commseq_email_uuid) && count($commseq_email_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_email_uuid when calling review'
            );
        }
        // verify the required parameter 'email_commseq_email_review_request' is set
        if ($email_commseq_email_review_request === null || (is_array($email_commseq_email_review_request) && count($email_commseq_email_review_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_email_review_request when calling review'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_email_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_email_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_email_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_email_review_request)) {
            $_tempBody = $email_commseq_email_review_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation search
     *
     * Searches for all matching values
     *
     * @param  string $category category (optional)
     * @param  string $matches matches (optional)
     * @param  string $storefront_oid storefront_oid (optional)
     * @param  int $max_hits max_hits (optional)
     * @param  string $subcategory subcategory (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LookupResponse
     */
    public function search($category = null, $matches = null, $storefront_oid = null, $max_hits = null, $subcategory = null)
    {
        list($response) = $this->searchWithHttpInfo($category, $matches, $storefront_oid, $max_hits, $subcategory);
        return $response;
    }


    /**
     * Operation searchWithHttpInfo
     *
     * Searches for all matching values
     *
     * @param  string $category (optional)
     * @param  string $matches (optional)
     * @param  string $storefront_oid (optional)
     * @param  int $max_hits (optional)
     * @param  string $subcategory (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LookupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWithHttpInfo($category = null, $matches = null, $storefront_oid = null, $max_hits = null, $subcategory = null)
    {
        return $this->searchWithHttpInfoRetry(true ,   $category,   $matches,   $storefront_oid,   $max_hits,   $subcategory);
    }


    /**
     * Operation searchWithHttpInfoRetry
     *
     * Searches for all matching values
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $category (optional)
     * @param  string $matches (optional)
     * @param  string $storefront_oid (optional)
     * @param  int $max_hits (optional)
     * @param  string $subcategory (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LookupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWithHttpInfoRetry($retry ,  $category = null,  $matches = null,  $storefront_oid = null,  $max_hits = null,  $subcategory = null)
    {
        $returnType = '\ultracart\v2\models\LookupResponse';
        $request = $this->searchRequest($category, $matches, $storefront_oid, $max_hits, $subcategory);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->searchWithHttpInfoRetry(false ,   $category,   $matches,   $storefront_oid,   $max_hits,   $subcategory);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LookupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAsync
     *
     * Searches for all matching values
     *
     * @param  string $category (optional)
     * @param  string $matches (optional)
     * @param  string $storefront_oid (optional)
     * @param  int $max_hits (optional)
     * @param  string $subcategory (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsync($category = null, $matches = null, $storefront_oid = null, $max_hits = null, $subcategory = null)
    {
        return $this->searchAsyncWithHttpInfo($category, $matches, $storefront_oid, $max_hits, $subcategory)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAsyncWithHttpInfo
     *
     * Searches for all matching values
     *
     * @param  string $category (optional)
     * @param  string $matches (optional)
     * @param  string $storefront_oid (optional)
     * @param  int $max_hits (optional)
     * @param  string $subcategory (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsyncWithHttpInfo($category = null, $matches = null, $storefront_oid = null, $max_hits = null, $subcategory = null)
    {
        $returnType = '\ultracart\v2\models\LookupResponse';
        $request = $this->searchRequest($category, $matches, $storefront_oid, $max_hits, $subcategory);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'search'
     *
     * @param  string $category (optional)
     * @param  string $matches (optional)
     * @param  string $storefront_oid (optional)
     * @param  int $max_hits (optional)
     * @param  string $subcategory (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchRequest($category = null, $matches = null, $storefront_oid = null, $max_hits = null, $subcategory = null)
    {

        $resourcePath = '/storefront/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }
        // query params
        if ($matches !== null) {
            $queryParams['matches'] = ObjectSerializer::toQueryValue($matches);
        }
        // query params
        if ($storefront_oid !== null) {
            $queryParams['storefront_oid'] = ObjectSerializer::toQueryValue($storefront_oid);
        }
        // query params
        if ($max_hits !== null) {
            $queryParams['max_hits'] = ObjectSerializer::toQueryValue($max_hits);
        }
        // query params
        if ($subcategory !== null) {
            $queryParams['subcategory'] = ObjectSerializer::toQueryValue($subcategory);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation search2
     *
     * Searches for all matching values (using POST)
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LookupResponse
     */
    public function search2($lookup_request)
    {
        list($response) = $this->search2WithHttpInfo($lookup_request);
        return $response;
    }


    /**
     * Operation search2WithHttpInfo
     *
     * Searches for all matching values (using POST)
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LookupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function search2WithHttpInfo($lookup_request)
    {
        return $this->search2WithHttpInfoRetry(true ,   $lookup_request);
    }


    /**
     * Operation search2WithHttpInfoRetry
     *
     * Searches for all matching values (using POST)
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LookupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function search2WithHttpInfoRetry($retry ,  $lookup_request)
    {
        $returnType = '\ultracart\v2\models\LookupResponse';
        $request = $this->search2Request($lookup_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->search2WithHttpInfoRetry(false ,   $lookup_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LookupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation search2Async
     *
     * Searches for all matching values (using POST)
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function search2Async($lookup_request)
    {
        return $this->search2AsyncWithHttpInfo($lookup_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation search2AsyncWithHttpInfo
     *
     * Searches for all matching values (using POST)
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function search2AsyncWithHttpInfo($lookup_request)
    {
        $returnType = '\ultracart\v2\models\LookupResponse';
        $request = $this->search2Request($lookup_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'search2'
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function search2Request($lookup_request)
    {
        // verify the required parameter 'lookup_request' is set
        if ($lookup_request === null || (is_array($lookup_request) && count($lookup_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lookup_request when calling search2'
            );
        }

        $resourcePath = '/storefront/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($lookup_request)) {
            $_tempBody = $lookup_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchEmailListCustomers
     *
     * Search email list customers
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_uuid email_list_uuid (required)
     * @param  string $starts_with starts_with (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListCustomersResponse
     */
    public function searchEmailListCustomers($storefront_oid, $email_list_uuid, $starts_with = null)
    {
        list($response) = $this->searchEmailListCustomersWithHttpInfo($storefront_oid, $email_list_uuid, $starts_with);
        return $response;
    }


    /**
     * Operation searchEmailListCustomersWithHttpInfo
     *
     * Search email list customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchEmailListCustomersWithHttpInfo($storefront_oid, $email_list_uuid, $starts_with = null)
    {
        return $this->searchEmailListCustomersWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_uuid,   $starts_with);
    }


    /**
     * Operation searchEmailListCustomersWithHttpInfoRetry
     *
     * Search email list customers
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchEmailListCustomersWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_uuid,  $starts_with = null)
    {
        $returnType = '\ultracart\v2\models\EmailListCustomersResponse';
        $request = $this->searchEmailListCustomersRequest($storefront_oid, $email_list_uuid, $starts_with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->searchEmailListCustomersWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_uuid,   $starts_with);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListCustomersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchEmailListCustomersAsync
     *
     * Search email list customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchEmailListCustomersAsync($storefront_oid, $email_list_uuid, $starts_with = null)
    {
        return $this->searchEmailListCustomersAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $starts_with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchEmailListCustomersAsyncWithHttpInfo
     *
     * Search email list customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchEmailListCustomersAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $starts_with = null)
    {
        $returnType = '\ultracart\v2\models\EmailListCustomersResponse';
        $request = $this->searchEmailListCustomersRequest($storefront_oid, $email_list_uuid, $starts_with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchEmailListCustomers'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchEmailListCustomersRequest($storefront_oid, $email_list_uuid, $starts_with = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling searchEmailListCustomers'
            );
        }
        // verify the required parameter 'email_list_uuid' is set
        if ($email_list_uuid === null || (is_array($email_list_uuid) && count($email_list_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_uuid when calling searchEmailListCustomers'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($starts_with !== null) {
            $queryParams['startsWith'] = ObjectSerializer::toQueryValue($starts_with);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchEmailSegmentCustomers
     *
     * Search email segment customers
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_segment_uuid email_segment_uuid (required)
     * @param  string $starts_with starts_with (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSegmentCustomersResponse
     */
    public function searchEmailSegmentCustomers($storefront_oid, $email_segment_uuid, $starts_with = null)
    {
        list($response) = $this->searchEmailSegmentCustomersWithHttpInfo($storefront_oid, $email_segment_uuid, $starts_with);
        return $response;
    }


    /**
     * Operation searchEmailSegmentCustomersWithHttpInfo
     *
     * Search email segment customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchEmailSegmentCustomersWithHttpInfo($storefront_oid, $email_segment_uuid, $starts_with = null)
    {
        return $this->searchEmailSegmentCustomersWithHttpInfoRetry(true ,   $storefront_oid,   $email_segment_uuid,   $starts_with);
    }


    /**
     * Operation searchEmailSegmentCustomersWithHttpInfoRetry
     *
     * Search email segment customers
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentCustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchEmailSegmentCustomersWithHttpInfoRetry($retry ,  $storefront_oid,  $email_segment_uuid,  $starts_with = null)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentCustomersResponse';
        $request = $this->searchEmailSegmentCustomersRequest($storefront_oid, $email_segment_uuid, $starts_with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->searchEmailSegmentCustomersWithHttpInfoRetry(false ,   $storefront_oid,   $email_segment_uuid,   $starts_with);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSegmentCustomersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchEmailSegmentCustomersAsync
     *
     * Search email segment customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchEmailSegmentCustomersAsync($storefront_oid, $email_segment_uuid, $starts_with = null)
    {
        return $this->searchEmailSegmentCustomersAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $starts_with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchEmailSegmentCustomersAsyncWithHttpInfo
     *
     * Search email segment customers
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchEmailSegmentCustomersAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $starts_with = null)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentCustomersResponse';
        $request = $this->searchEmailSegmentCustomersRequest($storefront_oid, $email_segment_uuid, $starts_with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchEmailSegmentCustomers'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  string $starts_with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchEmailSegmentCustomersRequest($storefront_oid, $email_segment_uuid, $starts_with = null)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling searchEmailSegmentCustomers'
            );
        }
        // verify the required parameter 'email_segment_uuid' is set
        if ($email_segment_uuid === null || (is_array($email_segment_uuid) && count($email_segment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment_uuid when calling searchEmailSegmentCustomers'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($starts_with !== null) {
            $queryParams['startsWith'] = ObjectSerializer::toQueryValue($starts_with);
        }

        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_segment_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_segment_uuid' . '}',
                ObjectSerializer::toPathValue($email_segment_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchLibraryItems
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemsResponse
     */
    public function searchLibraryItems($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        list($response) = $this->searchLibraryItemsWithHttpInfo($item_query, $_limit, $_offset, $_sort);
        return $response;
    }


    /**
     * Operation searchLibraryItemsWithHttpInfo
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchLibraryItemsWithHttpInfo($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        return $this->searchLibraryItemsWithHttpInfoRetry(true ,   $item_query,   $_limit,   $_offset,   $_sort);
    }


    /**
     * Operation searchLibraryItemsWithHttpInfoRetry
     *
     * Retrieve library items
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchLibraryItemsWithHttpInfoRetry($retry ,  $item_query,  $_limit = '10000',  $_offset = '0',  $_sort = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->searchLibraryItemsRequest($item_query, $_limit, $_offset, $_sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->searchLibraryItemsWithHttpInfoRetry(false ,   $item_query,   $_limit,   $_offset,   $_sort);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchLibraryItemsAsync
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchLibraryItemsAsync($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        return $this->searchLibraryItemsAsyncWithHttpInfo($item_query, $_limit, $_offset, $_sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchLibraryItemsAsyncWithHttpInfo
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchLibraryItemsAsyncWithHttpInfo($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->searchLibraryItemsRequest($item_query, $_limit, $_offset, $_sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchLibraryItems'
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchLibraryItemsRequest($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        // verify the required parameter 'item_query' is set
        if ($item_query === null || (is_array($item_query) && count($item_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_query when calling searchLibraryItems'
            );
        }

        $resourcePath = '/storefront/code_library/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }


        // body params
        $_tempBody = null;
        if (isset($item_query)) {
            $_tempBody = $item_query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPublishedItems
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemsResponse
     */
    public function searchPublishedItems($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        list($response) = $this->searchPublishedItemsWithHttpInfo($item_query, $_limit, $_offset, $_sort);
        return $response;
    }


    /**
     * Operation searchPublishedItemsWithHttpInfo
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPublishedItemsWithHttpInfo($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        return $this->searchPublishedItemsWithHttpInfoRetry(true ,   $item_query,   $_limit,   $_offset,   $_sort);
    }


    /**
     * Operation searchPublishedItemsWithHttpInfoRetry
     *
     * Retrieve library items
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPublishedItemsWithHttpInfoRetry($retry ,  $item_query,  $_limit = '10000',  $_offset = '0',  $_sort = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->searchPublishedItemsRequest($item_query, $_limit, $_offset, $_sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->searchPublishedItemsWithHttpInfoRetry(false ,   $item_query,   $_limit,   $_offset,   $_sort);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPublishedItemsAsync
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPublishedItemsAsync($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        return $this->searchPublishedItemsAsyncWithHttpInfo($item_query, $_limit, $_offset, $_sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPublishedItemsAsyncWithHttpInfo
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPublishedItemsAsyncWithHttpInfo($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->searchPublishedItemsRequest($item_query, $_limit, $_offset, $_sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPublishedItems'
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchPublishedItemsRequest($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        // verify the required parameter 'item_query' is set
        if ($item_query === null || (is_array($item_query) && count($item_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_query when calling searchPublishedItems'
            );
        }

        $resourcePath = '/storefront/code_library/search_published';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }


        // body params
        $_tempBody = null;
        if (isset($item_query)) {
            $_tempBody = $item_query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchReviewItems
     *
     * Retrieve library items needing review or rejected
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemsResponse
     */
    public function searchReviewItems($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        list($response) = $this->searchReviewItemsWithHttpInfo($item_query, $_limit, $_offset, $_sort);
        return $response;
    }


    /**
     * Operation searchReviewItemsWithHttpInfo
     *
     * Retrieve library items needing review or rejected
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchReviewItemsWithHttpInfo($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        return $this->searchReviewItemsWithHttpInfoRetry(true ,   $item_query,   $_limit,   $_offset,   $_sort);
    }


    /**
     * Operation searchReviewItemsWithHttpInfoRetry
     *
     * Retrieve library items needing review or rejected
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchReviewItemsWithHttpInfoRetry($retry ,  $item_query,  $_limit = '10000',  $_offset = '0',  $_sort = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->searchReviewItemsRequest($item_query, $_limit, $_offset, $_sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->searchReviewItemsWithHttpInfoRetry(false ,   $item_query,   $_limit,   $_offset,   $_sort);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchReviewItemsAsync
     *
     * Retrieve library items needing review or rejected
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchReviewItemsAsync($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        return $this->searchReviewItemsAsyncWithHttpInfo($item_query, $_limit, $_offset, $_sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchReviewItemsAsyncWithHttpInfo
     *
     * Retrieve library items needing review or rejected
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchReviewItemsAsyncWithHttpInfo($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->searchReviewItemsRequest($item_query, $_limit, $_offset, $_sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchReviewItems'
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchReviewItemsRequest($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        // verify the required parameter 'item_query' is set
        if ($item_query === null || (is_array($item_query) && count($item_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_query when calling searchReviewItems'
            );
        }

        $resourcePath = '/storefront/code_library/search_review';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }


        // body params
        $_tempBody = null;
        if (isset($item_query)) {
            $_tempBody = $item_query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchSharedItems
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemsResponse
     */
    public function searchSharedItems($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        list($response) = $this->searchSharedItemsWithHttpInfo($item_query, $_limit, $_offset, $_sort);
        return $response;
    }


    /**
     * Operation searchSharedItemsWithHttpInfo
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSharedItemsWithHttpInfo($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        return $this->searchSharedItemsWithHttpInfoRetry(true ,   $item_query,   $_limit,   $_offset,   $_sort);
    }


    /**
     * Operation searchSharedItemsWithHttpInfoRetry
     *
     * Retrieve library items
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSharedItemsWithHttpInfoRetry($retry ,  $item_query,  $_limit = '10000',  $_offset = '0',  $_sort = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->searchSharedItemsRequest($item_query, $_limit, $_offset, $_sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->searchSharedItemsWithHttpInfoRetry(false ,   $item_query,   $_limit,   $_offset,   $_sort);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchSharedItemsAsync
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSharedItemsAsync($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        return $this->searchSharedItemsAsyncWithHttpInfo($item_query, $_limit, $_offset, $_sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchSharedItemsAsyncWithHttpInfo
     *
     * Retrieve library items
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSharedItemsAsyncWithHttpInfo($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        $returnType = '\ultracart\v2\models\LibraryItemsResponse';
        $request = $this->searchSharedItemsRequest($item_query, $_limit, $_offset, $_sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchSharedItems'
     *
     * @param  \ultracart\v2\models\LibraryItemQuery $item_query Item query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchSharedItemsRequest($item_query, $_limit = '10000', $_offset = '0', $_sort = null)
    {
        // verify the required parameter 'item_query' is set
        if ($item_query === null || (is_array($item_query) && count($item_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_query when calling searchSharedItems'
            );
        }

        $resourcePath = '/storefront/code_library/search_shared';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }


        // body params
        $_tempBody = null;
        if (isset($item_query)) {
            $_tempBody = $item_query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEmailTest
     *
     * Send email test
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_email_uuid commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_test_request Email commseq email test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqEmailSendTestResponse
     */
    public function sendEmailTest($storefront_oid, $commseq_email_uuid, $email_commseq_email_test_request)
    {
        list($response) = $this->sendEmailTestWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email_test_request);
        return $response;
    }


    /**
     * Operation sendEmailTestWithHttpInfo
     *
     * Send email test
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_test_request Email commseq email test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailSendTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailTestWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email_test_request)
    {
        return $this->sendEmailTestWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_email_uuid,   $email_commseq_email_test_request);
    }


    /**
     * Operation sendEmailTestWithHttpInfoRetry
     *
     * Send email test
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_test_request Email commseq email test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailSendTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailTestWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_email_uuid,  $email_commseq_email_test_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailSendTestResponse';
        $request = $this->sendEmailTestRequest($storefront_oid, $commseq_email_uuid, $email_commseq_email_test_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->sendEmailTestWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_email_uuid,   $email_commseq_email_test_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqEmailSendTestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailTestAsync
     *
     * Send email test
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_test_request Email commseq email test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailTestAsync($storefront_oid, $commseq_email_uuid, $email_commseq_email_test_request)
    {
        return $this->sendEmailTestAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email_test_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailTestAsyncWithHttpInfo
     *
     * Send email test
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_test_request Email commseq email test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailTestAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email_test_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailSendTestResponse';
        $request = $this->sendEmailTestRequest($storefront_oid, $commseq_email_uuid, $email_commseq_email_test_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmailTest'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmailSendTestRequest $email_commseq_email_test_request Email commseq email test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendEmailTestRequest($storefront_oid, $commseq_email_uuid, $email_commseq_email_test_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling sendEmailTest'
            );
        }
        // verify the required parameter 'commseq_email_uuid' is set
        if ($commseq_email_uuid === null || (is_array($commseq_email_uuid) && count($commseq_email_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_email_uuid when calling sendEmailTest'
            );
        }
        // verify the required parameter 'email_commseq_email_test_request' is set
        if ($email_commseq_email_test_request === null || (is_array($email_commseq_email_test_request) && count($email_commseq_email_test_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_email_test_request when calling sendEmailTest'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_email_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_email_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_email_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_email_test_request)) {
            $_tempBody = $email_commseq_email_test_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPostcardTest
     *
     * Send postcard test
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_postcard_uuid commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardSendTestRequest $email_commseq_postcard_test_request Email commseq email test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqPostcardSendTestResponse
     */
    public function sendPostcardTest($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard_test_request)
    {
        list($response) = $this->sendPostcardTestWithHttpInfo($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard_test_request);
        return $response;
    }


    /**
     * Operation sendPostcardTestWithHttpInfo
     *
     * Send postcard test
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardSendTestRequest $email_commseq_postcard_test_request Email commseq email test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardSendTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPostcardTestWithHttpInfo($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard_test_request)
    {
        return $this->sendPostcardTestWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_postcard_uuid,   $email_commseq_postcard_test_request);
    }


    /**
     * Operation sendPostcardTestWithHttpInfoRetry
     *
     * Send postcard test
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardSendTestRequest $email_commseq_postcard_test_request Email commseq email test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardSendTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPostcardTestWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_postcard_uuid,  $email_commseq_postcard_test_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardSendTestResponse';
        $request = $this->sendPostcardTestRequest($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard_test_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->sendPostcardTestWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_postcard_uuid,   $email_commseq_postcard_test_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqPostcardSendTestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendPostcardTestAsync
     *
     * Send postcard test
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardSendTestRequest $email_commseq_postcard_test_request Email commseq email test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPostcardTestAsync($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard_test_request)
    {
        return $this->sendPostcardTestAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard_test_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPostcardTestAsyncWithHttpInfo
     *
     * Send postcard test
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardSendTestRequest $email_commseq_postcard_test_request Email commseq email test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPostcardTestAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard_test_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardSendTestResponse';
        $request = $this->sendPostcardTestRequest($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard_test_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPostcardTest'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcardSendTestRequest $email_commseq_postcard_test_request Email commseq email test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendPostcardTestRequest($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard_test_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling sendPostcardTest'
            );
        }
        // verify the required parameter 'commseq_postcard_uuid' is set
        if ($commseq_postcard_uuid === null || (is_array($commseq_postcard_uuid) && count($commseq_postcard_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_postcard_uuid when calling sendPostcardTest'
            );
        }
        // verify the required parameter 'email_commseq_postcard_test_request' is set
        if ($email_commseq_postcard_test_request === null || (is_array($email_commseq_postcard_test_request) && count($email_commseq_postcard_test_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_postcard_test_request when calling sendPostcardTest'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_postcard_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_postcard_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_postcard_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_postcard_test_request)) {
            $_tempBody = $email_commseq_postcard_test_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendWebhookTest
     *
     * Send webhook test
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqWebhookSendTestRequest $email_commseq_webhook_test_request Email commseq webhook test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqWebhookSendTestResponse
     */
    public function sendWebhookTest($storefront_oid, $email_commseq_webhook_test_request)
    {
        list($response) = $this->sendWebhookTestWithHttpInfo($storefront_oid, $email_commseq_webhook_test_request);
        return $response;
    }


    /**
     * Operation sendWebhookTestWithHttpInfo
     *
     * Send webhook test
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqWebhookSendTestRequest $email_commseq_webhook_test_request Email commseq webhook test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqWebhookSendTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendWebhookTestWithHttpInfo($storefront_oid, $email_commseq_webhook_test_request)
    {
        return $this->sendWebhookTestWithHttpInfoRetry(true ,   $storefront_oid,   $email_commseq_webhook_test_request);
    }


    /**
     * Operation sendWebhookTestWithHttpInfoRetry
     *
     * Send webhook test
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqWebhookSendTestRequest $email_commseq_webhook_test_request Email commseq webhook test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqWebhookSendTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendWebhookTestWithHttpInfoRetry($retry ,  $storefront_oid,  $email_commseq_webhook_test_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqWebhookSendTestResponse';
        $request = $this->sendWebhookTestRequest($storefront_oid, $email_commseq_webhook_test_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->sendWebhookTestWithHttpInfoRetry(false ,   $storefront_oid,   $email_commseq_webhook_test_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqWebhookSendTestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendWebhookTestAsync
     *
     * Send webhook test
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqWebhookSendTestRequest $email_commseq_webhook_test_request Email commseq webhook test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendWebhookTestAsync($storefront_oid, $email_commseq_webhook_test_request)
    {
        return $this->sendWebhookTestAsyncWithHttpInfo($storefront_oid, $email_commseq_webhook_test_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendWebhookTestAsyncWithHttpInfo
     *
     * Send webhook test
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqWebhookSendTestRequest $email_commseq_webhook_test_request Email commseq webhook test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendWebhookTestAsyncWithHttpInfo($storefront_oid, $email_commseq_webhook_test_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqWebhookSendTestResponse';
        $request = $this->sendWebhookTestRequest($storefront_oid, $email_commseq_webhook_test_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendWebhookTest'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailCommseqWebhookSendTestRequest $email_commseq_webhook_test_request Email commseq webhook test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendWebhookTestRequest($storefront_oid, $email_commseq_webhook_test_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling sendWebhookTest'
            );
        }
        // verify the required parameter 'email_commseq_webhook_test_request' is set
        if ($email_commseq_webhook_test_request === null || (is_array($email_commseq_webhook_test_request) && count($email_commseq_webhook_test_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_webhook_test_request when calling sendWebhookTest'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/webhooks/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_webhook_test_request)) {
            $_tempBody = $email_commseq_webhook_test_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sequenceTest
     *
     * Sequence test
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqSequenceTestRequest $email_commseq_sequence_test_request Commseq test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqSequenceTestResponse
     */
    public function sequenceTest($storefront_oid, $commseq_uuid, $email_commseq_sequence_test_request)
    {
        list($response) = $this->sequenceTestWithHttpInfo($storefront_oid, $commseq_uuid, $email_commseq_sequence_test_request);
        return $response;
    }


    /**
     * Operation sequenceTestWithHttpInfo
     *
     * Sequence test
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqSequenceTestRequest $email_commseq_sequence_test_request Commseq test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqSequenceTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sequenceTestWithHttpInfo($storefront_oid, $commseq_uuid, $email_commseq_sequence_test_request)
    {
        return $this->sequenceTestWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $email_commseq_sequence_test_request);
    }


    /**
     * Operation sequenceTestWithHttpInfoRetry
     *
     * Sequence test
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqSequenceTestRequest $email_commseq_sequence_test_request Commseq test request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqSequenceTestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sequenceTestWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $email_commseq_sequence_test_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqSequenceTestResponse';
        $request = $this->sequenceTestRequest($storefront_oid, $commseq_uuid, $email_commseq_sequence_test_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->sequenceTestWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $email_commseq_sequence_test_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqSequenceTestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sequenceTestAsync
     *
     * Sequence test
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqSequenceTestRequest $email_commseq_sequence_test_request Commseq test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sequenceTestAsync($storefront_oid, $commseq_uuid, $email_commseq_sequence_test_request)
    {
        return $this->sequenceTestAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $email_commseq_sequence_test_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sequenceTestAsyncWithHttpInfo
     *
     * Sequence test
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqSequenceTestRequest $email_commseq_sequence_test_request Commseq test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sequenceTestAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $email_commseq_sequence_test_request)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqSequenceTestResponse';
        $request = $this->sequenceTestRequest($storefront_oid, $commseq_uuid, $email_commseq_sequence_test_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sequenceTest'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqSequenceTestRequest $email_commseq_sequence_test_request Commseq test request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sequenceTestRequest($storefront_oid, $commseq_uuid, $email_commseq_sequence_test_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling sequenceTest'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling sequenceTest'
            );
        }
        // verify the required parameter 'email_commseq_sequence_test_request' is set
        if ($email_commseq_sequence_test_request === null || (is_array($email_commseq_sequence_test_request) && count($email_commseq_sequence_test_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_sequence_test_request when calling sequenceTest'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_sequence_test_request)) {
            $_tempBody = $email_commseq_sequence_test_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startEmailCampaign
     *
     * Start email campaign
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_campaign_uuid email_campaign_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function startEmailCampaign($storefront_oid, $email_campaign_uuid)
    {
        list($response) = $this->startEmailCampaignWithHttpInfo($storefront_oid, $email_campaign_uuid);
        return $response;
    }


    /**
     * Operation startEmailCampaignWithHttpInfo
     *
     * Start email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function startEmailCampaignWithHttpInfo($storefront_oid, $email_campaign_uuid)
    {
        return $this->startEmailCampaignWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign_uuid);
    }


    /**
     * Operation startEmailCampaignWithHttpInfoRetry
     *
     * Start email campaign
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function startEmailCampaignWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->startEmailCampaignRequest($storefront_oid, $email_campaign_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->startEmailCampaignWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startEmailCampaignAsync
     *
     * Start email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startEmailCampaignAsync($storefront_oid, $email_campaign_uuid)
    {
        return $this->startEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startEmailCampaignAsyncWithHttpInfo
     *
     * Start email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->startEmailCampaignRequest($storefront_oid, $email_campaign_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startEmailCampaign'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startEmailCampaignRequest($storefront_oid, $email_campaign_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling startEmailCampaign'
            );
        }
        // verify the required parameter 'email_campaign_uuid' is set
        if ($email_campaign_uuid === null || (is_array($email_campaign_uuid) && count($email_campaign_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_uuid when calling startEmailCampaign'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_campaign_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_uuid' . '}',
                ObjectSerializer::toPathValue($email_campaign_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subscribeToEmailList
     *
     * Subscribe customers to email list
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_uuid email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer[] $customers Customers (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListSubscribeResponse
     */
    public function subscribeToEmailList($storefront_oid, $email_list_uuid, $customers)
    {
        list($response) = $this->subscribeToEmailListWithHttpInfo($storefront_oid, $email_list_uuid, $customers);
        return $response;
    }


    /**
     * Operation subscribeToEmailListWithHttpInfo
     *
     * Subscribe customers to email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer[] $customers Customers (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSubscribeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscribeToEmailListWithHttpInfo($storefront_oid, $email_list_uuid, $customers)
    {
        return $this->subscribeToEmailListWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_uuid,   $customers);
    }


    /**
     * Operation subscribeToEmailListWithHttpInfoRetry
     *
     * Subscribe customers to email list
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer[] $customers Customers (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSubscribeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscribeToEmailListWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_uuid,  $customers)
    {
        $returnType = '\ultracart\v2\models\EmailListSubscribeResponse';
        $request = $this->subscribeToEmailListRequest($storefront_oid, $email_list_uuid, $customers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->subscribeToEmailListWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_uuid,   $customers);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListSubscribeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subscribeToEmailListAsync
     *
     * Subscribe customers to email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer[] $customers Customers (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscribeToEmailListAsync($storefront_oid, $email_list_uuid, $customers)
    {
        return $this->subscribeToEmailListAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $customers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subscribeToEmailListAsyncWithHttpInfo
     *
     * Subscribe customers to email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer[] $customers Customers (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscribeToEmailListAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $customers)
    {
        $returnType = '\ultracart\v2\models\EmailListSubscribeResponse';
        $request = $this->subscribeToEmailListRequest($storefront_oid, $email_list_uuid, $customers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subscribeToEmailList'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer[] $customers Customers (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subscribeToEmailListRequest($storefront_oid, $email_list_uuid, $customers)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling subscribeToEmailList'
            );
        }
        // verify the required parameter 'email_list_uuid' is set
        if ($email_list_uuid === null || (is_array($email_list_uuid) && count($email_list_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_uuid when calling subscribeToEmailList'
            );
        }
        // verify the required parameter 'customers' is set
        if ($customers === null || (is_array($customers) && count($customers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customers when calling subscribeToEmailList'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customers)) {
            $_tempBody = $customers;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unfavoriteScreenRecording
     *
     * Remove favorite flag on screen recording
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $screen_recording_uuid screen_recording_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unfavoriteScreenRecording($storefront_oid, $screen_recording_uuid)
    {
        $this->unfavoriteScreenRecordingWithHttpInfo($storefront_oid, $screen_recording_uuid);
    }


    /**
     * Operation unfavoriteScreenRecordingWithHttpInfo
     *
     * Remove favorite flag on screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unfavoriteScreenRecordingWithHttpInfo($storefront_oid, $screen_recording_uuid)
    {
        $this->unfavoriteScreenRecordingWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_uuid);
    }


    /**
     * Operation unfavoriteScreenRecordingWithHttpInfoRetry
     *
     * Remove favorite flag on screen recording
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unfavoriteScreenRecordingWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_uuid)
    {
        $returnType = '';
        $request = $this->unfavoriteScreenRecordingRequest($storefront_oid, $screen_recording_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->unfavoriteScreenRecordingWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_uuid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unfavoriteScreenRecordingAsync
     *
     * Remove favorite flag on screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unfavoriteScreenRecordingAsync($storefront_oid, $screen_recording_uuid)
    {
        return $this->unfavoriteScreenRecordingAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unfavoriteScreenRecordingAsyncWithHttpInfo
     *
     * Remove favorite flag on screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unfavoriteScreenRecordingAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid)
    {
        $returnType = '';
        $request = $this->unfavoriteScreenRecordingRequest($storefront_oid, $screen_recording_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unfavoriteScreenRecording'
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unfavoriteScreenRecordingRequest($storefront_oid, $screen_recording_uuid)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling unfavoriteScreenRecording'
            );
        }
        // verify the required parameter 'screen_recording_uuid' is set
        if ($screen_recording_uuid === null || (is_array($screen_recording_uuid) && count($screen_recording_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_uuid when calling unfavoriteScreenRecording'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_uuid' . '}',
                ObjectSerializer::toPathValue($screen_recording_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailCampaign
     *
     * Update email campaign
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_campaign_uuid email_campaign_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignResponse
     */
    public function updateEmailCampaign($storefront_oid, $email_campaign_uuid, $email_campaign)
    {
        list($response) = $this->updateEmailCampaignWithHttpInfo($storefront_oid, $email_campaign_uuid, $email_campaign);
        return $response;
    }


    /**
     * Operation updateEmailCampaignWithHttpInfo
     *
     * Update email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCampaignWithHttpInfo($storefront_oid, $email_campaign_uuid, $email_campaign)
    {
        return $this->updateEmailCampaignWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign_uuid,   $email_campaign);
    }


    /**
     * Operation updateEmailCampaignWithHttpInfoRetry
     *
     * Update email campaign
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCampaignWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign_uuid,  $email_campaign)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignResponse';
        $request = $this->updateEmailCampaignRequest($storefront_oid, $email_campaign_uuid, $email_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailCampaignWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign_uuid,   $email_campaign);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailCampaignAsync
     *
     * Update email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignAsync($storefront_oid, $email_campaign_uuid, $email_campaign)
    {
        return $this->updateEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid, $email_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailCampaignAsyncWithHttpInfo
     *
     * Update email campaign
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignAsyncWithHttpInfo($storefront_oid, $email_campaign_uuid, $email_campaign)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignResponse';
        $request = $this->updateEmailCampaignRequest($storefront_oid, $email_campaign_uuid, $email_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailCampaign'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaign $email_campaign Email campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailCampaignRequest($storefront_oid, $email_campaign_uuid, $email_campaign)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailCampaign'
            );
        }
        // verify the required parameter 'email_campaign_uuid' is set
        if ($email_campaign_uuid === null || (is_array($email_campaign_uuid) && count($email_campaign_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_uuid when calling updateEmailCampaign'
            );
        }
        // verify the required parameter 'email_campaign' is set
        if ($email_campaign === null || (is_array($email_campaign) && count($email_campaign) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign when calling updateEmailCampaign'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_campaign_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_uuid' . '}',
                ObjectSerializer::toPathValue($email_campaign_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_campaign)) {
            $_tempBody = $email_campaign;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailCampaignFolder
     *
     * Update email campaign folder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_campaign_folder_uuid email_campaign_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCampaignFolderResponse
     */
    public function updateEmailCampaignFolder($storefront_oid, $email_campaign_folder_uuid, $email_campaign_folder)
    {
        list($response) = $this->updateEmailCampaignFolderWithHttpInfo($storefront_oid, $email_campaign_folder_uuid, $email_campaign_folder);
        return $response;
    }


    /**
     * Operation updateEmailCampaignFolderWithHttpInfo
     *
     * Update email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCampaignFolderWithHttpInfo($storefront_oid, $email_campaign_folder_uuid, $email_campaign_folder)
    {
        return $this->updateEmailCampaignFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_campaign_folder_uuid,   $email_campaign_folder);
    }


    /**
     * Operation updateEmailCampaignFolderWithHttpInfoRetry
     *
     * Update email campaign folder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCampaignFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCampaignFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_campaign_folder_uuid,  $email_campaign_folder)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignFolderResponse';
        $request = $this->updateEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder_uuid, $email_campaign_folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailCampaignFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_campaign_folder_uuid,   $email_campaign_folder);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCampaignFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailCampaignFolderAsync
     *
     * Update email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignFolderAsync($storefront_oid, $email_campaign_folder_uuid, $email_campaign_folder)
    {
        return $this->updateEmailCampaignFolderAsyncWithHttpInfo($storefront_oid, $email_campaign_folder_uuid, $email_campaign_folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailCampaignFolderAsyncWithHttpInfo
     *
     * Update email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCampaignFolderAsyncWithHttpInfo($storefront_oid, $email_campaign_folder_uuid, $email_campaign_folder)
    {
        $returnType = '\ultracart\v2\models\EmailCampaignFolderResponse';
        $request = $this->updateEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder_uuid, $email_campaign_folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailCampaignFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_campaign_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailCampaignFolder $email_campaign_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailCampaignFolderRequest($storefront_oid, $email_campaign_folder_uuid, $email_campaign_folder)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailCampaignFolder'
            );
        }
        // verify the required parameter 'email_campaign_folder_uuid' is set
        if ($email_campaign_folder_uuid === null || (is_array($email_campaign_folder_uuid) && count($email_campaign_folder_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_folder_uuid when calling updateEmailCampaignFolder'
            );
        }
        // verify the required parameter 'email_campaign_folder' is set
        if ($email_campaign_folder === null || (is_array($email_campaign_folder) && count($email_campaign_folder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_campaign_folder when calling updateEmailCampaignFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_campaign_folder_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_campaign_folder_uuid' . '}',
                ObjectSerializer::toPathValue($email_campaign_folder_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_campaign_folder)) {
            $_tempBody = $email_campaign_folder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailCommseq
     *
     * Update email commseq
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_uuid commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqResponse
     */
    public function updateEmailCommseq($storefront_oid, $commseq_uuid, $email_commseq)
    {
        list($response) = $this->updateEmailCommseqWithHttpInfo($storefront_oid, $commseq_uuid, $email_commseq);
        return $response;
    }


    /**
     * Operation updateEmailCommseqWithHttpInfo
     *
     * Update email commseq
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCommseqWithHttpInfo($storefront_oid, $commseq_uuid, $email_commseq)
    {
        return $this->updateEmailCommseqWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_uuid,   $email_commseq);
    }


    /**
     * Operation updateEmailCommseqWithHttpInfoRetry
     *
     * Update email commseq
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCommseqWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_uuid,  $email_commseq)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqResponse';
        $request = $this->updateEmailCommseqRequest($storefront_oid, $commseq_uuid, $email_commseq);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailCommseqWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_uuid,   $email_commseq);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailCommseqAsync
     *
     * Update email commseq
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCommseqAsync($storefront_oid, $commseq_uuid, $email_commseq)
    {
        return $this->updateEmailCommseqAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $email_commseq)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailCommseqAsyncWithHttpInfo
     *
     * Update email commseq
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCommseqAsyncWithHttpInfo($storefront_oid, $commseq_uuid, $email_commseq)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqResponse';
        $request = $this->updateEmailCommseqRequest($storefront_oid, $commseq_uuid, $email_commseq);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailCommseq'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseq $email_commseq Email commseq (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailCommseqRequest($storefront_oid, $commseq_uuid, $email_commseq)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailCommseq'
            );
        }
        // verify the required parameter 'commseq_uuid' is set
        if ($commseq_uuid === null || (is_array($commseq_uuid) && count($commseq_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_uuid when calling updateEmailCommseq'
            );
        }
        // verify the required parameter 'email_commseq' is set
        if ($email_commseq === null || (is_array($email_commseq) && count($email_commseq) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq when calling updateEmailCommseq'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq)) {
            $_tempBody = $email_commseq;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailCustomer
     *
     * Update email customer
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_customer_uuid email_customer_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer $email_customer Email customer (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateEmailCustomer($storefront_oid, $email_customer_uuid, $email_customer)
    {
        $this->updateEmailCustomerWithHttpInfo($storefront_oid, $email_customer_uuid, $email_customer);
    }


    /**
     * Operation updateEmailCustomerWithHttpInfo
     *
     * Update email customer
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer $email_customer Email customer (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCustomerWithHttpInfo($storefront_oid, $email_customer_uuid, $email_customer)
    {
        $this->updateEmailCustomerWithHttpInfoRetry(true ,   $storefront_oid,   $email_customer_uuid,   $email_customer);
    }


    /**
     * Operation updateEmailCustomerWithHttpInfoRetry
     *
     * Update email customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer $email_customer Email customer (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailCustomerWithHttpInfoRetry($retry ,  $storefront_oid,  $email_customer_uuid,  $email_customer)
    {
        $returnType = '';
        $request = $this->updateEmailCustomerRequest($storefront_oid, $email_customer_uuid, $email_customer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->updateEmailCustomerWithHttpInfoRetry(false ,   $storefront_oid,   $email_customer_uuid,   $email_customer);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailCustomerAsync
     *
     * Update email customer
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer $email_customer Email customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCustomerAsync($storefront_oid, $email_customer_uuid, $email_customer)
    {
        return $this->updateEmailCustomerAsyncWithHttpInfo($storefront_oid, $email_customer_uuid, $email_customer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailCustomerAsyncWithHttpInfo
     *
     * Update email customer
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer $email_customer Email customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailCustomerAsyncWithHttpInfo($storefront_oid, $email_customer_uuid, $email_customer)
    {
        $returnType = '';
        $request = $this->updateEmailCustomerRequest($storefront_oid, $email_customer_uuid, $email_customer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailCustomer'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_customer_uuid (required)
     * @param  \ultracart\v2\models\EmailCustomer $email_customer Email customer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailCustomerRequest($storefront_oid, $email_customer_uuid, $email_customer)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailCustomer'
            );
        }
        // verify the required parameter 'email_customer_uuid' is set
        if ($email_customer_uuid === null || (is_array($email_customer_uuid) && count($email_customer_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_customer_uuid when calling updateEmailCustomer'
            );
        }
        // verify the required parameter 'email_customer' is set
        if ($email_customer === null || (is_array($email_customer) && count($email_customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_customer when calling updateEmailCustomer'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_customer_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_customer_uuid' . '}',
                ObjectSerializer::toPathValue($email_customer_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_customer)) {
            $_tempBody = $email_customer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailEmail
     *
     * Update email email
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_email_uuid commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email commseq email (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqEmailResponse
     */
    public function updateEmailEmail($storefront_oid, $commseq_email_uuid, $email_commseq_email)
    {
        list($response) = $this->updateEmailEmailWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email);
        return $response;
    }


    /**
     * Operation updateEmailEmailWithHttpInfo
     *
     * Update email email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email commseq email (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailEmailWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email)
    {
        return $this->updateEmailEmailWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_email_uuid,   $email_commseq_email);
    }


    /**
     * Operation updateEmailEmailWithHttpInfoRetry
     *
     * Update email email
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email commseq email (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailEmailWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_email_uuid,  $email_commseq_email)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailResponse';
        $request = $this->updateEmailEmailRequest($storefront_oid, $commseq_email_uuid, $email_commseq_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailEmailWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_email_uuid,   $email_commseq_email);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailEmailAsync
     *
     * Update email email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email commseq email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailEmailAsync($storefront_oid, $commseq_email_uuid, $email_commseq_email)
    {
        return $this->updateEmailEmailAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailEmailAsyncWithHttpInfo
     *
     * Update email email
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email commseq email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailEmailAsyncWithHttpInfo($storefront_oid, $commseq_email_uuid, $email_commseq_email)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqEmailResponse';
        $request = $this->updateEmailEmailRequest($storefront_oid, $commseq_email_uuid, $email_commseq_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailEmail'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_email_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqEmail $email_commseq_email Email commseq email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailEmailRequest($storefront_oid, $commseq_email_uuid, $email_commseq_email)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailEmail'
            );
        }
        // verify the required parameter 'commseq_email_uuid' is set
        if ($commseq_email_uuid === null || (is_array($commseq_email_uuid) && count($commseq_email_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_email_uuid when calling updateEmailEmail'
            );
        }
        // verify the required parameter 'email_commseq_email' is set
        if ($email_commseq_email === null || (is_array($email_commseq_email) && count($email_commseq_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_email when calling updateEmailEmail'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_email_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_email_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_email_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_email)) {
            $_tempBody = $email_commseq_email;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailFlow
     *
     * Update email flow
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_flow_uuid email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowResponse
     */
    public function updateEmailFlow($storefront_oid, $email_flow_uuid, $email_flow)
    {
        list($response) = $this->updateEmailFlowWithHttpInfo($storefront_oid, $email_flow_uuid, $email_flow);
        return $response;
    }


    /**
     * Operation updateEmailFlowWithHttpInfo
     *
     * Update email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailFlowWithHttpInfo($storefront_oid, $email_flow_uuid, $email_flow)
    {
        return $this->updateEmailFlowWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow_uuid,   $email_flow);
    }


    /**
     * Operation updateEmailFlowWithHttpInfoRetry
     *
     * Update email flow
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailFlowWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow_uuid,  $email_flow)
    {
        $returnType = '\ultracart\v2\models\EmailFlowResponse';
        $request = $this->updateEmailFlowRequest($storefront_oid, $email_flow_uuid, $email_flow);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailFlowWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow_uuid,   $email_flow);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailFlowAsync
     *
     * Update email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailFlowAsync($storefront_oid, $email_flow_uuid, $email_flow)
    {
        return $this->updateEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow_uuid, $email_flow)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailFlowAsyncWithHttpInfo
     *
     * Update email flow
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailFlowAsyncWithHttpInfo($storefront_oid, $email_flow_uuid, $email_flow)
    {
        $returnType = '\ultracart\v2\models\EmailFlowResponse';
        $request = $this->updateEmailFlowRequest($storefront_oid, $email_flow_uuid, $email_flow);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailFlow'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_uuid (required)
     * @param  \ultracart\v2\models\EmailFlow $email_flow Email flow (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailFlowRequest($storefront_oid, $email_flow_uuid, $email_flow)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailFlow'
            );
        }
        // verify the required parameter 'email_flow_uuid' is set
        if ($email_flow_uuid === null || (is_array($email_flow_uuid) && count($email_flow_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_uuid when calling updateEmailFlow'
            );
        }
        // verify the required parameter 'email_flow' is set
        if ($email_flow === null || (is_array($email_flow) && count($email_flow) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow when calling updateEmailFlow'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_flow_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_flow_uuid' . '}',
                ObjectSerializer::toPathValue($email_flow_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_flow)) {
            $_tempBody = $email_flow;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailFlowFolder
     *
     * Update email flow folder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_flow_folder_uuid email_flow_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailFlowFolderResponse
     */
    public function updateEmailFlowFolder($storefront_oid, $email_flow_folder_uuid, $email_flow_folder)
    {
        list($response) = $this->updateEmailFlowFolderWithHttpInfo($storefront_oid, $email_flow_folder_uuid, $email_flow_folder);
        return $response;
    }


    /**
     * Operation updateEmailFlowFolderWithHttpInfo
     *
     * Update email flow folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailFlowFolderWithHttpInfo($storefront_oid, $email_flow_folder_uuid, $email_flow_folder)
    {
        return $this->updateEmailFlowFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_flow_folder_uuid,   $email_flow_folder);
    }


    /**
     * Operation updateEmailFlowFolderWithHttpInfoRetry
     *
     * Update email flow folder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailFlowFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailFlowFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_flow_folder_uuid,  $email_flow_folder)
    {
        $returnType = '\ultracart\v2\models\EmailFlowFolderResponse';
        $request = $this->updateEmailFlowFolderRequest($storefront_oid, $email_flow_folder_uuid, $email_flow_folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailFlowFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_flow_folder_uuid,   $email_flow_folder);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailFlowFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailFlowFolderAsync
     *
     * Update email flow folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailFlowFolderAsync($storefront_oid, $email_flow_folder_uuid, $email_flow_folder)
    {
        return $this->updateEmailFlowFolderAsyncWithHttpInfo($storefront_oid, $email_flow_folder_uuid, $email_flow_folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailFlowFolderAsyncWithHttpInfo
     *
     * Update email flow folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailFlowFolderAsyncWithHttpInfo($storefront_oid, $email_flow_folder_uuid, $email_flow_folder)
    {
        $returnType = '\ultracart\v2\models\EmailFlowFolderResponse';
        $request = $this->updateEmailFlowFolderRequest($storefront_oid, $email_flow_folder_uuid, $email_flow_folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailFlowFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_flow_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailFlowFolder $email_flow_folder Email flow folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailFlowFolderRequest($storefront_oid, $email_flow_folder_uuid, $email_flow_folder)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailFlowFolder'
            );
        }
        // verify the required parameter 'email_flow_folder_uuid' is set
        if ($email_flow_folder_uuid === null || (is_array($email_flow_folder_uuid) && count($email_flow_folder_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_folder_uuid when calling updateEmailFlowFolder'
            );
        }
        // verify the required parameter 'email_flow_folder' is set
        if ($email_flow_folder === null || (is_array($email_flow_folder) && count($email_flow_folder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_flow_folder when calling updateEmailFlowFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_flow_folder_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_flow_folder_uuid' . '}',
                ObjectSerializer::toPathValue($email_flow_folder_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_flow_folder)) {
            $_tempBody = $email_flow_folder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailGlobalSettings
     *
     * Update email global settings
     *
     * @param  \ultracart\v2\models\EmailGlobalSettings $global_settings global settings request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailGlobalSettingsResponse
     */
    public function updateEmailGlobalSettings($global_settings)
    {
        list($response) = $this->updateEmailGlobalSettingsWithHttpInfo($global_settings);
        return $response;
    }


    /**
     * Operation updateEmailGlobalSettingsWithHttpInfo
     *
     * Update email global settings
     *
     * @param  \ultracart\v2\models\EmailGlobalSettings $global_settings global settings request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailGlobalSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailGlobalSettingsWithHttpInfo($global_settings)
    {
        return $this->updateEmailGlobalSettingsWithHttpInfoRetry(true ,   $global_settings);
    }


    /**
     * Operation updateEmailGlobalSettingsWithHttpInfoRetry
     *
     * Update email global settings
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\EmailGlobalSettings $global_settings global settings request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailGlobalSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailGlobalSettingsWithHttpInfoRetry($retry ,  $global_settings)
    {
        $returnType = '\ultracart\v2\models\EmailGlobalSettingsResponse';
        $request = $this->updateEmailGlobalSettingsRequest($global_settings);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailGlobalSettingsWithHttpInfoRetry(false ,   $global_settings);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailGlobalSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailGlobalSettingsAsync
     *
     * Update email global settings
     *
     * @param  \ultracart\v2\models\EmailGlobalSettings $global_settings global settings request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailGlobalSettingsAsync($global_settings)
    {
        return $this->updateEmailGlobalSettingsAsyncWithHttpInfo($global_settings)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailGlobalSettingsAsyncWithHttpInfo
     *
     * Update email global settings
     *
     * @param  \ultracart\v2\models\EmailGlobalSettings $global_settings global settings request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailGlobalSettingsAsyncWithHttpInfo($global_settings)
    {
        $returnType = '\ultracart\v2\models\EmailGlobalSettingsResponse';
        $request = $this->updateEmailGlobalSettingsRequest($global_settings);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailGlobalSettings'
     *
     * @param  \ultracart\v2\models\EmailGlobalSettings $global_settings global settings request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailGlobalSettingsRequest($global_settings)
    {
        // verify the required parameter 'global_settings' is set
        if ($global_settings === null || (is_array($global_settings) && count($global_settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $global_settings when calling updateEmailGlobalSettings'
            );
        }

        $resourcePath = '/storefront/email/global_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($global_settings)) {
            $_tempBody = $global_settings;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailList
     *
     * Update email list
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_uuid email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListResponse
     */
    public function updateEmailList($storefront_oid, $email_list_uuid, $email_list)
    {
        list($response) = $this->updateEmailListWithHttpInfo($storefront_oid, $email_list_uuid, $email_list);
        return $response;
    }


    /**
     * Operation updateEmailListWithHttpInfo
     *
     * Update email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailListWithHttpInfo($storefront_oid, $email_list_uuid, $email_list)
    {
        return $this->updateEmailListWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_uuid,   $email_list);
    }


    /**
     * Operation updateEmailListWithHttpInfoRetry
     *
     * Update email list
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailListWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_uuid,  $email_list)
    {
        $returnType = '\ultracart\v2\models\EmailListResponse';
        $request = $this->updateEmailListRequest($storefront_oid, $email_list_uuid, $email_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailListWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_uuid,   $email_list);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailListAsync
     *
     * Update email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailListAsync($storefront_oid, $email_list_uuid, $email_list)
    {
        return $this->updateEmailListAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $email_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailListAsyncWithHttpInfo
     *
     * Update email list
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailListAsyncWithHttpInfo($storefront_oid, $email_list_uuid, $email_list)
    {
        $returnType = '\ultracart\v2\models\EmailListResponse';
        $request = $this->updateEmailListRequest($storefront_oid, $email_list_uuid, $email_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailList'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_uuid (required)
     * @param  \ultracart\v2\models\EmailList $email_list Email list (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailListRequest($storefront_oid, $email_list_uuid, $email_list)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailList'
            );
        }
        // verify the required parameter 'email_list_uuid' is set
        if ($email_list_uuid === null || (is_array($email_list_uuid) && count($email_list_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_uuid when calling updateEmailList'
            );
        }
        // verify the required parameter 'email_list' is set
        if ($email_list === null || (is_array($email_list) && count($email_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list when calling updateEmailList'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/lists/{email_list_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_list)) {
            $_tempBody = $email_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailListSegmentFolder
     *
     * Update email campaign folder
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid email_list_segment_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListSegmentFolderResponse
     */
    public function updateEmailListSegmentFolder($storefront_oid, $email_list_segment_folder_uuid, $email_list_segment_folder)
    {
        list($response) = $this->updateEmailListSegmentFolderWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid, $email_list_segment_folder);
        return $response;
    }


    /**
     * Operation updateEmailListSegmentFolderWithHttpInfo
     *
     * Update email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSegmentFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailListSegmentFolderWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid, $email_list_segment_folder)
    {
        return $this->updateEmailListSegmentFolderWithHttpInfoRetry(true ,   $storefront_oid,   $email_list_segment_folder_uuid,   $email_list_segment_folder);
    }


    /**
     * Operation updateEmailListSegmentFolderWithHttpInfoRetry
     *
     * Update email campaign folder
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListSegmentFolderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailListSegmentFolderWithHttpInfoRetry($retry ,  $storefront_oid,  $email_list_segment_folder_uuid,  $email_list_segment_folder)
    {
        $returnType = '\ultracart\v2\models\EmailListSegmentFolderResponse';
        $request = $this->updateEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder_uuid, $email_list_segment_folder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailListSegmentFolderWithHttpInfoRetry(false ,   $storefront_oid,   $email_list_segment_folder_uuid,   $email_list_segment_folder);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListSegmentFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailListSegmentFolderAsync
     *
     * Update email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailListSegmentFolderAsync($storefront_oid, $email_list_segment_folder_uuid, $email_list_segment_folder)
    {
        return $this->updateEmailListSegmentFolderAsyncWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid, $email_list_segment_folder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailListSegmentFolderAsyncWithHttpInfo
     *
     * Update email campaign folder
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailListSegmentFolderAsyncWithHttpInfo($storefront_oid, $email_list_segment_folder_uuid, $email_list_segment_folder)
    {
        $returnType = '\ultracart\v2\models\EmailListSegmentFolderResponse';
        $request = $this->updateEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder_uuid, $email_list_segment_folder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailListSegmentFolder'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_list_segment_folder_uuid (required)
     * @param  \ultracart\v2\models\EmailListSegmentFolder $email_list_segment_folder Email campaign folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailListSegmentFolderRequest($storefront_oid, $email_list_segment_folder_uuid, $email_list_segment_folder)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailListSegmentFolder'
            );
        }
        // verify the required parameter 'email_list_segment_folder_uuid' is set
        if ($email_list_segment_folder_uuid === null || (is_array($email_list_segment_folder_uuid) && count($email_list_segment_folder_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_segment_folder_uuid when calling updateEmailListSegmentFolder'
            );
        }
        // verify the required parameter 'email_list_segment_folder' is set
        if ($email_list_segment_folder === null || (is_array($email_list_segment_folder) && count($email_list_segment_folder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_list_segment_folder when calling updateEmailListSegmentFolder'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_list_segment_folder_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_list_segment_folder_uuid' . '}',
                ObjectSerializer::toPathValue($email_list_segment_folder_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_list_segment_folder)) {
            $_tempBody = $email_list_segment_folder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailPlan
     *
     * Update email plan
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailPlan $settings plan request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailPlanResponse
     */
    public function updateEmailPlan($storefront_oid, $settings)
    {
        list($response) = $this->updateEmailPlanWithHttpInfo($storefront_oid, $settings);
        return $response;
    }


    /**
     * Operation updateEmailPlanWithHttpInfo
     *
     * Update email plan
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailPlan $settings plan request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailPlanWithHttpInfo($storefront_oid, $settings)
    {
        return $this->updateEmailPlanWithHttpInfoRetry(true ,   $storefront_oid,   $settings);
    }


    /**
     * Operation updateEmailPlanWithHttpInfoRetry
     *
     * Update email plan
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailPlan $settings plan request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailPlanWithHttpInfoRetry($retry ,  $storefront_oid,  $settings)
    {
        $returnType = '\ultracart\v2\models\EmailPlanResponse';
        $request = $this->updateEmailPlanRequest($storefront_oid, $settings);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailPlanWithHttpInfoRetry(false ,   $storefront_oid,   $settings);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailPlanAsync
     *
     * Update email plan
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailPlan $settings plan request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailPlanAsync($storefront_oid, $settings)
    {
        return $this->updateEmailPlanAsyncWithHttpInfo($storefront_oid, $settings)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailPlanAsyncWithHttpInfo
     *
     * Update email plan
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailPlan $settings plan request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailPlanAsyncWithHttpInfo($storefront_oid, $settings)
    {
        $returnType = '\ultracart\v2\models\EmailPlanResponse';
        $request = $this->updateEmailPlanRequest($storefront_oid, $settings);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailPlan'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailPlan $settings plan request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailPlanRequest($storefront_oid, $settings)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailPlan'
            );
        }
        // verify the required parameter 'settings' is set
        if ($settings === null || (is_array($settings) && count($settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settings when calling updateEmailPlan'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($settings)) {
            $_tempBody = $settings;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailPostcard
     *
     * Update email postcard
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $commseq_postcard_uuid commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email commseq postcard (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailCommseqPostcardResponse
     */
    public function updateEmailPostcard($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard)
    {
        list($response) = $this->updateEmailPostcardWithHttpInfo($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard);
        return $response;
    }


    /**
     * Operation updateEmailPostcardWithHttpInfo
     *
     * Update email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email commseq postcard (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailPostcardWithHttpInfo($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard)
    {
        return $this->updateEmailPostcardWithHttpInfoRetry(true ,   $storefront_oid,   $commseq_postcard_uuid,   $email_commseq_postcard);
    }


    /**
     * Operation updateEmailPostcardWithHttpInfoRetry
     *
     * Update email postcard
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email commseq postcard (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailCommseqPostcardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailPostcardWithHttpInfoRetry($retry ,  $storefront_oid,  $commseq_postcard_uuid,  $email_commseq_postcard)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardResponse';
        $request = $this->updateEmailPostcardRequest($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailPostcardWithHttpInfoRetry(false ,   $storefront_oid,   $commseq_postcard_uuid,   $email_commseq_postcard);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailCommseqPostcardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailPostcardAsync
     *
     * Update email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email commseq postcard (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailPostcardAsync($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard)
    {
        return $this->updateEmailPostcardAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailPostcardAsyncWithHttpInfo
     *
     * Update email postcard
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email commseq postcard (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailPostcardAsyncWithHttpInfo($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard)
    {
        $returnType = '\ultracart\v2\models\EmailCommseqPostcardResponse';
        $request = $this->updateEmailPostcardRequest($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailPostcard'
     *
     * @param  int $storefront_oid (required)
     * @param  string $commseq_postcard_uuid (required)
     * @param  \ultracart\v2\models\EmailCommseqPostcard $email_commseq_postcard Email commseq postcard (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailPostcardRequest($storefront_oid, $commseq_postcard_uuid, $email_commseq_postcard)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailPostcard'
            );
        }
        // verify the required parameter 'commseq_postcard_uuid' is set
        if ($commseq_postcard_uuid === null || (is_array($commseq_postcard_uuid) && count($commseq_postcard_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commseq_postcard_uuid when calling updateEmailPostcard'
            );
        }
        // verify the required parameter 'email_commseq_postcard' is set
        if ($email_commseq_postcard === null || (is_array($email_commseq_postcard) && count($email_commseq_postcard) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_commseq_postcard when calling updateEmailPostcard'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($commseq_postcard_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'commseq_postcard_uuid' . '}',
                ObjectSerializer::toPathValue($commseq_postcard_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_commseq_postcard)) {
            $_tempBody = $email_commseq_postcard;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailSegment
     *
     * Update email segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_segment_uuid email_segment_uuid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSegmentResponse
     */
    public function updateEmailSegment($storefront_oid, $email_segment_uuid, $email_segment)
    {
        list($response) = $this->updateEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid, $email_segment);
        return $response;
    }


    /**
     * Operation updateEmailSegmentWithHttpInfo
     *
     * Update email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailSegmentWithHttpInfo($storefront_oid, $email_segment_uuid, $email_segment)
    {
        return $this->updateEmailSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $email_segment_uuid,   $email_segment);
    }


    /**
     * Operation updateEmailSegmentWithHttpInfoRetry
     *
     * Update email segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $email_segment_uuid,  $email_segment)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentResponse';
        $request = $this->updateEmailSegmentRequest($storefront_oid, $email_segment_uuid, $email_segment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $email_segment_uuid,   $email_segment);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSegmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailSegmentAsync
     *
     * Update email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailSegmentAsync($storefront_oid, $email_segment_uuid, $email_segment)
    {
        return $this->updateEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $email_segment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailSegmentAsyncWithHttpInfo
     *
     * Update email segment
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailSegmentAsyncWithHttpInfo($storefront_oid, $email_segment_uuid, $email_segment)
    {
        $returnType = '\ultracart\v2\models\EmailSegmentResponse';
        $request = $this->updateEmailSegmentRequest($storefront_oid, $email_segment_uuid, $email_segment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_segment_uuid (required)
     * @param  \ultracart\v2\models\EmailSegment $email_segment Email segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailSegmentRequest($storefront_oid, $email_segment_uuid, $email_segment)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailSegment'
            );
        }
        // verify the required parameter 'email_segment_uuid' is set
        if ($email_segment_uuid === null || (is_array($email_segment_uuid) && count($email_segment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment_uuid when calling updateEmailSegment'
            );
        }
        // verify the required parameter 'email_segment' is set
        if ($email_segment === null || (is_array($email_segment) && count($email_segment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_segment when calling updateEmailSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_segment_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'email_segment_uuid' . '}',
                ObjectSerializer::toPathValue($email_segment_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_segment)) {
            $_tempBody = $email_segment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailSendingDomain
     *
     * Update email sending domain
     *
     * @param  string $domain domain (required)
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSendingDomainResponse
     */
    public function updateEmailSendingDomain($domain, $email_domain)
    {
        list($response) = $this->updateEmailSendingDomainWithHttpInfo($domain, $email_domain);
        return $response;
    }


    /**
     * Operation updateEmailSendingDomainWithHttpInfo
     *
     * Update email sending domain
     *
     * @param  string $domain (required)
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailSendingDomainWithHttpInfo($domain, $email_domain)
    {
        return $this->updateEmailSendingDomainWithHttpInfoRetry(true ,   $domain,   $email_domain);
    }


    /**
     * Operation updateEmailSendingDomainWithHttpInfoRetry
     *
     * Update email sending domain
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $domain (required)
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSendingDomainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailSendingDomainWithHttpInfoRetry($retry ,  $domain,  $email_domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->updateEmailSendingDomainRequest($domain, $email_domain);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailSendingDomainWithHttpInfoRetry(false ,   $domain,   $email_domain);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSendingDomainResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailSendingDomainAsync
     *
     * Update email sending domain
     *
     * @param  string $domain (required)
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailSendingDomainAsync($domain, $email_domain)
    {
        return $this->updateEmailSendingDomainAsyncWithHttpInfo($domain, $email_domain)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailSendingDomainAsyncWithHttpInfo
     *
     * Update email sending domain
     *
     * @param  string $domain (required)
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailSendingDomainAsyncWithHttpInfo($domain, $email_domain)
    {
        $returnType = '\ultracart\v2\models\EmailSendingDomainResponse';
        $request = $this->updateEmailSendingDomainRequest($domain, $email_domain);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailSendingDomain'
     *
     * @param  string $domain (required)
     * @param  \ultracart\v2\models\EmailDomain $email_domain EmailDomain (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailSendingDomainRequest($domain, $email_domain)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling updateEmailSendingDomain'
            );
        }
        // verify the required parameter 'email_domain' is set
        if ($email_domain === null || (is_array($email_domain) && count($email_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_domain when calling updateEmailSendingDomain'
            );
        }

        $resourcePath = '/storefront/email/sending_domains/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_domain)) {
            $_tempBody = $email_domain;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmailSettings
     *
     * Update email settings
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSettings $settings settings request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailSettingsResponse
     */
    public function updateEmailSettings($storefront_oid, $settings)
    {
        list($response) = $this->updateEmailSettingsWithHttpInfo($storefront_oid, $settings);
        return $response;
    }


    /**
     * Operation updateEmailSettingsWithHttpInfo
     *
     * Update email settings
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSettings $settings settings request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailSettingsWithHttpInfo($storefront_oid, $settings)
    {
        return $this->updateEmailSettingsWithHttpInfoRetry(true ,   $storefront_oid,   $settings);
    }


    /**
     * Operation updateEmailSettingsWithHttpInfoRetry
     *
     * Update email settings
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSettings $settings settings request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailSettingsWithHttpInfoRetry($retry ,  $storefront_oid,  $settings)
    {
        $returnType = '\ultracart\v2\models\EmailSettingsResponse';
        $request = $this->updateEmailSettingsRequest($storefront_oid, $settings);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateEmailSettingsWithHttpInfoRetry(false ,   $storefront_oid,   $settings);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEmailSettingsAsync
     *
     * Update email settings
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSettings $settings settings request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailSettingsAsync($storefront_oid, $settings)
    {
        return $this->updateEmailSettingsAsyncWithHttpInfo($storefront_oid, $settings)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmailSettingsAsyncWithHttpInfo
     *
     * Update email settings
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSettings $settings settings request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmailSettingsAsyncWithHttpInfo($storefront_oid, $settings)
    {
        $returnType = '\ultracart\v2\models\EmailSettingsResponse';
        $request = $this->updateEmailSettingsRequest($storefront_oid, $settings);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmailSettings'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\EmailSettings $settings settings request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEmailSettingsRequest($storefront_oid, $settings)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateEmailSettings'
            );
        }
        // verify the required parameter 'settings' is set
        if ($settings === null || (is_array($settings) && count($settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settings when calling updateEmailSettings'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/email/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($settings)) {
            $_tempBody = $settings;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExperiment
     *
     * Update experiment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $storefront_experiment_oid storefront_experiment_oid (required)
     * @param  \ultracart\v2\models\Experiment $experiment Experiment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ExperimentResponse
     */
    public function updateExperiment($storefront_oid, $storefront_experiment_oid, $experiment)
    {
        list($response) = $this->updateExperimentWithHttpInfo($storefront_oid, $storefront_experiment_oid, $experiment);
        return $response;
    }


    /**
     * Operation updateExperimentWithHttpInfo
     *
     * Update experiment
     *
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     * @param  \ultracart\v2\models\Experiment $experiment Experiment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ExperimentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExperimentWithHttpInfo($storefront_oid, $storefront_experiment_oid, $experiment)
    {
        return $this->updateExperimentWithHttpInfoRetry(true ,   $storefront_oid,   $storefront_experiment_oid,   $experiment);
    }


    /**
     * Operation updateExperimentWithHttpInfoRetry
     *
     * Update experiment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     * @param  \ultracart\v2\models\Experiment $experiment Experiment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ExperimentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExperimentWithHttpInfoRetry($retry ,  $storefront_oid,  $storefront_experiment_oid,  $experiment)
    {
        $returnType = '\ultracart\v2\models\ExperimentResponse';
        $request = $this->updateExperimentRequest($storefront_oid, $storefront_experiment_oid, $experiment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateExperimentWithHttpInfoRetry(false ,   $storefront_oid,   $storefront_experiment_oid,   $experiment);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ExperimentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExperimentAsync
     *
     * Update experiment
     *
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     * @param  \ultracart\v2\models\Experiment $experiment Experiment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExperimentAsync($storefront_oid, $storefront_experiment_oid, $experiment)
    {
        return $this->updateExperimentAsyncWithHttpInfo($storefront_oid, $storefront_experiment_oid, $experiment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExperimentAsyncWithHttpInfo
     *
     * Update experiment
     *
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     * @param  \ultracart\v2\models\Experiment $experiment Experiment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExperimentAsyncWithHttpInfo($storefront_oid, $storefront_experiment_oid, $experiment)
    {
        $returnType = '\ultracart\v2\models\ExperimentResponse';
        $request = $this->updateExperimentRequest($storefront_oid, $storefront_experiment_oid, $experiment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExperiment'
     *
     * @param  int $storefront_oid (required)
     * @param  int $storefront_experiment_oid (required)
     * @param  \ultracart\v2\models\Experiment $experiment Experiment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateExperimentRequest($storefront_oid, $storefront_experiment_oid, $experiment)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateExperiment'
            );
        }
        // verify the required parameter 'storefront_experiment_oid' is set
        if ($storefront_experiment_oid === null || (is_array($storefront_experiment_oid) && count($storefront_experiment_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_experiment_oid when calling updateExperiment'
            );
        }
        // verify the required parameter 'experiment' is set
        if ($experiment === null || (is_array($experiment) && count($experiment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $experiment when calling updateExperiment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($storefront_experiment_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_experiment_oid' . '}',
                ObjectSerializer::toPathValue($storefront_experiment_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($experiment)) {
            $_tempBody = $experiment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLibraryItem
     *
     * Update library item. Note that only certain fields may be updated via this method.
     *
     * @param  int $library_item_oid library_item_oid (required)
     * @param  \ultracart\v2\models\LibraryItem $library_item Library item (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LibraryItemResponse
     */
    public function updateLibraryItem($library_item_oid, $library_item)
    {
        list($response) = $this->updateLibraryItemWithHttpInfo($library_item_oid, $library_item);
        return $response;
    }


    /**
     * Operation updateLibraryItemWithHttpInfo
     *
     * Update library item. Note that only certain fields may be updated via this method.
     *
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\LibraryItem $library_item Library item (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLibraryItemWithHttpInfo($library_item_oid, $library_item)
    {
        return $this->updateLibraryItemWithHttpInfoRetry(true ,   $library_item_oid,   $library_item);
    }


    /**
     * Operation updateLibraryItemWithHttpInfoRetry
     *
     * Update library item. Note that only certain fields may be updated via this method.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\LibraryItem $library_item Library item (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LibraryItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLibraryItemWithHttpInfoRetry($retry ,  $library_item_oid,  $library_item)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->updateLibraryItemRequest($library_item_oid, $library_item);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateLibraryItemWithHttpInfoRetry(false ,   $library_item_oid,   $library_item);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LibraryItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLibraryItemAsync
     *
     * Update library item. Note that only certain fields may be updated via this method.
     *
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\LibraryItem $library_item Library item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLibraryItemAsync($library_item_oid, $library_item)
    {
        return $this->updateLibraryItemAsyncWithHttpInfo($library_item_oid, $library_item)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLibraryItemAsyncWithHttpInfo
     *
     * Update library item. Note that only certain fields may be updated via this method.
     *
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\LibraryItem $library_item Library item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLibraryItemAsyncWithHttpInfo($library_item_oid, $library_item)
    {
        $returnType = '\ultracart\v2\models\LibraryItemResponse';
        $request = $this->updateLibraryItemRequest($library_item_oid, $library_item);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLibraryItem'
     *
     * @param  int $library_item_oid (required)
     * @param  \ultracart\v2\models\LibraryItem $library_item Library item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLibraryItemRequest($library_item_oid, $library_item)
    {
        // verify the required parameter 'library_item_oid' is set
        if ($library_item_oid === null || (is_array($library_item_oid) && count($library_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $library_item_oid when calling updateLibraryItem'
            );
        }
        // verify the required parameter 'library_item' is set
        if ($library_item === null || (is_array($library_item) && count($library_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $library_item when calling updateLibraryItem'
            );
        }

        $resourcePath = '/storefront/code_library/{library_item_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($library_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'library_item_oid' . '}',
                ObjectSerializer::toPathValue($library_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($library_item)) {
            $_tempBody = $library_item;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateScreenRecordingMerchantNotes
     *
     * Update merchant notes on a screen recording
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $screen_recording_uuid screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingMerchantNotesRequest $merchant_notes_request Merchant Notes (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateScreenRecordingMerchantNotes($storefront_oid, $screen_recording_uuid, $merchant_notes_request)
    {
        $this->updateScreenRecordingMerchantNotesWithHttpInfo($storefront_oid, $screen_recording_uuid, $merchant_notes_request);
    }


    /**
     * Operation updateScreenRecordingMerchantNotesWithHttpInfo
     *
     * Update merchant notes on a screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingMerchantNotesRequest $merchant_notes_request Merchant Notes (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScreenRecordingMerchantNotesWithHttpInfo($storefront_oid, $screen_recording_uuid, $merchant_notes_request)
    {
        $this->updateScreenRecordingMerchantNotesWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_uuid,   $merchant_notes_request);
    }


    /**
     * Operation updateScreenRecordingMerchantNotesWithHttpInfoRetry
     *
     * Update merchant notes on a screen recording
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingMerchantNotesRequest $merchant_notes_request Merchant Notes (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScreenRecordingMerchantNotesWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_uuid,  $merchant_notes_request)
    {
        $returnType = '';
        $request = $this->updateScreenRecordingMerchantNotesRequest($storefront_oid, $screen_recording_uuid, $merchant_notes_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->updateScreenRecordingMerchantNotesWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_uuid,   $merchant_notes_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateScreenRecordingMerchantNotesAsync
     *
     * Update merchant notes on a screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingMerchantNotesRequest $merchant_notes_request Merchant Notes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScreenRecordingMerchantNotesAsync($storefront_oid, $screen_recording_uuid, $merchant_notes_request)
    {
        return $this->updateScreenRecordingMerchantNotesAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid, $merchant_notes_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateScreenRecordingMerchantNotesAsyncWithHttpInfo
     *
     * Update merchant notes on a screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingMerchantNotesRequest $merchant_notes_request Merchant Notes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScreenRecordingMerchantNotesAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid, $merchant_notes_request)
    {
        $returnType = '';
        $request = $this->updateScreenRecordingMerchantNotesRequest($storefront_oid, $screen_recording_uuid, $merchant_notes_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateScreenRecordingMerchantNotes'
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingMerchantNotesRequest $merchant_notes_request Merchant Notes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateScreenRecordingMerchantNotesRequest($storefront_oid, $screen_recording_uuid, $merchant_notes_request)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateScreenRecordingMerchantNotes'
            );
        }
        // verify the required parameter 'screen_recording_uuid' is set
        if ($screen_recording_uuid === null || (is_array($screen_recording_uuid) && count($screen_recording_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_uuid when calling updateScreenRecordingMerchantNotes'
            );
        }
        // verify the required parameter 'merchant_notes_request' is set
        if ($merchant_notes_request === null || (is_array($merchant_notes_request) && count($merchant_notes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_notes_request when calling updateScreenRecordingMerchantNotes'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/merchant_notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_uuid' . '}',
                ObjectSerializer::toPathValue($screen_recording_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($merchant_notes_request)) {
            $_tempBody = $merchant_notes_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateScreenRecordingSegment
     *
     * Update screen recording segment
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  int $screen_recording_segment_oid screen_recording_segment_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingSegmentResponse
     */
    public function updateScreenRecordingSegment($storefront_oid, $screen_recording_segment_oid, $segment)
    {
        list($response) = $this->updateScreenRecordingSegmentWithHttpInfo($storefront_oid, $screen_recording_segment_oid, $segment);
        return $response;
    }


    /**
     * Operation updateScreenRecordingSegmentWithHttpInfo
     *
     * Update screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScreenRecordingSegmentWithHttpInfo($storefront_oid, $screen_recording_segment_oid, $segment)
    {
        return $this->updateScreenRecordingSegmentWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_segment_oid,   $segment);
    }


    /**
     * Operation updateScreenRecordingSegmentWithHttpInfoRetry
     *
     * Update screen recording segment
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSegmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScreenRecordingSegmentWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_segment_oid,  $segment)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSegmentResponse';
        $request = $this->updateScreenRecordingSegmentRequest($storefront_oid, $screen_recording_segment_oid, $segment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateScreenRecordingSegmentWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_segment_oid,   $segment);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingSegmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateScreenRecordingSegmentAsync
     *
     * Update screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScreenRecordingSegmentAsync($storefront_oid, $screen_recording_segment_oid, $segment)
    {
        return $this->updateScreenRecordingSegmentAsyncWithHttpInfo($storefront_oid, $screen_recording_segment_oid, $segment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateScreenRecordingSegmentAsyncWithHttpInfo
     *
     * Update screen recording segment
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScreenRecordingSegmentAsyncWithHttpInfo($storefront_oid, $screen_recording_segment_oid, $segment)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSegmentResponse';
        $request = $this->updateScreenRecordingSegmentRequest($storefront_oid, $screen_recording_segment_oid, $segment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateScreenRecordingSegment'
     *
     * @param  int $storefront_oid (required)
     * @param  int $screen_recording_segment_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSegment $segment Segment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateScreenRecordingSegmentRequest($storefront_oid, $screen_recording_segment_oid, $segment)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateScreenRecordingSegment'
            );
        }
        // verify the required parameter 'screen_recording_segment_oid' is set
        if ($screen_recording_segment_oid === null || (is_array($screen_recording_segment_oid) && count($screen_recording_segment_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_segment_oid when calling updateScreenRecordingSegment'
            );
        }
        // verify the required parameter 'segment' is set
        if ($segment === null || (is_array($segment) && count($segment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $segment when calling updateScreenRecordingSegment'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_segment_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_segment_oid' . '}',
                ObjectSerializer::toPathValue($screen_recording_segment_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($segment)) {
            $_tempBody = $segment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateScreenRecordingSettings
     *
     * Update screen recording settings
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSettings $settings Settings (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ScreenRecordingSettingsResponse
     */
    public function updateScreenRecordingSettings($storefront_oid, $settings)
    {
        list($response) = $this->updateScreenRecordingSettingsWithHttpInfo($storefront_oid, $settings);
        return $response;
    }


    /**
     * Operation updateScreenRecordingSettingsWithHttpInfo
     *
     * Update screen recording settings
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSettings $settings Settings (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScreenRecordingSettingsWithHttpInfo($storefront_oid, $settings)
    {
        return $this->updateScreenRecordingSettingsWithHttpInfoRetry(true ,   $storefront_oid,   $settings);
    }


    /**
     * Operation updateScreenRecordingSettingsWithHttpInfoRetry
     *
     * Update screen recording settings
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSettings $settings Settings (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ScreenRecordingSettingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScreenRecordingSettingsWithHttpInfoRetry($retry ,  $storefront_oid,  $settings)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSettingsResponse';
        $request = $this->updateScreenRecordingSettingsRequest($storefront_oid, $settings);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateScreenRecordingSettingsWithHttpInfoRetry(false ,   $storefront_oid,   $settings);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ScreenRecordingSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateScreenRecordingSettingsAsync
     *
     * Update screen recording settings
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSettings $settings Settings (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScreenRecordingSettingsAsync($storefront_oid, $settings)
    {
        return $this->updateScreenRecordingSettingsAsyncWithHttpInfo($storefront_oid, $settings)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateScreenRecordingSettingsAsyncWithHttpInfo
     *
     * Update screen recording settings
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSettings $settings Settings (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScreenRecordingSettingsAsyncWithHttpInfo($storefront_oid, $settings)
    {
        $returnType = '\ultracart\v2\models\ScreenRecordingSettingsResponse';
        $request = $this->updateScreenRecordingSettingsRequest($storefront_oid, $settings);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateScreenRecordingSettings'
     *
     * @param  int $storefront_oid (required)
     * @param  \ultracart\v2\models\ScreenRecordingSettings $settings Settings (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateScreenRecordingSettingsRequest($storefront_oid, $settings)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateScreenRecordingSettings'
            );
        }
        // verify the required parameter 'settings' is set
        if ($settings === null || (is_array($settings) && count($settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settings when calling updateScreenRecordingSettings'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($settings)) {
            $_tempBody = $settings;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateScreenRecordingTags
     *
     * Update tags on a screen recording
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $screen_recording_uuid screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingTagsRequest $tags Tags (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateScreenRecordingTags($storefront_oid, $screen_recording_uuid, $tags)
    {
        $this->updateScreenRecordingTagsWithHttpInfo($storefront_oid, $screen_recording_uuid, $tags);
    }


    /**
     * Operation updateScreenRecordingTagsWithHttpInfo
     *
     * Update tags on a screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingTagsRequest $tags Tags (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScreenRecordingTagsWithHttpInfo($storefront_oid, $screen_recording_uuid, $tags)
    {
        $this->updateScreenRecordingTagsWithHttpInfoRetry(true ,   $storefront_oid,   $screen_recording_uuid,   $tags);
    }


    /**
     * Operation updateScreenRecordingTagsWithHttpInfoRetry
     *
     * Update tags on a screen recording
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingTagsRequest $tags Tags (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateScreenRecordingTagsWithHttpInfoRetry($retry ,  $storefront_oid,  $screen_recording_uuid,  $tags)
    {
        $returnType = '';
        $request = $this->updateScreenRecordingTagsRequest($storefront_oid, $screen_recording_uuid, $tags);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->updateScreenRecordingTagsWithHttpInfoRetry(false ,   $storefront_oid,   $screen_recording_uuid,   $tags);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateScreenRecordingTagsAsync
     *
     * Update tags on a screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingTagsRequest $tags Tags (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScreenRecordingTagsAsync($storefront_oid, $screen_recording_uuid, $tags)
    {
        return $this->updateScreenRecordingTagsAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid, $tags)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateScreenRecordingTagsAsyncWithHttpInfo
     *
     * Update tags on a screen recording
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingTagsRequest $tags Tags (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateScreenRecordingTagsAsyncWithHttpInfo($storefront_oid, $screen_recording_uuid, $tags)
    {
        $returnType = '';
        $request = $this->updateScreenRecordingTagsRequest($storefront_oid, $screen_recording_uuid, $tags);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateScreenRecordingTags'
     *
     * @param  int $storefront_oid (required)
     * @param  string $screen_recording_uuid (required)
     * @param  \ultracart\v2\models\ScreenRecordingTagsRequest $tags Tags (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateScreenRecordingTagsRequest($storefront_oid, $screen_recording_uuid, $tags)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateScreenRecordingTags'
            );
        }
        // verify the required parameter 'screen_recording_uuid' is set
        if ($screen_recording_uuid === null || (is_array($screen_recording_uuid) && count($screen_recording_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $screen_recording_uuid when calling updateScreenRecordingTags'
            );
        }
        // verify the required parameter 'tags' is set
        if ($tags === null || (is_array($tags) && count($tags) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tags when calling updateScreenRecordingTags'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($screen_recording_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'screen_recording_uuid' . '}',
                ObjectSerializer::toPathValue($screen_recording_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($tags)) {
            $_tempBody = $tags;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransactionEmail
     *
     * Updates a transaction email object
     *
     * @param  int $storefront_oid storefront_oid (required)
     * @param  string $email_id email_id (required)
     * @param  \ultracart\v2\models\TransactionEmail $transaction_email TransactionEmail (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\TransactionEmailResponse
     */
    public function updateTransactionEmail($storefront_oid, $email_id, $transaction_email)
    {
        list($response) = $this->updateTransactionEmailWithHttpInfo($storefront_oid, $email_id, $transaction_email);
        return $response;
    }


    /**
     * Operation updateTransactionEmailWithHttpInfo
     *
     * Updates a transaction email object
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     * @param  \ultracart\v2\models\TransactionEmail $transaction_email TransactionEmail (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TransactionEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransactionEmailWithHttpInfo($storefront_oid, $email_id, $transaction_email)
    {
        return $this->updateTransactionEmailWithHttpInfoRetry(true ,   $storefront_oid,   $email_id,   $transaction_email);
    }


    /**
     * Operation updateTransactionEmailWithHttpInfoRetry
     *
     * Updates a transaction email object
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     * @param  \ultracart\v2\models\TransactionEmail $transaction_email TransactionEmail (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TransactionEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransactionEmailWithHttpInfoRetry($retry ,  $storefront_oid,  $email_id,  $transaction_email)
    {
        $returnType = '\ultracart\v2\models\TransactionEmailResponse';
        $request = $this->updateTransactionEmailRequest($storefront_oid, $email_id, $transaction_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateTransactionEmailWithHttpInfoRetry(false ,   $storefront_oid,   $email_id,   $transaction_email);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\TransactionEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTransactionEmailAsync
     *
     * Updates a transaction email object
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     * @param  \ultracart\v2\models\TransactionEmail $transaction_email TransactionEmail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionEmailAsync($storefront_oid, $email_id, $transaction_email)
    {
        return $this->updateTransactionEmailAsyncWithHttpInfo($storefront_oid, $email_id, $transaction_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransactionEmailAsyncWithHttpInfo
     *
     * Updates a transaction email object
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     * @param  \ultracart\v2\models\TransactionEmail $transaction_email TransactionEmail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionEmailAsyncWithHttpInfo($storefront_oid, $email_id, $transaction_email)
    {
        $returnType = '\ultracart\v2\models\TransactionEmailResponse';
        $request = $this->updateTransactionEmailRequest($storefront_oid, $email_id, $transaction_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransactionEmail'
     *
     * @param  int $storefront_oid (required)
     * @param  string $email_id (required)
     * @param  \ultracart\v2\models\TransactionEmail $transaction_email TransactionEmail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTransactionEmailRequest($storefront_oid, $email_id, $transaction_email)
    {
        // verify the required parameter 'storefront_oid' is set
        if ($storefront_oid === null || (is_array($storefront_oid) && count($storefront_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_oid when calling updateTransactionEmail'
            );
        }
        // verify the required parameter 'email_id' is set
        if ($email_id === null || (is_array($email_id) && count($email_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_id when calling updateTransactionEmail'
            );
        }
        // verify the required parameter 'transaction_email' is set
        if ($transaction_email === null || (is_array($transaction_email) && count($transaction_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_email when calling updateTransactionEmail'
            );
        }

        $resourcePath = '/storefront/{storefront_oid}/transaction_email/list/{email_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($storefront_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_oid' . '}',
                ObjectSerializer::toPathValue($storefront_oid),
                $resourcePath
            );
        }
        // path params
        if ($email_id !== null) {
            $resourcePath = str_replace(
                '{' . 'email_id' . '}',
                ObjectSerializer::toPathValue($email_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($transaction_email)) {
            $_tempBody = $transaction_email;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTwilioAccount
     *
     * Update Twilio account
     *
     * @param  string $esp_twilio_uuid esp_twilio_uuid (required)
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\TwilioResponse
     */
    public function updateTwilioAccount($esp_twilio_uuid, $twilio)
    {
        list($response) = $this->updateTwilioAccountWithHttpInfo($esp_twilio_uuid, $twilio);
        return $response;
    }


    /**
     * Operation updateTwilioAccountWithHttpInfo
     *
     * Update Twilio account
     *
     * @param  string $esp_twilio_uuid (required)
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TwilioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTwilioAccountWithHttpInfo($esp_twilio_uuid, $twilio)
    {
        return $this->updateTwilioAccountWithHttpInfoRetry(true ,   $esp_twilio_uuid,   $twilio);
    }


    /**
     * Operation updateTwilioAccountWithHttpInfoRetry
     *
     * Update Twilio account
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $esp_twilio_uuid (required)
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\TwilioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTwilioAccountWithHttpInfoRetry($retry ,  $esp_twilio_uuid,  $twilio)
    {
        $returnType = '\ultracart\v2\models\TwilioResponse';
        $request = $this->updateTwilioAccountRequest($esp_twilio_uuid, $twilio);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateTwilioAccountWithHttpInfoRetry(false ,   $esp_twilio_uuid,   $twilio);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\TwilioResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTwilioAccountAsync
     *
     * Update Twilio account
     *
     * @param  string $esp_twilio_uuid (required)
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTwilioAccountAsync($esp_twilio_uuid, $twilio)
    {
        return $this->updateTwilioAccountAsyncWithHttpInfo($esp_twilio_uuid, $twilio)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTwilioAccountAsyncWithHttpInfo
     *
     * Update Twilio account
     *
     * @param  string $esp_twilio_uuid (required)
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTwilioAccountAsyncWithHttpInfo($esp_twilio_uuid, $twilio)
    {
        $returnType = '\ultracart\v2\models\TwilioResponse';
        $request = $this->updateTwilioAccountRequest($esp_twilio_uuid, $twilio);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTwilioAccount'
     *
     * @param  string $esp_twilio_uuid (required)
     * @param  \ultracart\v2\models\Twilio $twilio Twilio (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTwilioAccountRequest($esp_twilio_uuid, $twilio)
    {
        // verify the required parameter 'esp_twilio_uuid' is set
        if ($esp_twilio_uuid === null || (is_array($esp_twilio_uuid) && count($esp_twilio_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $esp_twilio_uuid when calling updateTwilioAccount'
            );
        }
        // verify the required parameter 'twilio' is set
        if ($twilio === null || (is_array($twilio) && count($twilio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $twilio when calling updateTwilioAccount'
            );
        }

        $resourcePath = '/storefront/twilio/accounts/{esp_twilio_uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($esp_twilio_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'esp_twilio_uuid' . '}',
                ObjectSerializer::toPathValue($esp_twilio_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($twilio)) {
            $_tempBody = $twilio;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateRuler
     *
     * Validate AWS Event Ruler
     *
     * @param  \ultracart\v2\models\RulerValidationRequest $ruler_validate_request Ruler Validate Request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\RulerValidationResponse
     */
    public function validateRuler($ruler_validate_request)
    {
        list($response) = $this->validateRulerWithHttpInfo($ruler_validate_request);
        return $response;
    }


    /**
     * Operation validateRulerWithHttpInfo
     *
     * Validate AWS Event Ruler
     *
     * @param  \ultracart\v2\models\RulerValidationRequest $ruler_validate_request Ruler Validate Request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\RulerValidationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateRulerWithHttpInfo($ruler_validate_request)
    {
        return $this->validateRulerWithHttpInfoRetry(true ,   $ruler_validate_request);
    }


    /**
     * Operation validateRulerWithHttpInfoRetry
     *
     * Validate AWS Event Ruler
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\RulerValidationRequest $ruler_validate_request Ruler Validate Request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\RulerValidationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateRulerWithHttpInfoRetry($retry ,  $ruler_validate_request)
    {
        $returnType = '\ultracart\v2\models\RulerValidationResponse';
        $request = $this->validateRulerRequest($ruler_validate_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->validateRulerWithHttpInfoRetry(false ,   $ruler_validate_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\RulerValidationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateRulerAsync
     *
     * Validate AWS Event Ruler
     *
     * @param  \ultracart\v2\models\RulerValidationRequest $ruler_validate_request Ruler Validate Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateRulerAsync($ruler_validate_request)
    {
        return $this->validateRulerAsyncWithHttpInfo($ruler_validate_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateRulerAsyncWithHttpInfo
     *
     * Validate AWS Event Ruler
     *
     * @param  \ultracart\v2\models\RulerValidationRequest $ruler_validate_request Ruler Validate Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateRulerAsyncWithHttpInfo($ruler_validate_request)
    {
        $returnType = '\ultracart\v2\models\RulerValidationResponse';
        $request = $this->validateRulerRequest($ruler_validate_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateRuler'
     *
     * @param  \ultracart\v2\models\RulerValidationRequest $ruler_validate_request Ruler Validate Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateRulerRequest($ruler_validate_request)
    {
        // verify the required parameter 'ruler_validate_request' is set
        if ($ruler_validate_request === null || (is_array($ruler_validate_request) && count($ruler_validate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruler_validate_request when calling validateRuler'
            );
        }

        $resourcePath = '/storefront/ruler/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($ruler_validate_request)) {
            $_tempBody = $ruler_validate_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
