<?php
/**
 * CouponApi
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ultracart\v2\ApiException;
use ultracart\v2\Configuration;
use ultracart\v2\HeaderSelector;
use ultracart\v2\ObjectSerializer;

/**
 * CouponApi Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CouponApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }


    /**
     * @param string $simple_key api key
     * @param int $max_retry_seconds 0 to disable, else the maximum number of seconds to wait and automatically retry when rate limit is hit
     * @param string $verify passed to Guzzle to enable/disable ssl verify
     */
    public static function usingApiKey( $simple_key, $max_retry_seconds = 0, $verify = true) {
        $config = new Configuration();
        $config->setApiKey('x-ultracart-simple-key', $simple_key);
        $config->setMaxRetrySeconds($max_retry_seconds);

        $client = new Client(['verify' => $verify, 'debug' => false]);
        $headerSelector = new HeaderSelector(/* leave null for version tied to this sdk version */);
        $api = new CouponApi($client, $config, $headerSelector);
        return $api;
    }


    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteCoupon
     *
     * Delete a coupon
     *
     * @param  int $coupon_oid The coupon_oid to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCoupon($coupon_oid)
    {
        $this->deleteCouponWithHttpInfo($coupon_oid);
    }


    /**
     * Operation deleteCouponWithHttpInfo
     *
     * Delete a coupon
     *
     * @param  int $coupon_oid The coupon_oid to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCouponWithHttpInfo($coupon_oid)
    {
        $this->deleteCouponWithHttpInfoRetry(true ,   $coupon_oid);
    }


    /**
     * Operation deleteCouponWithHttpInfoRetry
     *
     * Delete a coupon
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $coupon_oid The coupon_oid to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCouponWithHttpInfoRetry($retry ,  $coupon_oid)
    {
        $returnType = '';
        $request = $this->deleteCouponRequest($coupon_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteCouponWithHttpInfoRetry(false ,   $coupon_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCouponAsync
     *
     * Delete a coupon
     *
     * @param  int $coupon_oid The coupon_oid to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponAsync($coupon_oid)
    {
        return $this->deleteCouponAsyncWithHttpInfo($coupon_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCouponAsyncWithHttpInfo
     *
     * Delete a coupon
     *
     * @param  int $coupon_oid The coupon_oid to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponAsyncWithHttpInfo($coupon_oid)
    {
        $returnType = '';
        $request = $this->deleteCouponRequest($coupon_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCoupon'
     *
     * @param  int $coupon_oid The coupon_oid to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCouponRequest($coupon_oid)
    {
        // verify the required parameter 'coupon_oid' is set
        if ($coupon_oid === null || (is_array($coupon_oid) && count($coupon_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_oid when calling deleteCoupon'
            );
        }

        $resourcePath = '/coupon/coupons/{coupon_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($coupon_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'coupon_oid' . '}',
                ObjectSerializer::toPathValue($coupon_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCouponsByCode
     *
     * Deletes multiple coupons
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCouponsByCode($coupon_delete_request)
    {
        $this->deleteCouponsByCodeWithHttpInfo($coupon_delete_request);
    }


    /**
     * Operation deleteCouponsByCodeWithHttpInfo
     *
     * Deletes multiple coupons
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCouponsByCodeWithHttpInfo($coupon_delete_request)
    {
        $this->deleteCouponsByCodeWithHttpInfoRetry(true ,   $coupon_delete_request);
    }


    /**
     * Operation deleteCouponsByCodeWithHttpInfoRetry
     *
     * Deletes multiple coupons
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCouponsByCodeWithHttpInfoRetry($retry ,  $coupon_delete_request)
    {
        $returnType = '';
        $request = $this->deleteCouponsByCodeRequest($coupon_delete_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteCouponsByCodeWithHttpInfoRetry(false ,   $coupon_delete_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCouponsByCodeAsync
     *
     * Deletes multiple coupons
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponsByCodeAsync($coupon_delete_request)
    {
        return $this->deleteCouponsByCodeAsyncWithHttpInfo($coupon_delete_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCouponsByCodeAsyncWithHttpInfo
     *
     * Deletes multiple coupons
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponsByCodeAsyncWithHttpInfo($coupon_delete_request)
    {
        $returnType = '';
        $request = $this->deleteCouponsByCodeRequest($coupon_delete_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCouponsByCode'
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCouponsByCodeRequest($coupon_delete_request)
    {
        // verify the required parameter 'coupon_delete_request' is set
        if ($coupon_delete_request === null || (is_array($coupon_delete_request) && count($coupon_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_delete_request when calling deleteCouponsByCode'
            );
        }

        $resourcePath = '/coupon/coupons/by_code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($coupon_delete_request)) {
            $_tempBody = $coupon_delete_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCouponsByOid
     *
     * Deletes multiple coupons
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCouponsByOid($coupon_delete_request)
    {
        $this->deleteCouponsByOidWithHttpInfo($coupon_delete_request);
    }


    /**
     * Operation deleteCouponsByOidWithHttpInfo
     *
     * Deletes multiple coupons
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCouponsByOidWithHttpInfo($coupon_delete_request)
    {
        $this->deleteCouponsByOidWithHttpInfoRetry(true ,   $coupon_delete_request);
    }


    /**
     * Operation deleteCouponsByOidWithHttpInfoRetry
     *
     * Deletes multiple coupons
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCouponsByOidWithHttpInfoRetry($retry ,  $coupon_delete_request)
    {
        $returnType = '';
        $request = $this->deleteCouponsByOidRequest($coupon_delete_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteCouponsByOidWithHttpInfoRetry(false ,   $coupon_delete_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCouponsByOidAsync
     *
     * Deletes multiple coupons
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponsByOidAsync($coupon_delete_request)
    {
        return $this->deleteCouponsByOidAsyncWithHttpInfo($coupon_delete_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCouponsByOidAsyncWithHttpInfo
     *
     * Deletes multiple coupons
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponsByOidAsyncWithHttpInfo($coupon_delete_request)
    {
        $returnType = '';
        $request = $this->deleteCouponsByOidRequest($coupon_delete_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCouponsByOid'
     *
     * @param  \ultracart\v2\models\CouponDeletesRequest $coupon_delete_request Coupon oids to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCouponsByOidRequest($coupon_delete_request)
    {
        // verify the required parameter 'coupon_delete_request' is set
        if ($coupon_delete_request === null || (is_array($coupon_delete_request) && count($coupon_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_delete_request when calling deleteCouponsByOid'
            );
        }

        $resourcePath = '/coupon/coupons/by_oid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($coupon_delete_request)) {
            $_tempBody = $coupon_delete_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation doesCouponCodeExist
     *
     * Determines if a coupon merchant code already exists
     *
     * @param  string $merchant_code The coupon merchant code to examine. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponExistsResponse
     */
    public function doesCouponCodeExist($merchant_code)
    {
        list($response) = $this->doesCouponCodeExistWithHttpInfo($merchant_code);
        return $response;
    }


    /**
     * Operation doesCouponCodeExistWithHttpInfo
     *
     * Determines if a coupon merchant code already exists
     *
     * @param  string $merchant_code The coupon merchant code to examine. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponExistsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function doesCouponCodeExistWithHttpInfo($merchant_code)
    {
        return $this->doesCouponCodeExistWithHttpInfoRetry(true ,   $merchant_code);
    }


    /**
     * Operation doesCouponCodeExistWithHttpInfoRetry
     *
     * Determines if a coupon merchant code already exists
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $merchant_code The coupon merchant code to examine. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponExistsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function doesCouponCodeExistWithHttpInfoRetry($retry ,  $merchant_code)
    {
        $returnType = '\ultracart\v2\models\CouponExistsResponse';
        $request = $this->doesCouponCodeExistRequest($merchant_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->doesCouponCodeExistWithHttpInfoRetry(false ,   $merchant_code);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponExistsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation doesCouponCodeExistAsync
     *
     * Determines if a coupon merchant code already exists
     *
     * @param  string $merchant_code The coupon merchant code to examine. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function doesCouponCodeExistAsync($merchant_code)
    {
        return $this->doesCouponCodeExistAsyncWithHttpInfo($merchant_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation doesCouponCodeExistAsyncWithHttpInfo
     *
     * Determines if a coupon merchant code already exists
     *
     * @param  string $merchant_code The coupon merchant code to examine. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function doesCouponCodeExistAsyncWithHttpInfo($merchant_code)
    {
        $returnType = '\ultracart\v2\models\CouponExistsResponse';
        $request = $this->doesCouponCodeExistRequest($merchant_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'doesCouponCodeExist'
     *
     * @param  string $merchant_code The coupon merchant code to examine. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function doesCouponCodeExistRequest($merchant_code)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null || (is_array($merchant_code) && count($merchant_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling doesCouponCodeExist'
            );
        }

        $resourcePath = '/coupon/coupons/merchant_code/{merchant_code}/exists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchant_code' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateCouponCodes
     *
     * Generates one time codes for a coupon
     *
     * @param  int $coupon_oid The coupon oid to generate codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponCodesResponse
     */
    public function generateCouponCodes($coupon_oid, $coupon_codes_request)
    {
        list($response) = $this->generateCouponCodesWithHttpInfo($coupon_oid, $coupon_codes_request);
        return $response;
    }


    /**
     * Operation generateCouponCodesWithHttpInfo
     *
     * Generates one time codes for a coupon
     *
     * @param  int $coupon_oid The coupon oid to generate codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponCodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateCouponCodesWithHttpInfo($coupon_oid, $coupon_codes_request)
    {
        return $this->generateCouponCodesWithHttpInfoRetry(true ,   $coupon_oid,   $coupon_codes_request);
    }


    /**
     * Operation generateCouponCodesWithHttpInfoRetry
     *
     * Generates one time codes for a coupon
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $coupon_oid The coupon oid to generate codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponCodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateCouponCodesWithHttpInfoRetry($retry ,  $coupon_oid,  $coupon_codes_request)
    {
        $returnType = '\ultracart\v2\models\CouponCodesResponse';
        $request = $this->generateCouponCodesRequest($coupon_oid, $coupon_codes_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->generateCouponCodesWithHttpInfoRetry(false ,   $coupon_oid,   $coupon_codes_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponCodesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateCouponCodesAsync
     *
     * Generates one time codes for a coupon
     *
     * @param  int $coupon_oid The coupon oid to generate codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCouponCodesAsync($coupon_oid, $coupon_codes_request)
    {
        return $this->generateCouponCodesAsyncWithHttpInfo($coupon_oid, $coupon_codes_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateCouponCodesAsyncWithHttpInfo
     *
     * Generates one time codes for a coupon
     *
     * @param  int $coupon_oid The coupon oid to generate codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCouponCodesAsyncWithHttpInfo($coupon_oid, $coupon_codes_request)
    {
        $returnType = '\ultracart\v2\models\CouponCodesResponse';
        $request = $this->generateCouponCodesRequest($coupon_oid, $coupon_codes_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateCouponCodes'
     *
     * @param  int $coupon_oid The coupon oid to generate codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generateCouponCodesRequest($coupon_oid, $coupon_codes_request)
    {
        // verify the required parameter 'coupon_oid' is set
        if ($coupon_oid === null || (is_array($coupon_oid) && count($coupon_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_oid when calling generateCouponCodes'
            );
        }
        // verify the required parameter 'coupon_codes_request' is set
        if ($coupon_codes_request === null || (is_array($coupon_codes_request) && count($coupon_codes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_codes_request when calling generateCouponCodes'
            );
        }

        $resourcePath = '/coupon/coupons/{coupon_oid}/generate_codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($coupon_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'coupon_oid' . '}',
                ObjectSerializer::toPathValue($coupon_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($coupon_codes_request)) {
            $_tempBody = $coupon_codes_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateOneTimeCodesByMerchantCode
     *
     * Generates one time codes by merchant code
     *
     * @param  string $merchant_code The merchant code to generate one time codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponCodesResponse
     */
    public function generateOneTimeCodesByMerchantCode($merchant_code, $coupon_codes_request)
    {
        list($response) = $this->generateOneTimeCodesByMerchantCodeWithHttpInfo($merchant_code, $coupon_codes_request);
        return $response;
    }


    /**
     * Operation generateOneTimeCodesByMerchantCodeWithHttpInfo
     *
     * Generates one time codes by merchant code
     *
     * @param  string $merchant_code The merchant code to generate one time codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponCodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateOneTimeCodesByMerchantCodeWithHttpInfo($merchant_code, $coupon_codes_request)
    {
        return $this->generateOneTimeCodesByMerchantCodeWithHttpInfoRetry(true ,   $merchant_code,   $coupon_codes_request);
    }


    /**
     * Operation generateOneTimeCodesByMerchantCodeWithHttpInfoRetry
     *
     * Generates one time codes by merchant code
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $merchant_code The merchant code to generate one time codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponCodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateOneTimeCodesByMerchantCodeWithHttpInfoRetry($retry ,  $merchant_code,  $coupon_codes_request)
    {
        $returnType = '\ultracart\v2\models\CouponCodesResponse';
        $request = $this->generateOneTimeCodesByMerchantCodeRequest($merchant_code, $coupon_codes_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->generateOneTimeCodesByMerchantCodeWithHttpInfoRetry(false ,   $merchant_code,   $coupon_codes_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponCodesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateOneTimeCodesByMerchantCodeAsync
     *
     * Generates one time codes by merchant code
     *
     * @param  string $merchant_code The merchant code to generate one time codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateOneTimeCodesByMerchantCodeAsync($merchant_code, $coupon_codes_request)
    {
        return $this->generateOneTimeCodesByMerchantCodeAsyncWithHttpInfo($merchant_code, $coupon_codes_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateOneTimeCodesByMerchantCodeAsyncWithHttpInfo
     *
     * Generates one time codes by merchant code
     *
     * @param  string $merchant_code The merchant code to generate one time codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateOneTimeCodesByMerchantCodeAsyncWithHttpInfo($merchant_code, $coupon_codes_request)
    {
        $returnType = '\ultracart\v2\models\CouponCodesResponse';
        $request = $this->generateOneTimeCodesByMerchantCodeRequest($merchant_code, $coupon_codes_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateOneTimeCodesByMerchantCode'
     *
     * @param  string $merchant_code The merchant code to generate one time codes. (required)
     * @param  \ultracart\v2\models\CouponCodesRequest $coupon_codes_request Coupon code generation parameters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generateOneTimeCodesByMerchantCodeRequest($merchant_code, $coupon_codes_request)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null || (is_array($merchant_code) && count($merchant_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling generateOneTimeCodesByMerchantCode'
            );
        }
        // verify the required parameter 'coupon_codes_request' is set
        if ($coupon_codes_request === null || (is_array($coupon_codes_request) && count($coupon_codes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_codes_request when calling generateOneTimeCodesByMerchantCode'
            );
        }

        $resourcePath = '/coupon/coupons/merchant_code/{merchant_code}/generate_codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchant_code' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($coupon_codes_request)) {
            $_tempBody = $coupon_codes_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutoApply
     *
     * Retrieve auto apply rules and conditions
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponAutoApplyConditions
     */
    public function getAutoApply()
    {
        list($response) = $this->getAutoApplyWithHttpInfo();
        return $response;
    }


    /**
     * Operation getAutoApplyWithHttpInfo
     *
     * Retrieve auto apply rules and conditions
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponAutoApplyConditions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutoApplyWithHttpInfo()
    {
        return $this->getAutoApplyWithHttpInfoRetry(true );
    }


    /**
     * Operation getAutoApplyWithHttpInfoRetry
     *
     * Retrieve auto apply rules and conditions
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponAutoApplyConditions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutoApplyWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\CouponAutoApplyConditions';
        $request = $this->getAutoApplyRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getAutoApplyWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponAutoApplyConditions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutoApplyAsync
     *
     * Retrieve auto apply rules and conditions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoApplyAsync()
    {
        return $this->getAutoApplyAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutoApplyAsyncWithHttpInfo
     *
     * Retrieve auto apply rules and conditions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutoApplyAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\CouponAutoApplyConditions';
        $request = $this->getAutoApplyRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutoApply'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAutoApplyRequest()
    {

        $resourcePath = '/coupon/auto_apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCoupon
     *
     * Retrieve a coupon
     *
     * @param  int $coupon_oid The coupon oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponResponse
     */
    public function getCoupon($coupon_oid, $_expand = null)
    {
        list($response) = $this->getCouponWithHttpInfo($coupon_oid, $_expand);
        return $response;
    }


    /**
     * Operation getCouponWithHttpInfo
     *
     * Retrieve a coupon
     *
     * @param  int $coupon_oid The coupon oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponWithHttpInfo($coupon_oid, $_expand = null)
    {
        return $this->getCouponWithHttpInfoRetry(true ,   $coupon_oid,   $_expand);
    }


    /**
     * Operation getCouponWithHttpInfoRetry
     *
     * Retrieve a coupon
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $coupon_oid The coupon oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponWithHttpInfoRetry($retry ,  $coupon_oid,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponResponse';
        $request = $this->getCouponRequest($coupon_oid, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCouponWithHttpInfoRetry(false ,   $coupon_oid,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCouponAsync
     *
     * Retrieve a coupon
     *
     * @param  int $coupon_oid The coupon oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponAsync($coupon_oid, $_expand = null)
    {
        return $this->getCouponAsyncWithHttpInfo($coupon_oid, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponAsyncWithHttpInfo
     *
     * Retrieve a coupon
     *
     * @param  int $coupon_oid The coupon oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponAsyncWithHttpInfo($coupon_oid, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponResponse';
        $request = $this->getCouponRequest($coupon_oid, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCoupon'
     *
     * @param  int $coupon_oid The coupon oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCouponRequest($coupon_oid, $_expand = null)
    {
        // verify the required parameter 'coupon_oid' is set
        if ($coupon_oid === null || (is_array($coupon_oid) && count($coupon_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_oid when calling getCoupon'
            );
        }

        $resourcePath = '/coupon/coupons/{coupon_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($coupon_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'coupon_oid' . '}',
                ObjectSerializer::toPathValue($coupon_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponByMerchantCode
     *
     * Retrieve a coupon by merchant code
     *
     * @param  string $merchant_code The coupon merchant code to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponResponse
     */
    public function getCouponByMerchantCode($merchant_code, $_expand = null)
    {
        list($response) = $this->getCouponByMerchantCodeWithHttpInfo($merchant_code, $_expand);
        return $response;
    }


    /**
     * Operation getCouponByMerchantCodeWithHttpInfo
     *
     * Retrieve a coupon by merchant code
     *
     * @param  string $merchant_code The coupon merchant code to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponByMerchantCodeWithHttpInfo($merchant_code, $_expand = null)
    {
        return $this->getCouponByMerchantCodeWithHttpInfoRetry(true ,   $merchant_code,   $_expand);
    }


    /**
     * Operation getCouponByMerchantCodeWithHttpInfoRetry
     *
     * Retrieve a coupon by merchant code
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $merchant_code The coupon merchant code to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponByMerchantCodeWithHttpInfoRetry($retry ,  $merchant_code,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponResponse';
        $request = $this->getCouponByMerchantCodeRequest($merchant_code, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCouponByMerchantCodeWithHttpInfoRetry(false ,   $merchant_code,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCouponByMerchantCodeAsync
     *
     * Retrieve a coupon by merchant code
     *
     * @param  string $merchant_code The coupon merchant code to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponByMerchantCodeAsync($merchant_code, $_expand = null)
    {
        return $this->getCouponByMerchantCodeAsyncWithHttpInfo($merchant_code, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponByMerchantCodeAsyncWithHttpInfo
     *
     * Retrieve a coupon by merchant code
     *
     * @param  string $merchant_code The coupon merchant code to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponByMerchantCodeAsyncWithHttpInfo($merchant_code, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponResponse';
        $request = $this->getCouponByMerchantCodeRequest($merchant_code, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponByMerchantCode'
     *
     * @param  string $merchant_code The coupon merchant code to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCouponByMerchantCodeRequest($merchant_code, $_expand = null)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null || (is_array($merchant_code) && count($merchant_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling getCouponByMerchantCode'
            );
        }

        $resourcePath = '/coupon/coupons/merchant_code/{merchant_code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchant_code' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCoupons
     *
     * Retrieve coupons
     *
     * @param  string $merchant_code Merchant code (optional)
     * @param  string $description Description (optional)
     * @param  string $coupon_type Coupon type (optional)
     * @param  string $start_date_begin Start date begin (optional)
     * @param  string $start_date_end Start date end (optional)
     * @param  string $expiration_date_begin Expiration date begin (optional)
     * @param  string $expiration_date_end Expiration date end (optional)
     * @param  int $affiliate_oid Affiliate oid (optional)
     * @param  bool $exclude_expired Exclude expired (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponsResponse
     */
    public function getCoupons($merchant_code = null, $description = null, $coupon_type = null, $start_date_begin = null, $start_date_end = null, $expiration_date_begin = null, $expiration_date_end = null, $affiliate_oid = null, $exclude_expired = null, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        list($response) = $this->getCouponsWithHttpInfo($merchant_code, $description, $coupon_type, $start_date_begin, $start_date_end, $expiration_date_begin, $expiration_date_end, $affiliate_oid, $exclude_expired, $_limit, $_offset, $_sort, $_expand);
        return $response;
    }


    /**
     * Operation getCouponsWithHttpInfo
     *
     * Retrieve coupons
     *
     * @param  string $merchant_code Merchant code (optional)
     * @param  string $description Description (optional)
     * @param  string $coupon_type Coupon type (optional)
     * @param  string $start_date_begin Start date begin (optional)
     * @param  string $start_date_end Start date end (optional)
     * @param  string $expiration_date_begin Expiration date begin (optional)
     * @param  string $expiration_date_end Expiration date end (optional)
     * @param  int $affiliate_oid Affiliate oid (optional)
     * @param  bool $exclude_expired Exclude expired (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponsWithHttpInfo($merchant_code = null, $description = null, $coupon_type = null, $start_date_begin = null, $start_date_end = null, $expiration_date_begin = null, $expiration_date_end = null, $affiliate_oid = null, $exclude_expired = null, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        return $this->getCouponsWithHttpInfoRetry(true ,   $merchant_code,   $description,   $coupon_type,   $start_date_begin,   $start_date_end,   $expiration_date_begin,   $expiration_date_end,   $affiliate_oid,   $exclude_expired,   $_limit,   $_offset,   $_sort,   $_expand);
    }


    /**
     * Operation getCouponsWithHttpInfoRetry
     *
     * Retrieve coupons
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $merchant_code Merchant code (optional)
     * @param  string $description Description (optional)
     * @param  string $coupon_type Coupon type (optional)
     * @param  string $start_date_begin Start date begin (optional)
     * @param  string $start_date_end Start date end (optional)
     * @param  string $expiration_date_begin Expiration date begin (optional)
     * @param  string $expiration_date_end Expiration date end (optional)
     * @param  int $affiliate_oid Affiliate oid (optional)
     * @param  bool $exclude_expired Exclude expired (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponsWithHttpInfoRetry($retry ,  $merchant_code = null,  $description = null,  $coupon_type = null,  $start_date_begin = null,  $start_date_end = null,  $expiration_date_begin = null,  $expiration_date_end = null,  $affiliate_oid = null,  $exclude_expired = null,  $_limit = '100',  $_offset = '0',  $_sort = null,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponsResponse';
        $request = $this->getCouponsRequest($merchant_code, $description, $coupon_type, $start_date_begin, $start_date_end, $expiration_date_begin, $expiration_date_end, $affiliate_oid, $exclude_expired, $_limit, $_offset, $_sort, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCouponsWithHttpInfoRetry(false ,   $merchant_code,   $description,   $coupon_type,   $start_date_begin,   $start_date_end,   $expiration_date_begin,   $expiration_date_end,   $affiliate_oid,   $exclude_expired,   $_limit,   $_offset,   $_sort,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCouponsAsync
     *
     * Retrieve coupons
     *
     * @param  string $merchant_code Merchant code (optional)
     * @param  string $description Description (optional)
     * @param  string $coupon_type Coupon type (optional)
     * @param  string $start_date_begin Start date begin (optional)
     * @param  string $start_date_end Start date end (optional)
     * @param  string $expiration_date_begin Expiration date begin (optional)
     * @param  string $expiration_date_end Expiration date end (optional)
     * @param  int $affiliate_oid Affiliate oid (optional)
     * @param  bool $exclude_expired Exclude expired (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponsAsync($merchant_code = null, $description = null, $coupon_type = null, $start_date_begin = null, $start_date_end = null, $expiration_date_begin = null, $expiration_date_end = null, $affiliate_oid = null, $exclude_expired = null, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        return $this->getCouponsAsyncWithHttpInfo($merchant_code, $description, $coupon_type, $start_date_begin, $start_date_end, $expiration_date_begin, $expiration_date_end, $affiliate_oid, $exclude_expired, $_limit, $_offset, $_sort, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponsAsyncWithHttpInfo
     *
     * Retrieve coupons
     *
     * @param  string $merchant_code Merchant code (optional)
     * @param  string $description Description (optional)
     * @param  string $coupon_type Coupon type (optional)
     * @param  string $start_date_begin Start date begin (optional)
     * @param  string $start_date_end Start date end (optional)
     * @param  string $expiration_date_begin Expiration date begin (optional)
     * @param  string $expiration_date_end Expiration date end (optional)
     * @param  int $affiliate_oid Affiliate oid (optional)
     * @param  bool $exclude_expired Exclude expired (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponsAsyncWithHttpInfo($merchant_code = null, $description = null, $coupon_type = null, $start_date_begin = null, $start_date_end = null, $expiration_date_begin = null, $expiration_date_end = null, $affiliate_oid = null, $exclude_expired = null, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponsResponse';
        $request = $this->getCouponsRequest($merchant_code, $description, $coupon_type, $start_date_begin, $start_date_end, $expiration_date_begin, $expiration_date_end, $affiliate_oid, $exclude_expired, $_limit, $_offset, $_sort, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCoupons'
     *
     * @param  string $merchant_code Merchant code (optional)
     * @param  string $description Description (optional)
     * @param  string $coupon_type Coupon type (optional)
     * @param  string $start_date_begin Start date begin (optional)
     * @param  string $start_date_end Start date end (optional)
     * @param  string $expiration_date_begin Expiration date begin (optional)
     * @param  string $expiration_date_end Expiration date end (optional)
     * @param  int $affiliate_oid Affiliate oid (optional)
     * @param  bool $exclude_expired Exclude expired (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCouponsRequest($merchant_code = null, $description = null, $coupon_type = null, $start_date_begin = null, $start_date_end = null, $expiration_date_begin = null, $expiration_date_end = null, $affiliate_oid = null, $exclude_expired = null, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {

        $resourcePath = '/coupon/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchant_code !== null) {
            $queryParams['merchant_code'] = ObjectSerializer::toQueryValue($merchant_code);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($coupon_type !== null) {
            $queryParams['coupon_type'] = ObjectSerializer::toQueryValue($coupon_type);
        }
        // query params
        if ($start_date_begin !== null) {
            $queryParams['start_date_begin'] = ObjectSerializer::toQueryValue($start_date_begin);
        }
        // query params
        if ($start_date_end !== null) {
            $queryParams['start_date_end'] = ObjectSerializer::toQueryValue($start_date_end);
        }
        // query params
        if ($expiration_date_begin !== null) {
            $queryParams['expiration_date_begin'] = ObjectSerializer::toQueryValue($expiration_date_begin);
        }
        // query params
        if ($expiration_date_end !== null) {
            $queryParams['expiration_date_end'] = ObjectSerializer::toQueryValue($expiration_date_end);
        }
        // query params
        if ($affiliate_oid !== null) {
            $queryParams['affiliate_oid'] = ObjectSerializer::toQueryValue($affiliate_oid);
        }
        // query params
        if ($exclude_expired !== null) {
            $queryParams['exclude_expired'] = ObjectSerializer::toQueryValue($exclude_expired);
        }
        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }
        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponsByQuery
     *
     * Retrieve coupons by query
     *
     * @param  \ultracart\v2\models\CouponQuery $coupon_query Coupon query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponsResponse
     */
    public function getCouponsByQuery($coupon_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        list($response) = $this->getCouponsByQueryWithHttpInfo($coupon_query, $_limit, $_offset, $_sort, $_expand);
        return $response;
    }


    /**
     * Operation getCouponsByQueryWithHttpInfo
     *
     * Retrieve coupons by query
     *
     * @param  \ultracart\v2\models\CouponQuery $coupon_query Coupon query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponsByQueryWithHttpInfo($coupon_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        return $this->getCouponsByQueryWithHttpInfoRetry(true ,   $coupon_query,   $_limit,   $_offset,   $_sort,   $_expand);
    }


    /**
     * Operation getCouponsByQueryWithHttpInfoRetry
     *
     * Retrieve coupons by query
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CouponQuery $coupon_query Coupon query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponsByQueryWithHttpInfoRetry($retry ,  $coupon_query,  $_limit = '100',  $_offset = '0',  $_sort = null,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponsResponse';
        $request = $this->getCouponsByQueryRequest($coupon_query, $_limit, $_offset, $_sort, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCouponsByQueryWithHttpInfoRetry(false ,   $coupon_query,   $_limit,   $_offset,   $_sort,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCouponsByQueryAsync
     *
     * Retrieve coupons by query
     *
     * @param  \ultracart\v2\models\CouponQuery $coupon_query Coupon query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponsByQueryAsync($coupon_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        return $this->getCouponsByQueryAsyncWithHttpInfo($coupon_query, $_limit, $_offset, $_sort, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponsByQueryAsyncWithHttpInfo
     *
     * Retrieve coupons by query
     *
     * @param  \ultracart\v2\models\CouponQuery $coupon_query Coupon query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponsByQueryAsyncWithHttpInfo($coupon_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponsResponse';
        $request = $this->getCouponsByQueryRequest($coupon_query, $_limit, $_offset, $_sort, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponsByQuery'
     *
     * @param  \ultracart\v2\models\CouponQuery $coupon_query Coupon query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCouponsByQueryRequest($coupon_query, $_limit = '100', $_offset = '0', $_sort = null, $_expand = null)
    {
        // verify the required parameter 'coupon_query' is set
        if ($coupon_query === null || (is_array($coupon_query) && count($coupon_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_query when calling getCouponsByQuery'
            );
        }

        $resourcePath = '/coupon/coupons/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }
        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;
        if (isset($coupon_query)) {
            $_tempBody = $coupon_query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEditorValues
     *
     * Retrieve values needed for a coupon editor
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponEditorValues
     */
    public function getEditorValues()
    {
        list($response) = $this->getEditorValuesWithHttpInfo();
        return $response;
    }


    /**
     * Operation getEditorValuesWithHttpInfo
     *
     * Retrieve values needed for a coupon editor
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponEditorValues, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEditorValuesWithHttpInfo()
    {
        return $this->getEditorValuesWithHttpInfoRetry(true );
    }


    /**
     * Operation getEditorValuesWithHttpInfoRetry
     *
     * Retrieve values needed for a coupon editor
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponEditorValues, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEditorValuesWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\CouponEditorValues';
        $request = $this->getEditorValuesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEditorValuesWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponEditorValues',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEditorValuesAsync
     *
     * Retrieve values needed for a coupon editor
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEditorValuesAsync()
    {
        return $this->getEditorValuesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEditorValuesAsyncWithHttpInfo
     *
     * Retrieve values needed for a coupon editor
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEditorValuesAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\CouponEditorValues';
        $request = $this->getEditorValuesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEditorValues'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEditorValuesRequest()
    {

        $resourcePath = '/coupon/editor_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertCoupon
     *
     * Insert a coupon
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponResponse
     */
    public function insertCoupon($coupon, $_expand = null)
    {
        list($response) = $this->insertCouponWithHttpInfo($coupon, $_expand);
        return $response;
    }


    /**
     * Operation insertCouponWithHttpInfo
     *
     * Insert a coupon
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertCouponWithHttpInfo($coupon, $_expand = null)
    {
        return $this->insertCouponWithHttpInfoRetry(true ,   $coupon,   $_expand);
    }


    /**
     * Operation insertCouponWithHttpInfoRetry
     *
     * Insert a coupon
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertCouponWithHttpInfoRetry($retry ,  $coupon,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponResponse';
        $request = $this->insertCouponRequest($coupon, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertCouponWithHttpInfoRetry(false ,   $coupon,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertCouponAsync
     *
     * Insert a coupon
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertCouponAsync($coupon, $_expand = null)
    {
        return $this->insertCouponAsyncWithHttpInfo($coupon, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertCouponAsyncWithHttpInfo
     *
     * Insert a coupon
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertCouponAsyncWithHttpInfo($coupon, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponResponse';
        $request = $this->insertCouponRequest($coupon, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertCoupon'
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertCouponRequest($coupon, $_expand = null)
    {
        // verify the required parameter 'coupon' is set
        if ($coupon === null || (is_array($coupon) && count($coupon) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon when calling insertCoupon'
            );
        }

        $resourcePath = '/coupon/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;
        if (isset($coupon)) {
            $_tempBody = $coupon;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertCoupons
     *
     * Insert multiple coupons
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to insert (maximum 20) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponsResponse
     */
    public function insertCoupons($coupons_request, $_expand = null, $_placeholders = null)
    {
        list($response) = $this->insertCouponsWithHttpInfo($coupons_request, $_expand, $_placeholders);
        return $response;
    }


    /**
     * Operation insertCouponsWithHttpInfo
     *
     * Insert multiple coupons
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to insert (maximum 20) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertCouponsWithHttpInfo($coupons_request, $_expand = null, $_placeholders = null)
    {
        return $this->insertCouponsWithHttpInfoRetry(true ,   $coupons_request,   $_expand,   $_placeholders);
    }


    /**
     * Operation insertCouponsWithHttpInfoRetry
     *
     * Insert multiple coupons
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to insert (maximum 20) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertCouponsWithHttpInfoRetry($retry ,  $coupons_request,  $_expand = null,  $_placeholders = null)
    {
        $returnType = '\ultracart\v2\models\CouponsResponse';
        $request = $this->insertCouponsRequest($coupons_request, $_expand, $_placeholders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertCouponsWithHttpInfoRetry(false ,   $coupons_request,   $_expand,   $_placeholders);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertCouponsAsync
     *
     * Insert multiple coupons
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to insert (maximum 20) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertCouponsAsync($coupons_request, $_expand = null, $_placeholders = null)
    {
        return $this->insertCouponsAsyncWithHttpInfo($coupons_request, $_expand, $_placeholders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertCouponsAsyncWithHttpInfo
     *
     * Insert multiple coupons
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to insert (maximum 20) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertCouponsAsyncWithHttpInfo($coupons_request, $_expand = null, $_placeholders = null)
    {
        $returnType = '\ultracart\v2\models\CouponsResponse';
        $request = $this->insertCouponsRequest($coupons_request, $_expand, $_placeholders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertCoupons'
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to insert (maximum 20) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertCouponsRequest($coupons_request, $_expand = null, $_placeholders = null)
    {
        // verify the required parameter 'coupons_request' is set
        if ($coupons_request === null || (is_array($coupons_request) && count($coupons_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupons_request when calling insertCoupons'
            );
        }

        $resourcePath = '/coupon/coupons/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }
        // query params
        if ($_placeholders !== null) {
            $queryParams['_placeholders'] = ObjectSerializer::toQueryValue($_placeholders);
        }


        // body params
        $_tempBody = null;
        if (isset($coupons_request)) {
            $_tempBody = $coupons_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchItems
     *
     * Searches for items to display within a coupon editor and assign to coupons
     *
     * @param  string $s s (optional)
     * @param  int $m m (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponItemSearchResultsResponse
     */
    public function searchItems($s = null, $m = null)
    {
        list($response) = $this->searchItemsWithHttpInfo($s, $m);
        return $response;
    }


    /**
     * Operation searchItemsWithHttpInfo
     *
     * Searches for items to display within a coupon editor and assign to coupons
     *
     * @param  string $s (optional)
     * @param  int $m (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponItemSearchResultsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchItemsWithHttpInfo($s = null, $m = null)
    {
        return $this->searchItemsWithHttpInfoRetry(true ,   $s,   $m);
    }


    /**
     * Operation searchItemsWithHttpInfoRetry
     *
     * Searches for items to display within a coupon editor and assign to coupons
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $s (optional)
     * @param  int $m (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponItemSearchResultsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchItemsWithHttpInfoRetry($retry ,  $s = null,  $m = null)
    {
        $returnType = '\ultracart\v2\models\CouponItemSearchResultsResponse';
        $request = $this->searchItemsRequest($s, $m);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->searchItemsWithHttpInfoRetry(false ,   $s,   $m);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponItemSearchResultsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchItemsAsync
     *
     * Searches for items to display within a coupon editor and assign to coupons
     *
     * @param  string $s (optional)
     * @param  int $m (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchItemsAsync($s = null, $m = null)
    {
        return $this->searchItemsAsyncWithHttpInfo($s, $m)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchItemsAsyncWithHttpInfo
     *
     * Searches for items to display within a coupon editor and assign to coupons
     *
     * @param  string $s (optional)
     * @param  int $m (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchItemsAsyncWithHttpInfo($s = null, $m = null)
    {
        $returnType = '\ultracart\v2\models\CouponItemSearchResultsResponse';
        $request = $this->searchItemsRequest($s, $m);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchItems'
     *
     * @param  string $s (optional)
     * @param  int $m (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchItemsRequest($s = null, $m = null)
    {

        $resourcePath = '/coupon/searchItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($s !== null) {
            $queryParams['s'] = ObjectSerializer::toQueryValue($s);
        }
        // query params
        if ($m !== null) {
            $queryParams['m'] = ObjectSerializer::toQueryValue($m);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAutoApply
     *
     * Update auto apply rules and conditions
     *
     * @param  \ultracart\v2\models\CouponAutoApplyConditions $conditions Conditions (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAutoApply($conditions)
    {
        $this->updateAutoApplyWithHttpInfo($conditions);
    }


    /**
     * Operation updateAutoApplyWithHttpInfo
     *
     * Update auto apply rules and conditions
     *
     * @param  \ultracart\v2\models\CouponAutoApplyConditions $conditions Conditions (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAutoApplyWithHttpInfo($conditions)
    {
        $this->updateAutoApplyWithHttpInfoRetry(true ,   $conditions);
    }


    /**
     * Operation updateAutoApplyWithHttpInfoRetry
     *
     * Update auto apply rules and conditions
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CouponAutoApplyConditions $conditions Conditions (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAutoApplyWithHttpInfoRetry($retry ,  $conditions)
    {
        $returnType = '';
        $request = $this->updateAutoApplyRequest($conditions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->updateAutoApplyWithHttpInfoRetry(false ,   $conditions);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAutoApplyAsync
     *
     * Update auto apply rules and conditions
     *
     * @param  \ultracart\v2\models\CouponAutoApplyConditions $conditions Conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAutoApplyAsync($conditions)
    {
        return $this->updateAutoApplyAsyncWithHttpInfo($conditions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAutoApplyAsyncWithHttpInfo
     *
     * Update auto apply rules and conditions
     *
     * @param  \ultracart\v2\models\CouponAutoApplyConditions $conditions Conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAutoApplyAsyncWithHttpInfo($conditions)
    {
        $returnType = '';
        $request = $this->updateAutoApplyRequest($conditions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAutoApply'
     *
     * @param  \ultracart\v2\models\CouponAutoApplyConditions $conditions Conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAutoApplyRequest($conditions)
    {
        // verify the required parameter 'conditions' is set
        if ($conditions === null || (is_array($conditions) && count($conditions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conditions when calling updateAutoApply'
            );
        }

        $resourcePath = '/coupon/auto_apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($conditions)) {
            $_tempBody = $conditions;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCoupon
     *
     * Update a coupon
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to update (required)
     * @param  int $coupon_oid The coupon_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponResponse
     */
    public function updateCoupon($coupon, $coupon_oid, $_expand = null)
    {
        list($response) = $this->updateCouponWithHttpInfo($coupon, $coupon_oid, $_expand);
        return $response;
    }


    /**
     * Operation updateCouponWithHttpInfo
     *
     * Update a coupon
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to update (required)
     * @param  int $coupon_oid The coupon_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCouponWithHttpInfo($coupon, $coupon_oid, $_expand = null)
    {
        return $this->updateCouponWithHttpInfoRetry(true ,   $coupon,   $coupon_oid,   $_expand);
    }


    /**
     * Operation updateCouponWithHttpInfoRetry
     *
     * Update a coupon
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to update (required)
     * @param  int $coupon_oid The coupon_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCouponWithHttpInfoRetry($retry ,  $coupon,  $coupon_oid,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponResponse';
        $request = $this->updateCouponRequest($coupon, $coupon_oid, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateCouponWithHttpInfoRetry(false ,   $coupon,   $coupon_oid,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCouponAsync
     *
     * Update a coupon
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to update (required)
     * @param  int $coupon_oid The coupon_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCouponAsync($coupon, $coupon_oid, $_expand = null)
    {
        return $this->updateCouponAsyncWithHttpInfo($coupon, $coupon_oid, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCouponAsyncWithHttpInfo
     *
     * Update a coupon
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to update (required)
     * @param  int $coupon_oid The coupon_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCouponAsyncWithHttpInfo($coupon, $coupon_oid, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CouponResponse';
        $request = $this->updateCouponRequest($coupon, $coupon_oid, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCoupon'
     *
     * @param  \ultracart\v2\models\Coupon $coupon Coupon to update (required)
     * @param  int $coupon_oid The coupon_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCouponRequest($coupon, $coupon_oid, $_expand = null)
    {
        // verify the required parameter 'coupon' is set
        if ($coupon === null || (is_array($coupon) && count($coupon) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon when calling updateCoupon'
            );
        }
        // verify the required parameter 'coupon_oid' is set
        if ($coupon_oid === null || (is_array($coupon_oid) && count($coupon_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_oid when calling updateCoupon'
            );
        }

        $resourcePath = '/coupon/coupons/{coupon_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($coupon_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'coupon_oid' . '}',
                ObjectSerializer::toPathValue($coupon_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($coupon)) {
            $_tempBody = $coupon;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCoupons
     *
     * Update multiple coupons
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param  bool $_async True if the operation should be run async.  No result returned (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CouponsResponse
     */
    public function updateCoupons($coupons_request, $_expand = null, $_placeholders = null, $_async = null)
    {
        list($response) = $this->updateCouponsWithHttpInfo($coupons_request, $_expand, $_placeholders, $_async);
        return $response;
    }


    /**
     * Operation updateCouponsWithHttpInfo
     *
     * Update multiple coupons
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param  bool $_async True if the operation should be run async.  No result returned (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCouponsWithHttpInfo($coupons_request, $_expand = null, $_placeholders = null, $_async = null)
    {
        return $this->updateCouponsWithHttpInfoRetry(true ,   $coupons_request,   $_expand,   $_placeholders,   $_async);
    }


    /**
     * Operation updateCouponsWithHttpInfoRetry
     *
     * Update multiple coupons
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param  bool $_async True if the operation should be run async.  No result returned (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CouponsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCouponsWithHttpInfoRetry($retry ,  $coupons_request,  $_expand = null,  $_placeholders = null,  $_async = null)
    {
        $returnType = '\ultracart\v2\models\CouponsResponse';
        $request = $this->updateCouponsRequest($coupons_request, $_expand, $_placeholders, $_async);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateCouponsWithHttpInfoRetry(false ,   $coupons_request,   $_expand,   $_placeholders,   $_async);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CouponsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCouponsAsync
     *
     * Update multiple coupons
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param  bool $_async True if the operation should be run async.  No result returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCouponsAsync($coupons_request, $_expand = null, $_placeholders = null, $_async = null)
    {
        return $this->updateCouponsAsyncWithHttpInfo($coupons_request, $_expand, $_placeholders, $_async)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCouponsAsyncWithHttpInfo
     *
     * Update multiple coupons
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param  bool $_async True if the operation should be run async.  No result returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCouponsAsyncWithHttpInfo($coupons_request, $_expand = null, $_placeholders = null, $_async = null)
    {
        $returnType = '\ultracart\v2\models\CouponsResponse';
        $request = $this->updateCouponsRequest($coupons_request, $_expand, $_placeholders, $_async);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCoupons'
     *
     * @param  \ultracart\v2\models\CouponsRequest $coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100) (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param  bool $_placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param  bool $_async True if the operation should be run async.  No result returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCouponsRequest($coupons_request, $_expand = null, $_placeholders = null, $_async = null)
    {
        // verify the required parameter 'coupons_request' is set
        if ($coupons_request === null || (is_array($coupons_request) && count($coupons_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupons_request when calling updateCoupons'
            );
        }

        $resourcePath = '/coupon/coupons/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }
        // query params
        if ($_placeholders !== null) {
            $queryParams['_placeholders'] = ObjectSerializer::toQueryValue($_placeholders);
        }
        // query params
        if ($_async !== null) {
            $queryParams['_async'] = ObjectSerializer::toQueryValue($_async);
        }


        // body params
        $_tempBody = null;
        if (isset($coupons_request)) {
            $_tempBody = $coupons_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadCouponCodes
     *
     * Upload one-time codes for a coupon
     *
     * @param  int $coupon_oid The coupon oid to associate with the provided one-time codes. (required)
     * @param  \ultracart\v2\models\UploadCouponCodesRequest $upload_coupon_codes_request One-time coupon codes (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\UploadCouponCodesResponse
     */
    public function uploadCouponCodes($coupon_oid, $upload_coupon_codes_request)
    {
        list($response) = $this->uploadCouponCodesWithHttpInfo($coupon_oid, $upload_coupon_codes_request);
        return $response;
    }


    /**
     * Operation uploadCouponCodesWithHttpInfo
     *
     * Upload one-time codes for a coupon
     *
     * @param  int $coupon_oid The coupon oid to associate with the provided one-time codes. (required)
     * @param  \ultracart\v2\models\UploadCouponCodesRequest $upload_coupon_codes_request One-time coupon codes (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\UploadCouponCodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadCouponCodesWithHttpInfo($coupon_oid, $upload_coupon_codes_request)
    {
        return $this->uploadCouponCodesWithHttpInfoRetry(true ,   $coupon_oid,   $upload_coupon_codes_request);
    }


    /**
     * Operation uploadCouponCodesWithHttpInfoRetry
     *
     * Upload one-time codes for a coupon
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $coupon_oid The coupon oid to associate with the provided one-time codes. (required)
     * @param  \ultracart\v2\models\UploadCouponCodesRequest $upload_coupon_codes_request One-time coupon codes (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\UploadCouponCodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadCouponCodesWithHttpInfoRetry($retry ,  $coupon_oid,  $upload_coupon_codes_request)
    {
        $returnType = '\ultracart\v2\models\UploadCouponCodesResponse';
        $request = $this->uploadCouponCodesRequest($coupon_oid, $upload_coupon_codes_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->uploadCouponCodesWithHttpInfoRetry(false ,   $coupon_oid,   $upload_coupon_codes_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\UploadCouponCodesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadCouponCodesAsync
     *
     * Upload one-time codes for a coupon
     *
     * @param  int $coupon_oid The coupon oid to associate with the provided one-time codes. (required)
     * @param  \ultracart\v2\models\UploadCouponCodesRequest $upload_coupon_codes_request One-time coupon codes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadCouponCodesAsync($coupon_oid, $upload_coupon_codes_request)
    {
        return $this->uploadCouponCodesAsyncWithHttpInfo($coupon_oid, $upload_coupon_codes_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadCouponCodesAsyncWithHttpInfo
     *
     * Upload one-time codes for a coupon
     *
     * @param  int $coupon_oid The coupon oid to associate with the provided one-time codes. (required)
     * @param  \ultracart\v2\models\UploadCouponCodesRequest $upload_coupon_codes_request One-time coupon codes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadCouponCodesAsyncWithHttpInfo($coupon_oid, $upload_coupon_codes_request)
    {
        $returnType = '\ultracart\v2\models\UploadCouponCodesResponse';
        $request = $this->uploadCouponCodesRequest($coupon_oid, $upload_coupon_codes_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadCouponCodes'
     *
     * @param  int $coupon_oid The coupon oid to associate with the provided one-time codes. (required)
     * @param  \ultracart\v2\models\UploadCouponCodesRequest $upload_coupon_codes_request One-time coupon codes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadCouponCodesRequest($coupon_oid, $upload_coupon_codes_request)
    {
        // verify the required parameter 'coupon_oid' is set
        if ($coupon_oid === null || (is_array($coupon_oid) && count($coupon_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_oid when calling uploadCouponCodes'
            );
        }
        // verify the required parameter 'upload_coupon_codes_request' is set
        if ($upload_coupon_codes_request === null || (is_array($upload_coupon_codes_request) && count($upload_coupon_codes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upload_coupon_codes_request when calling uploadCouponCodes'
            );
        }

        $resourcePath = '/coupon/coupons/{coupon_oid}/upload_codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($coupon_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'coupon_oid' . '}',
                ObjectSerializer::toPathValue($coupon_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($upload_coupon_codes_request)) {
            $_tempBody = $upload_coupon_codes_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
