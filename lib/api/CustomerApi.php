<?php
/**
 * CustomerApi
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ultracart\v2\ApiException;
use ultracart\v2\Configuration;
use ultracart\v2\HeaderSelector;
use ultracart\v2\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }


    /**
     * @param string $simple_key api key
     * @param int $max_retry_seconds 0 to disable, else the maximum number of seconds to wait and automatically retry when rate limit is hit
     * @param string $verify passed to Guzzle to enable/disable ssl verify
     */
    public static function usingApiKey( $simple_key, $max_retry_seconds = 0, $verify = true) {
        $config = new Configuration();
        $config->setApiKey('x-ultracart-simple-key', $simple_key);
        $config->setMaxRetrySeconds($max_retry_seconds);

        $client = new Client(['verify' => $verify, 'debug' => false]);
        $headerSelector = new HeaderSelector(/* leave null for version tied to this sdk version */);
        $api = new CustomerApi($client, $config, $headerSelector);
        return $api;
    }


    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCustomerStoreCredit
     *
     * Adds store credit to a customer
     *
     * @param  int $customer_profile_oid The customer oid to credit. (required)
     * @param  \ultracart\v2\models\CustomerStoreCreditAddRequest $store_credit_request Store credit to add (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\BaseResponse
     */
    public function addCustomerStoreCredit($customer_profile_oid, $store_credit_request)
    {
        list($response) = $this->addCustomerStoreCreditWithHttpInfo($customer_profile_oid, $store_credit_request);
        return $response;
    }


    /**
     * Operation addCustomerStoreCreditWithHttpInfo
     *
     * Adds store credit to a customer
     *
     * @param  int $customer_profile_oid The customer oid to credit. (required)
     * @param  \ultracart\v2\models\CustomerStoreCreditAddRequest $store_credit_request Store credit to add (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCustomerStoreCreditWithHttpInfo($customer_profile_oid, $store_credit_request)
    {
        return $this->addCustomerStoreCreditWithHttpInfoRetry(true ,   $customer_profile_oid,   $store_credit_request);
    }


    /**
     * Operation addCustomerStoreCreditWithHttpInfoRetry
     *
     * Adds store credit to a customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer oid to credit. (required)
     * @param  \ultracart\v2\models\CustomerStoreCreditAddRequest $store_credit_request Store credit to add (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\BaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCustomerStoreCreditWithHttpInfoRetry($retry ,  $customer_profile_oid,  $store_credit_request)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->addCustomerStoreCreditRequest($customer_profile_oid, $store_credit_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->addCustomerStoreCreditWithHttpInfoRetry(false ,   $customer_profile_oid,   $store_credit_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\BaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCustomerStoreCreditAsync
     *
     * Adds store credit to a customer
     *
     * @param  int $customer_profile_oid The customer oid to credit. (required)
     * @param  \ultracart\v2\models\CustomerStoreCreditAddRequest $store_credit_request Store credit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomerStoreCreditAsync($customer_profile_oid, $store_credit_request)
    {
        return $this->addCustomerStoreCreditAsyncWithHttpInfo($customer_profile_oid, $store_credit_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCustomerStoreCreditAsyncWithHttpInfo
     *
     * Adds store credit to a customer
     *
     * @param  int $customer_profile_oid The customer oid to credit. (required)
     * @param  \ultracart\v2\models\CustomerStoreCreditAddRequest $store_credit_request Store credit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomerStoreCreditAsyncWithHttpInfo($customer_profile_oid, $store_credit_request)
    {
        $returnType = '\ultracart\v2\models\BaseResponse';
        $request = $this->addCustomerStoreCreditRequest($customer_profile_oid, $store_credit_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCustomerStoreCredit'
     *
     * @param  int $customer_profile_oid The customer oid to credit. (required)
     * @param  \ultracart\v2\models\CustomerStoreCreditAddRequest $store_credit_request Store credit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addCustomerStoreCreditRequest($customer_profile_oid, $store_credit_request)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling addCustomerStoreCredit'
            );
        }
        // verify the required parameter 'store_credit_request' is set
        if ($store_credit_request === null || (is_array($store_credit_request) && count($store_credit_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_credit_request when calling addCustomerStoreCredit'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/store_credit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($store_credit_request)) {
            $_tempBody = $store_credit_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustInternalCertificate
     *
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\AdjustInternalCertificateRequest $adjust_internal_certificate_request adjustInternalCertificateRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\AdjustInternalCertificateResponse
     */
    public function adjustInternalCertificate($customer_profile_oid, $adjust_internal_certificate_request)
    {
        list($response) = $this->adjustInternalCertificateWithHttpInfo($customer_profile_oid, $adjust_internal_certificate_request);
        return $response;
    }


    /**
     * Operation adjustInternalCertificateWithHttpInfo
     *
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\AdjustInternalCertificateRequest $adjust_internal_certificate_request adjustInternalCertificateRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\AdjustInternalCertificateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustInternalCertificateWithHttpInfo($customer_profile_oid, $adjust_internal_certificate_request)
    {
        return $this->adjustInternalCertificateWithHttpInfoRetry(true ,   $customer_profile_oid,   $adjust_internal_certificate_request);
    }


    /**
     * Operation adjustInternalCertificateWithHttpInfoRetry
     *
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\AdjustInternalCertificateRequest $adjust_internal_certificate_request adjustInternalCertificateRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\AdjustInternalCertificateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustInternalCertificateWithHttpInfoRetry($retry ,  $customer_profile_oid,  $adjust_internal_certificate_request)
    {
        $returnType = '\ultracart\v2\models\AdjustInternalCertificateResponse';
        $request = $this->adjustInternalCertificateRequest($customer_profile_oid, $adjust_internal_certificate_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->adjustInternalCertificateWithHttpInfoRetry(false ,   $customer_profile_oid,   $adjust_internal_certificate_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\AdjustInternalCertificateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustInternalCertificateAsync
     *
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\AdjustInternalCertificateRequest $adjust_internal_certificate_request adjustInternalCertificateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustInternalCertificateAsync($customer_profile_oid, $adjust_internal_certificate_request)
    {
        return $this->adjustInternalCertificateAsyncWithHttpInfo($customer_profile_oid, $adjust_internal_certificate_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustInternalCertificateAsyncWithHttpInfo
     *
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\AdjustInternalCertificateRequest $adjust_internal_certificate_request adjustInternalCertificateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustInternalCertificateAsyncWithHttpInfo($customer_profile_oid, $adjust_internal_certificate_request)
    {
        $returnType = '\ultracart\v2\models\AdjustInternalCertificateResponse';
        $request = $this->adjustInternalCertificateRequest($customer_profile_oid, $adjust_internal_certificate_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustInternalCertificate'
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\AdjustInternalCertificateRequest $adjust_internal_certificate_request adjustInternalCertificateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adjustInternalCertificateRequest($customer_profile_oid, $adjust_internal_certificate_request)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling adjustInternalCertificate'
            );
        }
        // verify the required parameter 'adjust_internal_certificate_request' is set
        if ($adjust_internal_certificate_request === null || (is_array($adjust_internal_certificate_request) && count($adjust_internal_certificate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adjust_internal_certificate_request when calling adjustInternalCertificate'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/adjust_cashback_balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($adjust_internal_certificate_request)) {
            $_tempBody = $adjust_internal_certificate_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomer
     *
     * Delete a customer
     *
     * @param  int $customer_profile_oid The customer_profile_oid to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCustomer($customer_profile_oid)
    {
        $this->deleteCustomerWithHttpInfo($customer_profile_oid);
    }


    /**
     * Operation deleteCustomerWithHttpInfo
     *
     * Delete a customer
     *
     * @param  int $customer_profile_oid The customer_profile_oid to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerWithHttpInfo($customer_profile_oid)
    {
        $this->deleteCustomerWithHttpInfoRetry(true ,   $customer_profile_oid);
    }


    /**
     * Operation deleteCustomerWithHttpInfoRetry
     *
     * Delete a customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer_profile_oid to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerWithHttpInfoRetry($retry ,  $customer_profile_oid)
    {
        $returnType = '';
        $request = $this->deleteCustomerRequest($customer_profile_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteCustomerWithHttpInfoRetry(false ,   $customer_profile_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomerAsync
     *
     * Delete a customer
     *
     * @param  int $customer_profile_oid The customer_profile_oid to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerAsync($customer_profile_oid)
    {
        return $this->deleteCustomerAsyncWithHttpInfo($customer_profile_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomerAsyncWithHttpInfo
     *
     * Delete a customer
     *
     * @param  int $customer_profile_oid The customer_profile_oid to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerAsyncWithHttpInfo($customer_profile_oid)
    {
        $returnType = '';
        $request = $this->deleteCustomerRequest($customer_profile_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomer'
     *
     * @param  int $customer_profile_oid The customer_profile_oid to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCustomerRequest($customer_profile_oid)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling deleteCustomer'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWishListItem
     *
     * Delete a customer wishlist item
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerWishListItem
     */
    public function deleteWishListItem($customer_profile_oid, $customer_wishlist_item_oid)
    {
        list($response) = $this->deleteWishListItemWithHttpInfo($customer_profile_oid, $customer_wishlist_item_oid);
        return $response;
    }


    /**
     * Operation deleteWishListItemWithHttpInfo
     *
     * Delete a customer wishlist item
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWishListItemWithHttpInfo($customer_profile_oid, $customer_wishlist_item_oid)
    {
        return $this->deleteWishListItemWithHttpInfoRetry(true ,   $customer_profile_oid,   $customer_wishlist_item_oid);
    }


    /**
     * Operation deleteWishListItemWithHttpInfoRetry
     *
     * Delete a customer wishlist item
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWishListItemWithHttpInfoRetry($retry ,  $customer_profile_oid,  $customer_wishlist_item_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItem';
        $request = $this->deleteWishListItemRequest($customer_profile_oid, $customer_wishlist_item_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->deleteWishListItemWithHttpInfoRetry(false ,   $customer_profile_oid,   $customer_wishlist_item_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerWishListItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWishListItemAsync
     *
     * Delete a customer wishlist item
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWishListItemAsync($customer_profile_oid, $customer_wishlist_item_oid)
    {
        return $this->deleteWishListItemAsyncWithHttpInfo($customer_profile_oid, $customer_wishlist_item_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWishListItemAsyncWithHttpInfo
     *
     * Delete a customer wishlist item
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWishListItemAsyncWithHttpInfo($customer_profile_oid, $customer_wishlist_item_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItem';
        $request = $this->deleteWishListItemRequest($customer_profile_oid, $customer_wishlist_item_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWishListItem'
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWishListItemRequest($customer_profile_oid, $customer_wishlist_item_oid)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling deleteWishListItem'
            );
        }
        // verify the required parameter 'customer_wishlist_item_oid' is set
        if ($customer_wishlist_item_oid === null || (is_array($customer_wishlist_item_oid) && count($customer_wishlist_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_wishlist_item_oid when calling deleteWishListItem'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }
        // path params
        if ($customer_wishlist_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_wishlist_item_oid' . '}',
                ObjectSerializer::toPathValue($customer_wishlist_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomer
     *
     * Retrieve a customer
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerResponse
     */
    public function getCustomer($customer_profile_oid, $_expand = null)
    {
        list($response) = $this->getCustomerWithHttpInfo($customer_profile_oid, $_expand);
        return $response;
    }


    /**
     * Operation getCustomerWithHttpInfo
     *
     * Retrieve a customer
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerWithHttpInfo($customer_profile_oid, $_expand = null)
    {
        return $this->getCustomerWithHttpInfoRetry(true ,   $customer_profile_oid,   $_expand);
    }


    /**
     * Operation getCustomerWithHttpInfoRetry
     *
     * Retrieve a customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerWithHttpInfoRetry($retry ,  $customer_profile_oid,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomerResponse';
        $request = $this->getCustomerRequest($customer_profile_oid, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomerWithHttpInfoRetry(false ,   $customer_profile_oid,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerAsync
     *
     * Retrieve a customer
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerAsync($customer_profile_oid, $_expand = null)
    {
        return $this->getCustomerAsyncWithHttpInfo($customer_profile_oid, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerAsyncWithHttpInfo
     *
     * Retrieve a customer
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerAsyncWithHttpInfo($customer_profile_oid, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomerResponse';
        $request = $this->getCustomerRequest($customer_profile_oid, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomer'
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerRequest($customer_profile_oid, $_expand = null)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling getCustomer'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerByEmail
     *
     * Retrieve a customer by Email
     *
     * @param  string $email The email address of the customer to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerResponse
     */
    public function getCustomerByEmail($email, $_expand = null)
    {
        list($response) = $this->getCustomerByEmailWithHttpInfo($email, $_expand);
        return $response;
    }


    /**
     * Operation getCustomerByEmailWithHttpInfo
     *
     * Retrieve a customer by Email
     *
     * @param  string $email The email address of the customer to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerByEmailWithHttpInfo($email, $_expand = null)
    {
        return $this->getCustomerByEmailWithHttpInfoRetry(true ,   $email,   $_expand);
    }


    /**
     * Operation getCustomerByEmailWithHttpInfoRetry
     *
     * Retrieve a customer by Email
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $email The email address of the customer to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerByEmailWithHttpInfoRetry($retry ,  $email,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomerResponse';
        $request = $this->getCustomerByEmailRequest($email, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomerByEmailWithHttpInfoRetry(false ,   $email,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerByEmailAsync
     *
     * Retrieve a customer by Email
     *
     * @param  string $email The email address of the customer to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerByEmailAsync($email, $_expand = null)
    {
        return $this->getCustomerByEmailAsyncWithHttpInfo($email, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerByEmailAsyncWithHttpInfo
     *
     * Retrieve a customer by Email
     *
     * @param  string $email The email address of the customer to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerByEmailAsyncWithHttpInfo($email, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomerResponse';
        $request = $this->getCustomerByEmailRequest($email, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerByEmail'
     *
     * @param  string $email The email address of the customer to retrieve. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerByEmailRequest($email, $_expand = null)
    {
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling getCustomerByEmail'
            );
        }

        $resourcePath = '/customer/customers/by_email/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerEditorValues
     *
     * Retrieve values needed for a customer profile editor
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerEditorValues
     */
    public function getCustomerEditorValues()
    {
        list($response) = $this->getCustomerEditorValuesWithHttpInfo();
        return $response;
    }


    /**
     * Operation getCustomerEditorValuesWithHttpInfo
     *
     * Retrieve values needed for a customer profile editor
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerEditorValues, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerEditorValuesWithHttpInfo()
    {
        return $this->getCustomerEditorValuesWithHttpInfoRetry(true );
    }


    /**
     * Operation getCustomerEditorValuesWithHttpInfoRetry
     *
     * Retrieve values needed for a customer profile editor
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerEditorValues, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerEditorValuesWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\CustomerEditorValues';
        $request = $this->getCustomerEditorValuesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomerEditorValuesWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerEditorValues',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerEditorValuesAsync
     *
     * Retrieve values needed for a customer profile editor
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerEditorValuesAsync()
    {
        return $this->getCustomerEditorValuesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerEditorValuesAsyncWithHttpInfo
     *
     * Retrieve values needed for a customer profile editor
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerEditorValuesAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\CustomerEditorValues';
        $request = $this->getCustomerEditorValuesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerEditorValues'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerEditorValuesRequest()
    {

        $resourcePath = '/customer/editor_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerEmailLists
     *
     * Retrieve all email lists across all storefronts
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailListsResponse
     */
    public function getCustomerEmailLists()
    {
        list($response) = $this->getCustomerEmailListsWithHttpInfo();
        return $response;
    }


    /**
     * Operation getCustomerEmailListsWithHttpInfo
     *
     * Retrieve all email lists across all storefronts
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerEmailListsWithHttpInfo()
    {
        return $this->getCustomerEmailListsWithHttpInfoRetry(true );
    }


    /**
     * Operation getCustomerEmailListsWithHttpInfoRetry
     *
     * Retrieve all email lists across all storefronts
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailListsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerEmailListsWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\EmailListsResponse';
        $request = $this->getCustomerEmailListsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomerEmailListsWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailListsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerEmailListsAsync
     *
     * Retrieve all email lists across all storefronts
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerEmailListsAsync()
    {
        return $this->getCustomerEmailListsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerEmailListsAsyncWithHttpInfo
     *
     * Retrieve all email lists across all storefronts
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerEmailListsAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\EmailListsResponse';
        $request = $this->getCustomerEmailListsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerEmailLists'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerEmailListsRequest()
    {

        $resourcePath = '/customer/email_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerStoreCredit
     *
     * Retrieve the customer store credit accumulated through loyalty programs
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerStoreCreditResponse
     */
    public function getCustomerStoreCredit($customer_profile_oid)
    {
        list($response) = $this->getCustomerStoreCreditWithHttpInfo($customer_profile_oid);
        return $response;
    }


    /**
     * Operation getCustomerStoreCreditWithHttpInfo
     *
     * Retrieve the customer store credit accumulated through loyalty programs
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerStoreCreditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerStoreCreditWithHttpInfo($customer_profile_oid)
    {
        return $this->getCustomerStoreCreditWithHttpInfoRetry(true ,   $customer_profile_oid);
    }


    /**
     * Operation getCustomerStoreCreditWithHttpInfoRetry
     *
     * Retrieve the customer store credit accumulated through loyalty programs
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerStoreCreditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerStoreCreditWithHttpInfoRetry($retry ,  $customer_profile_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerStoreCreditResponse';
        $request = $this->getCustomerStoreCreditRequest($customer_profile_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomerStoreCreditWithHttpInfoRetry(false ,   $customer_profile_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerStoreCreditResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerStoreCreditAsync
     *
     * Retrieve the customer store credit accumulated through loyalty programs
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerStoreCreditAsync($customer_profile_oid)
    {
        return $this->getCustomerStoreCreditAsyncWithHttpInfo($customer_profile_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerStoreCreditAsyncWithHttpInfo
     *
     * Retrieve the customer store credit accumulated through loyalty programs
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerStoreCreditAsyncWithHttpInfo($customer_profile_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerStoreCreditResponse';
        $request = $this->getCustomerStoreCreditRequest($customer_profile_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerStoreCredit'
     *
     * @param  int $customer_profile_oid The customer oid to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerStoreCreditRequest($customer_profile_oid)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling getCustomerStoreCredit'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/store_credit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerWishList
     *
     * Retrieve wishlist items for customer
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerWishListItemsResponse
     */
    public function getCustomerWishList($customer_profile_oid)
    {
        list($response) = $this->getCustomerWishListWithHttpInfo($customer_profile_oid);
        return $response;
    }


    /**
     * Operation getCustomerWishListWithHttpInfo
     *
     * Retrieve wishlist items for customer
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerWishListWithHttpInfo($customer_profile_oid)
    {
        return $this->getCustomerWishListWithHttpInfoRetry(true ,   $customer_profile_oid);
    }


    /**
     * Operation getCustomerWishListWithHttpInfoRetry
     *
     * Retrieve wishlist items for customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerWishListWithHttpInfoRetry($retry ,  $customer_profile_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItemsResponse';
        $request = $this->getCustomerWishListRequest($customer_profile_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomerWishListWithHttpInfoRetry(false ,   $customer_profile_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerWishListItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerWishListAsync
     *
     * Retrieve wishlist items for customer
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerWishListAsync($customer_profile_oid)
    {
        return $this->getCustomerWishListAsyncWithHttpInfo($customer_profile_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerWishListAsyncWithHttpInfo
     *
     * Retrieve wishlist items for customer
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerWishListAsyncWithHttpInfo($customer_profile_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItemsResponse';
        $request = $this->getCustomerWishListRequest($customer_profile_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerWishList'
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerWishListRequest($customer_profile_oid)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling getCustomerWishList'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/wishlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerWishListItem
     *
     * Retrieve wishlist item for customer
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerWishListItemResponse
     */
    public function getCustomerWishListItem($customer_profile_oid, $customer_wishlist_item_oid)
    {
        list($response) = $this->getCustomerWishListItemWithHttpInfo($customer_profile_oid, $customer_wishlist_item_oid);
        return $response;
    }


    /**
     * Operation getCustomerWishListItemWithHttpInfo
     *
     * Retrieve wishlist item for customer
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerWishListItemWithHttpInfo($customer_profile_oid, $customer_wishlist_item_oid)
    {
        return $this->getCustomerWishListItemWithHttpInfoRetry(true ,   $customer_profile_oid,   $customer_wishlist_item_oid);
    }


    /**
     * Operation getCustomerWishListItemWithHttpInfoRetry
     *
     * Retrieve wishlist item for customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerWishListItemWithHttpInfoRetry($retry ,  $customer_profile_oid,  $customer_wishlist_item_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItemResponse';
        $request = $this->getCustomerWishListItemRequest($customer_profile_oid, $customer_wishlist_item_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomerWishListItemWithHttpInfoRetry(false ,   $customer_profile_oid,   $customer_wishlist_item_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerWishListItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerWishListItemAsync
     *
     * Retrieve wishlist item for customer
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerWishListItemAsync($customer_profile_oid, $customer_wishlist_item_oid)
    {
        return $this->getCustomerWishListItemAsyncWithHttpInfo($customer_profile_oid, $customer_wishlist_item_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerWishListItemAsyncWithHttpInfo
     *
     * Retrieve wishlist item for customer
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerWishListItemAsyncWithHttpInfo($customer_profile_oid, $customer_wishlist_item_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItemResponse';
        $request = $this->getCustomerWishListItemRequest($customer_profile_oid, $customer_wishlist_item_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerWishListItem'
     *
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerWishListItemRequest($customer_profile_oid, $customer_wishlist_item_oid)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling getCustomerWishListItem'
            );
        }
        // verify the required parameter 'customer_wishlist_item_oid' is set
        if ($customer_wishlist_item_oid === null || (is_array($customer_wishlist_item_oid) && count($customer_wishlist_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_wishlist_item_oid when calling getCustomerWishListItem'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }
        // path params
        if ($customer_wishlist_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_wishlist_item_oid' . '}',
                ObjectSerializer::toPathValue($customer_wishlist_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomers
     *
     * Retrieve customers
     *
     * @param  string $email Email (optional)
     * @param  string $qb_class Quickbooks class (optional)
     * @param  string $quickbooks_code Quickbooks code (optional)
     * @param  string $last_modified_dts_start Last modified date start (optional)
     * @param  string $last_modified_dts_end Last modified date end (optional)
     * @param  string $signup_dts_start Signup date start (optional)
     * @param  string $signup_dts_end Signup date end (optional)
     * @param  string $billing_first_name Billing first name (optional)
     * @param  string $billing_last_name Billing last name (optional)
     * @param  string $billing_company Billing company (optional)
     * @param  string $billing_city Billing city (optional)
     * @param  string $billing_state Billing state (optional)
     * @param  string $billing_postal_code Billing postal code (optional)
     * @param  string $billing_country_code Billing country code (optional)
     * @param  string $billing_day_phone Billing day phone (optional)
     * @param  string $billing_evening_phone Billing evening phone (optional)
     * @param  string $shipping_first_name Shipping first name (optional)
     * @param  string $shipping_last_name Shipping last name (optional)
     * @param  string $shipping_company Shipping company (optional)
     * @param  string $shipping_city Shipping city (optional)
     * @param  string $shipping_state Shipping state (optional)
     * @param  string $shipping_postal_code Shipping postal code (optional)
     * @param  string $shipping_country_code Shipping country code (optional)
     * @param  string $shipping_day_phone Shipping day phone (optional)
     * @param  string $shipping_evening_phone Shipping evening phone (optional)
     * @param  int $pricing_tier_oid Pricing tier oid (optional)
     * @param  string $pricing_tier_name Pricing tier name (optional)
     * @param  object $emails Emails (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomersResponse
     */
    public function getCustomers($email = null, $qb_class = null, $quickbooks_code = null, $last_modified_dts_start = null, $last_modified_dts_end = null, $signup_dts_start = null, $signup_dts_end = null, $billing_first_name = null, $billing_last_name = null, $billing_company = null, $billing_city = null, $billing_state = null, $billing_postal_code = null, $billing_country_code = null, $billing_day_phone = null, $billing_evening_phone = null, $shipping_first_name = null, $shipping_last_name = null, $shipping_company = null, $shipping_city = null, $shipping_state = null, $shipping_postal_code = null, $shipping_country_code = null, $shipping_day_phone = null, $shipping_evening_phone = null, $pricing_tier_oid = null, $pricing_tier_name = null, $emails = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        list($response) = $this->getCustomersWithHttpInfo($email, $qb_class, $quickbooks_code, $last_modified_dts_start, $last_modified_dts_end, $signup_dts_start, $signup_dts_end, $billing_first_name, $billing_last_name, $billing_company, $billing_city, $billing_state, $billing_postal_code, $billing_country_code, $billing_day_phone, $billing_evening_phone, $shipping_first_name, $shipping_last_name, $shipping_company, $shipping_city, $shipping_state, $shipping_postal_code, $shipping_country_code, $shipping_day_phone, $shipping_evening_phone, $pricing_tier_oid, $pricing_tier_name, $emails, $_limit, $_offset, $_since, $_sort, $_expand);
        return $response;
    }


    /**
     * Operation getCustomersWithHttpInfo
     *
     * Retrieve customers
     *
     * @param  string $email Email (optional)
     * @param  string $qb_class Quickbooks class (optional)
     * @param  string $quickbooks_code Quickbooks code (optional)
     * @param  string $last_modified_dts_start Last modified date start (optional)
     * @param  string $last_modified_dts_end Last modified date end (optional)
     * @param  string $signup_dts_start Signup date start (optional)
     * @param  string $signup_dts_end Signup date end (optional)
     * @param  string $billing_first_name Billing first name (optional)
     * @param  string $billing_last_name Billing last name (optional)
     * @param  string $billing_company Billing company (optional)
     * @param  string $billing_city Billing city (optional)
     * @param  string $billing_state Billing state (optional)
     * @param  string $billing_postal_code Billing postal code (optional)
     * @param  string $billing_country_code Billing country code (optional)
     * @param  string $billing_day_phone Billing day phone (optional)
     * @param  string $billing_evening_phone Billing evening phone (optional)
     * @param  string $shipping_first_name Shipping first name (optional)
     * @param  string $shipping_last_name Shipping last name (optional)
     * @param  string $shipping_company Shipping company (optional)
     * @param  string $shipping_city Shipping city (optional)
     * @param  string $shipping_state Shipping state (optional)
     * @param  string $shipping_postal_code Shipping postal code (optional)
     * @param  string $shipping_country_code Shipping country code (optional)
     * @param  string $shipping_day_phone Shipping day phone (optional)
     * @param  string $shipping_evening_phone Shipping evening phone (optional)
     * @param  int $pricing_tier_oid Pricing tier oid (optional)
     * @param  string $pricing_tier_name Pricing tier name (optional)
     * @param  object $emails Emails (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomersWithHttpInfo($email = null, $qb_class = null, $quickbooks_code = null, $last_modified_dts_start = null, $last_modified_dts_end = null, $signup_dts_start = null, $signup_dts_end = null, $billing_first_name = null, $billing_last_name = null, $billing_company = null, $billing_city = null, $billing_state = null, $billing_postal_code = null, $billing_country_code = null, $billing_day_phone = null, $billing_evening_phone = null, $shipping_first_name = null, $shipping_last_name = null, $shipping_company = null, $shipping_city = null, $shipping_state = null, $shipping_postal_code = null, $shipping_country_code = null, $shipping_day_phone = null, $shipping_evening_phone = null, $pricing_tier_oid = null, $pricing_tier_name = null, $emails = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        return $this->getCustomersWithHttpInfoRetry(true ,   $email,   $qb_class,   $quickbooks_code,   $last_modified_dts_start,   $last_modified_dts_end,   $signup_dts_start,   $signup_dts_end,   $billing_first_name,   $billing_last_name,   $billing_company,   $billing_city,   $billing_state,   $billing_postal_code,   $billing_country_code,   $billing_day_phone,   $billing_evening_phone,   $shipping_first_name,   $shipping_last_name,   $shipping_company,   $shipping_city,   $shipping_state,   $shipping_postal_code,   $shipping_country_code,   $shipping_day_phone,   $shipping_evening_phone,   $pricing_tier_oid,   $pricing_tier_name,   $emails,   $_limit,   $_offset,   $_since,   $_sort,   $_expand);
    }


    /**
     * Operation getCustomersWithHttpInfoRetry
     *
     * Retrieve customers
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $email Email (optional)
     * @param  string $qb_class Quickbooks class (optional)
     * @param  string $quickbooks_code Quickbooks code (optional)
     * @param  string $last_modified_dts_start Last modified date start (optional)
     * @param  string $last_modified_dts_end Last modified date end (optional)
     * @param  string $signup_dts_start Signup date start (optional)
     * @param  string $signup_dts_end Signup date end (optional)
     * @param  string $billing_first_name Billing first name (optional)
     * @param  string $billing_last_name Billing last name (optional)
     * @param  string $billing_company Billing company (optional)
     * @param  string $billing_city Billing city (optional)
     * @param  string $billing_state Billing state (optional)
     * @param  string $billing_postal_code Billing postal code (optional)
     * @param  string $billing_country_code Billing country code (optional)
     * @param  string $billing_day_phone Billing day phone (optional)
     * @param  string $billing_evening_phone Billing evening phone (optional)
     * @param  string $shipping_first_name Shipping first name (optional)
     * @param  string $shipping_last_name Shipping last name (optional)
     * @param  string $shipping_company Shipping company (optional)
     * @param  string $shipping_city Shipping city (optional)
     * @param  string $shipping_state Shipping state (optional)
     * @param  string $shipping_postal_code Shipping postal code (optional)
     * @param  string $shipping_country_code Shipping country code (optional)
     * @param  string $shipping_day_phone Shipping day phone (optional)
     * @param  string $shipping_evening_phone Shipping evening phone (optional)
     * @param  int $pricing_tier_oid Pricing tier oid (optional)
     * @param  string $pricing_tier_name Pricing tier name (optional)
     * @param  object $emails Emails (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomersWithHttpInfoRetry($retry ,  $email = null,  $qb_class = null,  $quickbooks_code = null,  $last_modified_dts_start = null,  $last_modified_dts_end = null,  $signup_dts_start = null,  $signup_dts_end = null,  $billing_first_name = null,  $billing_last_name = null,  $billing_company = null,  $billing_city = null,  $billing_state = null,  $billing_postal_code = null,  $billing_country_code = null,  $billing_day_phone = null,  $billing_evening_phone = null,  $shipping_first_name = null,  $shipping_last_name = null,  $shipping_company = null,  $shipping_city = null,  $shipping_state = null,  $shipping_postal_code = null,  $shipping_country_code = null,  $shipping_day_phone = null,  $shipping_evening_phone = null,  $pricing_tier_oid = null,  $pricing_tier_name = null,  $emails = null,  $_limit = '100',  $_offset = '0',  $_since = null,  $_sort = null,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomersResponse';
        $request = $this->getCustomersRequest($email, $qb_class, $quickbooks_code, $last_modified_dts_start, $last_modified_dts_end, $signup_dts_start, $signup_dts_end, $billing_first_name, $billing_last_name, $billing_company, $billing_city, $billing_state, $billing_postal_code, $billing_country_code, $billing_day_phone, $billing_evening_phone, $shipping_first_name, $shipping_last_name, $shipping_company, $shipping_city, $shipping_state, $shipping_postal_code, $shipping_country_code, $shipping_day_phone, $shipping_evening_phone, $pricing_tier_oid, $pricing_tier_name, $emails, $_limit, $_offset, $_since, $_sort, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomersWithHttpInfoRetry(false ,   $email,   $qb_class,   $quickbooks_code,   $last_modified_dts_start,   $last_modified_dts_end,   $signup_dts_start,   $signup_dts_end,   $billing_first_name,   $billing_last_name,   $billing_company,   $billing_city,   $billing_state,   $billing_postal_code,   $billing_country_code,   $billing_day_phone,   $billing_evening_phone,   $shipping_first_name,   $shipping_last_name,   $shipping_company,   $shipping_city,   $shipping_state,   $shipping_postal_code,   $shipping_country_code,   $shipping_day_phone,   $shipping_evening_phone,   $pricing_tier_oid,   $pricing_tier_name,   $emails,   $_limit,   $_offset,   $_since,   $_sort,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomersAsync
     *
     * Retrieve customers
     *
     * @param  string $email Email (optional)
     * @param  string $qb_class Quickbooks class (optional)
     * @param  string $quickbooks_code Quickbooks code (optional)
     * @param  string $last_modified_dts_start Last modified date start (optional)
     * @param  string $last_modified_dts_end Last modified date end (optional)
     * @param  string $signup_dts_start Signup date start (optional)
     * @param  string $signup_dts_end Signup date end (optional)
     * @param  string $billing_first_name Billing first name (optional)
     * @param  string $billing_last_name Billing last name (optional)
     * @param  string $billing_company Billing company (optional)
     * @param  string $billing_city Billing city (optional)
     * @param  string $billing_state Billing state (optional)
     * @param  string $billing_postal_code Billing postal code (optional)
     * @param  string $billing_country_code Billing country code (optional)
     * @param  string $billing_day_phone Billing day phone (optional)
     * @param  string $billing_evening_phone Billing evening phone (optional)
     * @param  string $shipping_first_name Shipping first name (optional)
     * @param  string $shipping_last_name Shipping last name (optional)
     * @param  string $shipping_company Shipping company (optional)
     * @param  string $shipping_city Shipping city (optional)
     * @param  string $shipping_state Shipping state (optional)
     * @param  string $shipping_postal_code Shipping postal code (optional)
     * @param  string $shipping_country_code Shipping country code (optional)
     * @param  string $shipping_day_phone Shipping day phone (optional)
     * @param  string $shipping_evening_phone Shipping evening phone (optional)
     * @param  int $pricing_tier_oid Pricing tier oid (optional)
     * @param  string $pricing_tier_name Pricing tier name (optional)
     * @param  object $emails Emails (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomersAsync($email = null, $qb_class = null, $quickbooks_code = null, $last_modified_dts_start = null, $last_modified_dts_end = null, $signup_dts_start = null, $signup_dts_end = null, $billing_first_name = null, $billing_last_name = null, $billing_company = null, $billing_city = null, $billing_state = null, $billing_postal_code = null, $billing_country_code = null, $billing_day_phone = null, $billing_evening_phone = null, $shipping_first_name = null, $shipping_last_name = null, $shipping_company = null, $shipping_city = null, $shipping_state = null, $shipping_postal_code = null, $shipping_country_code = null, $shipping_day_phone = null, $shipping_evening_phone = null, $pricing_tier_oid = null, $pricing_tier_name = null, $emails = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        return $this->getCustomersAsyncWithHttpInfo($email, $qb_class, $quickbooks_code, $last_modified_dts_start, $last_modified_dts_end, $signup_dts_start, $signup_dts_end, $billing_first_name, $billing_last_name, $billing_company, $billing_city, $billing_state, $billing_postal_code, $billing_country_code, $billing_day_phone, $billing_evening_phone, $shipping_first_name, $shipping_last_name, $shipping_company, $shipping_city, $shipping_state, $shipping_postal_code, $shipping_country_code, $shipping_day_phone, $shipping_evening_phone, $pricing_tier_oid, $pricing_tier_name, $emails, $_limit, $_offset, $_since, $_sort, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomersAsyncWithHttpInfo
     *
     * Retrieve customers
     *
     * @param  string $email Email (optional)
     * @param  string $qb_class Quickbooks class (optional)
     * @param  string $quickbooks_code Quickbooks code (optional)
     * @param  string $last_modified_dts_start Last modified date start (optional)
     * @param  string $last_modified_dts_end Last modified date end (optional)
     * @param  string $signup_dts_start Signup date start (optional)
     * @param  string $signup_dts_end Signup date end (optional)
     * @param  string $billing_first_name Billing first name (optional)
     * @param  string $billing_last_name Billing last name (optional)
     * @param  string $billing_company Billing company (optional)
     * @param  string $billing_city Billing city (optional)
     * @param  string $billing_state Billing state (optional)
     * @param  string $billing_postal_code Billing postal code (optional)
     * @param  string $billing_country_code Billing country code (optional)
     * @param  string $billing_day_phone Billing day phone (optional)
     * @param  string $billing_evening_phone Billing evening phone (optional)
     * @param  string $shipping_first_name Shipping first name (optional)
     * @param  string $shipping_last_name Shipping last name (optional)
     * @param  string $shipping_company Shipping company (optional)
     * @param  string $shipping_city Shipping city (optional)
     * @param  string $shipping_state Shipping state (optional)
     * @param  string $shipping_postal_code Shipping postal code (optional)
     * @param  string $shipping_country_code Shipping country code (optional)
     * @param  string $shipping_day_phone Shipping day phone (optional)
     * @param  string $shipping_evening_phone Shipping evening phone (optional)
     * @param  int $pricing_tier_oid Pricing tier oid (optional)
     * @param  string $pricing_tier_name Pricing tier name (optional)
     * @param  object $emails Emails (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomersAsyncWithHttpInfo($email = null, $qb_class = null, $quickbooks_code = null, $last_modified_dts_start = null, $last_modified_dts_end = null, $signup_dts_start = null, $signup_dts_end = null, $billing_first_name = null, $billing_last_name = null, $billing_company = null, $billing_city = null, $billing_state = null, $billing_postal_code = null, $billing_country_code = null, $billing_day_phone = null, $billing_evening_phone = null, $shipping_first_name = null, $shipping_last_name = null, $shipping_company = null, $shipping_city = null, $shipping_state = null, $shipping_postal_code = null, $shipping_country_code = null, $shipping_day_phone = null, $shipping_evening_phone = null, $pricing_tier_oid = null, $pricing_tier_name = null, $emails = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomersResponse';
        $request = $this->getCustomersRequest($email, $qb_class, $quickbooks_code, $last_modified_dts_start, $last_modified_dts_end, $signup_dts_start, $signup_dts_end, $billing_first_name, $billing_last_name, $billing_company, $billing_city, $billing_state, $billing_postal_code, $billing_country_code, $billing_day_phone, $billing_evening_phone, $shipping_first_name, $shipping_last_name, $shipping_company, $shipping_city, $shipping_state, $shipping_postal_code, $shipping_country_code, $shipping_day_phone, $shipping_evening_phone, $pricing_tier_oid, $pricing_tier_name, $emails, $_limit, $_offset, $_since, $_sort, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomers'
     *
     * @param  string $email Email (optional)
     * @param  string $qb_class Quickbooks class (optional)
     * @param  string $quickbooks_code Quickbooks code (optional)
     * @param  string $last_modified_dts_start Last modified date start (optional)
     * @param  string $last_modified_dts_end Last modified date end (optional)
     * @param  string $signup_dts_start Signup date start (optional)
     * @param  string $signup_dts_end Signup date end (optional)
     * @param  string $billing_first_name Billing first name (optional)
     * @param  string $billing_last_name Billing last name (optional)
     * @param  string $billing_company Billing company (optional)
     * @param  string $billing_city Billing city (optional)
     * @param  string $billing_state Billing state (optional)
     * @param  string $billing_postal_code Billing postal code (optional)
     * @param  string $billing_country_code Billing country code (optional)
     * @param  string $billing_day_phone Billing day phone (optional)
     * @param  string $billing_evening_phone Billing evening phone (optional)
     * @param  string $shipping_first_name Shipping first name (optional)
     * @param  string $shipping_last_name Shipping last name (optional)
     * @param  string $shipping_company Shipping company (optional)
     * @param  string $shipping_city Shipping city (optional)
     * @param  string $shipping_state Shipping state (optional)
     * @param  string $shipping_postal_code Shipping postal code (optional)
     * @param  string $shipping_country_code Shipping country code (optional)
     * @param  string $shipping_day_phone Shipping day phone (optional)
     * @param  string $shipping_evening_phone Shipping evening phone (optional)
     * @param  int $pricing_tier_oid Pricing tier oid (optional)
     * @param  string $pricing_tier_name Pricing tier name (optional)
     * @param  object $emails Emails (optional)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomersRequest($email = null, $qb_class = null, $quickbooks_code = null, $last_modified_dts_start = null, $last_modified_dts_end = null, $signup_dts_start = null, $signup_dts_end = null, $billing_first_name = null, $billing_last_name = null, $billing_company = null, $billing_city = null, $billing_state = null, $billing_postal_code = null, $billing_country_code = null, $billing_day_phone = null, $billing_evening_phone = null, $shipping_first_name = null, $shipping_last_name = null, $shipping_company = null, $shipping_city = null, $shipping_state = null, $shipping_postal_code = null, $shipping_country_code = null, $shipping_day_phone = null, $shipping_evening_phone = null, $pricing_tier_oid = null, $pricing_tier_name = null, $emails = null, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {

        $resourcePath = '/customer/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($qb_class !== null) {
            $queryParams['qb_class'] = ObjectSerializer::toQueryValue($qb_class);
        }
        // query params
        if ($quickbooks_code !== null) {
            $queryParams['quickbooks_code'] = ObjectSerializer::toQueryValue($quickbooks_code);
        }
        // query params
        if ($last_modified_dts_start !== null) {
            $queryParams['last_modified_dts_start'] = ObjectSerializer::toQueryValue($last_modified_dts_start);
        }
        // query params
        if ($last_modified_dts_end !== null) {
            $queryParams['last_modified_dts_end'] = ObjectSerializer::toQueryValue($last_modified_dts_end);
        }
        // query params
        if ($signup_dts_start !== null) {
            $queryParams['signup_dts_start'] = ObjectSerializer::toQueryValue($signup_dts_start);
        }
        // query params
        if ($signup_dts_end !== null) {
            $queryParams['signup_dts_end'] = ObjectSerializer::toQueryValue($signup_dts_end);
        }
        // query params
        if ($billing_first_name !== null) {
            $queryParams['billing_first_name'] = ObjectSerializer::toQueryValue($billing_first_name);
        }
        // query params
        if ($billing_last_name !== null) {
            $queryParams['billing_last_name'] = ObjectSerializer::toQueryValue($billing_last_name);
        }
        // query params
        if ($billing_company !== null) {
            $queryParams['billing_company'] = ObjectSerializer::toQueryValue($billing_company);
        }
        // query params
        if ($billing_city !== null) {
            $queryParams['billing_city'] = ObjectSerializer::toQueryValue($billing_city);
        }
        // query params
        if ($billing_state !== null) {
            $queryParams['billing_state'] = ObjectSerializer::toQueryValue($billing_state);
        }
        // query params
        if ($billing_postal_code !== null) {
            $queryParams['billing_postal_code'] = ObjectSerializer::toQueryValue($billing_postal_code);
        }
        // query params
        if ($billing_country_code !== null) {
            $queryParams['billing_country_code'] = ObjectSerializer::toQueryValue($billing_country_code);
        }
        // query params
        if ($billing_day_phone !== null) {
            $queryParams['billing_day_phone'] = ObjectSerializer::toQueryValue($billing_day_phone);
        }
        // query params
        if ($billing_evening_phone !== null) {
            $queryParams['billing_evening_phone'] = ObjectSerializer::toQueryValue($billing_evening_phone);
        }
        // query params
        if ($shipping_first_name !== null) {
            $queryParams['shipping_first_name'] = ObjectSerializer::toQueryValue($shipping_first_name);
        }
        // query params
        if ($shipping_last_name !== null) {
            $queryParams['shipping_last_name'] = ObjectSerializer::toQueryValue($shipping_last_name);
        }
        // query params
        if ($shipping_company !== null) {
            $queryParams['shipping_company'] = ObjectSerializer::toQueryValue($shipping_company);
        }
        // query params
        if ($shipping_city !== null) {
            $queryParams['shipping_city'] = ObjectSerializer::toQueryValue($shipping_city);
        }
        // query params
        if ($shipping_state !== null) {
            $queryParams['shipping_state'] = ObjectSerializer::toQueryValue($shipping_state);
        }
        // query params
        if ($shipping_postal_code !== null) {
            $queryParams['shipping_postal_code'] = ObjectSerializer::toQueryValue($shipping_postal_code);
        }
        // query params
        if ($shipping_country_code !== null) {
            $queryParams['shipping_country_code'] = ObjectSerializer::toQueryValue($shipping_country_code);
        }
        // query params
        if ($shipping_day_phone !== null) {
            $queryParams['shipping_day_phone'] = ObjectSerializer::toQueryValue($shipping_day_phone);
        }
        // query params
        if ($shipping_evening_phone !== null) {
            $queryParams['shipping_evening_phone'] = ObjectSerializer::toQueryValue($shipping_evening_phone);
        }
        // query params
        if ($pricing_tier_oid !== null) {
            $queryParams['pricing_tier_oid'] = ObjectSerializer::toQueryValue($pricing_tier_oid);
        }
        // query params
        if ($pricing_tier_name !== null) {
            $queryParams['pricing_tier_name'] = ObjectSerializer::toQueryValue($pricing_tier_name);
        }
        // query params
        if ($emails !== null) {
            $queryParams['emails'] = ObjectSerializer::toQueryValue($emails);
        }
        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_since !== null) {
            $queryParams['_since'] = ObjectSerializer::toQueryValue($_since);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }
        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomersByQuery
     *
     * Retrieve customers by query
     *
     * @param  \ultracart\v2\models\CustomerQuery $customer_query Customer query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomersResponse
     */
    public function getCustomersByQuery($customer_query, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        list($response) = $this->getCustomersByQueryWithHttpInfo($customer_query, $_limit, $_offset, $_since, $_sort, $_expand);
        return $response;
    }


    /**
     * Operation getCustomersByQueryWithHttpInfo
     *
     * Retrieve customers by query
     *
     * @param  \ultracart\v2\models\CustomerQuery $customer_query Customer query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomersByQueryWithHttpInfo($customer_query, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        return $this->getCustomersByQueryWithHttpInfoRetry(true ,   $customer_query,   $_limit,   $_offset,   $_since,   $_sort,   $_expand);
    }


    /**
     * Operation getCustomersByQueryWithHttpInfoRetry
     *
     * Retrieve customers by query
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CustomerQuery $customer_query Customer query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomersByQueryWithHttpInfoRetry($retry ,  $customer_query,  $_limit = '100',  $_offset = '0',  $_since = null,  $_sort = null,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomersResponse';
        $request = $this->getCustomersByQueryRequest($customer_query, $_limit, $_offset, $_since, $_sort, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomersByQueryWithHttpInfoRetry(false ,   $customer_query,   $_limit,   $_offset,   $_since,   $_sort,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomersByQueryAsync
     *
     * Retrieve customers by query
     *
     * @param  \ultracart\v2\models\CustomerQuery $customer_query Customer query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomersByQueryAsync($customer_query, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        return $this->getCustomersByQueryAsyncWithHttpInfo($customer_query, $_limit, $_offset, $_since, $_sort, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomersByQueryAsyncWithHttpInfo
     *
     * Retrieve customers by query
     *
     * @param  \ultracart\v2\models\CustomerQuery $customer_query Customer query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomersByQueryAsyncWithHttpInfo($customer_query, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomersResponse';
        $request = $this->getCustomersByQueryRequest($customer_query, $_limit, $_offset, $_since, $_sort, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomersByQuery'
     *
     * @param  \ultracart\v2\models\CustomerQuery $customer_query Customer query (required)
     * @param  int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param  int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param  string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param  string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomersByQueryRequest($customer_query, $_limit = '100', $_offset = '0', $_since = null, $_sort = null, $_expand = null)
    {
        // verify the required parameter 'customer_query' is set
        if ($customer_query === null || (is_array($customer_query) && count($customer_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_query when calling getCustomersByQuery'
            );
        }

        $resourcePath = '/customer/customers/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = ObjectSerializer::toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = ObjectSerializer::toQueryValue($_offset);
        }
        // query params
        if ($_since !== null) {
            $queryParams['_since'] = ObjectSerializer::toQueryValue($_since);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = ObjectSerializer::toQueryValue($_sort);
        }
        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;
        if (isset($customer_query)) {
            $_tempBody = $customer_query;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomersForDataTables
     *
     * Retrieve customers for DataTables plugin
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\DataTablesServerSideResponse
     */
    public function getCustomersForDataTables($_expand = null)
    {
        list($response) = $this->getCustomersForDataTablesWithHttpInfo($_expand);
        return $response;
    }


    /**
     * Operation getCustomersForDataTablesWithHttpInfo
     *
     * Retrieve customers for DataTables plugin
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\DataTablesServerSideResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomersForDataTablesWithHttpInfo($_expand = null)
    {
        return $this->getCustomersForDataTablesWithHttpInfoRetry(true ,   $_expand);
    }


    /**
     * Operation getCustomersForDataTablesWithHttpInfoRetry
     *
     * Retrieve customers for DataTables plugin
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\DataTablesServerSideResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomersForDataTablesWithHttpInfoRetry($retry ,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\DataTablesServerSideResponse';
        $request = $this->getCustomersForDataTablesRequest($_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getCustomersForDataTablesWithHttpInfoRetry(false ,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\DataTablesServerSideResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomersForDataTablesAsync
     *
     * Retrieve customers for DataTables plugin
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomersForDataTablesAsync($_expand = null)
    {
        return $this->getCustomersForDataTablesAsyncWithHttpInfo($_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomersForDataTablesAsyncWithHttpInfo
     *
     * Retrieve customers for DataTables plugin
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomersForDataTablesAsyncWithHttpInfo($_expand = null)
    {
        $returnType = '\ultracart\v2\models\DataTablesServerSideResponse';
        $request = $this->getCustomersForDataTablesRequest($_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomersForDataTables'
     *
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomersForDataTablesRequest($_expand = null)
    {

        $resourcePath = '/customer/customers/dataTables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailVerificationToken
     *
     * Create a token that can be used to verify a customer email address
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenRequest $token_request Token request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailVerifyTokenResponse
     */
    public function getEmailVerificationToken($token_request)
    {
        list($response) = $this->getEmailVerificationTokenWithHttpInfo($token_request);
        return $response;
    }


    /**
     * Operation getEmailVerificationTokenWithHttpInfo
     *
     * Create a token that can be used to verify a customer email address
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenRequest $token_request Token request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailVerifyTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailVerificationTokenWithHttpInfo($token_request)
    {
        return $this->getEmailVerificationTokenWithHttpInfoRetry(true ,   $token_request);
    }


    /**
     * Operation getEmailVerificationTokenWithHttpInfoRetry
     *
     * Create a token that can be used to verify a customer email address
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\EmailVerifyTokenRequest $token_request Token request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailVerifyTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailVerificationTokenWithHttpInfoRetry($retry ,  $token_request)
    {
        $returnType = '\ultracart\v2\models\EmailVerifyTokenResponse';
        $request = $this->getEmailVerificationTokenRequest($token_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getEmailVerificationTokenWithHttpInfoRetry(false ,   $token_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailVerifyTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailVerificationTokenAsync
     *
     * Create a token that can be used to verify a customer email address
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenRequest $token_request Token request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailVerificationTokenAsync($token_request)
    {
        return $this->getEmailVerificationTokenAsyncWithHttpInfo($token_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailVerificationTokenAsyncWithHttpInfo
     *
     * Create a token that can be used to verify a customer email address
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenRequest $token_request Token request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailVerificationTokenAsyncWithHttpInfo($token_request)
    {
        $returnType = '\ultracart\v2\models\EmailVerifyTokenResponse';
        $request = $this->getEmailVerificationTokenRequest($token_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailVerificationToken'
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenRequest $token_request Token request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailVerificationTokenRequest($token_request)
    {
        // verify the required parameter 'token_request' is set
        if ($token_request === null || (is_array($token_request) && count($token_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_request when calling getEmailVerificationToken'
            );
        }

        $resourcePath = '/customer/customers/email_verify/get_token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($token_request)) {
            $_tempBody = $token_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMagicLink
     *
     * getMagicLink
     *
     * @param  int $customer_profile_oid The customer_profile_oid of the customer. (required)
     * @param  string $storefront_host_name The storefront to log into. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerMagicLinkResponse
     */
    public function getMagicLink($customer_profile_oid, $storefront_host_name)
    {
        list($response) = $this->getMagicLinkWithHttpInfo($customer_profile_oid, $storefront_host_name);
        return $response;
    }


    /**
     * Operation getMagicLinkWithHttpInfo
     *
     * getMagicLink
     *
     * @param  int $customer_profile_oid The customer_profile_oid of the customer. (required)
     * @param  string $storefront_host_name The storefront to log into. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerMagicLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMagicLinkWithHttpInfo($customer_profile_oid, $storefront_host_name)
    {
        return $this->getMagicLinkWithHttpInfoRetry(true ,   $customer_profile_oid,   $storefront_host_name);
    }


    /**
     * Operation getMagicLinkWithHttpInfoRetry
     *
     * getMagicLink
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer_profile_oid of the customer. (required)
     * @param  string $storefront_host_name The storefront to log into. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerMagicLinkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMagicLinkWithHttpInfoRetry($retry ,  $customer_profile_oid,  $storefront_host_name)
    {
        $returnType = '\ultracart\v2\models\CustomerMagicLinkResponse';
        $request = $this->getMagicLinkRequest($customer_profile_oid, $storefront_host_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getMagicLinkWithHttpInfoRetry(false ,   $customer_profile_oid,   $storefront_host_name);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerMagicLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMagicLinkAsync
     *
     * getMagicLink
     *
     * @param  int $customer_profile_oid The customer_profile_oid of the customer. (required)
     * @param  string $storefront_host_name The storefront to log into. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMagicLinkAsync($customer_profile_oid, $storefront_host_name)
    {
        return $this->getMagicLinkAsyncWithHttpInfo($customer_profile_oid, $storefront_host_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMagicLinkAsyncWithHttpInfo
     *
     * getMagicLink
     *
     * @param  int $customer_profile_oid The customer_profile_oid of the customer. (required)
     * @param  string $storefront_host_name The storefront to log into. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMagicLinkAsyncWithHttpInfo($customer_profile_oid, $storefront_host_name)
    {
        $returnType = '\ultracart\v2\models\CustomerMagicLinkResponse';
        $request = $this->getMagicLinkRequest($customer_profile_oid, $storefront_host_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMagicLink'
     *
     * @param  int $customer_profile_oid The customer_profile_oid of the customer. (required)
     * @param  string $storefront_host_name The storefront to log into. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMagicLinkRequest($customer_profile_oid, $storefront_host_name)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling getMagicLink'
            );
        }
        // verify the required parameter 'storefront_host_name' is set
        if ($storefront_host_name === null || (is_array($storefront_host_name) && count($storefront_host_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storefront_host_name when calling getMagicLink'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/magic_link/{storefront_host_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }
        // path params
        if ($storefront_host_name !== null) {
            $resourcePath = str_replace(
                '{' . 'storefront_host_name' . '}',
                ObjectSerializer::toPathValue($storefront_host_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertCustomer
     *
     * Insert a customer
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerResponse
     */
    public function insertCustomer($customer, $_expand = null)
    {
        list($response) = $this->insertCustomerWithHttpInfo($customer, $_expand);
        return $response;
    }


    /**
     * Operation insertCustomerWithHttpInfo
     *
     * Insert a customer
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertCustomerWithHttpInfo($customer, $_expand = null)
    {
        return $this->insertCustomerWithHttpInfoRetry(true ,   $customer,   $_expand);
    }


    /**
     * Operation insertCustomerWithHttpInfoRetry
     *
     * Insert a customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\Customer $customer Customer to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertCustomerWithHttpInfoRetry($retry ,  $customer,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomerResponse';
        $request = $this->insertCustomerRequest($customer, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertCustomerWithHttpInfoRetry(false ,   $customer,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertCustomerAsync
     *
     * Insert a customer
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertCustomerAsync($customer, $_expand = null)
    {
        return $this->insertCustomerAsyncWithHttpInfo($customer, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertCustomerAsyncWithHttpInfo
     *
     * Insert a customer
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertCustomerAsyncWithHttpInfo($customer, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomerResponse';
        $request = $this->insertCustomerRequest($customer, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertCustomer'
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to insert (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertCustomerRequest($customer, $_expand = null)
    {
        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling insertCustomer'
            );
        }

        $resourcePath = '/customer/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }


        // body params
        $_tempBody = null;
        if (isset($customer)) {
            $_tempBody = $customer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertWishListItem
     *
     * Insert a customer wishlist item
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to insert (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerWishListItem
     */
    public function insertWishListItem($wishlist_item, $customer_profile_oid)
    {
        list($response) = $this->insertWishListItemWithHttpInfo($wishlist_item, $customer_profile_oid);
        return $response;
    }


    /**
     * Operation insertWishListItemWithHttpInfo
     *
     * Insert a customer wishlist item
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to insert (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertWishListItemWithHttpInfo($wishlist_item, $customer_profile_oid)
    {
        return $this->insertWishListItemWithHttpInfoRetry(true ,   $wishlist_item,   $customer_profile_oid);
    }


    /**
     * Operation insertWishListItemWithHttpInfoRetry
     *
     * Insert a customer wishlist item
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to insert (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertWishListItemWithHttpInfoRetry($retry ,  $wishlist_item,  $customer_profile_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItem';
        $request = $this->insertWishListItemRequest($wishlist_item, $customer_profile_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertWishListItemWithHttpInfoRetry(false ,   $wishlist_item,   $customer_profile_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerWishListItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertWishListItemAsync
     *
     * Insert a customer wishlist item
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to insert (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertWishListItemAsync($wishlist_item, $customer_profile_oid)
    {
        return $this->insertWishListItemAsyncWithHttpInfo($wishlist_item, $customer_profile_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertWishListItemAsyncWithHttpInfo
     *
     * Insert a customer wishlist item
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to insert (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertWishListItemAsyncWithHttpInfo($wishlist_item, $customer_profile_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItem';
        $request = $this->insertWishListItemRequest($wishlist_item, $customer_profile_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertWishListItem'
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to insert (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertWishListItemRequest($wishlist_item, $customer_profile_oid)
    {
        // verify the required parameter 'wishlist_item' is set
        if ($wishlist_item === null || (is_array($wishlist_item) && count($wishlist_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wishlist_item when calling insertWishListItem'
            );
        }
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling insertWishListItem'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/wishlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($wishlist_item)) {
            $_tempBody = $wishlist_item;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeCustomer
     *
     * Merge customer into this customer
     *
     * @param  \ultracart\v2\models\CustomerMergeRequest $customer Customer to merge into this profile. (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function mergeCustomer($customer, $customer_profile_oid, $_expand = null)
    {
        $this->mergeCustomerWithHttpInfo($customer, $customer_profile_oid, $_expand);
    }


    /**
     * Operation mergeCustomerWithHttpInfo
     *
     * Merge customer into this customer
     *
     * @param  \ultracart\v2\models\CustomerMergeRequest $customer Customer to merge into this profile. (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeCustomerWithHttpInfo($customer, $customer_profile_oid, $_expand = null)
    {
        $this->mergeCustomerWithHttpInfoRetry(true ,   $customer,   $customer_profile_oid,   $_expand);
    }


    /**
     * Operation mergeCustomerWithHttpInfoRetry
     *
     * Merge customer into this customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CustomerMergeRequest $customer Customer to merge into this profile. (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeCustomerWithHttpInfoRetry($retry ,  $customer,  $customer_profile_oid,  $_expand = null)
    {
        $returnType = '';
        $request = $this->mergeCustomerRequest($customer, $customer_profile_oid, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->mergeCustomerWithHttpInfoRetry(false ,   $customer,   $customer_profile_oid,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeCustomerAsync
     *
     * Merge customer into this customer
     *
     * @param  \ultracart\v2\models\CustomerMergeRequest $customer Customer to merge into this profile. (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeCustomerAsync($customer, $customer_profile_oid, $_expand = null)
    {
        return $this->mergeCustomerAsyncWithHttpInfo($customer, $customer_profile_oid, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeCustomerAsyncWithHttpInfo
     *
     * Merge customer into this customer
     *
     * @param  \ultracart\v2\models\CustomerMergeRequest $customer Customer to merge into this profile. (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeCustomerAsyncWithHttpInfo($customer, $customer_profile_oid, $_expand = null)
    {
        $returnType = '';
        $request = $this->mergeCustomerRequest($customer, $customer_profile_oid, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeCustomer'
     *
     * @param  \ultracart\v2\models\CustomerMergeRequest $customer Customer to merge into this profile. (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeCustomerRequest($customer, $customer_profile_oid, $_expand = null)
    {
        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling mergeCustomer'
            );
        }
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling mergeCustomer'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer)) {
            $_tempBody = $customer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchCustomerProfileValues
     *
     * Searches for all matching values (using POST)
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\LookupResponse
     */
    public function searchCustomerProfileValues($lookup_request)
    {
        list($response) = $this->searchCustomerProfileValuesWithHttpInfo($lookup_request);
        return $response;
    }


    /**
     * Operation searchCustomerProfileValuesWithHttpInfo
     *
     * Searches for all matching values (using POST)
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LookupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCustomerProfileValuesWithHttpInfo($lookup_request)
    {
        return $this->searchCustomerProfileValuesWithHttpInfoRetry(true ,   $lookup_request);
    }


    /**
     * Operation searchCustomerProfileValuesWithHttpInfoRetry
     *
     * Searches for all matching values (using POST)
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\LookupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCustomerProfileValuesWithHttpInfoRetry($retry ,  $lookup_request)
    {
        $returnType = '\ultracart\v2\models\LookupResponse';
        $request = $this->searchCustomerProfileValuesRequest($lookup_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->searchCustomerProfileValuesWithHttpInfoRetry(false ,   $lookup_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\LookupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCustomerProfileValuesAsync
     *
     * Searches for all matching values (using POST)
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCustomerProfileValuesAsync($lookup_request)
    {
        return $this->searchCustomerProfileValuesAsyncWithHttpInfo($lookup_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCustomerProfileValuesAsyncWithHttpInfo
     *
     * Searches for all matching values (using POST)
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCustomerProfileValuesAsyncWithHttpInfo($lookup_request)
    {
        $returnType = '\ultracart\v2\models\LookupResponse';
        $request = $this->searchCustomerProfileValuesRequest($lookup_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCustomerProfileValues'
     *
     * @param  \ultracart\v2\models\LookupRequest $lookup_request LookupRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchCustomerProfileValuesRequest($lookup_request)
    {
        // verify the required parameter 'lookup_request' is set
        if ($lookup_request === null || (is_array($lookup_request) && count($lookup_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lookup_request when calling searchCustomerProfileValues'
            );
        }

        $resourcePath = '/customer/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($lookup_request)) {
            $_tempBody = $lookup_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-browser-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-browser-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomer
     *
     * Update a customer
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to update (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerResponse
     */
    public function updateCustomer($customer, $customer_profile_oid, $_expand = null)
    {
        list($response) = $this->updateCustomerWithHttpInfo($customer, $customer_profile_oid, $_expand);
        return $response;
    }


    /**
     * Operation updateCustomerWithHttpInfo
     *
     * Update a customer
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to update (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerWithHttpInfo($customer, $customer_profile_oid, $_expand = null)
    {
        return $this->updateCustomerWithHttpInfoRetry(true ,   $customer,   $customer_profile_oid,   $_expand);
    }


    /**
     * Operation updateCustomerWithHttpInfoRetry
     *
     * Update a customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\Customer $customer Customer to update (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerWithHttpInfoRetry($retry ,  $customer,  $customer_profile_oid,  $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomerResponse';
        $request = $this->updateCustomerRequest($customer, $customer_profile_oid, $_expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateCustomerWithHttpInfoRetry(false ,   $customer,   $customer_profile_oid,   $_expand);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerAsync
     *
     * Update a customer
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to update (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerAsync($customer, $customer_profile_oid, $_expand = null)
    {
        return $this->updateCustomerAsyncWithHttpInfo($customer, $customer_profile_oid, $_expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerAsyncWithHttpInfo
     *
     * Update a customer
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to update (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerAsyncWithHttpInfo($customer, $customer_profile_oid, $_expand = null)
    {
        $returnType = '\ultracart\v2\models\CustomerResponse';
        $request = $this->updateCustomerRequest($customer, $customer_profile_oid, $_expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomer'
     *
     * @param  \ultracart\v2\models\Customer $customer Customer to update (required)
     * @param  int $customer_profile_oid The customer_profile_oid to update. (required)
     * @param  string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomerRequest($customer, $customer_profile_oid, $_expand = null)
    {
        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling updateCustomer'
            );
        }
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling updateCustomer'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = ObjectSerializer::toQueryValue($_expand);
        }

        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer)) {
            $_tempBody = $customer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerEmailLists
     *
     * Update email list subscriptions for a customer
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\CustomerEmailListChanges $list_changes List changes (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerEmailListChanges
     */
    public function updateCustomerEmailLists($customer_profile_oid, $list_changes)
    {
        list($response) = $this->updateCustomerEmailListsWithHttpInfo($customer_profile_oid, $list_changes);
        return $response;
    }


    /**
     * Operation updateCustomerEmailListsWithHttpInfo
     *
     * Update email list subscriptions for a customer
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\CustomerEmailListChanges $list_changes List changes (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerEmailListChanges, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerEmailListsWithHttpInfo($customer_profile_oid, $list_changes)
    {
        return $this->updateCustomerEmailListsWithHttpInfoRetry(true ,   $customer_profile_oid,   $list_changes);
    }


    /**
     * Operation updateCustomerEmailListsWithHttpInfoRetry
     *
     * Update email list subscriptions for a customer
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\CustomerEmailListChanges $list_changes List changes (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerEmailListChanges, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerEmailListsWithHttpInfoRetry($retry ,  $customer_profile_oid,  $list_changes)
    {
        $returnType = '\ultracart\v2\models\CustomerEmailListChanges';
        $request = $this->updateCustomerEmailListsRequest($customer_profile_oid, $list_changes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateCustomerEmailListsWithHttpInfoRetry(false ,   $customer_profile_oid,   $list_changes);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerEmailListChanges',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerEmailListsAsync
     *
     * Update email list subscriptions for a customer
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\CustomerEmailListChanges $list_changes List changes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerEmailListsAsync($customer_profile_oid, $list_changes)
    {
        return $this->updateCustomerEmailListsAsyncWithHttpInfo($customer_profile_oid, $list_changes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerEmailListsAsyncWithHttpInfo
     *
     * Update email list subscriptions for a customer
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\CustomerEmailListChanges $list_changes List changes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerEmailListsAsyncWithHttpInfo($customer_profile_oid, $list_changes)
    {
        $returnType = '\ultracart\v2\models\CustomerEmailListChanges';
        $request = $this->updateCustomerEmailListsRequest($customer_profile_oid, $list_changes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerEmailLists'
     *
     * @param  int $customer_profile_oid The customer profile oid (required)
     * @param  \ultracart\v2\models\CustomerEmailListChanges $list_changes List changes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCustomerEmailListsRequest($customer_profile_oid, $list_changes)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling updateCustomerEmailLists'
            );
        }
        // verify the required parameter 'list_changes' is set
        if ($list_changes === null || (is_array($list_changes) && count($list_changes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_changes when calling updateCustomerEmailLists'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/email_lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($list_changes)) {
            $_tempBody = $list_changes;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWishListItem
     *
     * Update a customer wishlist item
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to update (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\CustomerWishListItem
     */
    public function updateWishListItem($wishlist_item, $customer_profile_oid, $customer_wishlist_item_oid)
    {
        list($response) = $this->updateWishListItemWithHttpInfo($wishlist_item, $customer_profile_oid, $customer_wishlist_item_oid);
        return $response;
    }


    /**
     * Operation updateWishListItemWithHttpInfo
     *
     * Update a customer wishlist item
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to update (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWishListItemWithHttpInfo($wishlist_item, $customer_profile_oid, $customer_wishlist_item_oid)
    {
        return $this->updateWishListItemWithHttpInfoRetry(true ,   $wishlist_item,   $customer_profile_oid,   $customer_wishlist_item_oid);
    }


    /**
     * Operation updateWishListItemWithHttpInfoRetry
     *
     * Update a customer wishlist item
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to update (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\CustomerWishListItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWishListItemWithHttpInfoRetry($retry ,  $wishlist_item,  $customer_profile_oid,  $customer_wishlist_item_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItem';
        $request = $this->updateWishListItemRequest($wishlist_item, $customer_profile_oid, $customer_wishlist_item_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateWishListItemWithHttpInfoRetry(false ,   $wishlist_item,   $customer_profile_oid,   $customer_wishlist_item_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\CustomerWishListItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWishListItemAsync
     *
     * Update a customer wishlist item
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to update (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWishListItemAsync($wishlist_item, $customer_profile_oid, $customer_wishlist_item_oid)
    {
        return $this->updateWishListItemAsyncWithHttpInfo($wishlist_item, $customer_profile_oid, $customer_wishlist_item_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWishListItemAsyncWithHttpInfo
     *
     * Update a customer wishlist item
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to update (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWishListItemAsyncWithHttpInfo($wishlist_item, $customer_profile_oid, $customer_wishlist_item_oid)
    {
        $returnType = '\ultracart\v2\models\CustomerWishListItem';
        $request = $this->updateWishListItemRequest($wishlist_item, $customer_profile_oid, $customer_wishlist_item_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWishListItem'
     *
     * @param  \ultracart\v2\models\CustomerWishListItem $wishlist_item Wishlist item to update (required)
     * @param  int $customer_profile_oid The customer oid for this wishlist. (required)
     * @param  int $customer_wishlist_item_oid The wishlist oid for this wishlist item. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWishListItemRequest($wishlist_item, $customer_profile_oid, $customer_wishlist_item_oid)
    {
        // verify the required parameter 'wishlist_item' is set
        if ($wishlist_item === null || (is_array($wishlist_item) && count($wishlist_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wishlist_item when calling updateWishListItem'
            );
        }
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null || (is_array($customer_profile_oid) && count($customer_profile_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_profile_oid when calling updateWishListItem'
            );
        }
        // verify the required parameter 'customer_wishlist_item_oid' is set
        if ($customer_wishlist_item_oid === null || (is_array($customer_wishlist_item_oid) && count($customer_wishlist_item_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_wishlist_item_oid when calling updateWishListItem'
            );
        }

        $resourcePath = '/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_profile_oid' . '}',
                ObjectSerializer::toPathValue($customer_profile_oid),
                $resourcePath
            );
        }
        // path params
        if ($customer_wishlist_item_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_wishlist_item_oid' . '}',
                ObjectSerializer::toPathValue($customer_wishlist_item_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($wishlist_item)) {
            $_tempBody = $wishlist_item;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateEmailVerificationToken
     *
     * Validate a token that can be used to verify a customer email address
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenValidateRequest $validation_request Token validation request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\EmailVerifyTokenValidateResponse
     */
    public function validateEmailVerificationToken($validation_request)
    {
        list($response) = $this->validateEmailVerificationTokenWithHttpInfo($validation_request);
        return $response;
    }


    /**
     * Operation validateEmailVerificationTokenWithHttpInfo
     *
     * Validate a token that can be used to verify a customer email address
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenValidateRequest $validation_request Token validation request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailVerifyTokenValidateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateEmailVerificationTokenWithHttpInfo($validation_request)
    {
        return $this->validateEmailVerificationTokenWithHttpInfoRetry(true ,   $validation_request);
    }


    /**
     * Operation validateEmailVerificationTokenWithHttpInfoRetry
     *
     * Validate a token that can be used to verify a customer email address
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\EmailVerifyTokenValidateRequest $validation_request Token validation request (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\EmailVerifyTokenValidateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateEmailVerificationTokenWithHttpInfoRetry($retry ,  $validation_request)
    {
        $returnType = '\ultracart\v2\models\EmailVerifyTokenValidateResponse';
        $request = $this->validateEmailVerificationTokenRequest($validation_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->validateEmailVerificationTokenWithHttpInfoRetry(false ,   $validation_request);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\EmailVerifyTokenValidateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateEmailVerificationTokenAsync
     *
     * Validate a token that can be used to verify a customer email address
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenValidateRequest $validation_request Token validation request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateEmailVerificationTokenAsync($validation_request)
    {
        return $this->validateEmailVerificationTokenAsyncWithHttpInfo($validation_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateEmailVerificationTokenAsyncWithHttpInfo
     *
     * Validate a token that can be used to verify a customer email address
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenValidateRequest $validation_request Token validation request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateEmailVerificationTokenAsyncWithHttpInfo($validation_request)
    {
        $returnType = '\ultracart\v2\models\EmailVerifyTokenValidateResponse';
        $request = $this->validateEmailVerificationTokenRequest($validation_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateEmailVerificationToken'
     *
     * @param  \ultracart\v2\models\EmailVerifyTokenValidateRequest $validation_request Token validation request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateEmailVerificationTokenRequest($validation_request)
    {
        // verify the required parameter 'validation_request' is set
        if ($validation_request === null || (is_array($validation_request) && count($validation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_request when calling validateEmailVerificationToken'
            );
        }

        $resourcePath = '/customer/customers/email_verify/validate_token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($validation_request)) {
            $_tempBody = $validation_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
