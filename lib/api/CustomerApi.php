<?php
/**
 * CustomerApi
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\api;

use \ultracart\v2\Configuration;
use \ultracart\v2\ApiClient;
use \ultracart\v2\ApiException;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApi
{

    /**
     * API Client
     *
     * @var \ultracart\v2\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ultracart\v2\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ultracart\v2\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://secure.ultracart.com/rest/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ultracart\v2\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ultracart\v2\ApiClient $apiClient set the API client
     *
     * @return CustomerApi
     */
    public function setApiClient(\ultracart\v2\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation customerCustomersCustomerProfileOidGet
     *
     * Retrieve a customer
     *
     * @param int $customer_profile_oid The customer oid to retrieve. (required)
     * @param string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return \ultracart\v2\models\CustomerResponse
     * @throws \ultracart\v2\ApiException on non-2xx response
     */
    public function customerCustomersCustomerProfileOidGet($customer_profile_oid, $_expand = null)
    {
        list($response) = $this->customerCustomersCustomerProfileOidGetWithHttpInfo($customer_profile_oid, $_expand);
        return $response;
    }

    /**
     * Operation customerCustomersCustomerProfileOidGetWithHttpInfo
     *
     * Retrieve a customer
     *
     * @param int $customer_profile_oid The customer oid to retrieve. (required)
     * @param string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return Array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \ultracart\v2\ApiException on non-2xx response
     */
    public function customerCustomersCustomerProfileOidGetWithHttpInfo($customer_profile_oid, $_expand = null)
    {
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_profile_oid when calling customerCustomersCustomerProfileOidGet');
        }
        // parse inputs
        $resourcePath = "/customer/customers/{customer_profile_oid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = $this->apiClient->getSerializer()->toQueryValue($_expand);
        }
        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                "{" . "customer_profile_oid" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_profile_oid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-ultracart-simple-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-ultracart-simple-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ultracart\v2\models\CustomerResponse',
                '/customer/customers/{customer_profile_oid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ultracart\v2\models\CustomerResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\CustomerResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerCustomersCustomerProfileOidPut
     *
     * Update a customer
     *
     * @param \ultracart\v2\models\Customer $customer Customer to update (required)
     * @param int $customer_profile_oid The customer_profile_oid to update. (required)
     * @return \ultracart\v2\models\CustomerResponse
     * @throws \ultracart\v2\ApiException on non-2xx response
     */
    public function customerCustomersCustomerProfileOidPut($customer, $customer_profile_oid)
    {
        list($response) = $this->customerCustomersCustomerProfileOidPutWithHttpInfo($customer, $customer_profile_oid);
        return $response;
    }

    /**
     * Operation customerCustomersCustomerProfileOidPutWithHttpInfo
     *
     * Update a customer
     *
     * @param \ultracart\v2\models\Customer $customer Customer to update (required)
     * @param int $customer_profile_oid The customer_profile_oid to update. (required)
     * @return Array of \ultracart\v2\models\CustomerResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \ultracart\v2\ApiException on non-2xx response
     */
    public function customerCustomersCustomerProfileOidPutWithHttpInfo($customer, $customer_profile_oid)
    {
        // verify the required parameter 'customer' is set
        if ($customer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer when calling customerCustomersCustomerProfileOidPut');
        }
        // verify the required parameter 'customer_profile_oid' is set
        if ($customer_profile_oid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_profile_oid when calling customerCustomersCustomerProfileOidPut');
        }
        // parse inputs
        $resourcePath = "/customer/customers/{customer_profile_oid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json; charset=UTF-8'));

        // path params
        if ($customer_profile_oid !== null) {
            $resourcePath = str_replace(
                "{" . "customer_profile_oid" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_profile_oid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($customer)) {
            $_tempBody = $customer;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-ultracart-simple-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-ultracart-simple-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ultracart\v2\models\CustomerResponse',
                '/customer/customers/{customer_profile_oid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ultracart\v2\models\CustomerResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\CustomerResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerCustomersGet
     *
     * Retrieve customers
     *
     * @param string $email Email (optional)
     * @param string $qb_class Quickbooks class (optional)
     * @param string $quickbooks_code Quickbooks code (optional)
     * @param string $last_modified_dts_start Last modified date start (optional)
     * @param string $last_modified_dts_end Last modified date end (optional)
     * @param string $signup_dts_start Signup date start (optional)
     * @param string $signup_dts_end Signup date end (optional)
     * @param string $billing_first_name Billing first name (optional)
     * @param string $billing_last_name Billing last name (optional)
     * @param string $billing_company Billing company (optional)
     * @param string $billing_city Billing city (optional)
     * @param string $billing_state Billing state (optional)
     * @param string $billing_postal_code Billing postal code (optional)
     * @param string $billing_country_code Billing country code (optional)
     * @param string $billing_day_phone Billing day phone (optional)
     * @param string $billing_evening_phone Billing evening phone (optional)
     * @param string $shipping_first_name Shipping first name (optional)
     * @param string $shipping_last_name Shipping last name (optional)
     * @param string $shipping_company Shipping company (optional)
     * @param string $shipping_city Shipping city (optional)
     * @param string $shipping_state Shipping state (optional)
     * @param string $shipping_postal_code Shipping postal code (optional)
     * @param string $shipping_country_code Shipping country code (optional)
     * @param string $shipping_day_phone Shipping day phone (optional)
     * @param string $shipping_evening_phone Shipping evening phone (optional)
     * @param int $pricing_tier_oid Pricing tier oid (optional)
     * @param string $pricing_tier_name Pricing tier name (optional)
     * @param int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return \ultracart\v2\models\CustomersResponse
     * @throws \ultracart\v2\ApiException on non-2xx response
     */
    public function customerCustomersGet($email = null, $qb_class = null, $quickbooks_code = null, $last_modified_dts_start = null, $last_modified_dts_end = null, $signup_dts_start = null, $signup_dts_end = null, $billing_first_name = null, $billing_last_name = null, $billing_company = null, $billing_city = null, $billing_state = null, $billing_postal_code = null, $billing_country_code = null, $billing_day_phone = null, $billing_evening_phone = null, $shipping_first_name = null, $shipping_last_name = null, $shipping_company = null, $shipping_city = null, $shipping_state = null, $shipping_postal_code = null, $shipping_country_code = null, $shipping_day_phone = null, $shipping_evening_phone = null, $pricing_tier_oid = null, $pricing_tier_name = null, $_limit = null, $_offset = null, $_since = null, $_sort = null, $_expand = null)
    {
        list($response) = $this->customerCustomersGetWithHttpInfo($email, $qb_class, $quickbooks_code, $last_modified_dts_start, $last_modified_dts_end, $signup_dts_start, $signup_dts_end, $billing_first_name, $billing_last_name, $billing_company, $billing_city, $billing_state, $billing_postal_code, $billing_country_code, $billing_day_phone, $billing_evening_phone, $shipping_first_name, $shipping_last_name, $shipping_company, $shipping_city, $shipping_state, $shipping_postal_code, $shipping_country_code, $shipping_day_phone, $shipping_evening_phone, $pricing_tier_oid, $pricing_tier_name, $_limit, $_offset, $_since, $_sort, $_expand);
        return $response;
    }

    /**
     * Operation customerCustomersGetWithHttpInfo
     *
     * Retrieve customers
     *
     * @param string $email Email (optional)
     * @param string $qb_class Quickbooks class (optional)
     * @param string $quickbooks_code Quickbooks code (optional)
     * @param string $last_modified_dts_start Last modified date start (optional)
     * @param string $last_modified_dts_end Last modified date end (optional)
     * @param string $signup_dts_start Signup date start (optional)
     * @param string $signup_dts_end Signup date end (optional)
     * @param string $billing_first_name Billing first name (optional)
     * @param string $billing_last_name Billing last name (optional)
     * @param string $billing_company Billing company (optional)
     * @param string $billing_city Billing city (optional)
     * @param string $billing_state Billing state (optional)
     * @param string $billing_postal_code Billing postal code (optional)
     * @param string $billing_country_code Billing country code (optional)
     * @param string $billing_day_phone Billing day phone (optional)
     * @param string $billing_evening_phone Billing evening phone (optional)
     * @param string $shipping_first_name Shipping first name (optional)
     * @param string $shipping_last_name Shipping last name (optional)
     * @param string $shipping_company Shipping company (optional)
     * @param string $shipping_city Shipping city (optional)
     * @param string $shipping_state Shipping state (optional)
     * @param string $shipping_postal_code Shipping postal code (optional)
     * @param string $shipping_country_code Shipping country code (optional)
     * @param string $shipping_day_phone Shipping day phone (optional)
     * @param string $shipping_evening_phone Shipping evening phone (optional)
     * @param int $pricing_tier_oid Pricing tier oid (optional)
     * @param string $pricing_tier_name Pricing tier name (optional)
     * @param int $_limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param int $_offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param string $_since Fetch customers that have been created/modified since this date/time. (optional)
     * @param string $_sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param string $_expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return Array of \ultracart\v2\models\CustomersResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \ultracart\v2\ApiException on non-2xx response
     */
    public function customerCustomersGetWithHttpInfo($email = null, $qb_class = null, $quickbooks_code = null, $last_modified_dts_start = null, $last_modified_dts_end = null, $signup_dts_start = null, $signup_dts_end = null, $billing_first_name = null, $billing_last_name = null, $billing_company = null, $billing_city = null, $billing_state = null, $billing_postal_code = null, $billing_country_code = null, $billing_day_phone = null, $billing_evening_phone = null, $shipping_first_name = null, $shipping_last_name = null, $shipping_company = null, $shipping_city = null, $shipping_state = null, $shipping_postal_code = null, $shipping_country_code = null, $shipping_day_phone = null, $shipping_evening_phone = null, $pricing_tier_oid = null, $pricing_tier_name = null, $_limit = null, $_offset = null, $_since = null, $_sort = null, $_expand = null)
    {
        // parse inputs
        $resourcePath = "/customer/customers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($qb_class !== null) {
            $queryParams['qb_class'] = $this->apiClient->getSerializer()->toQueryValue($qb_class);
        }
        // query params
        if ($quickbooks_code !== null) {
            $queryParams['quickbooks_code'] = $this->apiClient->getSerializer()->toQueryValue($quickbooks_code);
        }
        // query params
        if ($last_modified_dts_start !== null) {
            $queryParams['last_modified_dts_start'] = $this->apiClient->getSerializer()->toQueryValue($last_modified_dts_start);
        }
        // query params
        if ($last_modified_dts_end !== null) {
            $queryParams['last_modified_dts_end'] = $this->apiClient->getSerializer()->toQueryValue($last_modified_dts_end);
        }
        // query params
        if ($signup_dts_start !== null) {
            $queryParams['signup_dts_start'] = $this->apiClient->getSerializer()->toQueryValue($signup_dts_start);
        }
        // query params
        if ($signup_dts_end !== null) {
            $queryParams['signup_dts_end'] = $this->apiClient->getSerializer()->toQueryValue($signup_dts_end);
        }
        // query params
        if ($billing_first_name !== null) {
            $queryParams['billing_first_name'] = $this->apiClient->getSerializer()->toQueryValue($billing_first_name);
        }
        // query params
        if ($billing_last_name !== null) {
            $queryParams['billing_last_name'] = $this->apiClient->getSerializer()->toQueryValue($billing_last_name);
        }
        // query params
        if ($billing_company !== null) {
            $queryParams['billing_company'] = $this->apiClient->getSerializer()->toQueryValue($billing_company);
        }
        // query params
        if ($billing_city !== null) {
            $queryParams['billing_city'] = $this->apiClient->getSerializer()->toQueryValue($billing_city);
        }
        // query params
        if ($billing_state !== null) {
            $queryParams['billing_state'] = $this->apiClient->getSerializer()->toQueryValue($billing_state);
        }
        // query params
        if ($billing_postal_code !== null) {
            $queryParams['billing_postal_code'] = $this->apiClient->getSerializer()->toQueryValue($billing_postal_code);
        }
        // query params
        if ($billing_country_code !== null) {
            $queryParams['billing_country_code'] = $this->apiClient->getSerializer()->toQueryValue($billing_country_code);
        }
        // query params
        if ($billing_day_phone !== null) {
            $queryParams['billing_day_phone'] = $this->apiClient->getSerializer()->toQueryValue($billing_day_phone);
        }
        // query params
        if ($billing_evening_phone !== null) {
            $queryParams['billing_evening_phone'] = $this->apiClient->getSerializer()->toQueryValue($billing_evening_phone);
        }
        // query params
        if ($shipping_first_name !== null) {
            $queryParams['shipping_first_name'] = $this->apiClient->getSerializer()->toQueryValue($shipping_first_name);
        }
        // query params
        if ($shipping_last_name !== null) {
            $queryParams['shipping_last_name'] = $this->apiClient->getSerializer()->toQueryValue($shipping_last_name);
        }
        // query params
        if ($shipping_company !== null) {
            $queryParams['shipping_company'] = $this->apiClient->getSerializer()->toQueryValue($shipping_company);
        }
        // query params
        if ($shipping_city !== null) {
            $queryParams['shipping_city'] = $this->apiClient->getSerializer()->toQueryValue($shipping_city);
        }
        // query params
        if ($shipping_state !== null) {
            $queryParams['shipping_state'] = $this->apiClient->getSerializer()->toQueryValue($shipping_state);
        }
        // query params
        if ($shipping_postal_code !== null) {
            $queryParams['shipping_postal_code'] = $this->apiClient->getSerializer()->toQueryValue($shipping_postal_code);
        }
        // query params
        if ($shipping_country_code !== null) {
            $queryParams['shipping_country_code'] = $this->apiClient->getSerializer()->toQueryValue($shipping_country_code);
        }
        // query params
        if ($shipping_day_phone !== null) {
            $queryParams['shipping_day_phone'] = $this->apiClient->getSerializer()->toQueryValue($shipping_day_phone);
        }
        // query params
        if ($shipping_evening_phone !== null) {
            $queryParams['shipping_evening_phone'] = $this->apiClient->getSerializer()->toQueryValue($shipping_evening_phone);
        }
        // query params
        if ($pricing_tier_oid !== null) {
            $queryParams['pricing_tier_oid'] = $this->apiClient->getSerializer()->toQueryValue($pricing_tier_oid);
        }
        // query params
        if ($pricing_tier_name !== null) {
            $queryParams['pricing_tier_name'] = $this->apiClient->getSerializer()->toQueryValue($pricing_tier_name);
        }
        // query params
        if ($_limit !== null) {
            $queryParams['_limit'] = $this->apiClient->getSerializer()->toQueryValue($_limit);
        }
        // query params
        if ($_offset !== null) {
            $queryParams['_offset'] = $this->apiClient->getSerializer()->toQueryValue($_offset);
        }
        // query params
        if ($_since !== null) {
            $queryParams['_since'] = $this->apiClient->getSerializer()->toQueryValue($_since);
        }
        // query params
        if ($_sort !== null) {
            $queryParams['_sort'] = $this->apiClient->getSerializer()->toQueryValue($_sort);
        }
        // query params
        if ($_expand !== null) {
            $queryParams['_expand'] = $this->apiClient->getSerializer()->toQueryValue($_expand);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-ultracart-simple-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-ultracart-simple-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ultracart\v2\models\CustomersResponse',
                '/customer/customers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ultracart\v2\models\CustomersResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\CustomersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ultracart\v2\models\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
