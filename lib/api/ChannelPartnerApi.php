<?php
/**
 * ChannelPartnerApi
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ultracart\v2\ApiException;
use ultracart\v2\Configuration;
use ultracart\v2\HeaderSelector;
use ultracart\v2\ObjectSerializer;

/**
 * ChannelPartnerApi Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelPartnerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }


    /**
     * @param string $simple_key api key
     * @param int $max_retry_seconds 0 to disable, else the maximum number of seconds to wait and automatically retry when rate limit is hit
     * @param string $verify passed to Guzzle to enable/disable ssl verify
     */
    public static function usingApiKey( $simple_key, $max_retry_seconds = 0, $verify = true) {
        $config = new Configuration();
        $config->setApiKey('x-ultracart-simple-key', $simple_key);
        $config->setMaxRetrySeconds($max_retry_seconds);

        $client = new Client(['verify' => $verify, 'debug' => false]);
        $headerSelector = new HeaderSelector(/* leave null for version tied to this sdk version */);
        $api = new ChannelPartnerApi($client, $config, $headerSelector);
        return $api;
    }


    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelOrderByChannelPartnerOrderId
     *
     * Cancel channel partner order by channel partner order id
     *
     * @param  string $order_id The channel partner order id to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnerCancelResponse
     */
    public function cancelOrderByChannelPartnerOrderId($order_id)
    {
        list($response) = $this->cancelOrderByChannelPartnerOrderIdWithHttpInfo($order_id);
        return $response;
    }


    /**
     * Operation cancelOrderByChannelPartnerOrderIdWithHttpInfo
     *
     * Cancel channel partner order by channel partner order id
     *
     * @param  string $order_id The channel partner order id to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerCancelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderByChannelPartnerOrderIdWithHttpInfo($order_id)
    {
        return $this->cancelOrderByChannelPartnerOrderIdWithHttpInfoRetry(true ,   $order_id);
    }


    /**
     * Operation cancelOrderByChannelPartnerOrderIdWithHttpInfoRetry
     *
     * Cancel channel partner order by channel partner order id
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $order_id The channel partner order id to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerCancelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderByChannelPartnerOrderIdWithHttpInfoRetry($retry ,  $order_id)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerCancelResponse';
        $request = $this->cancelOrderByChannelPartnerOrderIdRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->cancelOrderByChannelPartnerOrderIdWithHttpInfoRetry(false ,   $order_id);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnerCancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelOrderByChannelPartnerOrderIdAsync
     *
     * Cancel channel partner order by channel partner order id
     *
     * @param  string $order_id The channel partner order id to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderByChannelPartnerOrderIdAsync($order_id)
    {
        return $this->cancelOrderByChannelPartnerOrderIdAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderByChannelPartnerOrderIdAsyncWithHttpInfo
     *
     * Cancel channel partner order by channel partner order id
     *
     * @param  string $order_id The channel partner order id to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderByChannelPartnerOrderIdAsyncWithHttpInfo($order_id)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerCancelResponse';
        $request = $this->cancelOrderByChannelPartnerOrderIdRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderByChannelPartnerOrderId'
     *
     * @param  string $order_id The channel partner order id to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderByChannelPartnerOrderIdRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling cancelOrderByChannelPartnerOrderId'
            );
        }

        $resourcePath = '/channel_partner/cancel/by_channel_partner_order_id/{order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelOrderByUltraCartOrderId
     *
     * Cancel channel partner order by UltraCart order id
     *
     * @param  string $order_id The UltraCart order id to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnerCancelResponse
     */
    public function cancelOrderByUltraCartOrderId($order_id)
    {
        list($response) = $this->cancelOrderByUltraCartOrderIdWithHttpInfo($order_id);
        return $response;
    }


    /**
     * Operation cancelOrderByUltraCartOrderIdWithHttpInfo
     *
     * Cancel channel partner order by UltraCart order id
     *
     * @param  string $order_id The UltraCart order id to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerCancelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderByUltraCartOrderIdWithHttpInfo($order_id)
    {
        return $this->cancelOrderByUltraCartOrderIdWithHttpInfoRetry(true ,   $order_id);
    }


    /**
     * Operation cancelOrderByUltraCartOrderIdWithHttpInfoRetry
     *
     * Cancel channel partner order by UltraCart order id
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  string $order_id The UltraCart order id to delete. (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerCancelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderByUltraCartOrderIdWithHttpInfoRetry($retry ,  $order_id)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerCancelResponse';
        $request = $this->cancelOrderByUltraCartOrderIdRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->cancelOrderByUltraCartOrderIdWithHttpInfoRetry(false ,   $order_id);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnerCancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelOrderByUltraCartOrderIdAsync
     *
     * Cancel channel partner order by UltraCart order id
     *
     * @param  string $order_id The UltraCart order id to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderByUltraCartOrderIdAsync($order_id)
    {
        return $this->cancelOrderByUltraCartOrderIdAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderByUltraCartOrderIdAsyncWithHttpInfo
     *
     * Cancel channel partner order by UltraCart order id
     *
     * @param  string $order_id The UltraCart order id to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderByUltraCartOrderIdAsyncWithHttpInfo($order_id)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerCancelResponse';
        $request = $this->cancelOrderByUltraCartOrderIdRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderByUltraCartOrderId'
     *
     * @param  string $order_id The UltraCart order id to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderByUltraCartOrderIdRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling cancelOrderByUltraCartOrderId'
            );
        }

        $resourcePath = '/channel_partner/cancel/by_ultracart_order_id/{order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteChannelPartnerShipToPreference
     *
     * Delete a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid channel_partner_ship_to_preference_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteChannelPartnerShipToPreference($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        $this->deleteChannelPartnerShipToPreferenceWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid);
    }


    /**
     * Operation deleteChannelPartnerShipToPreferenceWithHttpInfo
     *
     * Delete a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteChannelPartnerShipToPreferenceWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        $this->deleteChannelPartnerShipToPreferenceWithHttpInfoRetry(true ,   $channel_partner_oid,   $channel_partner_ship_to_preference_oid);
    }


    /**
     * Operation deleteChannelPartnerShipToPreferenceWithHttpInfoRetry
     *
     * Delete a ship to preference record for the channel partner.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteChannelPartnerShipToPreferenceWithHttpInfoRetry($retry ,  $channel_partner_oid,  $channel_partner_ship_to_preference_oid)
    {
        $returnType = '';
        $request = $this->deleteChannelPartnerShipToPreferenceRequest($channel_partner_oid, $channel_partner_ship_to_preference_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        $this->deleteChannelPartnerShipToPreferenceWithHttpInfoRetry(false ,   $channel_partner_oid,   $channel_partner_ship_to_preference_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return [null, $response->getStatusCode(), $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteChannelPartnerShipToPreferenceAsync
     *
     * Delete a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChannelPartnerShipToPreferenceAsync($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        return $this->deleteChannelPartnerShipToPreferenceAsyncWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteChannelPartnerShipToPreferenceAsyncWithHttpInfo
     *
     * Delete a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChannelPartnerShipToPreferenceAsyncWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        $returnType = '';
        $request = $this->deleteChannelPartnerShipToPreferenceRequest($channel_partner_oid, $channel_partner_ship_to_preference_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteChannelPartnerShipToPreference'
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteChannelPartnerShipToPreferenceRequest($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        // verify the required parameter 'channel_partner_oid' is set
        if ($channel_partner_oid === null || (is_array($channel_partner_oid) && count($channel_partner_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_oid when calling deleteChannelPartnerShipToPreference'
            );
        }
        // verify the required parameter 'channel_partner_ship_to_preference_oid' is set
        if ($channel_partner_ship_to_preference_oid === null || (is_array($channel_partner_ship_to_preference_oid) && count($channel_partner_ship_to_preference_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_ship_to_preference_oid when calling deleteChannelPartnerShipToPreference'
            );
        }

        $resourcePath = '/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($channel_partner_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_partner_oid' . '}',
                ObjectSerializer::toPathValue($channel_partner_oid),
                $resourcePath
            );
        }
        // path params
        if ($channel_partner_ship_to_preference_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_partner_ship_to_preference_oid' . '}',
                ObjectSerializer::toPathValue($channel_partner_ship_to_preference_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation estimateShippingForChannelPartnerOrder
     *
     * Estimate shipping for channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing shipping estimate (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnerEstimateShippingResponse
     */
    public function estimateShippingForChannelPartnerOrder($channel_partner_order)
    {
        list($response) = $this->estimateShippingForChannelPartnerOrderWithHttpInfo($channel_partner_order);
        return $response;
    }


    /**
     * Operation estimateShippingForChannelPartnerOrderWithHttpInfo
     *
     * Estimate shipping for channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing shipping estimate (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerEstimateShippingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateShippingForChannelPartnerOrderWithHttpInfo($channel_partner_order)
    {
        return $this->estimateShippingForChannelPartnerOrderWithHttpInfoRetry(true ,   $channel_partner_order);
    }


    /**
     * Operation estimateShippingForChannelPartnerOrderWithHttpInfoRetry
     *
     * Estimate shipping for channel partner order
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing shipping estimate (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerEstimateShippingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateShippingForChannelPartnerOrderWithHttpInfoRetry($retry ,  $channel_partner_order)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerEstimateShippingResponse';
        $request = $this->estimateShippingForChannelPartnerOrderRequest($channel_partner_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->estimateShippingForChannelPartnerOrderWithHttpInfoRetry(false ,   $channel_partner_order);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnerEstimateShippingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation estimateShippingForChannelPartnerOrderAsync
     *
     * Estimate shipping for channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing shipping estimate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateShippingForChannelPartnerOrderAsync($channel_partner_order)
    {
        return $this->estimateShippingForChannelPartnerOrderAsyncWithHttpInfo($channel_partner_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation estimateShippingForChannelPartnerOrderAsyncWithHttpInfo
     *
     * Estimate shipping for channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing shipping estimate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateShippingForChannelPartnerOrderAsyncWithHttpInfo($channel_partner_order)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerEstimateShippingResponse';
        $request = $this->estimateShippingForChannelPartnerOrderRequest($channel_partner_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'estimateShippingForChannelPartnerOrder'
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing shipping estimate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function estimateShippingForChannelPartnerOrderRequest($channel_partner_order)
    {
        // verify the required parameter 'channel_partner_order' is set
        if ($channel_partner_order === null || (is_array($channel_partner_order) && count($channel_partner_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_order when calling estimateShippingForChannelPartnerOrder'
            );
        }

        $resourcePath = '/channel_partner/estimate_shipping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($channel_partner_order)) {
            $_tempBody = $channel_partner_order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation estimateTaxForChannelPartnerOrder
     *
     * Estimate tax for channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing tax estimate (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnerEstimateTaxResponse
     */
    public function estimateTaxForChannelPartnerOrder($channel_partner_order)
    {
        list($response) = $this->estimateTaxForChannelPartnerOrderWithHttpInfo($channel_partner_order);
        return $response;
    }


    /**
     * Operation estimateTaxForChannelPartnerOrderWithHttpInfo
     *
     * Estimate tax for channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing tax estimate (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerEstimateTaxResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateTaxForChannelPartnerOrderWithHttpInfo($channel_partner_order)
    {
        return $this->estimateTaxForChannelPartnerOrderWithHttpInfoRetry(true ,   $channel_partner_order);
    }


    /**
     * Operation estimateTaxForChannelPartnerOrderWithHttpInfoRetry
     *
     * Estimate tax for channel partner order
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing tax estimate (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerEstimateTaxResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateTaxForChannelPartnerOrderWithHttpInfoRetry($retry ,  $channel_partner_order)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerEstimateTaxResponse';
        $request = $this->estimateTaxForChannelPartnerOrderRequest($channel_partner_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->estimateTaxForChannelPartnerOrderWithHttpInfoRetry(false ,   $channel_partner_order);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnerEstimateTaxResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation estimateTaxForChannelPartnerOrderAsync
     *
     * Estimate tax for channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing tax estimate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateTaxForChannelPartnerOrderAsync($channel_partner_order)
    {
        return $this->estimateTaxForChannelPartnerOrderAsyncWithHttpInfo($channel_partner_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation estimateTaxForChannelPartnerOrderAsyncWithHttpInfo
     *
     * Estimate tax for channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing tax estimate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateTaxForChannelPartnerOrderAsyncWithHttpInfo($channel_partner_order)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerEstimateTaxResponse';
        $request = $this->estimateTaxForChannelPartnerOrderRequest($channel_partner_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'estimateTaxForChannelPartnerOrder'
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order needing tax estimate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function estimateTaxForChannelPartnerOrderRequest($channel_partner_order)
    {
        // verify the required parameter 'channel_partner_order' is set
        if ($channel_partner_order === null || (is_array($channel_partner_order) && count($channel_partner_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_order when calling estimateTaxForChannelPartnerOrder'
            );
        }

        $resourcePath = '/channel_partner/estimate_tax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($channel_partner_order)) {
            $_tempBody = $channel_partner_order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelPartnerShipToPreference
     *
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     *
     * @param  int $channel_partner_oid channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid channel_partner_ship_to_preference_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnerShipToPreferenceResponse
     */
    public function getChannelPartnerShipToPreference($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        list($response) = $this->getChannelPartnerShipToPreferenceWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid);
        return $response;
    }


    /**
     * Operation getChannelPartnerShipToPreferenceWithHttpInfo
     *
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerShipToPreferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelPartnerShipToPreferenceWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        return $this->getChannelPartnerShipToPreferenceWithHttpInfoRetry(true ,   $channel_partner_oid,   $channel_partner_ship_to_preference_oid);
    }


    /**
     * Operation getChannelPartnerShipToPreferenceWithHttpInfoRetry
     *
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerShipToPreferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelPartnerShipToPreferenceWithHttpInfoRetry($retry ,  $channel_partner_oid,  $channel_partner_ship_to_preference_oid)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerShipToPreferenceResponse';
        $request = $this->getChannelPartnerShipToPreferenceRequest($channel_partner_oid, $channel_partner_ship_to_preference_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getChannelPartnerShipToPreferenceWithHttpInfoRetry(false ,   $channel_partner_oid,   $channel_partner_ship_to_preference_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnerShipToPreferenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelPartnerShipToPreferenceAsync
     *
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelPartnerShipToPreferenceAsync($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        return $this->getChannelPartnerShipToPreferenceAsyncWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelPartnerShipToPreferenceAsyncWithHttpInfo
     *
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelPartnerShipToPreferenceAsyncWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerShipToPreferenceResponse';
        $request = $this->getChannelPartnerShipToPreferenceRequest($channel_partner_oid, $channel_partner_ship_to_preference_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelPartnerShipToPreference'
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChannelPartnerShipToPreferenceRequest($channel_partner_oid, $channel_partner_ship_to_preference_oid)
    {
        // verify the required parameter 'channel_partner_oid' is set
        if ($channel_partner_oid === null || (is_array($channel_partner_oid) && count($channel_partner_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_oid when calling getChannelPartnerShipToPreference'
            );
        }
        // verify the required parameter 'channel_partner_ship_to_preference_oid' is set
        if ($channel_partner_ship_to_preference_oid === null || (is_array($channel_partner_ship_to_preference_oid) && count($channel_partner_ship_to_preference_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_ship_to_preference_oid when calling getChannelPartnerShipToPreference'
            );
        }

        $resourcePath = '/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($channel_partner_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_partner_oid' . '}',
                ObjectSerializer::toPathValue($channel_partner_oid),
                $resourcePath
            );
        }
        // path params
        if ($channel_partner_ship_to_preference_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_partner_ship_to_preference_oid' . '}',
                ObjectSerializer::toPathValue($channel_partner_ship_to_preference_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelPartnerShipToPreferences
     *
     * Retrieve the ship to preferences associated with the channel partner.
     *
     * @param  int $channel_partner_oid channel_partner_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnerShipToPreferencesResponse
     */
    public function getChannelPartnerShipToPreferences($channel_partner_oid)
    {
        list($response) = $this->getChannelPartnerShipToPreferencesWithHttpInfo($channel_partner_oid);
        return $response;
    }


    /**
     * Operation getChannelPartnerShipToPreferencesWithHttpInfo
     *
     * Retrieve the ship to preferences associated with the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerShipToPreferencesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelPartnerShipToPreferencesWithHttpInfo($channel_partner_oid)
    {
        return $this->getChannelPartnerShipToPreferencesWithHttpInfoRetry(true ,   $channel_partner_oid);
    }


    /**
     * Operation getChannelPartnerShipToPreferencesWithHttpInfoRetry
     *
     * Retrieve the ship to preferences associated with the channel partner.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $channel_partner_oid (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerShipToPreferencesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelPartnerShipToPreferencesWithHttpInfoRetry($retry ,  $channel_partner_oid)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerShipToPreferencesResponse';
        $request = $this->getChannelPartnerShipToPreferencesRequest($channel_partner_oid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getChannelPartnerShipToPreferencesWithHttpInfoRetry(false ,   $channel_partner_oid);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnerShipToPreferencesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelPartnerShipToPreferencesAsync
     *
     * Retrieve the ship to preferences associated with the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelPartnerShipToPreferencesAsync($channel_partner_oid)
    {
        return $this->getChannelPartnerShipToPreferencesAsyncWithHttpInfo($channel_partner_oid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelPartnerShipToPreferencesAsyncWithHttpInfo
     *
     * Retrieve the ship to preferences associated with the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelPartnerShipToPreferencesAsyncWithHttpInfo($channel_partner_oid)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerShipToPreferencesResponse';
        $request = $this->getChannelPartnerShipToPreferencesRequest($channel_partner_oid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelPartnerShipToPreferences'
     *
     * @param  int $channel_partner_oid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChannelPartnerShipToPreferencesRequest($channel_partner_oid)
    {
        // verify the required parameter 'channel_partner_oid' is set
        if ($channel_partner_oid === null || (is_array($channel_partner_oid) && count($channel_partner_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_oid when calling getChannelPartnerShipToPreferences'
            );
        }

        $resourcePath = '/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($channel_partner_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_partner_oid' . '}',
                ObjectSerializer::toPathValue($channel_partner_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelPartners
     *
     * Retrieve the channel partners configured on the account.
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnersResponse
     */
    public function getChannelPartners()
    {
        list($response) = $this->getChannelPartnersWithHttpInfo();
        return $response;
    }


    /**
     * Operation getChannelPartnersWithHttpInfo
     *
     * Retrieve the channel partners configured on the account.
     *
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelPartnersWithHttpInfo()
    {
        return $this->getChannelPartnersWithHttpInfoRetry(true );
    }


    /**
     * Operation getChannelPartnersWithHttpInfoRetry
     *
     * Retrieve the channel partners configured on the account.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelPartnersWithHttpInfoRetry($retry )
    {
        $returnType = '\ultracart\v2\models\ChannelPartnersResponse';
        $request = $this->getChannelPartnersRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->getChannelPartnersWithHttpInfoRetry(false );
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelPartnersAsync
     *
     * Retrieve the channel partners configured on the account.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelPartnersAsync()
    {
        return $this->getChannelPartnersAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelPartnersAsyncWithHttpInfo
     *
     * Retrieve the channel partners configured on the account.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelPartnersAsyncWithHttpInfo()
    {
        $returnType = '\ultracart\v2\models\ChannelPartnersResponse';
        $request = $this->getChannelPartnersRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelPartners'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChannelPartnersRequest()
    {

        $resourcePath = '/channel_partner/channel_partners';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importChannelPartnerOrder
     *
     * Insert channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order to insert (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnerImportResponse
     */
    public function importChannelPartnerOrder($channel_partner_order)
    {
        list($response) = $this->importChannelPartnerOrderWithHttpInfo($channel_partner_order);
        return $response;
    }


    /**
     * Operation importChannelPartnerOrderWithHttpInfo
     *
     * Insert channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order to insert (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importChannelPartnerOrderWithHttpInfo($channel_partner_order)
    {
        return $this->importChannelPartnerOrderWithHttpInfoRetry(true ,   $channel_partner_order);
    }


    /**
     * Operation importChannelPartnerOrderWithHttpInfoRetry
     *
     * Insert channel partner order
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order to insert (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importChannelPartnerOrderWithHttpInfoRetry($retry ,  $channel_partner_order)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerImportResponse';
        $request = $this->importChannelPartnerOrderRequest($channel_partner_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->importChannelPartnerOrderWithHttpInfoRetry(false ,   $channel_partner_order);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnerImportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importChannelPartnerOrderAsync
     *
     * Insert channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order to insert (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importChannelPartnerOrderAsync($channel_partner_order)
    {
        return $this->importChannelPartnerOrderAsyncWithHttpInfo($channel_partner_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importChannelPartnerOrderAsyncWithHttpInfo
     *
     * Insert channel partner order
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order to insert (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importChannelPartnerOrderAsyncWithHttpInfo($channel_partner_order)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerImportResponse';
        $request = $this->importChannelPartnerOrderRequest($channel_partner_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importChannelPartnerOrder'
     *
     * @param  \ultracart\v2\models\ChannelPartnerOrder $channel_partner_order Order to insert (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importChannelPartnerOrderRequest($channel_partner_order)
    {
        // verify the required parameter 'channel_partner_order' is set
        if ($channel_partner_order === null || (is_array($channel_partner_order) && count($channel_partner_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_order when calling importChannelPartnerOrder'
            );
        }

        $resourcePath = '/channel_partner/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($channel_partner_order)) {
            $_tempBody = $channel_partner_order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json; charset=UTF-8']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation insertChannelPartnerShipToPreference
     *
     * Insert a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid channel_partner_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnerShipToPreferenceResponse
     */
    public function insertChannelPartnerShipToPreference($channel_partner_oid, $ship_to_preference)
    {
        list($response) = $this->insertChannelPartnerShipToPreferenceWithHttpInfo($channel_partner_oid, $ship_to_preference);
        return $response;
    }


    /**
     * Operation insertChannelPartnerShipToPreferenceWithHttpInfo
     *
     * Insert a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerShipToPreferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertChannelPartnerShipToPreferenceWithHttpInfo($channel_partner_oid, $ship_to_preference)
    {
        return $this->insertChannelPartnerShipToPreferenceWithHttpInfoRetry(true ,   $channel_partner_oid,   $ship_to_preference);
    }


    /**
     * Operation insertChannelPartnerShipToPreferenceWithHttpInfoRetry
     *
     * Insert a ship to preference record for the channel partner.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $channel_partner_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerShipToPreferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertChannelPartnerShipToPreferenceWithHttpInfoRetry($retry ,  $channel_partner_oid,  $ship_to_preference)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerShipToPreferenceResponse';
        $request = $this->insertChannelPartnerShipToPreferenceRequest($channel_partner_oid, $ship_to_preference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->insertChannelPartnerShipToPreferenceWithHttpInfoRetry(false ,   $channel_partner_oid,   $ship_to_preference);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnerShipToPreferenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation insertChannelPartnerShipToPreferenceAsync
     *
     * Insert a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertChannelPartnerShipToPreferenceAsync($channel_partner_oid, $ship_to_preference)
    {
        return $this->insertChannelPartnerShipToPreferenceAsyncWithHttpInfo($channel_partner_oid, $ship_to_preference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertChannelPartnerShipToPreferenceAsyncWithHttpInfo
     *
     * Insert a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function insertChannelPartnerShipToPreferenceAsyncWithHttpInfo($channel_partner_oid, $ship_to_preference)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerShipToPreferenceResponse';
        $request = $this->insertChannelPartnerShipToPreferenceRequest($channel_partner_oid, $ship_to_preference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'insertChannelPartnerShipToPreference'
     *
     * @param  int $channel_partner_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function insertChannelPartnerShipToPreferenceRequest($channel_partner_oid, $ship_to_preference)
    {
        // verify the required parameter 'channel_partner_oid' is set
        if ($channel_partner_oid === null || (is_array($channel_partner_oid) && count($channel_partner_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_oid when calling insertChannelPartnerShipToPreference'
            );
        }
        // verify the required parameter 'ship_to_preference' is set
        if ($ship_to_preference === null || (is_array($ship_to_preference) && count($ship_to_preference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ship_to_preference when calling insertChannelPartnerShipToPreference'
            );
        }

        $resourcePath = '/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($channel_partner_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_partner_oid' . '}',
                ObjectSerializer::toPathValue($channel_partner_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ship_to_preference)) {
            $_tempBody = $ship_to_preference;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateChannelPartnerShipToPreference
     *
     * Update a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid channel_partner_ship_to_preference_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ultracart\v2\models\ChannelPartnerShipToPreferenceResponse
     */
    public function updateChannelPartnerShipToPreference($channel_partner_oid, $channel_partner_ship_to_preference_oid, $ship_to_preference)
    {
        list($response) = $this->updateChannelPartnerShipToPreferenceWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid, $ship_to_preference);
        return $response;
    }


    /**
     * Operation updateChannelPartnerShipToPreferenceWithHttpInfo
     *
     * Update a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerShipToPreferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateChannelPartnerShipToPreferenceWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid, $ship_to_preference)
    {
        return $this->updateChannelPartnerShipToPreferenceWithHttpInfoRetry(true ,   $channel_partner_oid,   $channel_partner_ship_to_preference_oid,   $ship_to_preference);
    }


    /**
     * Operation updateChannelPartnerShipToPreferenceWithHttpInfoRetry
     *
     * Update a ship to preference record for the channel partner.
     *
     * @param boolean $retry should this method retry the call if a rate limit is triggered (required)
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \ultracart\v2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ultracart\v2\models\ChannelPartnerShipToPreferenceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateChannelPartnerShipToPreferenceWithHttpInfoRetry($retry ,  $channel_partner_oid,  $channel_partner_ship_to_preference_oid,  $ship_to_preference)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerShipToPreferenceResponse';
        $request = $this->updateChannelPartnerShipToPreferenceRequest($channel_partner_oid, $channel_partner_ship_to_preference_oid, $ship_to_preference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {

                if($e->getResponse()) {
                    $response = $e->getResponse();
                    $statusCode = $response->getStatusCode();
                    $retryAfter = 0;
                    $headers = $response->getHeaders();
                    if (array_key_exists('Retry-After', $headers)) {
                        $retryAfter = intval($headers['Retry-After'][0]);
                    }

                    if ($statusCode == 429 && $retry && $retryAfter > 0 && $retryAfter <= $this->config->getMaxRetrySeconds()) {
                        sleep($retryAfter);
                        return $this->updateChannelPartnerShipToPreferenceWithHttpInfoRetry(false ,   $channel_partner_oid,   $channel_partner_ship_to_preference_oid,   $ship_to_preference);
                    }
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ChannelPartnerShipToPreferenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ultracart\v2\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateChannelPartnerShipToPreferenceAsync
     *
     * Update a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelPartnerShipToPreferenceAsync($channel_partner_oid, $channel_partner_ship_to_preference_oid, $ship_to_preference)
    {
        return $this->updateChannelPartnerShipToPreferenceAsyncWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid, $ship_to_preference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateChannelPartnerShipToPreferenceAsyncWithHttpInfo
     *
     * Update a ship to preference record for the channel partner.
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelPartnerShipToPreferenceAsyncWithHttpInfo($channel_partner_oid, $channel_partner_ship_to_preference_oid, $ship_to_preference)
    {
        $returnType = '\ultracart\v2\models\ChannelPartnerShipToPreferenceResponse';
        $request = $this->updateChannelPartnerShipToPreferenceRequest($channel_partner_oid, $channel_partner_ship_to_preference_oid, $ship_to_preference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateChannelPartnerShipToPreference'
     *
     * @param  int $channel_partner_oid (required)
     * @param  int $channel_partner_ship_to_preference_oid (required)
     * @param  \ultracart\v2\models\ChannelPartnerShipToPreference $ship_to_preference Ship to preference to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateChannelPartnerShipToPreferenceRequest($channel_partner_oid, $channel_partner_ship_to_preference_oid, $ship_to_preference)
    {
        // verify the required parameter 'channel_partner_oid' is set
        if ($channel_partner_oid === null || (is_array($channel_partner_oid) && count($channel_partner_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_oid when calling updateChannelPartnerShipToPreference'
            );
        }
        // verify the required parameter 'channel_partner_ship_to_preference_oid' is set
        if ($channel_partner_ship_to_preference_oid === null || (is_array($channel_partner_ship_to_preference_oid) && count($channel_partner_ship_to_preference_oid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_partner_ship_to_preference_oid when calling updateChannelPartnerShipToPreference'
            );
        }
        // verify the required parameter 'ship_to_preference' is set
        if ($ship_to_preference === null || (is_array($ship_to_preference) && count($ship_to_preference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ship_to_preference when calling updateChannelPartnerShipToPreference'
            );
        }

        $resourcePath = '/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($channel_partner_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_partner_oid' . '}',
                ObjectSerializer::toPathValue($channel_partner_oid),
                $resourcePath
            );
        }
        // path params
        if ($channel_partner_ship_to_preference_oid !== null) {
            $resourcePath = str_replace(
                '{' . 'channel_partner_ship_to_preference_oid' . '}',
                ObjectSerializer::toPathValue($channel_partner_ship_to_preference_oid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ship_to_preference)) {
            $_tempBody = $ship_to_preference;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-ultracart-simple-key');
        if ($apiKey !== null) {
            $headers['x-ultracart-simple-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
