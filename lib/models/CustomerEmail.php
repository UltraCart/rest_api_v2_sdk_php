<?php
/**
 * CustomerEmail
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomerEmail Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerEmail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerEmail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_profile_email_oid' => 'int',
        'email' => 'string',
        'label' => 'string',
        'receipt_notification' => 'bool',
        'refund_notification' => 'bool',
        'shipment_notification' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_profile_email_oid' => 'int32',
        'email' => null,
        'label' => null,
        'receipt_notification' => null,
        'refund_notification' => null,
        'shipment_notification' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_profile_email_oid' => 'customer_profile_email_oid',
        'email' => 'email',
        'label' => 'label',
        'receipt_notification' => 'receipt_notification',
        'refund_notification' => 'refund_notification',
        'shipment_notification' => 'shipment_notification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_profile_email_oid' => 'setCustomerProfileEmailOid',
        'email' => 'setEmail',
        'label' => 'setLabel',
        'receipt_notification' => 'setReceiptNotification',
        'refund_notification' => 'setRefundNotification',
        'shipment_notification' => 'setShipmentNotification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_profile_email_oid' => 'getCustomerProfileEmailOid',
        'email' => 'getEmail',
        'label' => 'getLabel',
        'receipt_notification' => 'getReceiptNotification',
        'refund_notification' => 'getRefundNotification',
        'shipment_notification' => 'getShipmentNotification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_profile_email_oid'] = isset($data['customer_profile_email_oid']) ? $data['customer_profile_email_oid'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['receipt_notification'] = isset($data['receipt_notification']) ? $data['receipt_notification'] : null;
        $this->container['refund_notification'] = isset($data['refund_notification']) ? $data['refund_notification'] : null;
        $this->container['shipment_notification'] = isset($data['shipment_notification']) ? $data['shipment_notification'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['label']) && (mb_strlen($this->container['label']) > 100)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (mb_strlen($this->container['email']) > 100) {
            return false;
        }
        if (mb_strlen($this->container['label']) > 100) {
            return false;
        }
        return true;
    }


    /**
     * Gets customer_profile_email_oid
     *
     * @return int
     */
    public function getCustomerProfileEmailOid()
    {
        return $this->container['customer_profile_email_oid'];
    }

    /**
     * Sets customer_profile_email_oid
     *
     * @param int $customer_profile_email_oid ID of the email
     *
     * @return $this
     */
    public function setCustomerProfileEmailOid($customer_profile_email_oid)
    {
        $this->container['customer_profile_email_oid'] = $customer_profile_email_oid;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CustomerEmail., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        if (!is_null($label) && (mb_strlen($label) > 100)) {
            throw new \InvalidArgumentException('invalid length for $label when calling CustomerEmail., must be smaller than or equal to 100.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets receipt_notification
     *
     * @return bool
     */
    public function getReceiptNotification()
    {
        return $this->container['receipt_notification'];
    }

    /**
     * Sets receipt_notification
     *
     * @param bool $receipt_notification CC this email on receipt notifications
     *
     * @return $this
     */
    public function setReceiptNotification($receipt_notification)
    {
        $this->container['receipt_notification'] = $receipt_notification;

        return $this;
    }

    /**
     * Gets refund_notification
     *
     * @return bool
     */
    public function getRefundNotification()
    {
        return $this->container['refund_notification'];
    }

    /**
     * Sets refund_notification
     *
     * @param bool $refund_notification CC this email on refund notifications
     *
     * @return $this
     */
    public function setRefundNotification($refund_notification)
    {
        $this->container['refund_notification'] = $refund_notification;

        return $this;
    }

    /**
     * Gets shipment_notification
     *
     * @return bool
     */
    public function getShipmentNotification()
    {
        return $this->container['shipment_notification'];
    }

    /**
     * Sets shipment_notification
     *
     * @param bool $shipment_notification CC this email on shipment notifications
     *
     * @return $this
     */
    public function setShipmentNotification($shipment_notification)
    {
        $this->container['shipment_notification'] = $shipment_notification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


