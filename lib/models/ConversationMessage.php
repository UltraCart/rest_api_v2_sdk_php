<?php
/**
 * ConversationMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationMessage Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'author_conversation_participant_arn' => 'string',
        'author_conversation_participant_name' => 'string',
        'body' => 'string',
        'media_urls' => 'string[]',
        'message_dts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'author_conversation_participant_arn' => null,
        'author_conversation_participant_name' => null,
        'body' => null,
        'media_urls' => null,
        'message_dts' => 'dateTime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'author_conversation_participant_arn' => 'author_conversation_participant_arn',
        'author_conversation_participant_name' => 'author_conversation_participant_name',
        'body' => 'body',
        'media_urls' => 'media_urls',
        'message_dts' => 'message_dts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'author_conversation_participant_arn' => 'setAuthorConversationParticipantArn',
        'author_conversation_participant_name' => 'setAuthorConversationParticipantName',
        'body' => 'setBody',
        'media_urls' => 'setMediaUrls',
        'message_dts' => 'setMessageDts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'author_conversation_participant_arn' => 'getAuthorConversationParticipantArn',
        'author_conversation_participant_name' => 'getAuthorConversationParticipantName',
        'body' => 'getBody',
        'media_urls' => 'getMediaUrls',
        'message_dts' => 'getMessageDts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['author_conversation_participant_arn'] = isset($data['author_conversation_participant_arn']) ? $data['author_conversation_participant_arn'] : null;
        $this->container['author_conversation_participant_name'] = isset($data['author_conversation_participant_name']) ? $data['author_conversation_participant_name'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['media_urls'] = isset($data['media_urls']) ? $data['media_urls'] : null;
        $this->container['message_dts'] = isset($data['message_dts']) ? $data['message_dts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets author_conversation_participant_arn
     *
     * @return string
     */
    public function getAuthorConversationParticipantArn()
    {
        return $this->container['author_conversation_participant_arn'];
    }

    /**
     * Sets author_conversation_participant_arn
     *
     * @param string $author_conversation_participant_arn author_conversation_participant_arn
     *
     * @return $this
     */
    public function setAuthorConversationParticipantArn($author_conversation_participant_arn)
    {
        $this->container['author_conversation_participant_arn'] = $author_conversation_participant_arn;

        return $this;
    }

    /**
     * Gets author_conversation_participant_name
     *
     * @return string
     */
    public function getAuthorConversationParticipantName()
    {
        return $this->container['author_conversation_participant_name'];
    }

    /**
     * Sets author_conversation_participant_name
     *
     * @param string $author_conversation_participant_name author_conversation_participant_name
     *
     * @return $this
     */
    public function setAuthorConversationParticipantName($author_conversation_participant_name)
    {
        $this->container['author_conversation_participant_name'] = $author_conversation_participant_name;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets media_urls
     *
     * @return string[]
     */
    public function getMediaUrls()
    {
        return $this->container['media_urls'];
    }

    /**
     * Sets media_urls
     *
     * @param string[] $media_urls media_urls
     *
     * @return $this
     */
    public function setMediaUrls($media_urls)
    {
        $this->container['media_urls'] = $media_urls;

        return $this;
    }

    /**
     * Gets message_dts
     *
     * @return string
     */
    public function getMessageDts()
    {
        return $this->container['message_dts'];
    }

    /**
     * Sets message_dts
     *
     * @param string $message_dts Message date/time
     *
     * @return $this
     */
    public function setMessageDts($message_dts)
    {
        $this->container['message_dts'] = $message_dts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


