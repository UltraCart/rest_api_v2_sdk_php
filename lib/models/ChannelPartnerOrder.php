<?php
/**
 * ChannelPartnerOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ChannelPartnerOrder Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelPartnerOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChannelPartnerOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'advertising_source' => 'string',
        'affiliate_id' => 'string',
        'affiliate_sub_id' => 'string',
        'arbitrary_shipping_handling_total' => 'float',
        'arbitrary_tax' => 'float',
        'arbitrary_tax_rate' => 'float',
        'arbitrary_taxable_subtotal' => 'float',
        'associate_with_customer_profile_if_present' => 'bool',
        'auto_approve_purchase_order' => 'bool',
        'billto_address1' => 'string',
        'billto_address2' => 'string',
        'billto_city' => 'string',
        'billto_company' => 'string',
        'billto_country_code' => 'string',
        'billto_day_phone' => 'string',
        'billto_evening_phone' => 'string',
        'billto_first_name' => 'string',
        'billto_last_name' => 'string',
        'billto_postal_code' => 'string',
        'billto_state_region' => 'string',
        'billto_title' => 'string',
        'cc_email' => 'string',
        'channel_partner_order_id' => 'string',
        'consider_recurring' => 'bool',
        'coupons' => 'string[]',
        'credit_card_authorization_amount' => 'float',
        'credit_card_authorization_dts' => 'string',
        'credit_card_authorization_number' => 'string',
        'credit_card_expiration_month' => 'int',
        'credit_card_expiration_year' => 'int',
        'credit_card_type' => 'string',
        'custom_field1' => 'string',
        'custom_field2' => 'string',
        'custom_field3' => 'string',
        'custom_field4' => 'string',
        'custom_field5' => 'string',
        'custom_field6' => 'string',
        'custom_field7' => 'string',
        'delivery_date' => 'string',
        'email' => 'string',
        'gift' => 'bool',
        'gift_email' => 'string',
        'gift_message' => 'string',
        'hosted_fields_card_token' => 'string',
        'hosted_fields_cvv_token' => 'string',
        'insurance_application_id' => 'string',
        'insurance_claim_id' => 'string',
        'ip_address' => 'string',
        'items' => '\ultracart\v2\models\ChannelPartnerOrderItem[]',
        'least_cost_route' => 'bool',
        'least_cost_route_shipping_methods' => 'string[]',
        'mailing_list_opt_in' => 'bool',
        'no_realtime_payment_processing' => 'bool',
        'payment_method' => 'string',
        'purchase_order_number' => 'string',
        'rotating_transaction_gateway_code' => 'string',
        'screen_branding_theme_code' => 'string',
        'ship_on_date' => 'string',
        'ship_to_residential' => 'bool',
        'shipping_method' => 'string',
        'shipto_address1' => 'string',
        'shipto_address2' => 'string',
        'shipto_city' => 'string',
        'shipto_company' => 'string',
        'shipto_country_code' => 'string',
        'shipto_day_phone' => 'string',
        'shipto_evening_phone' => 'string',
        'shipto_first_name' => 'string',
        'shipto_last_name' => 'string',
        'shipto_postal_code' => 'string',
        'shipto_state_region' => 'string',
        'shipto_title' => 'string',
        'skip_payment_processing' => 'bool',
        'special_instructions' => 'string',
        'store_completed' => 'bool',
        'store_if_payment_declines' => 'bool',
        'tax_county' => 'string',
        'tax_exempt' => 'bool',
        'transaction' => '\ultracart\v2\models\ChannelPartnerOrderTransaction',
        'treat_warnings_as_errors' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'advertising_source' => null,
        'affiliate_id' => null,
        'affiliate_sub_id' => null,
        'arbitrary_shipping_handling_total' => null,
        'arbitrary_tax' => null,
        'arbitrary_tax_rate' => null,
        'arbitrary_taxable_subtotal' => null,
        'associate_with_customer_profile_if_present' => null,
        'auto_approve_purchase_order' => null,
        'billto_address1' => null,
        'billto_address2' => null,
        'billto_city' => null,
        'billto_company' => null,
        'billto_country_code' => null,
        'billto_day_phone' => null,
        'billto_evening_phone' => null,
        'billto_first_name' => null,
        'billto_last_name' => null,
        'billto_postal_code' => null,
        'billto_state_region' => null,
        'billto_title' => null,
        'cc_email' => null,
        'channel_partner_order_id' => null,
        'consider_recurring' => null,
        'coupons' => null,
        'credit_card_authorization_amount' => null,
        'credit_card_authorization_dts' => 'dateTime',
        'credit_card_authorization_number' => null,
        'credit_card_expiration_month' => 'int32',
        'credit_card_expiration_year' => 'int32',
        'credit_card_type' => null,
        'custom_field1' => null,
        'custom_field2' => null,
        'custom_field3' => null,
        'custom_field4' => null,
        'custom_field5' => null,
        'custom_field6' => null,
        'custom_field7' => null,
        'delivery_date' => 'dateTime',
        'email' => null,
        'gift' => null,
        'gift_email' => null,
        'gift_message' => null,
        'hosted_fields_card_token' => null,
        'hosted_fields_cvv_token' => null,
        'insurance_application_id' => null,
        'insurance_claim_id' => null,
        'ip_address' => null,
        'items' => null,
        'least_cost_route' => null,
        'least_cost_route_shipping_methods' => null,
        'mailing_list_opt_in' => null,
        'no_realtime_payment_processing' => null,
        'payment_method' => null,
        'purchase_order_number' => null,
        'rotating_transaction_gateway_code' => null,
        'screen_branding_theme_code' => null,
        'ship_on_date' => 'dateTime',
        'ship_to_residential' => null,
        'shipping_method' => null,
        'shipto_address1' => null,
        'shipto_address2' => null,
        'shipto_city' => null,
        'shipto_company' => null,
        'shipto_country_code' => null,
        'shipto_day_phone' => null,
        'shipto_evening_phone' => null,
        'shipto_first_name' => null,
        'shipto_last_name' => null,
        'shipto_postal_code' => null,
        'shipto_state_region' => null,
        'shipto_title' => null,
        'skip_payment_processing' => null,
        'special_instructions' => null,
        'store_completed' => null,
        'store_if_payment_declines' => null,
        'tax_county' => null,
        'tax_exempt' => null,
        'transaction' => null,
        'treat_warnings_as_errors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advertising_source' => 'advertisingSource',
        'affiliate_id' => 'affiliate_id',
        'affiliate_sub_id' => 'affiliate_sub_id',
        'arbitrary_shipping_handling_total' => 'arbitrary_shipping_handling_total',
        'arbitrary_tax' => 'arbitrary_tax',
        'arbitrary_tax_rate' => 'arbitrary_tax_rate',
        'arbitrary_taxable_subtotal' => 'arbitrary_taxable_subtotal',
        'associate_with_customer_profile_if_present' => 'associate_with_customer_profile_if_present',
        'auto_approve_purchase_order' => 'auto_approve_purchase_order',
        'billto_address1' => 'billto_address1',
        'billto_address2' => 'billto_address2',
        'billto_city' => 'billto_city',
        'billto_company' => 'billto_company',
        'billto_country_code' => 'billto_country_code',
        'billto_day_phone' => 'billto_day_phone',
        'billto_evening_phone' => 'billto_evening_phone',
        'billto_first_name' => 'billto_first_name',
        'billto_last_name' => 'billto_last_name',
        'billto_postal_code' => 'billto_postal_code',
        'billto_state_region' => 'billto_state_region',
        'billto_title' => 'billto_title',
        'cc_email' => 'cc_email',
        'channel_partner_order_id' => 'channel_partner_order_id',
        'consider_recurring' => 'consider_recurring',
        'coupons' => 'coupons',
        'credit_card_authorization_amount' => 'credit_card_authorization_amount',
        'credit_card_authorization_dts' => 'credit_card_authorization_dts',
        'credit_card_authorization_number' => 'credit_card_authorization_number',
        'credit_card_expiration_month' => 'credit_card_expiration_month',
        'credit_card_expiration_year' => 'credit_card_expiration_year',
        'credit_card_type' => 'credit_card_type',
        'custom_field1' => 'custom_field1',
        'custom_field2' => 'custom_field2',
        'custom_field3' => 'custom_field3',
        'custom_field4' => 'custom_field4',
        'custom_field5' => 'custom_field5',
        'custom_field6' => 'custom_field6',
        'custom_field7' => 'custom_field7',
        'delivery_date' => 'delivery_date',
        'email' => 'email',
        'gift' => 'gift',
        'gift_email' => 'gift_email',
        'gift_message' => 'gift_message',
        'hosted_fields_card_token' => 'hosted_fields_card_token',
        'hosted_fields_cvv_token' => 'hosted_fields_cvv_token',
        'insurance_application_id' => 'insurance_application_id',
        'insurance_claim_id' => 'insurance_claim_id',
        'ip_address' => 'ip_address',
        'items' => 'items',
        'least_cost_route' => 'least_cost_route',
        'least_cost_route_shipping_methods' => 'least_cost_route_shipping_methods',
        'mailing_list_opt_in' => 'mailing_list_opt_in',
        'no_realtime_payment_processing' => 'no_realtime_payment_processing',
        'payment_method' => 'payment_method',
        'purchase_order_number' => 'purchase_order_number',
        'rotating_transaction_gateway_code' => 'rotating_transaction_gateway_code',
        'screen_branding_theme_code' => 'screen_branding_theme_code',
        'ship_on_date' => 'ship_on_date',
        'ship_to_residential' => 'ship_to_residential',
        'shipping_method' => 'shipping_method',
        'shipto_address1' => 'shipto_address1',
        'shipto_address2' => 'shipto_address2',
        'shipto_city' => 'shipto_city',
        'shipto_company' => 'shipto_company',
        'shipto_country_code' => 'shipto_country_code',
        'shipto_day_phone' => 'shipto_day_phone',
        'shipto_evening_phone' => 'shipto_evening_phone',
        'shipto_first_name' => 'shipto_first_name',
        'shipto_last_name' => 'shipto_last_name',
        'shipto_postal_code' => 'shipto_postal_code',
        'shipto_state_region' => 'shipto_state_region',
        'shipto_title' => 'shipto_title',
        'skip_payment_processing' => 'skip_payment_processing',
        'special_instructions' => 'special_instructions',
        'store_completed' => 'store_completed',
        'store_if_payment_declines' => 'store_if_payment_declines',
        'tax_county' => 'tax_county',
        'tax_exempt' => 'tax_exempt',
        'transaction' => 'transaction',
        'treat_warnings_as_errors' => 'treat_warnings_as_errors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advertising_source' => 'setAdvertisingSource',
        'affiliate_id' => 'setAffiliateId',
        'affiliate_sub_id' => 'setAffiliateSubId',
        'arbitrary_shipping_handling_total' => 'setArbitraryShippingHandlingTotal',
        'arbitrary_tax' => 'setArbitraryTax',
        'arbitrary_tax_rate' => 'setArbitraryTaxRate',
        'arbitrary_taxable_subtotal' => 'setArbitraryTaxableSubtotal',
        'associate_with_customer_profile_if_present' => 'setAssociateWithCustomerProfileIfPresent',
        'auto_approve_purchase_order' => 'setAutoApprovePurchaseOrder',
        'billto_address1' => 'setBilltoAddress1',
        'billto_address2' => 'setBilltoAddress2',
        'billto_city' => 'setBilltoCity',
        'billto_company' => 'setBilltoCompany',
        'billto_country_code' => 'setBilltoCountryCode',
        'billto_day_phone' => 'setBilltoDayPhone',
        'billto_evening_phone' => 'setBilltoEveningPhone',
        'billto_first_name' => 'setBilltoFirstName',
        'billto_last_name' => 'setBilltoLastName',
        'billto_postal_code' => 'setBilltoPostalCode',
        'billto_state_region' => 'setBilltoStateRegion',
        'billto_title' => 'setBilltoTitle',
        'cc_email' => 'setCcEmail',
        'channel_partner_order_id' => 'setChannelPartnerOrderId',
        'consider_recurring' => 'setConsiderRecurring',
        'coupons' => 'setCoupons',
        'credit_card_authorization_amount' => 'setCreditCardAuthorizationAmount',
        'credit_card_authorization_dts' => 'setCreditCardAuthorizationDts',
        'credit_card_authorization_number' => 'setCreditCardAuthorizationNumber',
        'credit_card_expiration_month' => 'setCreditCardExpirationMonth',
        'credit_card_expiration_year' => 'setCreditCardExpirationYear',
        'credit_card_type' => 'setCreditCardType',
        'custom_field1' => 'setCustomField1',
        'custom_field2' => 'setCustomField2',
        'custom_field3' => 'setCustomField3',
        'custom_field4' => 'setCustomField4',
        'custom_field5' => 'setCustomField5',
        'custom_field6' => 'setCustomField6',
        'custom_field7' => 'setCustomField7',
        'delivery_date' => 'setDeliveryDate',
        'email' => 'setEmail',
        'gift' => 'setGift',
        'gift_email' => 'setGiftEmail',
        'gift_message' => 'setGiftMessage',
        'hosted_fields_card_token' => 'setHostedFieldsCardToken',
        'hosted_fields_cvv_token' => 'setHostedFieldsCvvToken',
        'insurance_application_id' => 'setInsuranceApplicationId',
        'insurance_claim_id' => 'setInsuranceClaimId',
        'ip_address' => 'setIpAddress',
        'items' => 'setItems',
        'least_cost_route' => 'setLeastCostRoute',
        'least_cost_route_shipping_methods' => 'setLeastCostRouteShippingMethods',
        'mailing_list_opt_in' => 'setMailingListOptIn',
        'no_realtime_payment_processing' => 'setNoRealtimePaymentProcessing',
        'payment_method' => 'setPaymentMethod',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'rotating_transaction_gateway_code' => 'setRotatingTransactionGatewayCode',
        'screen_branding_theme_code' => 'setScreenBrandingThemeCode',
        'ship_on_date' => 'setShipOnDate',
        'ship_to_residential' => 'setShipToResidential',
        'shipping_method' => 'setShippingMethod',
        'shipto_address1' => 'setShiptoAddress1',
        'shipto_address2' => 'setShiptoAddress2',
        'shipto_city' => 'setShiptoCity',
        'shipto_company' => 'setShiptoCompany',
        'shipto_country_code' => 'setShiptoCountryCode',
        'shipto_day_phone' => 'setShiptoDayPhone',
        'shipto_evening_phone' => 'setShiptoEveningPhone',
        'shipto_first_name' => 'setShiptoFirstName',
        'shipto_last_name' => 'setShiptoLastName',
        'shipto_postal_code' => 'setShiptoPostalCode',
        'shipto_state_region' => 'setShiptoStateRegion',
        'shipto_title' => 'setShiptoTitle',
        'skip_payment_processing' => 'setSkipPaymentProcessing',
        'special_instructions' => 'setSpecialInstructions',
        'store_completed' => 'setStoreCompleted',
        'store_if_payment_declines' => 'setStoreIfPaymentDeclines',
        'tax_county' => 'setTaxCounty',
        'tax_exempt' => 'setTaxExempt',
        'transaction' => 'setTransaction',
        'treat_warnings_as_errors' => 'setTreatWarningsAsErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advertising_source' => 'getAdvertisingSource',
        'affiliate_id' => 'getAffiliateId',
        'affiliate_sub_id' => 'getAffiliateSubId',
        'arbitrary_shipping_handling_total' => 'getArbitraryShippingHandlingTotal',
        'arbitrary_tax' => 'getArbitraryTax',
        'arbitrary_tax_rate' => 'getArbitraryTaxRate',
        'arbitrary_taxable_subtotal' => 'getArbitraryTaxableSubtotal',
        'associate_with_customer_profile_if_present' => 'getAssociateWithCustomerProfileIfPresent',
        'auto_approve_purchase_order' => 'getAutoApprovePurchaseOrder',
        'billto_address1' => 'getBilltoAddress1',
        'billto_address2' => 'getBilltoAddress2',
        'billto_city' => 'getBilltoCity',
        'billto_company' => 'getBilltoCompany',
        'billto_country_code' => 'getBilltoCountryCode',
        'billto_day_phone' => 'getBilltoDayPhone',
        'billto_evening_phone' => 'getBilltoEveningPhone',
        'billto_first_name' => 'getBilltoFirstName',
        'billto_last_name' => 'getBilltoLastName',
        'billto_postal_code' => 'getBilltoPostalCode',
        'billto_state_region' => 'getBilltoStateRegion',
        'billto_title' => 'getBilltoTitle',
        'cc_email' => 'getCcEmail',
        'channel_partner_order_id' => 'getChannelPartnerOrderId',
        'consider_recurring' => 'getConsiderRecurring',
        'coupons' => 'getCoupons',
        'credit_card_authorization_amount' => 'getCreditCardAuthorizationAmount',
        'credit_card_authorization_dts' => 'getCreditCardAuthorizationDts',
        'credit_card_authorization_number' => 'getCreditCardAuthorizationNumber',
        'credit_card_expiration_month' => 'getCreditCardExpirationMonth',
        'credit_card_expiration_year' => 'getCreditCardExpirationYear',
        'credit_card_type' => 'getCreditCardType',
        'custom_field1' => 'getCustomField1',
        'custom_field2' => 'getCustomField2',
        'custom_field3' => 'getCustomField3',
        'custom_field4' => 'getCustomField4',
        'custom_field5' => 'getCustomField5',
        'custom_field6' => 'getCustomField6',
        'custom_field7' => 'getCustomField7',
        'delivery_date' => 'getDeliveryDate',
        'email' => 'getEmail',
        'gift' => 'getGift',
        'gift_email' => 'getGiftEmail',
        'gift_message' => 'getGiftMessage',
        'hosted_fields_card_token' => 'getHostedFieldsCardToken',
        'hosted_fields_cvv_token' => 'getHostedFieldsCvvToken',
        'insurance_application_id' => 'getInsuranceApplicationId',
        'insurance_claim_id' => 'getInsuranceClaimId',
        'ip_address' => 'getIpAddress',
        'items' => 'getItems',
        'least_cost_route' => 'getLeastCostRoute',
        'least_cost_route_shipping_methods' => 'getLeastCostRouteShippingMethods',
        'mailing_list_opt_in' => 'getMailingListOptIn',
        'no_realtime_payment_processing' => 'getNoRealtimePaymentProcessing',
        'payment_method' => 'getPaymentMethod',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'rotating_transaction_gateway_code' => 'getRotatingTransactionGatewayCode',
        'screen_branding_theme_code' => 'getScreenBrandingThemeCode',
        'ship_on_date' => 'getShipOnDate',
        'ship_to_residential' => 'getShipToResidential',
        'shipping_method' => 'getShippingMethod',
        'shipto_address1' => 'getShiptoAddress1',
        'shipto_address2' => 'getShiptoAddress2',
        'shipto_city' => 'getShiptoCity',
        'shipto_company' => 'getShiptoCompany',
        'shipto_country_code' => 'getShiptoCountryCode',
        'shipto_day_phone' => 'getShiptoDayPhone',
        'shipto_evening_phone' => 'getShiptoEveningPhone',
        'shipto_first_name' => 'getShiptoFirstName',
        'shipto_last_name' => 'getShiptoLastName',
        'shipto_postal_code' => 'getShiptoPostalCode',
        'shipto_state_region' => 'getShiptoStateRegion',
        'shipto_title' => 'getShiptoTitle',
        'skip_payment_processing' => 'getSkipPaymentProcessing',
        'special_instructions' => 'getSpecialInstructions',
        'store_completed' => 'getStoreCompleted',
        'store_if_payment_declines' => 'getStoreIfPaymentDeclines',
        'tax_county' => 'getTaxCounty',
        'tax_exempt' => 'getTaxExempt',
        'transaction' => 'getTransaction',
        'treat_warnings_as_errors' => 'getTreatWarningsAsErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_METHOD_AFFIRM = 'Affirm';
    const PAYMENT_METHOD_AMAZON = 'Amazon';
    const PAYMENT_METHOD_CHECK = 'Check';
    const PAYMENT_METHOD_COD = 'COD';
    const PAYMENT_METHOD_CREDIT_CARD = 'Credit Card';
    const PAYMENT_METHOD_LOAN_HERO = 'LoanHero';
    const PAYMENT_METHOD_MONEY_ORDER = 'Money Order';
    const PAYMENT_METHOD_PAY_PAL = 'PayPal';
    const PAYMENT_METHOD_PURCHASE_ORDER = 'Purchase Order';
    const PAYMENT_METHOD_QUOTE_REQUEST = 'Quote Request';
    const PAYMENT_METHOD_WIRE_TRANSFER = 'Wire Transfer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_AFFIRM,
            self::PAYMENT_METHOD_AMAZON,
            self::PAYMENT_METHOD_CHECK,
            self::PAYMENT_METHOD_COD,
            self::PAYMENT_METHOD_CREDIT_CARD,
            self::PAYMENT_METHOD_LOAN_HERO,
            self::PAYMENT_METHOD_MONEY_ORDER,
            self::PAYMENT_METHOD_PAY_PAL,
            self::PAYMENT_METHOD_PURCHASE_ORDER,
            self::PAYMENT_METHOD_QUOTE_REQUEST,
            self::PAYMENT_METHOD_WIRE_TRANSFER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['advertising_source'] = isset($data['advertising_source']) ? $data['advertising_source'] : null;
        $this->container['affiliate_id'] = isset($data['affiliate_id']) ? $data['affiliate_id'] : null;
        $this->container['affiliate_sub_id'] = isset($data['affiliate_sub_id']) ? $data['affiliate_sub_id'] : null;
        $this->container['arbitrary_shipping_handling_total'] = isset($data['arbitrary_shipping_handling_total']) ? $data['arbitrary_shipping_handling_total'] : null;
        $this->container['arbitrary_tax'] = isset($data['arbitrary_tax']) ? $data['arbitrary_tax'] : null;
        $this->container['arbitrary_tax_rate'] = isset($data['arbitrary_tax_rate']) ? $data['arbitrary_tax_rate'] : null;
        $this->container['arbitrary_taxable_subtotal'] = isset($data['arbitrary_taxable_subtotal']) ? $data['arbitrary_taxable_subtotal'] : null;
        $this->container['associate_with_customer_profile_if_present'] = isset($data['associate_with_customer_profile_if_present']) ? $data['associate_with_customer_profile_if_present'] : null;
        $this->container['auto_approve_purchase_order'] = isset($data['auto_approve_purchase_order']) ? $data['auto_approve_purchase_order'] : null;
        $this->container['billto_address1'] = isset($data['billto_address1']) ? $data['billto_address1'] : null;
        $this->container['billto_address2'] = isset($data['billto_address2']) ? $data['billto_address2'] : null;
        $this->container['billto_city'] = isset($data['billto_city']) ? $data['billto_city'] : null;
        $this->container['billto_company'] = isset($data['billto_company']) ? $data['billto_company'] : null;
        $this->container['billto_country_code'] = isset($data['billto_country_code']) ? $data['billto_country_code'] : null;
        $this->container['billto_day_phone'] = isset($data['billto_day_phone']) ? $data['billto_day_phone'] : null;
        $this->container['billto_evening_phone'] = isset($data['billto_evening_phone']) ? $data['billto_evening_phone'] : null;
        $this->container['billto_first_name'] = isset($data['billto_first_name']) ? $data['billto_first_name'] : null;
        $this->container['billto_last_name'] = isset($data['billto_last_name']) ? $data['billto_last_name'] : null;
        $this->container['billto_postal_code'] = isset($data['billto_postal_code']) ? $data['billto_postal_code'] : null;
        $this->container['billto_state_region'] = isset($data['billto_state_region']) ? $data['billto_state_region'] : null;
        $this->container['billto_title'] = isset($data['billto_title']) ? $data['billto_title'] : null;
        $this->container['cc_email'] = isset($data['cc_email']) ? $data['cc_email'] : null;
        $this->container['channel_partner_order_id'] = isset($data['channel_partner_order_id']) ? $data['channel_partner_order_id'] : null;
        $this->container['consider_recurring'] = isset($data['consider_recurring']) ? $data['consider_recurring'] : null;
        $this->container['coupons'] = isset($data['coupons']) ? $data['coupons'] : null;
        $this->container['credit_card_authorization_amount'] = isset($data['credit_card_authorization_amount']) ? $data['credit_card_authorization_amount'] : null;
        $this->container['credit_card_authorization_dts'] = isset($data['credit_card_authorization_dts']) ? $data['credit_card_authorization_dts'] : null;
        $this->container['credit_card_authorization_number'] = isset($data['credit_card_authorization_number']) ? $data['credit_card_authorization_number'] : null;
        $this->container['credit_card_expiration_month'] = isset($data['credit_card_expiration_month']) ? $data['credit_card_expiration_month'] : null;
        $this->container['credit_card_expiration_year'] = isset($data['credit_card_expiration_year']) ? $data['credit_card_expiration_year'] : null;
        $this->container['credit_card_type'] = isset($data['credit_card_type']) ? $data['credit_card_type'] : null;
        $this->container['custom_field1'] = isset($data['custom_field1']) ? $data['custom_field1'] : null;
        $this->container['custom_field2'] = isset($data['custom_field2']) ? $data['custom_field2'] : null;
        $this->container['custom_field3'] = isset($data['custom_field3']) ? $data['custom_field3'] : null;
        $this->container['custom_field4'] = isset($data['custom_field4']) ? $data['custom_field4'] : null;
        $this->container['custom_field5'] = isset($data['custom_field5']) ? $data['custom_field5'] : null;
        $this->container['custom_field6'] = isset($data['custom_field6']) ? $data['custom_field6'] : null;
        $this->container['custom_field7'] = isset($data['custom_field7']) ? $data['custom_field7'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['gift'] = isset($data['gift']) ? $data['gift'] : null;
        $this->container['gift_email'] = isset($data['gift_email']) ? $data['gift_email'] : null;
        $this->container['gift_message'] = isset($data['gift_message']) ? $data['gift_message'] : null;
        $this->container['hosted_fields_card_token'] = isset($data['hosted_fields_card_token']) ? $data['hosted_fields_card_token'] : null;
        $this->container['hosted_fields_cvv_token'] = isset($data['hosted_fields_cvv_token']) ? $data['hosted_fields_cvv_token'] : null;
        $this->container['insurance_application_id'] = isset($data['insurance_application_id']) ? $data['insurance_application_id'] : null;
        $this->container['insurance_claim_id'] = isset($data['insurance_claim_id']) ? $data['insurance_claim_id'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['least_cost_route'] = isset($data['least_cost_route']) ? $data['least_cost_route'] : null;
        $this->container['least_cost_route_shipping_methods'] = isset($data['least_cost_route_shipping_methods']) ? $data['least_cost_route_shipping_methods'] : null;
        $this->container['mailing_list_opt_in'] = isset($data['mailing_list_opt_in']) ? $data['mailing_list_opt_in'] : null;
        $this->container['no_realtime_payment_processing'] = isset($data['no_realtime_payment_processing']) ? $data['no_realtime_payment_processing'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['purchase_order_number'] = isset($data['purchase_order_number']) ? $data['purchase_order_number'] : null;
        $this->container['rotating_transaction_gateway_code'] = isset($data['rotating_transaction_gateway_code']) ? $data['rotating_transaction_gateway_code'] : null;
        $this->container['screen_branding_theme_code'] = isset($data['screen_branding_theme_code']) ? $data['screen_branding_theme_code'] : null;
        $this->container['ship_on_date'] = isset($data['ship_on_date']) ? $data['ship_on_date'] : null;
        $this->container['ship_to_residential'] = isset($data['ship_to_residential']) ? $data['ship_to_residential'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['shipto_address1'] = isset($data['shipto_address1']) ? $data['shipto_address1'] : null;
        $this->container['shipto_address2'] = isset($data['shipto_address2']) ? $data['shipto_address2'] : null;
        $this->container['shipto_city'] = isset($data['shipto_city']) ? $data['shipto_city'] : null;
        $this->container['shipto_company'] = isset($data['shipto_company']) ? $data['shipto_company'] : null;
        $this->container['shipto_country_code'] = isset($data['shipto_country_code']) ? $data['shipto_country_code'] : null;
        $this->container['shipto_day_phone'] = isset($data['shipto_day_phone']) ? $data['shipto_day_phone'] : null;
        $this->container['shipto_evening_phone'] = isset($data['shipto_evening_phone']) ? $data['shipto_evening_phone'] : null;
        $this->container['shipto_first_name'] = isset($data['shipto_first_name']) ? $data['shipto_first_name'] : null;
        $this->container['shipto_last_name'] = isset($data['shipto_last_name']) ? $data['shipto_last_name'] : null;
        $this->container['shipto_postal_code'] = isset($data['shipto_postal_code']) ? $data['shipto_postal_code'] : null;
        $this->container['shipto_state_region'] = isset($data['shipto_state_region']) ? $data['shipto_state_region'] : null;
        $this->container['shipto_title'] = isset($data['shipto_title']) ? $data['shipto_title'] : null;
        $this->container['skip_payment_processing'] = isset($data['skip_payment_processing']) ? $data['skip_payment_processing'] : null;
        $this->container['special_instructions'] = isset($data['special_instructions']) ? $data['special_instructions'] : null;
        $this->container['store_completed'] = isset($data['store_completed']) ? $data['store_completed'] : null;
        $this->container['store_if_payment_declines'] = isset($data['store_if_payment_declines']) ? $data['store_if_payment_declines'] : null;
        $this->container['tax_county'] = isset($data['tax_county']) ? $data['tax_county'] : null;
        $this->container['tax_exempt'] = isset($data['tax_exempt']) ? $data['tax_exempt'] : null;
        $this->container['transaction'] = isset($data['transaction']) ? $data['transaction'] : null;
        $this->container['treat_warnings_as_errors'] = isset($data['treat_warnings_as_errors']) ? $data['treat_warnings_as_errors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['billto_address1']) && (mb_strlen($this->container['billto_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'billto_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['billto_address2']) && (mb_strlen($this->container['billto_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'billto_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['billto_city']) && (mb_strlen($this->container['billto_city']) > 32)) {
            $invalidProperties[] = "invalid value for 'billto_city', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['billto_company']) && (mb_strlen($this->container['billto_company']) > 50)) {
            $invalidProperties[] = "invalid value for 'billto_company', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['billto_country_code']) && (mb_strlen($this->container['billto_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'billto_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['billto_day_phone']) && (mb_strlen($this->container['billto_day_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'billto_day_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['billto_evening_phone']) && (mb_strlen($this->container['billto_evening_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'billto_evening_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['billto_first_name']) && (mb_strlen($this->container['billto_first_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'billto_first_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['billto_last_name']) && (mb_strlen($this->container['billto_last_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'billto_last_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['billto_postal_code']) && (mb_strlen($this->container['billto_postal_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'billto_postal_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['billto_state_region']) && (mb_strlen($this->container['billto_state_region']) > 32)) {
            $invalidProperties[] = "invalid value for 'billto_state_region', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['billto_title']) && (mb_strlen($this->container['billto_title']) > 50)) {
            $invalidProperties[] = "invalid value for 'billto_title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['cc_email']) && (mb_strlen($this->container['cc_email']) > 100)) {
            $invalidProperties[] = "invalid value for 'cc_email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['custom_field1']) && (mb_strlen($this->container['custom_field1']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field2']) && (mb_strlen($this->container['custom_field2']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field3']) && (mb_strlen($this->container['custom_field3']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field4']) && (mb_strlen($this->container['custom_field4']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field4', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field5']) && (mb_strlen($this->container['custom_field5']) > 75)) {
            $invalidProperties[] = "invalid value for 'custom_field5', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['custom_field6']) && (mb_strlen($this->container['custom_field6']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field6', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field7']) && (mb_strlen($this->container['custom_field7']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field7', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['gift_email']) && (mb_strlen($this->container['gift_email']) > 100)) {
            $invalidProperties[] = "invalid value for 'gift_email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['gift_message']) && (mb_strlen($this->container['gift_message']) > 10000)) {
            $invalidProperties[] = "invalid value for 'gift_message', the character length must be smaller than or equal to 10000.";
        }

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['screen_branding_theme_code']) && (mb_strlen($this->container['screen_branding_theme_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'screen_branding_theme_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['shipto_address1']) && (mb_strlen($this->container['shipto_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipto_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipto_address2']) && (mb_strlen($this->container['shipto_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipto_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipto_city']) && (mb_strlen($this->container['shipto_city']) > 32)) {
            $invalidProperties[] = "invalid value for 'shipto_city', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['shipto_company']) && (mb_strlen($this->container['shipto_company']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipto_company', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipto_country_code']) && (mb_strlen($this->container['shipto_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipto_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipto_day_phone']) && (mb_strlen($this->container['shipto_day_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'shipto_day_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['shipto_evening_phone']) && (mb_strlen($this->container['shipto_evening_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'shipto_evening_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['shipto_first_name']) && (mb_strlen($this->container['shipto_first_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'shipto_first_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['shipto_last_name']) && (mb_strlen($this->container['shipto_last_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'shipto_last_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['shipto_postal_code']) && (mb_strlen($this->container['shipto_postal_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'shipto_postal_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['shipto_state_region']) && (mb_strlen($this->container['shipto_state_region']) > 32)) {
            $invalidProperties[] = "invalid value for 'shipto_state_region', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['shipto_title']) && (mb_strlen($this->container['shipto_title']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipto_title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['special_instructions']) && (mb_strlen($this->container['special_instructions']) > 10000)) {
            $invalidProperties[] = "invalid value for 'special_instructions', the character length must be smaller than or equal to 10000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advertising_source
     *
     * @return string
     */
    public function getAdvertisingSource()
    {
        return $this->container['advertising_source'];
    }

    /**
     * Sets advertising_source
     *
     * @param string $advertising_source advertising_source
     *
     * @return $this
     */
    public function setAdvertisingSource($advertising_source)
    {
        $this->container['advertising_source'] = $advertising_source;

        return $this;
    }

    /**
     * Gets affiliate_id
     *
     * @return string
     */
    public function getAffiliateId()
    {
        return $this->container['affiliate_id'];
    }

    /**
     * Sets affiliate_id
     *
     * @param string $affiliate_id Affiliate Id
     *
     * @return $this
     */
    public function setAffiliateId($affiliate_id)
    {
        $this->container['affiliate_id'] = $affiliate_id;

        return $this;
    }

    /**
     * Gets affiliate_sub_id
     *
     * @return string
     */
    public function getAffiliateSubId()
    {
        return $this->container['affiliate_sub_id'];
    }

    /**
     * Sets affiliate_sub_id
     *
     * @param string $affiliate_sub_id Affiliate Sub Id
     *
     * @return $this
     */
    public function setAffiliateSubId($affiliate_sub_id)
    {
        $this->container['affiliate_sub_id'] = $affiliate_sub_id;

        return $this;
    }

    /**
     * Gets arbitrary_shipping_handling_total
     *
     * @return float
     */
    public function getArbitraryShippingHandlingTotal()
    {
        return $this->container['arbitrary_shipping_handling_total'];
    }

    /**
     * Sets arbitrary_shipping_handling_total
     *
     * @param float $arbitrary_shipping_handling_total Arbitrary shipping handling total
     *
     * @return $this
     */
    public function setArbitraryShippingHandlingTotal($arbitrary_shipping_handling_total)
    {
        $this->container['arbitrary_shipping_handling_total'] = $arbitrary_shipping_handling_total;

        return $this;
    }

    /**
     * Gets arbitrary_tax
     *
     * @return float
     */
    public function getArbitraryTax()
    {
        return $this->container['arbitrary_tax'];
    }

    /**
     * Sets arbitrary_tax
     *
     * @param float $arbitrary_tax Arbitrary tax for overriding calculated taxes
     *
     * @return $this
     */
    public function setArbitraryTax($arbitrary_tax)
    {
        $this->container['arbitrary_tax'] = $arbitrary_tax;

        return $this;
    }

    /**
     * Gets arbitrary_tax_rate
     *
     * @return float
     */
    public function getArbitraryTaxRate()
    {
        return $this->container['arbitrary_tax_rate'];
    }

    /**
     * Sets arbitrary_tax_rate
     *
     * @param float $arbitrary_tax_rate Arbitrary tax rate
     *
     * @return $this
     */
    public function setArbitraryTaxRate($arbitrary_tax_rate)
    {
        $this->container['arbitrary_tax_rate'] = $arbitrary_tax_rate;

        return $this;
    }

    /**
     * Gets arbitrary_taxable_subtotal
     *
     * @return float
     */
    public function getArbitraryTaxableSubtotal()
    {
        return $this->container['arbitrary_taxable_subtotal'];
    }

    /**
     * Sets arbitrary_taxable_subtotal
     *
     * @param float $arbitrary_taxable_subtotal Arbitrary taxable subtotal
     *
     * @return $this
     */
    public function setArbitraryTaxableSubtotal($arbitrary_taxable_subtotal)
    {
        $this->container['arbitrary_taxable_subtotal'] = $arbitrary_taxable_subtotal;

        return $this;
    }

    /**
     * Gets associate_with_customer_profile_if_present
     *
     * @return bool
     */
    public function getAssociateWithCustomerProfileIfPresent()
    {
        return $this->container['associate_with_customer_profile_if_present'];
    }

    /**
     * Sets associate_with_customer_profile_if_present
     *
     * @param bool $associate_with_customer_profile_if_present If true any matching customer profile based on email is associated with this order
     *
     * @return $this
     */
    public function setAssociateWithCustomerProfileIfPresent($associate_with_customer_profile_if_present)
    {
        $this->container['associate_with_customer_profile_if_present'] = $associate_with_customer_profile_if_present;

        return $this;
    }

    /**
     * Gets auto_approve_purchase_order
     *
     * @return bool
     */
    public function getAutoApprovePurchaseOrder()
    {
        return $this->container['auto_approve_purchase_order'];
    }

    /**
     * Sets auto_approve_purchase_order
     *
     * @param bool $auto_approve_purchase_order If true any purchase orders are automatically approved
     *
     * @return $this
     */
    public function setAutoApprovePurchaseOrder($auto_approve_purchase_order)
    {
        $this->container['auto_approve_purchase_order'] = $auto_approve_purchase_order;

        return $this;
    }

    /**
     * Gets billto_address1
     *
     * @return string
     */
    public function getBilltoAddress1()
    {
        return $this->container['billto_address1'];
    }

    /**
     * Sets billto_address1
     *
     * @param string $billto_address1 Billing Address line 1
     *
     * @return $this
     */
    public function setBilltoAddress1($billto_address1)
    {
        if (!is_null($billto_address1) && (mb_strlen($billto_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $billto_address1 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['billto_address1'] = $billto_address1;

        return $this;
    }

    /**
     * Gets billto_address2
     *
     * @return string
     */
    public function getBilltoAddress2()
    {
        return $this->container['billto_address2'];
    }

    /**
     * Sets billto_address2
     *
     * @param string $billto_address2 Billing Address line 2
     *
     * @return $this
     */
    public function setBilltoAddress2($billto_address2)
    {
        if (!is_null($billto_address2) && (mb_strlen($billto_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $billto_address2 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['billto_address2'] = $billto_address2;

        return $this;
    }

    /**
     * Gets billto_city
     *
     * @return string
     */
    public function getBilltoCity()
    {
        return $this->container['billto_city'];
    }

    /**
     * Sets billto_city
     *
     * @param string $billto_city Billing City
     *
     * @return $this
     */
    public function setBilltoCity($billto_city)
    {
        if (!is_null($billto_city) && (mb_strlen($billto_city) > 32)) {
            throw new \InvalidArgumentException('invalid length for $billto_city when calling ChannelPartnerOrder., must be smaller than or equal to 32.');
        }

        $this->container['billto_city'] = $billto_city;

        return $this;
    }

    /**
     * Gets billto_company
     *
     * @return string
     */
    public function getBilltoCompany()
    {
        return $this->container['billto_company'];
    }

    /**
     * Sets billto_company
     *
     * @param string $billto_company Billing Company
     *
     * @return $this
     */
    public function setBilltoCompany($billto_company)
    {
        if (!is_null($billto_company) && (mb_strlen($billto_company) > 50)) {
            throw new \InvalidArgumentException('invalid length for $billto_company when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['billto_company'] = $billto_company;

        return $this;
    }

    /**
     * Gets billto_country_code
     *
     * @return string
     */
    public function getBilltoCountryCode()
    {
        return $this->container['billto_country_code'];
    }

    /**
     * Sets billto_country_code
     *
     * @param string $billto_country_code Billing ISO-3166 two letter country code
     *
     * @return $this
     */
    public function setBilltoCountryCode($billto_country_code)
    {
        if (!is_null($billto_country_code) && (mb_strlen($billto_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $billto_country_code when calling ChannelPartnerOrder., must be smaller than or equal to 2.');
        }

        $this->container['billto_country_code'] = $billto_country_code;

        return $this;
    }

    /**
     * Gets billto_day_phone
     *
     * @return string
     */
    public function getBilltoDayPhone()
    {
        return $this->container['billto_day_phone'];
    }

    /**
     * Sets billto_day_phone
     *
     * @param string $billto_day_phone Billing Day phone
     *
     * @return $this
     */
    public function setBilltoDayPhone($billto_day_phone)
    {
        if (!is_null($billto_day_phone) && (mb_strlen($billto_day_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $billto_day_phone when calling ChannelPartnerOrder., must be smaller than or equal to 25.');
        }

        $this->container['billto_day_phone'] = $billto_day_phone;

        return $this;
    }

    /**
     * Gets billto_evening_phone
     *
     * @return string
     */
    public function getBilltoEveningPhone()
    {
        return $this->container['billto_evening_phone'];
    }

    /**
     * Sets billto_evening_phone
     *
     * @param string $billto_evening_phone Billing Evening phone
     *
     * @return $this
     */
    public function setBilltoEveningPhone($billto_evening_phone)
    {
        if (!is_null($billto_evening_phone) && (mb_strlen($billto_evening_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $billto_evening_phone when calling ChannelPartnerOrder., must be smaller than or equal to 25.');
        }

        $this->container['billto_evening_phone'] = $billto_evening_phone;

        return $this;
    }

    /**
     * Gets billto_first_name
     *
     * @return string
     */
    public function getBilltoFirstName()
    {
        return $this->container['billto_first_name'];
    }

    /**
     * Sets billto_first_name
     *
     * @param string $billto_first_name Billing First name
     *
     * @return $this
     */
    public function setBilltoFirstName($billto_first_name)
    {
        if (!is_null($billto_first_name) && (mb_strlen($billto_first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $billto_first_name when calling ChannelPartnerOrder., must be smaller than or equal to 30.');
        }

        $this->container['billto_first_name'] = $billto_first_name;

        return $this;
    }

    /**
     * Gets billto_last_name
     *
     * @return string
     */
    public function getBilltoLastName()
    {
        return $this->container['billto_last_name'];
    }

    /**
     * Sets billto_last_name
     *
     * @param string $billto_last_name Billing Last name
     *
     * @return $this
     */
    public function setBilltoLastName($billto_last_name)
    {
        if (!is_null($billto_last_name) && (mb_strlen($billto_last_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $billto_last_name when calling ChannelPartnerOrder., must be smaller than or equal to 30.');
        }

        $this->container['billto_last_name'] = $billto_last_name;

        return $this;
    }

    /**
     * Gets billto_postal_code
     *
     * @return string
     */
    public function getBilltoPostalCode()
    {
        return $this->container['billto_postal_code'];
    }

    /**
     * Sets billto_postal_code
     *
     * @param string $billto_postal_code Billing Postal code
     *
     * @return $this
     */
    public function setBilltoPostalCode($billto_postal_code)
    {
        if (!is_null($billto_postal_code) && (mb_strlen($billto_postal_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $billto_postal_code when calling ChannelPartnerOrder., must be smaller than or equal to 20.');
        }

        $this->container['billto_postal_code'] = $billto_postal_code;

        return $this;
    }

    /**
     * Gets billto_state_region
     *
     * @return string
     */
    public function getBilltoStateRegion()
    {
        return $this->container['billto_state_region'];
    }

    /**
     * Sets billto_state_region
     *
     * @param string $billto_state_region Billing State for United States otherwise region or province for other countries
     *
     * @return $this
     */
    public function setBilltoStateRegion($billto_state_region)
    {
        if (!is_null($billto_state_region) && (mb_strlen($billto_state_region) > 32)) {
            throw new \InvalidArgumentException('invalid length for $billto_state_region when calling ChannelPartnerOrder., must be smaller than or equal to 32.');
        }

        $this->container['billto_state_region'] = $billto_state_region;

        return $this;
    }

    /**
     * Gets billto_title
     *
     * @return string
     */
    public function getBilltoTitle()
    {
        return $this->container['billto_title'];
    }

    /**
     * Sets billto_title
     *
     * @param string $billto_title Billing Title
     *
     * @return $this
     */
    public function setBilltoTitle($billto_title)
    {
        if (!is_null($billto_title) && (mb_strlen($billto_title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $billto_title when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['billto_title'] = $billto_title;

        return $this;
    }

    /**
     * Gets cc_email
     *
     * @return string
     */
    public function getCcEmail()
    {
        return $this->container['cc_email'];
    }

    /**
     * Sets cc_email
     *
     * @param string $cc_email CC email.
     *
     * @return $this
     */
    public function setCcEmail($cc_email)
    {
        if (!is_null($cc_email) && (mb_strlen($cc_email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $cc_email when calling ChannelPartnerOrder., must be smaller than or equal to 100.');
        }

        $this->container['cc_email'] = $cc_email;

        return $this;
    }

    /**
     * Gets channel_partner_order_id
     *
     * @return string
     */
    public function getChannelPartnerOrderId()
    {
        return $this->container['channel_partner_order_id'];
    }

    /**
     * Sets channel_partner_order_id
     *
     * @param string $channel_partner_order_id The id for this order within the channel partner system.
     *
     * @return $this
     */
    public function setChannelPartnerOrderId($channel_partner_order_id)
    {
        $this->container['channel_partner_order_id'] = $channel_partner_order_id;

        return $this;
    }

    /**
     * Gets consider_recurring
     *
     * @return bool
     */
    public function getConsiderRecurring()
    {
        return $this->container['consider_recurring'];
    }

    /**
     * Sets consider_recurring
     *
     * @param bool $consider_recurring If true this order is marked as an auto order (recurring)
     *
     * @return $this
     */
    public function setConsiderRecurring($consider_recurring)
    {
        $this->container['consider_recurring'] = $consider_recurring;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return string[]
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param string[] $coupons Array of coupon codes
     *
     * @return $this
     */
    public function setCoupons($coupons)
    {
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets credit_card_authorization_amount
     *
     * @return float
     */
    public function getCreditCardAuthorizationAmount()
    {
        return $this->container['credit_card_authorization_amount'];
    }

    /**
     * Sets credit_card_authorization_amount
     *
     * @param float $credit_card_authorization_amount The amount authorized externally
     *
     * @return $this
     */
    public function setCreditCardAuthorizationAmount($credit_card_authorization_amount)
    {
        $this->container['credit_card_authorization_amount'] = $credit_card_authorization_amount;

        return $this;
    }

    /**
     * Gets credit_card_authorization_dts
     *
     * @return string
     */
    public function getCreditCardAuthorizationDts()
    {
        return $this->container['credit_card_authorization_dts'];
    }

    /**
     * Sets credit_card_authorization_dts
     *
     * @param string $credit_card_authorization_dts Date/Time of credit card authorization in ISO8601 format
     *
     * @return $this
     */
    public function setCreditCardAuthorizationDts($credit_card_authorization_dts)
    {
        $this->container['credit_card_authorization_dts'] = $credit_card_authorization_dts;

        return $this;
    }

    /**
     * Gets credit_card_authorization_number
     *
     * @return string
     */
    public function getCreditCardAuthorizationNumber()
    {
        return $this->container['credit_card_authorization_number'];
    }

    /**
     * Sets credit_card_authorization_number
     *
     * @param string $credit_card_authorization_number The reference number provided by an externally processed transaction
     *
     * @return $this
     */
    public function setCreditCardAuthorizationNumber($credit_card_authorization_number)
    {
        $this->container['credit_card_authorization_number'] = $credit_card_authorization_number;

        return $this;
    }

    /**
     * Gets credit_card_expiration_month
     *
     * @return int
     */
    public function getCreditCardExpirationMonth()
    {
        return $this->container['credit_card_expiration_month'];
    }

    /**
     * Sets credit_card_expiration_month
     *
     * @param int $credit_card_expiration_month Credit card expiration month
     *
     * @return $this
     */
    public function setCreditCardExpirationMonth($credit_card_expiration_month)
    {
        $this->container['credit_card_expiration_month'] = $credit_card_expiration_month;

        return $this;
    }

    /**
     * Gets credit_card_expiration_year
     *
     * @return int
     */
    public function getCreditCardExpirationYear()
    {
        return $this->container['credit_card_expiration_year'];
    }

    /**
     * Sets credit_card_expiration_year
     *
     * @param int $credit_card_expiration_year Credit card expiration year
     *
     * @return $this
     */
    public function setCreditCardExpirationYear($credit_card_expiration_year)
    {
        $this->container['credit_card_expiration_year'] = $credit_card_expiration_year;

        return $this;
    }

    /**
     * Gets credit_card_type
     *
     * @return string
     */
    public function getCreditCardType()
    {
        return $this->container['credit_card_type'];
    }

    /**
     * Sets credit_card_type
     *
     * @param string $credit_card_type Credit card type
     *
     * @return $this
     */
    public function setCreditCardType($credit_card_type)
    {
        $this->container['credit_card_type'] = $credit_card_type;

        return $this;
    }

    /**
     * Gets custom_field1
     *
     * @return string
     */
    public function getCustomField1()
    {
        return $this->container['custom_field1'];
    }

    /**
     * Sets custom_field1
     *
     * @param string $custom_field1 Custom field 1
     *
     * @return $this
     */
    public function setCustomField1($custom_field1)
    {
        if (!is_null($custom_field1) && (mb_strlen($custom_field1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field1 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['custom_field1'] = $custom_field1;

        return $this;
    }

    /**
     * Gets custom_field2
     *
     * @return string
     */
    public function getCustomField2()
    {
        return $this->container['custom_field2'];
    }

    /**
     * Sets custom_field2
     *
     * @param string $custom_field2 Custom field 2
     *
     * @return $this
     */
    public function setCustomField2($custom_field2)
    {
        if (!is_null($custom_field2) && (mb_strlen($custom_field2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field2 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['custom_field2'] = $custom_field2;

        return $this;
    }

    /**
     * Gets custom_field3
     *
     * @return string
     */
    public function getCustomField3()
    {
        return $this->container['custom_field3'];
    }

    /**
     * Sets custom_field3
     *
     * @param string $custom_field3 Custom field 3
     *
     * @return $this
     */
    public function setCustomField3($custom_field3)
    {
        if (!is_null($custom_field3) && (mb_strlen($custom_field3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field3 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['custom_field3'] = $custom_field3;

        return $this;
    }

    /**
     * Gets custom_field4
     *
     * @return string
     */
    public function getCustomField4()
    {
        return $this->container['custom_field4'];
    }

    /**
     * Sets custom_field4
     *
     * @param string $custom_field4 Custom field 4
     *
     * @return $this
     */
    public function setCustomField4($custom_field4)
    {
        if (!is_null($custom_field4) && (mb_strlen($custom_field4) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field4 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['custom_field4'] = $custom_field4;

        return $this;
    }

    /**
     * Gets custom_field5
     *
     * @return string
     */
    public function getCustomField5()
    {
        return $this->container['custom_field5'];
    }

    /**
     * Sets custom_field5
     *
     * @param string $custom_field5 Custom field 5
     *
     * @return $this
     */
    public function setCustomField5($custom_field5)
    {
        if (!is_null($custom_field5) && (mb_strlen($custom_field5) > 75)) {
            throw new \InvalidArgumentException('invalid length for $custom_field5 when calling ChannelPartnerOrder., must be smaller than or equal to 75.');
        }

        $this->container['custom_field5'] = $custom_field5;

        return $this;
    }

    /**
     * Gets custom_field6
     *
     * @return string
     */
    public function getCustomField6()
    {
        return $this->container['custom_field6'];
    }

    /**
     * Sets custom_field6
     *
     * @param string $custom_field6 Custom field 6
     *
     * @return $this
     */
    public function setCustomField6($custom_field6)
    {
        if (!is_null($custom_field6) && (mb_strlen($custom_field6) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field6 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['custom_field6'] = $custom_field6;

        return $this;
    }

    /**
     * Gets custom_field7
     *
     * @return string
     */
    public function getCustomField7()
    {
        return $this->container['custom_field7'];
    }

    /**
     * Sets custom_field7
     *
     * @param string $custom_field7 Custom field 7
     *
     * @return $this
     */
    public function setCustomField7($custom_field7)
    {
        if (!is_null($custom_field7) && (mb_strlen($custom_field7) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field7 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['custom_field7'] = $custom_field7;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date Date the customer is requesting delivery on. Typically used for perishable product delivery.
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling ChannelPartnerOrder., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gift
     *
     * @return bool
     */
    public function getGift()
    {
        return $this->container['gift'];
    }

    /**
     * Sets gift
     *
     * @param bool $gift True if this order is a gift
     *
     * @return $this
     */
    public function setGift($gift)
    {
        $this->container['gift'] = $gift;

        return $this;
    }

    /**
     * Gets gift_email
     *
     * @return string
     */
    public function getGiftEmail()
    {
        return $this->container['gift_email'];
    }

    /**
     * Sets gift_email
     *
     * @param string $gift_email Email address of the gift recipient
     *
     * @return $this
     */
    public function setGiftEmail($gift_email)
    {
        if (!is_null($gift_email) && (mb_strlen($gift_email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $gift_email when calling ChannelPartnerOrder., must be smaller than or equal to 100.');
        }

        $this->container['gift_email'] = $gift_email;

        return $this;
    }

    /**
     * Gets gift_message
     *
     * @return string
     */
    public function getGiftMessage()
    {
        return $this->container['gift_message'];
    }

    /**
     * Sets gift_message
     *
     * @param string $gift_message Message to the gift recipient
     *
     * @return $this
     */
    public function setGiftMessage($gift_message)
    {
        if (!is_null($gift_message) && (mb_strlen($gift_message) > 10000)) {
            throw new \InvalidArgumentException('invalid length for $gift_message when calling ChannelPartnerOrder., must be smaller than or equal to 10000.');
        }

        $this->container['gift_message'] = $gift_message;

        return $this;
    }

    /**
     * Gets hosted_fields_card_token
     *
     * @return string
     */
    public function getHostedFieldsCardToken()
    {
        return $this->container['hosted_fields_card_token'];
    }

    /**
     * Sets hosted_fields_card_token
     *
     * @param string $hosted_fields_card_token The token provided by UltraCart hosted fields when a credit card number is uploaded into the system.  This is the only way to provide a credit card number.
     *
     * @return $this
     */
    public function setHostedFieldsCardToken($hosted_fields_card_token)
    {
        $this->container['hosted_fields_card_token'] = $hosted_fields_card_token;

        return $this;
    }

    /**
     * Gets hosted_fields_cvv_token
     *
     * @return string
     */
    public function getHostedFieldsCvvToken()
    {
        return $this->container['hosted_fields_cvv_token'];
    }

    /**
     * Sets hosted_fields_cvv_token
     *
     * @param string $hosted_fields_cvv_token The token provided by UltraCart hosted fields when a credit card cvv is uploaded into the system.  This is the only way to provide a cvv number.
     *
     * @return $this
     */
    public function setHostedFieldsCvvToken($hosted_fields_cvv_token)
    {
        $this->container['hosted_fields_cvv_token'] = $hosted_fields_cvv_token;

        return $this;
    }

    /**
     * Gets insurance_application_id
     *
     * @return string
     */
    public function getInsuranceApplicationId()
    {
        return $this->container['insurance_application_id'];
    }

    /**
     * Sets insurance_application_id
     *
     * @param string $insurance_application_id Insurance application id
     *
     * @return $this
     */
    public function setInsuranceApplicationId($insurance_application_id)
    {
        $this->container['insurance_application_id'] = $insurance_application_id;

        return $this;
    }

    /**
     * Gets insurance_claim_id
     *
     * @return string
     */
    public function getInsuranceClaimId()
    {
        return $this->container['insurance_claim_id'];
    }

    /**
     * Sets insurance_claim_id
     *
     * @param string $insurance_claim_id Insurance claim id
     *
     * @return $this
     */
    public function setInsuranceClaimId($insurance_claim_id)
    {
        $this->container['insurance_claim_id'] = $insurance_claim_id;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address IP Address of the customer
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \ultracart\v2\models\ChannelPartnerOrderItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \ultracart\v2\models\ChannelPartnerOrderItem[] $items Items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets least_cost_route
     *
     * @return bool
     */
    public function getLeastCostRoute()
    {
        return $this->container['least_cost_route'];
    }

    /**
     * Sets least_cost_route
     *
     * @param bool $least_cost_route If true the least expensive shipping method is automatically chosen during the order import
     *
     * @return $this
     */
    public function setLeastCostRoute($least_cost_route)
    {
        $this->container['least_cost_route'] = $least_cost_route;

        return $this;
    }

    /**
     * Gets least_cost_route_shipping_methods
     *
     * @return string[]
     */
    public function getLeastCostRouteShippingMethods()
    {
        return $this->container['least_cost_route_shipping_methods'];
    }

    /**
     * Sets least_cost_route_shipping_methods
     *
     * @param string[] $least_cost_route_shipping_methods An optional array of shipping methods to restict choices if least_cost_route is true
     *
     * @return $this
     */
    public function setLeastCostRouteShippingMethods($least_cost_route_shipping_methods)
    {
        $this->container['least_cost_route_shipping_methods'] = $least_cost_route_shipping_methods;

        return $this;
    }

    /**
     * Gets mailing_list_opt_in
     *
     * @return bool
     */
    public function getMailingListOptIn()
    {
        return $this->container['mailing_list_opt_in'];
    }

    /**
     * Sets mailing_list_opt_in
     *
     * @param bool $mailing_list_opt_in If true the customer is subscribed to any configured mailing lists
     *
     * @return $this
     */
    public function setMailingListOptIn($mailing_list_opt_in)
    {
        $this->container['mailing_list_opt_in'] = $mailing_list_opt_in;

        return $this;
    }

    /**
     * Gets no_realtime_payment_processing
     *
     * @return bool
     */
    public function getNoRealtimePaymentProcessing()
    {
        return $this->container['no_realtime_payment_processing'];
    }

    /**
     * Sets no_realtime_payment_processing
     *
     * @param bool $no_realtime_payment_processing If true no payment processing is done and the order is placed into Accounts Receivable
     *
     * @return $this
     */
    public function setNoRealtimePaymentProcessing($no_realtime_payment_processing)
    {
        $this->container['no_realtime_payment_processing'] = $no_realtime_payment_processing;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method Payment method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($payment_method) && !in_array($payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets purchase_order_number
     *
     * @return string
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string $purchase_order_number Purchase order number
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets rotating_transaction_gateway_code
     *
     * @return string
     */
    public function getRotatingTransactionGatewayCode()
    {
        return $this->container['rotating_transaction_gateway_code'];
    }

    /**
     * Sets rotating_transaction_gateway_code
     *
     * @param string $rotating_transaction_gateway_code The rotating transaction gateway code for the gateway used to charge this order
     *
     * @return $this
     */
    public function setRotatingTransactionGatewayCode($rotating_transaction_gateway_code)
    {
        $this->container['rotating_transaction_gateway_code'] = $rotating_transaction_gateway_code;

        return $this;
    }

    /**
     * Gets screen_branding_theme_code
     *
     * @return string
     */
    public function getScreenBrandingThemeCode()
    {
        return $this->container['screen_branding_theme_code'];
    }

    /**
     * Sets screen_branding_theme_code
     *
     * @param string $screen_branding_theme_code Screen branding theme code
     *
     * @return $this
     */
    public function setScreenBrandingThemeCode($screen_branding_theme_code)
    {
        if (!is_null($screen_branding_theme_code) && (mb_strlen($screen_branding_theme_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $screen_branding_theme_code when calling ChannelPartnerOrder., must be smaller than or equal to 10.');
        }

        $this->container['screen_branding_theme_code'] = $screen_branding_theme_code;

        return $this;
    }

    /**
     * Gets ship_on_date
     *
     * @return string
     */
    public function getShipOnDate()
    {
        return $this->container['ship_on_date'];
    }

    /**
     * Sets ship_on_date
     *
     * @param string $ship_on_date Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.
     *
     * @return $this
     */
    public function setShipOnDate($ship_on_date)
    {
        $this->container['ship_on_date'] = $ship_on_date;

        return $this;
    }

    /**
     * Gets ship_to_residential
     *
     * @return bool
     */
    public function getShipToResidential()
    {
        return $this->container['ship_to_residential'];
    }

    /**
     * Sets ship_to_residential
     *
     * @param bool $ship_to_residential True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.
     *
     * @return $this
     */
    public function setShipToResidential($ship_to_residential)
    {
        $this->container['ship_to_residential'] = $ship_to_residential;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string $shipping_method Shipping method
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets shipto_address1
     *
     * @return string
     */
    public function getShiptoAddress1()
    {
        return $this->container['shipto_address1'];
    }

    /**
     * Sets shipto_address1
     *
     * @param string $shipto_address1 Shipping Address line 1
     *
     * @return $this
     */
    public function setShiptoAddress1($shipto_address1)
    {
        if (!is_null($shipto_address1) && (mb_strlen($shipto_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shipto_address1 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['shipto_address1'] = $shipto_address1;

        return $this;
    }

    /**
     * Gets shipto_address2
     *
     * @return string
     */
    public function getShiptoAddress2()
    {
        return $this->container['shipto_address2'];
    }

    /**
     * Sets shipto_address2
     *
     * @param string $shipto_address2 Shipping Address line 2
     *
     * @return $this
     */
    public function setShiptoAddress2($shipto_address2)
    {
        if (!is_null($shipto_address2) && (mb_strlen($shipto_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shipto_address2 when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['shipto_address2'] = $shipto_address2;

        return $this;
    }

    /**
     * Gets shipto_city
     *
     * @return string
     */
    public function getShiptoCity()
    {
        return $this->container['shipto_city'];
    }

    /**
     * Sets shipto_city
     *
     * @param string $shipto_city Shipping City
     *
     * @return $this
     */
    public function setShiptoCity($shipto_city)
    {
        if (!is_null($shipto_city) && (mb_strlen($shipto_city) > 32)) {
            throw new \InvalidArgumentException('invalid length for $shipto_city when calling ChannelPartnerOrder., must be smaller than or equal to 32.');
        }

        $this->container['shipto_city'] = $shipto_city;

        return $this;
    }

    /**
     * Gets shipto_company
     *
     * @return string
     */
    public function getShiptoCompany()
    {
        return $this->container['shipto_company'];
    }

    /**
     * Sets shipto_company
     *
     * @param string $shipto_company Shipping Company
     *
     * @return $this
     */
    public function setShiptoCompany($shipto_company)
    {
        if (!is_null($shipto_company) && (mb_strlen($shipto_company) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shipto_company when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['shipto_company'] = $shipto_company;

        return $this;
    }

    /**
     * Gets shipto_country_code
     *
     * @return string
     */
    public function getShiptoCountryCode()
    {
        return $this->container['shipto_country_code'];
    }

    /**
     * Sets shipto_country_code
     *
     * @param string $shipto_country_code Shipping ISO-3166 two letter country code
     *
     * @return $this
     */
    public function setShiptoCountryCode($shipto_country_code)
    {
        if (!is_null($shipto_country_code) && (mb_strlen($shipto_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipto_country_code when calling ChannelPartnerOrder., must be smaller than or equal to 2.');
        }

        $this->container['shipto_country_code'] = $shipto_country_code;

        return $this;
    }

    /**
     * Gets shipto_day_phone
     *
     * @return string
     */
    public function getShiptoDayPhone()
    {
        return $this->container['shipto_day_phone'];
    }

    /**
     * Sets shipto_day_phone
     *
     * @param string $shipto_day_phone Shipping Day phone
     *
     * @return $this
     */
    public function setShiptoDayPhone($shipto_day_phone)
    {
        if (!is_null($shipto_day_phone) && (mb_strlen($shipto_day_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $shipto_day_phone when calling ChannelPartnerOrder., must be smaller than or equal to 25.');
        }

        $this->container['shipto_day_phone'] = $shipto_day_phone;

        return $this;
    }

    /**
     * Gets shipto_evening_phone
     *
     * @return string
     */
    public function getShiptoEveningPhone()
    {
        return $this->container['shipto_evening_phone'];
    }

    /**
     * Sets shipto_evening_phone
     *
     * @param string $shipto_evening_phone Shipping Evening phone
     *
     * @return $this
     */
    public function setShiptoEveningPhone($shipto_evening_phone)
    {
        if (!is_null($shipto_evening_phone) && (mb_strlen($shipto_evening_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $shipto_evening_phone when calling ChannelPartnerOrder., must be smaller than or equal to 25.');
        }

        $this->container['shipto_evening_phone'] = $shipto_evening_phone;

        return $this;
    }

    /**
     * Gets shipto_first_name
     *
     * @return string
     */
    public function getShiptoFirstName()
    {
        return $this->container['shipto_first_name'];
    }

    /**
     * Sets shipto_first_name
     *
     * @param string $shipto_first_name Shipping First name
     *
     * @return $this
     */
    public function setShiptoFirstName($shipto_first_name)
    {
        if (!is_null($shipto_first_name) && (mb_strlen($shipto_first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $shipto_first_name when calling ChannelPartnerOrder., must be smaller than or equal to 30.');
        }

        $this->container['shipto_first_name'] = $shipto_first_name;

        return $this;
    }

    /**
     * Gets shipto_last_name
     *
     * @return string
     */
    public function getShiptoLastName()
    {
        return $this->container['shipto_last_name'];
    }

    /**
     * Sets shipto_last_name
     *
     * @param string $shipto_last_name Shipping Last name
     *
     * @return $this
     */
    public function setShiptoLastName($shipto_last_name)
    {
        if (!is_null($shipto_last_name) && (mb_strlen($shipto_last_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $shipto_last_name when calling ChannelPartnerOrder., must be smaller than or equal to 30.');
        }

        $this->container['shipto_last_name'] = $shipto_last_name;

        return $this;
    }

    /**
     * Gets shipto_postal_code
     *
     * @return string
     */
    public function getShiptoPostalCode()
    {
        return $this->container['shipto_postal_code'];
    }

    /**
     * Sets shipto_postal_code
     *
     * @param string $shipto_postal_code Shipping Postal code
     *
     * @return $this
     */
    public function setShiptoPostalCode($shipto_postal_code)
    {
        if (!is_null($shipto_postal_code) && (mb_strlen($shipto_postal_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $shipto_postal_code when calling ChannelPartnerOrder., must be smaller than or equal to 20.');
        }

        $this->container['shipto_postal_code'] = $shipto_postal_code;

        return $this;
    }

    /**
     * Gets shipto_state_region
     *
     * @return string
     */
    public function getShiptoStateRegion()
    {
        return $this->container['shipto_state_region'];
    }

    /**
     * Sets shipto_state_region
     *
     * @param string $shipto_state_region Shipping State for United States otherwise region or province for other countries
     *
     * @return $this
     */
    public function setShiptoStateRegion($shipto_state_region)
    {
        if (!is_null($shipto_state_region) && (mb_strlen($shipto_state_region) > 32)) {
            throw new \InvalidArgumentException('invalid length for $shipto_state_region when calling ChannelPartnerOrder., must be smaller than or equal to 32.');
        }

        $this->container['shipto_state_region'] = $shipto_state_region;

        return $this;
    }

    /**
     * Gets shipto_title
     *
     * @return string
     */
    public function getShiptoTitle()
    {
        return $this->container['shipto_title'];
    }

    /**
     * Sets shipto_title
     *
     * @param string $shipto_title Shipping Title
     *
     * @return $this
     */
    public function setShiptoTitle($shipto_title)
    {
        if (!is_null($shipto_title) && (mb_strlen($shipto_title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shipto_title when calling ChannelPartnerOrder., must be smaller than or equal to 50.');
        }

        $this->container['shipto_title'] = $shipto_title;

        return $this;
    }

    /**
     * Gets skip_payment_processing
     *
     * @return bool
     */
    public function getSkipPaymentProcessing()
    {
        return $this->container['skip_payment_processing'];
    }

    /**
     * Sets skip_payment_processing
     *
     * @param bool $skip_payment_processing If true the order is placed directly into the shipping department
     *
     * @return $this
     */
    public function setSkipPaymentProcessing($skip_payment_processing)
    {
        $this->container['skip_payment_processing'] = $skip_payment_processing;

        return $this;
    }

    /**
     * Gets special_instructions
     *
     * @return string
     */
    public function getSpecialInstructions()
    {
        return $this->container['special_instructions'];
    }

    /**
     * Sets special_instructions
     *
     * @param string $special_instructions Special instructions from the customer regarding shipping
     *
     * @return $this
     */
    public function setSpecialInstructions($special_instructions)
    {
        if (!is_null($special_instructions) && (mb_strlen($special_instructions) > 10000)) {
            throw new \InvalidArgumentException('invalid length for $special_instructions when calling ChannelPartnerOrder., must be smaller than or equal to 10000.');
        }

        $this->container['special_instructions'] = $special_instructions;

        return $this;
    }

    /**
     * Gets store_completed
     *
     * @return bool
     */
    public function getStoreCompleted()
    {
        return $this->container['store_completed'];
    }

    /**
     * Sets store_completed
     *
     * @param bool $store_completed If true the order bypasses shipping and is marked completed
     *
     * @return $this
     */
    public function setStoreCompleted($store_completed)
    {
        $this->container['store_completed'] = $store_completed;

        return $this;
    }

    /**
     * Gets store_if_payment_declines
     *
     * @return bool
     */
    public function getStoreIfPaymentDeclines()
    {
        return $this->container['store_if_payment_declines'];
    }

    /**
     * Sets store_if_payment_declines
     *
     * @param bool $store_if_payment_declines If true any failed payments are placed into Accounts Receivable.  If false any failed payments result in a rejected order resulting in errors thrown during the insert routine
     *
     * @return $this
     */
    public function setStoreIfPaymentDeclines($store_if_payment_declines)
    {
        $this->container['store_if_payment_declines'] = $store_if_payment_declines;

        return $this;
    }

    /**
     * Gets tax_county
     *
     * @return string
     */
    public function getTaxCounty()
    {
        return $this->container['tax_county'];
    }

    /**
     * Sets tax_county
     *
     * @param string $tax_county The optional shipping county used to determine exact taxes
     *
     * @return $this
     */
    public function setTaxCounty($tax_county)
    {
        $this->container['tax_county'] = $tax_county;

        return $this;
    }

    /**
     * Gets tax_exempt
     *
     * @return bool
     */
    public function getTaxExempt()
    {
        return $this->container['tax_exempt'];
    }

    /**
     * Sets tax_exempt
     *
     * @param bool $tax_exempt If true this order is marked as being tax exempt
     *
     * @return $this
     */
    public function setTaxExempt($tax_exempt)
    {
        $this->container['tax_exempt'] = $tax_exempt;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \ultracart\v2\models\ChannelPartnerOrderTransaction
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \ultracart\v2\models\ChannelPartnerOrderTransaction $transaction transaction
     *
     * @return $this
     */
    public function setTransaction($transaction)
    {
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets treat_warnings_as_errors
     *
     * @return bool
     */
    public function getTreatWarningsAsErrors()
    {
        return $this->container['treat_warnings_as_errors'];
    }

    /**
     * Sets treat_warnings_as_errors
     *
     * @param bool $treat_warnings_as_errors If true all warnings are considered errors, this is true by default
     *
     * @return $this
     */
    public function setTreatWarningsAsErrors($treat_warnings_as_errors)
    {
        $this->container['treat_warnings_as_errors'] = $treat_warnings_as_errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


