<?php
/**
 * CustomerActivity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomerActivity Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerActivity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activities' => '\ultracart\v2\models\Activity[]',
        'global_unsubscribed' => 'bool',
        'global_unsubscribed_dts' => 'string',
        'memberships' => '\ultracart\v2\models\ListSegmentMembership[]',
        'metrics' => '\ultracart\v2\models\Metric[]',
        'properties_list' => '\ultracart\v2\models\Property[]',
        'spam_complaint' => 'bool',
        'spam_complaint_dts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activities' => null,
        'global_unsubscribed' => null,
        'global_unsubscribed_dts' => null,
        'memberships' => null,
        'metrics' => null,
        'properties_list' => null,
        'spam_complaint' => null,
        'spam_complaint_dts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activities' => 'activities',
        'global_unsubscribed' => 'global_unsubscribed',
        'global_unsubscribed_dts' => 'global_unsubscribed_dts',
        'memberships' => 'memberships',
        'metrics' => 'metrics',
        'properties_list' => 'properties_list',
        'spam_complaint' => 'spam_complaint',
        'spam_complaint_dts' => 'spam_complaint_dts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activities' => 'setActivities',
        'global_unsubscribed' => 'setGlobalUnsubscribed',
        'global_unsubscribed_dts' => 'setGlobalUnsubscribedDts',
        'memberships' => 'setMemberships',
        'metrics' => 'setMetrics',
        'properties_list' => 'setPropertiesList',
        'spam_complaint' => 'setSpamComplaint',
        'spam_complaint_dts' => 'setSpamComplaintDts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activities' => 'getActivities',
        'global_unsubscribed' => 'getGlobalUnsubscribed',
        'global_unsubscribed_dts' => 'getGlobalUnsubscribedDts',
        'memberships' => 'getMemberships',
        'metrics' => 'getMetrics',
        'properties_list' => 'getPropertiesList',
        'spam_complaint' => 'getSpamComplaint',
        'spam_complaint_dts' => 'getSpamComplaintDts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activities'] = $data['activities'] ?? null;
        $this->container['global_unsubscribed'] = $data['global_unsubscribed'] ?? null;
        $this->container['global_unsubscribed_dts'] = $data['global_unsubscribed_dts'] ?? null;
        $this->container['memberships'] = $data['memberships'] ?? null;
        $this->container['metrics'] = $data['metrics'] ?? null;
        $this->container['properties_list'] = $data['properties_list'] ?? null;
        $this->container['spam_complaint'] = $data['spam_complaint'] ?? null;
        $this->container['spam_complaint_dts'] = $data['spam_complaint_dts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activities
     *
     * @return \ultracart\v2\models\Activity[]|null
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param \ultracart\v2\models\Activity[]|null $activities activities
     *
     * @return self
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets global_unsubscribed
     *
     * @return bool|null
     */
    public function getGlobalUnsubscribed()
    {
        return $this->container['global_unsubscribed'];
    }

    /**
     * Sets global_unsubscribed
     *
     * @param bool|null $global_unsubscribed global_unsubscribed
     *
     * @return self
     */
    public function setGlobalUnsubscribed($global_unsubscribed)
    {
        $this->container['global_unsubscribed'] = $global_unsubscribed;

        return $this;
    }

    /**
     * Gets global_unsubscribed_dts
     *
     * @return string|null
     */
    public function getGlobalUnsubscribedDts()
    {
        return $this->container['global_unsubscribed_dts'];
    }

    /**
     * Sets global_unsubscribed_dts
     *
     * @param string|null $global_unsubscribed_dts global_unsubscribed_dts
     *
     * @return self
     */
    public function setGlobalUnsubscribedDts($global_unsubscribed_dts)
    {
        $this->container['global_unsubscribed_dts'] = $global_unsubscribed_dts;

        return $this;
    }

    /**
     * Gets memberships
     *
     * @return \ultracart\v2\models\ListSegmentMembership[]|null
     */
    public function getMemberships()
    {
        return $this->container['memberships'];
    }

    /**
     * Sets memberships
     *
     * @param \ultracart\v2\models\ListSegmentMembership[]|null $memberships memberships
     *
     * @return self
     */
    public function setMemberships($memberships)
    {
        $this->container['memberships'] = $memberships;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \ultracart\v2\models\Metric[]|null
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \ultracart\v2\models\Metric[]|null $metrics metrics
     *
     * @return self
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets properties_list
     *
     * @return \ultracart\v2\models\Property[]|null
     */
    public function getPropertiesList()
    {
        return $this->container['properties_list'];
    }

    /**
     * Sets properties_list
     *
     * @param \ultracart\v2\models\Property[]|null $properties_list properties_list
     *
     * @return self
     */
    public function setPropertiesList($properties_list)
    {
        $this->container['properties_list'] = $properties_list;

        return $this;
    }

    /**
     * Gets spam_complaint
     *
     * @return bool|null
     */
    public function getSpamComplaint()
    {
        return $this->container['spam_complaint'];
    }

    /**
     * Sets spam_complaint
     *
     * @param bool|null $spam_complaint spam_complaint
     *
     * @return self
     */
    public function setSpamComplaint($spam_complaint)
    {
        $this->container['spam_complaint'] = $spam_complaint;

        return $this;
    }

    /**
     * Gets spam_complaint_dts
     *
     * @return string|null
     */
    public function getSpamComplaintDts()
    {
        return $this->container['spam_complaint_dts'];
    }

    /**
     * Sets spam_complaint_dts
     *
     * @param string|null $spam_complaint_dts spam_complaint_dts
     *
     * @return self
     */
    public function setSpamComplaintDts($spam_complaint_dts)
    {
        $this->container['spam_complaint_dts'] = $spam_complaint_dts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


