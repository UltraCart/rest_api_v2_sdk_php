<?php
/**
 * ItemDigitalDelivery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemDigitalDelivery Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemDigitalDelivery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemDigitalDelivery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activation_code_description' => 'string',
        'activation_code_low_warning' => 'int',
        'activation_code_realtime_url' => 'string',
        'activation_code_shared_secret' => 'string',
        'activation_code_type' => 'string',
        'digital_items' => '\ultracart\v2\models\ItemDigitalItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activation_code_description' => null,
        'activation_code_low_warning' => 'int32',
        'activation_code_realtime_url' => null,
        'activation_code_shared_secret' => null,
        'activation_code_type' => null,
        'digital_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activation_code_description' => 'activation_code_description',
        'activation_code_low_warning' => 'activation_code_low_warning',
        'activation_code_realtime_url' => 'activation_code_realtime_url',
        'activation_code_shared_secret' => 'activation_code_shared_secret',
        'activation_code_type' => 'activation_code_type',
        'digital_items' => 'digital_items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activation_code_description' => 'setActivationCodeDescription',
        'activation_code_low_warning' => 'setActivationCodeLowWarning',
        'activation_code_realtime_url' => 'setActivationCodeRealtimeUrl',
        'activation_code_shared_secret' => 'setActivationCodeSharedSecret',
        'activation_code_type' => 'setActivationCodeType',
        'digital_items' => 'setDigitalItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activation_code_description' => 'getActivationCodeDescription',
        'activation_code_low_warning' => 'getActivationCodeLowWarning',
        'activation_code_realtime_url' => 'getActivationCodeRealtimeUrl',
        'activation_code_shared_secret' => 'getActivationCodeSharedSecret',
        'activation_code_type' => 'getActivationCodeType',
        'digital_items' => 'getDigitalItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activation_code_description'] = $data['activation_code_description'] ?? null;
        $this->container['activation_code_low_warning'] = $data['activation_code_low_warning'] ?? null;
        $this->container['activation_code_realtime_url'] = $data['activation_code_realtime_url'] ?? null;
        $this->container['activation_code_shared_secret'] = $data['activation_code_shared_secret'] ?? null;
        $this->container['activation_code_type'] = $data['activation_code_type'] ?? null;
        $this->container['digital_items'] = $data['digital_items'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['activation_code_description']) && (mb_strlen($this->container['activation_code_description']) > 50)) {
            $invalidProperties[] = "invalid value for 'activation_code_description', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['activation_code_realtime_url']) && (mb_strlen($this->container['activation_code_realtime_url']) > 350)) {
            $invalidProperties[] = "invalid value for 'activation_code_realtime_url', the character length must be smaller than or equal to 350.";
        }

        if (!is_null($this->container['activation_code_shared_secret']) && (mb_strlen($this->container['activation_code_shared_secret']) > 20)) {
            $invalidProperties[] = "invalid value for 'activation_code_shared_secret', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activation_code_description
     *
     * @return string|null
     */
    public function getActivationCodeDescription()
    {
        return $this->container['activation_code_description'];
    }

    /**
     * Sets activation_code_description
     *
     * @param string|null $activation_code_description Description of the activation code
     *
     * @return self
     */
    public function setActivationCodeDescription($activation_code_description)
    {
        if (!is_null($activation_code_description) && (mb_strlen($activation_code_description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $activation_code_description when calling ItemDigitalDelivery., must be smaller than or equal to 50.');
        }

        $this->container['activation_code_description'] = $activation_code_description;

        return $this;
    }

    /**
     * Gets activation_code_low_warning
     *
     * @return int|null
     */
    public function getActivationCodeLowWarning()
    {
        return $this->container['activation_code_low_warning'];
    }

    /**
     * Sets activation_code_low_warning
     *
     * @param int|null $activation_code_low_warning The number of activation codes whcih should generate a warning email
     *
     * @return self
     */
    public function setActivationCodeLowWarning($activation_code_low_warning)
    {
        $this->container['activation_code_low_warning'] = $activation_code_low_warning;

        return $this;
    }

    /**
     * Gets activation_code_realtime_url
     *
     * @return string|null
     */
    public function getActivationCodeRealtimeUrl()
    {
        return $this->container['activation_code_realtime_url'];
    }

    /**
     * Sets activation_code_realtime_url
     *
     * @param string|null $activation_code_realtime_url The URL to retrieve activation codes from in real-time
     *
     * @return self
     */
    public function setActivationCodeRealtimeUrl($activation_code_realtime_url)
    {
        if (!is_null($activation_code_realtime_url) && (mb_strlen($activation_code_realtime_url) > 350)) {
            throw new \InvalidArgumentException('invalid length for $activation_code_realtime_url when calling ItemDigitalDelivery., must be smaller than or equal to 350.');
        }

        $this->container['activation_code_realtime_url'] = $activation_code_realtime_url;

        return $this;
    }

    /**
     * Gets activation_code_shared_secret
     *
     * @return string|null
     */
    public function getActivationCodeSharedSecret()
    {
        return $this->container['activation_code_shared_secret'];
    }

    /**
     * Sets activation_code_shared_secret
     *
     * @param string|null $activation_code_shared_secret Shared secret used when communicating with the real-time URL
     *
     * @return self
     */
    public function setActivationCodeSharedSecret($activation_code_shared_secret)
    {
        if (!is_null($activation_code_shared_secret) && (mb_strlen($activation_code_shared_secret) > 20)) {
            throw new \InvalidArgumentException('invalid length for $activation_code_shared_secret when calling ItemDigitalDelivery., must be smaller than or equal to 20.');
        }

        $this->container['activation_code_shared_secret'] = $activation_code_shared_secret;

        return $this;
    }

    /**
     * Gets activation_code_type
     *
     * @return string|null
     */
    public function getActivationCodeType()
    {
        return $this->container['activation_code_type'];
    }

    /**
     * Sets activation_code_type
     *
     * @param string|null $activation_code_type Type of activation code
     *
     * @return self
     */
    public function setActivationCodeType($activation_code_type)
    {
        $this->container['activation_code_type'] = $activation_code_type;

        return $this;
    }

    /**
     * Gets digital_items
     *
     * @return \ultracart\v2\models\ItemDigitalItem[]|null
     */
    public function getDigitalItems()
    {
        return $this->container['digital_items'];
    }

    /**
     * Sets digital_items
     *
     * @param \ultracart\v2\models\ItemDigitalItem[]|null $digital_items Digital items that customer can download when this item is purchased
     *
     * @return self
     */
    public function setDigitalItems($digital_items)
    {
        $this->container['digital_items'] = $digital_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


