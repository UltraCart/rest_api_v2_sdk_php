<?php
/**
 * PaymentsThemeTransactionType
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsThemeTransactionType Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsThemeTransactionType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsThemeTransactionType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'credit_card_transaction_type' => 'string',
        'screen_branding_theme_oid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'credit_card_transaction_type' => null,
        'screen_branding_theme_oid' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'credit_card_transaction_type' => 'credit_card_transaction_type',
        'screen_branding_theme_oid' => 'screen_branding_theme_oid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'credit_card_transaction_type' => 'setCreditCardTransactionType',
        'screen_branding_theme_oid' => 'setScreenBrandingThemeOid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'credit_card_transaction_type' => 'getCreditCardTransactionType',
        'screen_branding_theme_oid' => 'getScreenBrandingThemeOid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CREDIT_CARD_TRANSACTION_TYPE_AND_CAPTURE = 'auth and capture';
    const CREDIT_CARD_TRANSACTION_TYPE_THEN_CAPTURE = 'auth then capture';
    const CREDIT_CARD_TRANSACTION_TYPE_ONLY = 'auth only';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreditCardTransactionTypeAllowableValues()
    {
        return [
            self::CREDIT_CARD_TRANSACTION_TYPE_AND_CAPTURE,
            self::CREDIT_CARD_TRANSACTION_TYPE_THEN_CAPTURE,
            self::CREDIT_CARD_TRANSACTION_TYPE_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['credit_card_transaction_type'] = isset($data['credit_card_transaction_type']) ? $data['credit_card_transaction_type'] : null;
        $this->container['screen_branding_theme_oid'] = isset($data['screen_branding_theme_oid']) ? $data['screen_branding_theme_oid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCreditCardTransactionTypeAllowableValues();
        if (!is_null($this->container['credit_card_transaction_type']) && !in_array($this->container['credit_card_transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'credit_card_transaction_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code External human readable identifier for a theme
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets credit_card_transaction_type
     *
     * @return string
     */
    public function getCreditCardTransactionType()
    {
        return $this->container['credit_card_transaction_type'];
    }

    /**
     * Sets credit_card_transaction_type
     *
     * @param string $credit_card_transaction_type The credit card transaction type for this theme
     *
     * @return $this
     */
    public function setCreditCardTransactionType($credit_card_transaction_type)
    {
        $allowedValues = $this->getCreditCardTransactionTypeAllowableValues();
        if (!is_null($credit_card_transaction_type) && !in_array($credit_card_transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'credit_card_transaction_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credit_card_transaction_type'] = $credit_card_transaction_type;

        return $this;
    }

    /**
     * Gets screen_branding_theme_oid
     *
     * @return int
     */
    public function getScreenBrandingThemeOid()
    {
        return $this->container['screen_branding_theme_oid'];
    }

    /**
     * Sets screen_branding_theme_oid
     *
     * @param int $screen_branding_theme_oid Internal identifier for a theme
     *
     * @return $this
     */
    public function setScreenBrandingThemeOid($screen_branding_theme_oid)
    {
        $this->container['screen_branding_theme_oid'] = $screen_branding_theme_oid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


