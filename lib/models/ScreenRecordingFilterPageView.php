<?php
/**
 * ScreenRecordingFilterPageView
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ScreenRecordingFilterPageView Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScreenRecordingFilterPageView implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScreenRecordingFilterPageView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'domain' => '\ultracart\v2\models\ScreenRecordingFilterStringSearch',
        'events' => '\ultracart\v2\models\ScreenRecordingFilterPageViewEvent[]',
        'params' => '\ultracart\v2\models\ScreenRecordingFilterPageViewParam[]',
        'referrer' => '\ultracart\v2\models\ScreenRecordingFilterStringSearch',
        'referrer_params' => '\ultracart\v2\models\ScreenRecordingFilterPageViewReferrerParam[]',
        'referrer_raw' => '\ultracart\v2\models\ScreenRecordingFilterStringSearch',
        'time_on_page' => '\ultracart\v2\models\ScreenRecordingFilterRangeInteger',
        'url' => '\ultracart\v2\models\ScreenRecordingFilterStringSearch'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'domain' => null,
        'events' => null,
        'params' => null,
        'referrer' => null,
        'referrer_params' => null,
        'referrer_raw' => null,
        'time_on_page' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'events' => 'events',
        'params' => 'params',
        'referrer' => 'referrer',
        'referrer_params' => 'referrer_params',
        'referrer_raw' => 'referrer_raw',
        'time_on_page' => 'time_on_page',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'events' => 'setEvents',
        'params' => 'setParams',
        'referrer' => 'setReferrer',
        'referrer_params' => 'setReferrerParams',
        'referrer_raw' => 'setReferrerRaw',
        'time_on_page' => 'setTimeOnPage',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'events' => 'getEvents',
        'params' => 'getParams',
        'referrer' => 'getReferrer',
        'referrer_params' => 'getReferrerParams',
        'referrer_raw' => 'getReferrerRaw',
        'time_on_page' => 'getTimeOnPage',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['referrer'] = isset($data['referrer']) ? $data['referrer'] : null;
        $this->container['referrer_params'] = isset($data['referrer_params']) ? $data['referrer_params'] : null;
        $this->container['referrer_raw'] = isset($data['referrer_raw']) ? $data['referrer_raw'] : null;
        $this->container['time_on_page'] = isset($data['time_on_page']) ? $data['time_on_page'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterStringSearch
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterStringSearch $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterPageViewEvent[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterPageViewEvent[] $events events
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterPageViewParam[]
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterPageViewParam[] $params params
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterStringSearch
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterStringSearch $referrer referrer
     *
     * @return $this
     */
    public function setReferrer($referrer)
    {
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets referrer_params
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterPageViewReferrerParam[]
     */
    public function getReferrerParams()
    {
        return $this->container['referrer_params'];
    }

    /**
     * Sets referrer_params
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterPageViewReferrerParam[] $referrer_params referrer_params
     *
     * @return $this
     */
    public function setReferrerParams($referrer_params)
    {
        $this->container['referrer_params'] = $referrer_params;

        return $this;
    }

    /**
     * Gets referrer_raw
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterStringSearch
     */
    public function getReferrerRaw()
    {
        return $this->container['referrer_raw'];
    }

    /**
     * Sets referrer_raw
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterStringSearch $referrer_raw referrer_raw
     *
     * @return $this
     */
    public function setReferrerRaw($referrer_raw)
    {
        $this->container['referrer_raw'] = $referrer_raw;

        return $this;
    }

    /**
     * Gets time_on_page
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterRangeInteger
     */
    public function getTimeOnPage()
    {
        return $this->container['time_on_page'];
    }

    /**
     * Sets time_on_page
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterRangeInteger $time_on_page time_on_page
     *
     * @return $this
     */
    public function setTimeOnPage($time_on_page)
    {
        $this->container['time_on_page'] = $time_on_page;

        return $this;
    }

    /**
     * Gets url
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterStringSearch
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterStringSearch $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


