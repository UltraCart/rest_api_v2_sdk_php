<?php
/**
 * CartSettingsPayment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CartSettingsPayment Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartSettingsPayment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CartSettingsPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amazon' => '\ultracart\v2\models\CartSettingsPaymentAmazon',
        'credit_card' => '\ultracart\v2\models\CartSettingsPaymentCreditCard',
        'need_payment' => 'bool',
        'paypal' => '\ultracart\v2\models\CartSettingsPaymentPayPal',
        'supports_amazon' => 'bool',
        'supports_check' => 'bool',
        'supports_cod' => 'bool',
        'supports_credit_card' => 'bool',
        'supports_money_order' => 'bool',
        'supports_paypal' => 'bool',
        'supports_purchase_order' => 'bool',
        'supports_quote_request' => 'bool',
        'supports_wire_transfer' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amazon' => null,
        'credit_card' => null,
        'need_payment' => null,
        'paypal' => null,
        'supports_amazon' => null,
        'supports_check' => null,
        'supports_cod' => null,
        'supports_credit_card' => null,
        'supports_money_order' => null,
        'supports_paypal' => null,
        'supports_purchase_order' => null,
        'supports_quote_request' => null,
        'supports_wire_transfer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amazon' => 'amazon',
        'credit_card' => 'credit_card',
        'need_payment' => 'need_payment',
        'paypal' => 'paypal',
        'supports_amazon' => 'supports_amazon',
        'supports_check' => 'supports_check',
        'supports_cod' => 'supports_cod',
        'supports_credit_card' => 'supports_credit_card',
        'supports_money_order' => 'supports_money_order',
        'supports_paypal' => 'supports_paypal',
        'supports_purchase_order' => 'supports_purchase_order',
        'supports_quote_request' => 'supports_quote_request',
        'supports_wire_transfer' => 'supports_wire_transfer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amazon' => 'setAmazon',
        'credit_card' => 'setCreditCard',
        'need_payment' => 'setNeedPayment',
        'paypal' => 'setPaypal',
        'supports_amazon' => 'setSupportsAmazon',
        'supports_check' => 'setSupportsCheck',
        'supports_cod' => 'setSupportsCod',
        'supports_credit_card' => 'setSupportsCreditCard',
        'supports_money_order' => 'setSupportsMoneyOrder',
        'supports_paypal' => 'setSupportsPaypal',
        'supports_purchase_order' => 'setSupportsPurchaseOrder',
        'supports_quote_request' => 'setSupportsQuoteRequest',
        'supports_wire_transfer' => 'setSupportsWireTransfer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amazon' => 'getAmazon',
        'credit_card' => 'getCreditCard',
        'need_payment' => 'getNeedPayment',
        'paypal' => 'getPaypal',
        'supports_amazon' => 'getSupportsAmazon',
        'supports_check' => 'getSupportsCheck',
        'supports_cod' => 'getSupportsCod',
        'supports_credit_card' => 'getSupportsCreditCard',
        'supports_money_order' => 'getSupportsMoneyOrder',
        'supports_paypal' => 'getSupportsPaypal',
        'supports_purchase_order' => 'getSupportsPurchaseOrder',
        'supports_quote_request' => 'getSupportsQuoteRequest',
        'supports_wire_transfer' => 'getSupportsWireTransfer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amazon'] = $data['amazon'] ?? null;
        $this->container['credit_card'] = $data['credit_card'] ?? null;
        $this->container['need_payment'] = $data['need_payment'] ?? null;
        $this->container['paypal'] = $data['paypal'] ?? null;
        $this->container['supports_amazon'] = $data['supports_amazon'] ?? null;
        $this->container['supports_check'] = $data['supports_check'] ?? null;
        $this->container['supports_cod'] = $data['supports_cod'] ?? null;
        $this->container['supports_credit_card'] = $data['supports_credit_card'] ?? null;
        $this->container['supports_money_order'] = $data['supports_money_order'] ?? null;
        $this->container['supports_paypal'] = $data['supports_paypal'] ?? null;
        $this->container['supports_purchase_order'] = $data['supports_purchase_order'] ?? null;
        $this->container['supports_quote_request'] = $data['supports_quote_request'] ?? null;
        $this->container['supports_wire_transfer'] = $data['supports_wire_transfer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amazon
     *
     * @return \ultracart\v2\models\CartSettingsPaymentAmazon|null
     */
    public function getAmazon()
    {
        return $this->container['amazon'];
    }

    /**
     * Sets amazon
     *
     * @param \ultracart\v2\models\CartSettingsPaymentAmazon|null $amazon amazon
     *
     * @return self
     */
    public function setAmazon($amazon)
    {
        $this->container['amazon'] = $amazon;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return \ultracart\v2\models\CartSettingsPaymentCreditCard|null
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param \ultracart\v2\models\CartSettingsPaymentCreditCard|null $credit_card credit_card
     *
     * @return self
     */
    public function setCreditCard($credit_card)
    {
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets need_payment
     *
     * @return bool|null
     */
    public function getNeedPayment()
    {
        return $this->container['need_payment'];
    }

    /**
     * Sets need_payment
     *
     * @param bool|null $need_payment True if this card requires a payment from the customer
     *
     * @return self
     */
    public function setNeedPayment($need_payment)
    {
        $this->container['need_payment'] = $need_payment;

        return $this;
    }

    /**
     * Gets paypal
     *
     * @return \ultracart\v2\models\CartSettingsPaymentPayPal|null
     */
    public function getPaypal()
    {
        return $this->container['paypal'];
    }

    /**
     * Sets paypal
     *
     * @param \ultracart\v2\models\CartSettingsPaymentPayPal|null $paypal paypal
     *
     * @return self
     */
    public function setPaypal($paypal)
    {
        $this->container['paypal'] = $paypal;

        return $this;
    }

    /**
     * Gets supports_amazon
     *
     * @return bool|null
     */
    public function getSupportsAmazon()
    {
        return $this->container['supports_amazon'];
    }

    /**
     * Sets supports_amazon
     *
     * @param bool|null $supports_amazon True if Amazon payments are available on this order
     *
     * @return self
     */
    public function setSupportsAmazon($supports_amazon)
    {
        $this->container['supports_amazon'] = $supports_amazon;

        return $this;
    }

    /**
     * Gets supports_check
     *
     * @return bool|null
     */
    public function getSupportsCheck()
    {
        return $this->container['supports_check'];
    }

    /**
     * Sets supports_check
     *
     * @param bool|null $supports_check True if check payments are available on this order
     *
     * @return self
     */
    public function setSupportsCheck($supports_check)
    {
        $this->container['supports_check'] = $supports_check;

        return $this;
    }

    /**
     * Gets supports_cod
     *
     * @return bool|null
     */
    public function getSupportsCod()
    {
        return $this->container['supports_cod'];
    }

    /**
     * Sets supports_cod
     *
     * @param bool|null $supports_cod True if COD payments are available on this order
     *
     * @return self
     */
    public function setSupportsCod($supports_cod)
    {
        $this->container['supports_cod'] = $supports_cod;

        return $this;
    }

    /**
     * Gets supports_credit_card
     *
     * @return bool|null
     */
    public function getSupportsCreditCard()
    {
        return $this->container['supports_credit_card'];
    }

    /**
     * Sets supports_credit_card
     *
     * @param bool|null $supports_credit_card True if credit card payments are available on this order
     *
     * @return self
     */
    public function setSupportsCreditCard($supports_credit_card)
    {
        $this->container['supports_credit_card'] = $supports_credit_card;

        return $this;
    }

    /**
     * Gets supports_money_order
     *
     * @return bool|null
     */
    public function getSupportsMoneyOrder()
    {
        return $this->container['supports_money_order'];
    }

    /**
     * Sets supports_money_order
     *
     * @param bool|null $supports_money_order True if money order payments are available on this order
     *
     * @return self
     */
    public function setSupportsMoneyOrder($supports_money_order)
    {
        $this->container['supports_money_order'] = $supports_money_order;

        return $this;
    }

    /**
     * Gets supports_paypal
     *
     * @return bool|null
     */
    public function getSupportsPaypal()
    {
        return $this->container['supports_paypal'];
    }

    /**
     * Sets supports_paypal
     *
     * @param bool|null $supports_paypal True if PayPal payments are available on this order
     *
     * @return self
     */
    public function setSupportsPaypal($supports_paypal)
    {
        $this->container['supports_paypal'] = $supports_paypal;

        return $this;
    }

    /**
     * Gets supports_purchase_order
     *
     * @return bool|null
     */
    public function getSupportsPurchaseOrder()
    {
        return $this->container['supports_purchase_order'];
    }

    /**
     * Sets supports_purchase_order
     *
     * @param bool|null $supports_purchase_order True if purchase order payments are available on this order
     *
     * @return self
     */
    public function setSupportsPurchaseOrder($supports_purchase_order)
    {
        $this->container['supports_purchase_order'] = $supports_purchase_order;

        return $this;
    }

    /**
     * Gets supports_quote_request
     *
     * @return bool|null
     */
    public function getSupportsQuoteRequest()
    {
        return $this->container['supports_quote_request'];
    }

    /**
     * Sets supports_quote_request
     *
     * @param bool|null $supports_quote_request True if quote requests payments are available on this order
     *
     * @return self
     */
    public function setSupportsQuoteRequest($supports_quote_request)
    {
        $this->container['supports_quote_request'] = $supports_quote_request;

        return $this;
    }

    /**
     * Gets supports_wire_transfer
     *
     * @return bool|null
     */
    public function getSupportsWireTransfer()
    {
        return $this->container['supports_wire_transfer'];
    }

    /**
     * Sets supports_wire_transfer
     *
     * @param bool|null $supports_wire_transfer True if wire transfer payments are available on this order
     *
     * @return self
     */
    public function setSupportsWireTransfer($supports_wire_transfer)
    {
        $this->container['supports_wire_transfer'] = $supports_wire_transfer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


