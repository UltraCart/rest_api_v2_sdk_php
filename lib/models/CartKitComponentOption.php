<?php
/**
 * CartKitComponentOption
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CartKitComponentOption Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartKitComponentOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CartKitComponentOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cost_if_specified' => '\ultracart\v2\models\Currency',
        'cost_per_letter' => '\ultracart\v2\models\Currency',
        'cost_per_line' => '\ultracart\v2\models\Currency',
        'ignore_if_default' => 'bool',
        'item_id' => 'string',
        'item_oid' => 'int',
        'label' => 'string',
        'name' => 'string',
        'one_time_fee' => 'bool',
        'option_oid' => 'int',
        'required' => 'bool',
        'selected_value' => 'string',
        'type' => 'string',
        'values' => '\ultracart\v2\models\CartItemOptionValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cost_if_specified' => null,
        'cost_per_letter' => null,
        'cost_per_line' => null,
        'ignore_if_default' => null,
        'item_id' => null,
        'item_oid' => 'int32',
        'label' => null,
        'name' => null,
        'one_time_fee' => null,
        'option_oid' => 'int32',
        'required' => null,
        'selected_value' => null,
        'type' => null,
        'values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cost_if_specified' => 'cost_if_specified',
        'cost_per_letter' => 'cost_per_letter',
        'cost_per_line' => 'cost_per_line',
        'ignore_if_default' => 'ignore_if_default',
        'item_id' => 'item_id',
        'item_oid' => 'item_oid',
        'label' => 'label',
        'name' => 'name',
        'one_time_fee' => 'one_time_fee',
        'option_oid' => 'option_oid',
        'required' => 'required',
        'selected_value' => 'selected_value',
        'type' => 'type',
        'values' => 'values'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cost_if_specified' => 'setCostIfSpecified',
        'cost_per_letter' => 'setCostPerLetter',
        'cost_per_line' => 'setCostPerLine',
        'ignore_if_default' => 'setIgnoreIfDefault',
        'item_id' => 'setItemId',
        'item_oid' => 'setItemOid',
        'label' => 'setLabel',
        'name' => 'setName',
        'one_time_fee' => 'setOneTimeFee',
        'option_oid' => 'setOptionOid',
        'required' => 'setRequired',
        'selected_value' => 'setSelectedValue',
        'type' => 'setType',
        'values' => 'setValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cost_if_specified' => 'getCostIfSpecified',
        'cost_per_letter' => 'getCostPerLetter',
        'cost_per_line' => 'getCostPerLine',
        'ignore_if_default' => 'getIgnoreIfDefault',
        'item_id' => 'getItemId',
        'item_oid' => 'getItemOid',
        'label' => 'getLabel',
        'name' => 'getName',
        'one_time_fee' => 'getOneTimeFee',
        'option_oid' => 'getOptionOid',
        'required' => 'getRequired',
        'selected_value' => 'getSelectedValue',
        'type' => 'getType',
        'values' => 'getValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_SINGLE = 'single';
    public const TYPE_MULTILINE = 'multiline';
    public const TYPE_DROPDOWN = 'dropdown';
    public const TYPE_HIDDEN = 'hidden';
    public const TYPE_RADIO = 'radio';
    public const TYPE_FIXED = 'fixed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SINGLE,
            self::TYPE_MULTILINE,
            self::TYPE_DROPDOWN,
            self::TYPE_HIDDEN,
            self::TYPE_RADIO,
            self::TYPE_FIXED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cost_if_specified'] = $data['cost_if_specified'] ?? null;
        $this->container['cost_per_letter'] = $data['cost_per_letter'] ?? null;
        $this->container['cost_per_line'] = $data['cost_per_line'] ?? null;
        $this->container['ignore_if_default'] = $data['ignore_if_default'] ?? null;
        $this->container['item_id'] = $data['item_id'] ?? null;
        $this->container['item_oid'] = $data['item_oid'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['one_time_fee'] = $data['one_time_fee'] ?? null;
        $this->container['option_oid'] = $data['option_oid'] ?? null;
        $this->container['required'] = $data['required'] ?? null;
        $this->container['selected_value'] = $data['selected_value'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['values'] = $data['values'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['selected_value']) && (mb_strlen($this->container['selected_value']) > 1024)) {
            $invalidProperties[] = "invalid value for 'selected_value', the character length must be smaller than or equal to 1024.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cost_if_specified
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getCostIfSpecified()
    {
        return $this->container['cost_if_specified'];
    }

    /**
     * Sets cost_if_specified
     *
     * @param \ultracart\v2\models\Currency|null $cost_if_specified cost_if_specified
     *
     * @return self
     */
    public function setCostIfSpecified($cost_if_specified)
    {
        $this->container['cost_if_specified'] = $cost_if_specified;

        return $this;
    }

    /**
     * Gets cost_per_letter
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getCostPerLetter()
    {
        return $this->container['cost_per_letter'];
    }

    /**
     * Sets cost_per_letter
     *
     * @param \ultracart\v2\models\Currency|null $cost_per_letter cost_per_letter
     *
     * @return self
     */
    public function setCostPerLetter($cost_per_letter)
    {
        $this->container['cost_per_letter'] = $cost_per_letter;

        return $this;
    }

    /**
     * Gets cost_per_line
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getCostPerLine()
    {
        return $this->container['cost_per_line'];
    }

    /**
     * Sets cost_per_line
     *
     * @param \ultracart\v2\models\Currency|null $cost_per_line cost_per_line
     *
     * @return self
     */
    public function setCostPerLine($cost_per_line)
    {
        $this->container['cost_per_line'] = $cost_per_line;

        return $this;
    }

    /**
     * Gets ignore_if_default
     *
     * @return bool|null
     */
    public function getIgnoreIfDefault()
    {
        return $this->container['ignore_if_default'];
    }

    /**
     * Sets ignore_if_default
     *
     * @param bool|null $ignore_if_default True if the default answer is ignored
     *
     * @return self
     */
    public function setIgnoreIfDefault($ignore_if_default)
    {
        $this->container['ignore_if_default'] = $ignore_if_default;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string|null $item_id Kit component item id
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_oid
     *
     * @return int|null
     */
    public function getItemOid()
    {
        return $this->container['item_oid'];
    }

    /**
     * Sets item_oid
     *
     * @param int|null $item_oid Unique identifier for the kit component item
     *
     * @return self
     */
    public function setItemOid($item_oid)
    {
        $this->container['item_oid'] = $item_oid;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Display label for the option
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the option
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets one_time_fee
     *
     * @return bool|null
     */
    public function getOneTimeFee()
    {
        return $this->container['one_time_fee'];
    }

    /**
     * Sets one_time_fee
     *
     * @param bool|null $one_time_fee Charge the fee a single time instead of multiplying by the quantity
     *
     * @return self
     */
    public function setOneTimeFee($one_time_fee)
    {
        $this->container['one_time_fee'] = $one_time_fee;

        return $this;
    }

    /**
     * Gets option_oid
     *
     * @return int|null
     */
    public function getOptionOid()
    {
        return $this->container['option_oid'];
    }

    /**
     * Sets option_oid
     *
     * @param int|null $option_oid Unique identifier for the option
     *
     * @return self
     */
    public function setOptionOid($option_oid)
    {
        $this->container['option_oid'] = $option_oid;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required True if the customer is required to select a value
     *
     * @return self
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets selected_value
     *
     * @return string|null
     */
    public function getSelectedValue()
    {
        return $this->container['selected_value'];
    }

    /**
     * Sets selected_value
     *
     * @param string|null $selected_value The value of the option specified by the customer
     *
     * @return self
     */
    public function setSelectedValue($selected_value)
    {
        if (!is_null($selected_value) && (mb_strlen($selected_value) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $selected_value when calling CartKitComponentOption., must be smaller than or equal to 1024.');
        }

        $this->container['selected_value'] = $selected_value;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of option
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \ultracart\v2\models\CartItemOptionValue[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \ultracart\v2\models\CartItemOptionValue[]|null $values Values that the customer can select from for radio or select type options
     *
     * @return self
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


