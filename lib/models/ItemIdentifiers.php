<?php
/**
 * ItemIdentifiers
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemIdentifiers Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemIdentifiers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemIdentifiers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'barcode' => 'string',
        'manufacturer_name' => 'string',
        'manufacturer_sku' => 'string',
        'unspsc' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'barcode' => null,
        'manufacturer_name' => null,
        'manufacturer_sku' => null,
        'unspsc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'barcode' => 'barcode',
        'manufacturer_name' => 'manufacturer_name',
        'manufacturer_sku' => 'manufacturer_sku',
        'unspsc' => 'unspsc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'barcode' => 'setBarcode',
        'manufacturer_name' => 'setManufacturerName',
        'manufacturer_sku' => 'setManufacturerSku',
        'unspsc' => 'setUnspsc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'barcode' => 'getBarcode',
        'manufacturer_name' => 'getManufacturerName',
        'manufacturer_sku' => 'getManufacturerSku',
        'unspsc' => 'getUnspsc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['barcode'] = $data['barcode'] ?? null;
        $this->container['manufacturer_name'] = $data['manufacturer_name'] ?? null;
        $this->container['manufacturer_sku'] = $data['manufacturer_sku'] ?? null;
        $this->container['unspsc'] = $data['unspsc'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['barcode']) && (mb_strlen($this->container['barcode']) > 30)) {
            $invalidProperties[] = "invalid value for 'barcode', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['manufacturer_name']) && (mb_strlen($this->container['manufacturer_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'manufacturer_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['manufacturer_sku']) && (mb_strlen($this->container['manufacturer_sku']) > 25)) {
            $invalidProperties[] = "invalid value for 'manufacturer_sku', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['unspsc']) && (mb_strlen($this->container['unspsc']) > 20)) {
            $invalidProperties[] = "invalid value for 'unspsc', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode Barcode
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (!is_null($barcode) && (mb_strlen($barcode) > 30)) {
            throw new \InvalidArgumentException('invalid length for $barcode when calling ItemIdentifiers., must be smaller than or equal to 30.');
        }

        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets manufacturer_name
     *
     * @return string|null
     */
    public function getManufacturerName()
    {
        return $this->container['manufacturer_name'];
    }

    /**
     * Sets manufacturer_name
     *
     * @param string|null $manufacturer_name Manufacturer Name
     *
     * @return self
     */
    public function setManufacturerName($manufacturer_name)
    {
        if (!is_null($manufacturer_name) && (mb_strlen($manufacturer_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_name when calling ItemIdentifiers., must be smaller than or equal to 50.');
        }

        $this->container['manufacturer_name'] = $manufacturer_name;

        return $this;
    }

    /**
     * Gets manufacturer_sku
     *
     * @return string|null
     */
    public function getManufacturerSku()
    {
        return $this->container['manufacturer_sku'];
    }

    /**
     * Sets manufacturer_sku
     *
     * @param string|null $manufacturer_sku Manufacturer SKU
     *
     * @return self
     */
    public function setManufacturerSku($manufacturer_sku)
    {
        if (!is_null($manufacturer_sku) && (mb_strlen($manufacturer_sku) > 25)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_sku when calling ItemIdentifiers., must be smaller than or equal to 25.');
        }

        $this->container['manufacturer_sku'] = $manufacturer_sku;

        return $this;
    }

    /**
     * Gets unspsc
     *
     * @return string|null
     */
    public function getUnspsc()
    {
        return $this->container['unspsc'];
    }

    /**
     * Sets unspsc
     *
     * @param string|null $unspsc UNSPSC
     *
     * @return self
     */
    public function setUnspsc($unspsc)
    {
        if (!is_null($unspsc) && (mb_strlen($unspsc) > 20)) {
            throw new \InvalidArgumentException('invalid length for $unspsc when calling ItemIdentifiers., must be smaller than or equal to 20.');
        }

        $this->container['unspsc'] = $unspsc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


