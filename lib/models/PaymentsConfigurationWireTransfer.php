<?php
/**
 * PaymentsConfigurationWireTransfer
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsConfigurationWireTransfer Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsConfigurationWireTransfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsConfigurationWireTransfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accept_wire_transfer' => 'bool',
        'account_number' => 'string',
        'accounting_code' => 'string',
        'bank_address' => 'string',
        'deposit_to_account' => 'string',
        'intermediate_routing_number' => 'string',
        'restrictions' => '\ultracart\v2\models\PaymentsConfigurationRestrictions',
        'routing_number' => 'string',
        'surcharge_accounting_code' => 'string',
        'surcharge_fee' => 'float',
        'surcharge_percentage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accept_wire_transfer' => null,
        'account_number' => null,
        'accounting_code' => null,
        'bank_address' => null,
        'deposit_to_account' => null,
        'intermediate_routing_number' => null,
        'restrictions' => null,
        'routing_number' => null,
        'surcharge_accounting_code' => null,
        'surcharge_fee' => null,
        'surcharge_percentage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accept_wire_transfer' => 'accept_wire_transfer',
        'account_number' => 'account_number',
        'accounting_code' => 'accounting_code',
        'bank_address' => 'bank_address',
        'deposit_to_account' => 'deposit_to_account',
        'intermediate_routing_number' => 'intermediate_routing_number',
        'restrictions' => 'restrictions',
        'routing_number' => 'routing_number',
        'surcharge_accounting_code' => 'surcharge_accounting_code',
        'surcharge_fee' => 'surcharge_fee',
        'surcharge_percentage' => 'surcharge_percentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accept_wire_transfer' => 'setAcceptWireTransfer',
        'account_number' => 'setAccountNumber',
        'accounting_code' => 'setAccountingCode',
        'bank_address' => 'setBankAddress',
        'deposit_to_account' => 'setDepositToAccount',
        'intermediate_routing_number' => 'setIntermediateRoutingNumber',
        'restrictions' => 'setRestrictions',
        'routing_number' => 'setRoutingNumber',
        'surcharge_accounting_code' => 'setSurchargeAccountingCode',
        'surcharge_fee' => 'setSurchargeFee',
        'surcharge_percentage' => 'setSurchargePercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accept_wire_transfer' => 'getAcceptWireTransfer',
        'account_number' => 'getAccountNumber',
        'accounting_code' => 'getAccountingCode',
        'bank_address' => 'getBankAddress',
        'deposit_to_account' => 'getDepositToAccount',
        'intermediate_routing_number' => 'getIntermediateRoutingNumber',
        'restrictions' => 'getRestrictions',
        'routing_number' => 'getRoutingNumber',
        'surcharge_accounting_code' => 'getSurchargeAccountingCode',
        'surcharge_fee' => 'getSurchargeFee',
        'surcharge_percentage' => 'getSurchargePercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accept_wire_transfer'] = isset($data['accept_wire_transfer']) ? $data['accept_wire_transfer'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['accounting_code'] = isset($data['accounting_code']) ? $data['accounting_code'] : null;
        $this->container['bank_address'] = isset($data['bank_address']) ? $data['bank_address'] : null;
        $this->container['deposit_to_account'] = isset($data['deposit_to_account']) ? $data['deposit_to_account'] : null;
        $this->container['intermediate_routing_number'] = isset($data['intermediate_routing_number']) ? $data['intermediate_routing_number'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
        $this->container['routing_number'] = isset($data['routing_number']) ? $data['routing_number'] : null;
        $this->container['surcharge_accounting_code'] = isset($data['surcharge_accounting_code']) ? $data['surcharge_accounting_code'] : null;
        $this->container['surcharge_fee'] = isset($data['surcharge_fee']) ? $data['surcharge_fee'] : null;
        $this->container['surcharge_percentage'] = isset($data['surcharge_percentage']) ? $data['surcharge_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accept_wire_transfer
     *
     * @return bool
     */
    public function getAcceptWireTransfer()
    {
        return $this->container['accept_wire_transfer'];
    }

    /**
     * Sets accept_wire_transfer
     *
     * @param bool $accept_wire_transfer Master flag indicating this merchant accepts wire transfers
     *
     * @return $this
     */
    public function setAcceptWireTransfer($accept_wire_transfer)
    {
        $this->container['accept_wire_transfer'] = $accept_wire_transfer;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets accounting_code
     *
     * @return string
     */
    public function getAccountingCode()
    {
        return $this->container['accounting_code'];
    }

    /**
     * Sets accounting_code
     *
     * @param string $accounting_code Optional Quickbooks accounting code
     *
     * @return $this
     */
    public function setAccountingCode($accounting_code)
    {
        $this->container['accounting_code'] = $accounting_code;

        return $this;
    }

    /**
     * Gets bank_address
     *
     * @return string
     */
    public function getBankAddress()
    {
        return $this->container['bank_address'];
    }

    /**
     * Sets bank_address
     *
     * @param string $bank_address Bank address
     *
     * @return $this
     */
    public function setBankAddress($bank_address)
    {
        $this->container['bank_address'] = $bank_address;

        return $this;
    }

    /**
     * Gets deposit_to_account
     *
     * @return string
     */
    public function getDepositToAccount()
    {
        return $this->container['deposit_to_account'];
    }

    /**
     * Sets deposit_to_account
     *
     * @param string $deposit_to_account Optional Quickbooks deposit to account
     *
     * @return $this
     */
    public function setDepositToAccount($deposit_to_account)
    {
        $this->container['deposit_to_account'] = $deposit_to_account;

        return $this;
    }

    /**
     * Gets intermediate_routing_number
     *
     * @return string
     */
    public function getIntermediateRoutingNumber()
    {
        return $this->container['intermediate_routing_number'];
    }

    /**
     * Sets intermediate_routing_number
     *
     * @param string $intermediate_routing_number Intermediate routing number
     *
     * @return $this
     */
    public function setIntermediateRoutingNumber($intermediate_routing_number)
    {
        $this->container['intermediate_routing_number'] = $intermediate_routing_number;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \ultracart\v2\models\PaymentsConfigurationRestrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \ultracart\v2\models\PaymentsConfigurationRestrictions $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string $routing_number Routing number
     *
     * @return $this
     */
    public function setRoutingNumber($routing_number)
    {
        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets surcharge_accounting_code
     *
     * @return string
     */
    public function getSurchargeAccountingCode()
    {
        return $this->container['surcharge_accounting_code'];
    }

    /**
     * Sets surcharge_accounting_code
     *
     * @param string $surcharge_accounting_code If a surcharge is present and this merchant is integrated with Quickbooks, this is the accounting code for the surcharge amount
     *
     * @return $this
     */
    public function setSurchargeAccountingCode($surcharge_accounting_code)
    {
        $this->container['surcharge_accounting_code'] = $surcharge_accounting_code;

        return $this;
    }

    /**
     * Gets surcharge_fee
     *
     * @return float
     */
    public function getSurchargeFee()
    {
        return $this->container['surcharge_fee'];
    }

    /**
     * Sets surcharge_fee
     *
     * @param float $surcharge_fee surcharge_fee
     *
     * @return $this
     */
    public function setSurchargeFee($surcharge_fee)
    {
        $this->container['surcharge_fee'] = $surcharge_fee;

        return $this;
    }

    /**
     * Gets surcharge_percentage
     *
     * @return float
     */
    public function getSurchargePercentage()
    {
        return $this->container['surcharge_percentage'];
    }

    /**
     * Sets surcharge_percentage
     *
     * @param float $surcharge_percentage surcharge_percentage
     *
     * @return $this
     */
    public function setSurchargePercentage($surcharge_percentage)
    {
        $this->container['surcharge_percentage'] = $surcharge_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


