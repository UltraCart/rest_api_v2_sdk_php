<?php
/**
 * OrderBuysafe
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderBuysafe Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderBuysafe implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderBuysafe';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'buysafe_bond_available' => 'bool',
        'buysafe_bond_cost' => '\ultracart\v2\models\Currency',
        'buysafe_bond_free' => 'bool',
        'buysafe_bond_refunded' => '\ultracart\v2\models\Currency',
        'buysafe_bond_wanted' => 'bool',
        'buysafe_shopping_cart_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'buysafe_bond_available' => null,
        'buysafe_bond_cost' => null,
        'buysafe_bond_free' => null,
        'buysafe_bond_refunded' => null,
        'buysafe_bond_wanted' => null,
        'buysafe_shopping_cart_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buysafe_bond_available' => 'buysafe_bond_available',
        'buysafe_bond_cost' => 'buysafe_bond_cost',
        'buysafe_bond_free' => 'buysafe_bond_free',
        'buysafe_bond_refunded' => 'buysafe_bond_refunded',
        'buysafe_bond_wanted' => 'buysafe_bond_wanted',
        'buysafe_shopping_cart_id' => 'buysafe_shopping_cart_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buysafe_bond_available' => 'setBuysafeBondAvailable',
        'buysafe_bond_cost' => 'setBuysafeBondCost',
        'buysafe_bond_free' => 'setBuysafeBondFree',
        'buysafe_bond_refunded' => 'setBuysafeBondRefunded',
        'buysafe_bond_wanted' => 'setBuysafeBondWanted',
        'buysafe_shopping_cart_id' => 'setBuysafeShoppingCartId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buysafe_bond_available' => 'getBuysafeBondAvailable',
        'buysafe_bond_cost' => 'getBuysafeBondCost',
        'buysafe_bond_free' => 'getBuysafeBondFree',
        'buysafe_bond_refunded' => 'getBuysafeBondRefunded',
        'buysafe_bond_wanted' => 'getBuysafeBondWanted',
        'buysafe_shopping_cart_id' => 'getBuysafeShoppingCartId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buysafe_bond_available'] = $data['buysafe_bond_available'] ?? null;
        $this->container['buysafe_bond_cost'] = $data['buysafe_bond_cost'] ?? null;
        $this->container['buysafe_bond_free'] = $data['buysafe_bond_free'] ?? null;
        $this->container['buysafe_bond_refunded'] = $data['buysafe_bond_refunded'] ?? null;
        $this->container['buysafe_bond_wanted'] = $data['buysafe_bond_wanted'] ?? null;
        $this->container['buysafe_shopping_cart_id'] = $data['buysafe_shopping_cart_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buysafe_bond_available
     *
     * @return bool|null
     */
    public function getBuysafeBondAvailable()
    {
        return $this->container['buysafe_bond_available'];
    }

    /**
     * Sets buysafe_bond_available
     *
     * @param bool|null $buysafe_bond_available True if a buySAFE bond was available for purchase on this order
     *
     * @return self
     */
    public function setBuysafeBondAvailable($buysafe_bond_available)
    {
        $this->container['buysafe_bond_available'] = $buysafe_bond_available;

        return $this;
    }

    /**
     * Gets buysafe_bond_cost
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getBuysafeBondCost()
    {
        return $this->container['buysafe_bond_cost'];
    }

    /**
     * Sets buysafe_bond_cost
     *
     * @param \ultracart\v2\models\Currency|null $buysafe_bond_cost buysafe_bond_cost
     *
     * @return self
     */
    public function setBuysafeBondCost($buysafe_bond_cost)
    {
        $this->container['buysafe_bond_cost'] = $buysafe_bond_cost;

        return $this;
    }

    /**
     * Gets buysafe_bond_free
     *
     * @return bool|null
     */
    public function getBuysafeBondFree()
    {
        return $this->container['buysafe_bond_free'];
    }

    /**
     * Sets buysafe_bond_free
     *
     * @param bool|null $buysafe_bond_free True if the buySAFE bond was free for this order
     *
     * @return self
     */
    public function setBuysafeBondFree($buysafe_bond_free)
    {
        $this->container['buysafe_bond_free'] = $buysafe_bond_free;

        return $this;
    }

    /**
     * Gets buysafe_bond_refunded
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getBuysafeBondRefunded()
    {
        return $this->container['buysafe_bond_refunded'];
    }

    /**
     * Sets buysafe_bond_refunded
     *
     * @param \ultracart\v2\models\Currency|null $buysafe_bond_refunded buysafe_bond_refunded
     *
     * @return self
     */
    public function setBuysafeBondRefunded($buysafe_bond_refunded)
    {
        $this->container['buysafe_bond_refunded'] = $buysafe_bond_refunded;

        return $this;
    }

    /**
     * Gets buysafe_bond_wanted
     *
     * @return bool|null
     */
    public function getBuysafeBondWanted()
    {
        return $this->container['buysafe_bond_wanted'];
    }

    /**
     * Sets buysafe_bond_wanted
     *
     * @param bool|null $buysafe_bond_wanted True if the buySAFE bond was wanted by the customer
     *
     * @return self
     */
    public function setBuysafeBondWanted($buysafe_bond_wanted)
    {
        $this->container['buysafe_bond_wanted'] = $buysafe_bond_wanted;

        return $this;
    }

    /**
     * Gets buysafe_shopping_cart_id
     *
     * @return string|null
     */
    public function getBuysafeShoppingCartId()
    {
        return $this->container['buysafe_shopping_cart_id'];
    }

    /**
     * Sets buysafe_shopping_cart_id
     *
     * @param string|null $buysafe_shopping_cart_id Shopping cart ID associated with the buySAFE bond
     *
     * @return self
     */
    public function setBuysafeShoppingCartId($buysafe_shopping_cart_id)
    {
        $this->container['buysafe_shopping_cart_id'] = $buysafe_shopping_cart_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


