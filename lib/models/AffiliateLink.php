<?php
/**
 * AffiliateLink
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * AffiliateLink Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AffiliateLink implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AffiliateLink';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'affiliate_link_oid' => 'int',
        'affiliate_managed_link_oid' => 'int',
        'affiliate_oid' => 'int',
        'affiliate_program_item_oid' => 'int',
        'code' => 'string',
        'creative_oid' => 'int',
        'custom_html' => 'string',
        'custom_html_approval_status' => 'string',
        'custom_landing_url' => 'string',
        'deleted' => 'bool',
        'invisible_link_approval_status' => 'string',
        'invisible_link_url_prefix' => 'string',
        'name' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'affiliate_link_oid' => 'int32',
        'affiliate_managed_link_oid' => 'int32',
        'affiliate_oid' => 'int32',
        'affiliate_program_item_oid' => 'int32',
        'code' => null,
        'creative_oid' => 'int32',
        'custom_html' => null,
        'custom_html_approval_status' => null,
        'custom_landing_url' => null,
        'deleted' => null,
        'invisible_link_approval_status' => null,
        'invisible_link_url_prefix' => null,
        'name' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affiliate_link_oid' => 'affiliate_link_oid',
        'affiliate_managed_link_oid' => 'affiliate_managed_link_oid',
        'affiliate_oid' => 'affiliate_oid',
        'affiliate_program_item_oid' => 'affiliate_program_item_oid',
        'code' => 'code',
        'creative_oid' => 'creative_oid',
        'custom_html' => 'custom_html',
        'custom_html_approval_status' => 'custom_html_approval_status',
        'custom_landing_url' => 'custom_landing_url',
        'deleted' => 'deleted',
        'invisible_link_approval_status' => 'invisible_link_approval_status',
        'invisible_link_url_prefix' => 'invisible_link_url_prefix',
        'name' => 'name',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affiliate_link_oid' => 'setAffiliateLinkOid',
        'affiliate_managed_link_oid' => 'setAffiliateManagedLinkOid',
        'affiliate_oid' => 'setAffiliateOid',
        'affiliate_program_item_oid' => 'setAffiliateProgramItemOid',
        'code' => 'setCode',
        'creative_oid' => 'setCreativeOid',
        'custom_html' => 'setCustomHtml',
        'custom_html_approval_status' => 'setCustomHtmlApprovalStatus',
        'custom_landing_url' => 'setCustomLandingUrl',
        'deleted' => 'setDeleted',
        'invisible_link_approval_status' => 'setInvisibleLinkApprovalStatus',
        'invisible_link_url_prefix' => 'setInvisibleLinkUrlPrefix',
        'name' => 'setName',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affiliate_link_oid' => 'getAffiliateLinkOid',
        'affiliate_managed_link_oid' => 'getAffiliateManagedLinkOid',
        'affiliate_oid' => 'getAffiliateOid',
        'affiliate_program_item_oid' => 'getAffiliateProgramItemOid',
        'code' => 'getCode',
        'creative_oid' => 'getCreativeOid',
        'custom_html' => 'getCustomHtml',
        'custom_html_approval_status' => 'getCustomHtmlApprovalStatus',
        'custom_landing_url' => 'getCustomLandingUrl',
        'deleted' => 'getDeleted',
        'invisible_link_approval_status' => 'getInvisibleLinkApprovalStatus',
        'invisible_link_url_prefix' => 'getInvisibleLinkUrlPrefix',
        'name' => 'getName',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CUSTOM_HTML_APPROVAL_STATUS_PENDING = 'Pending';
    public const CUSTOM_HTML_APPROVAL_STATUS_APPROVED = 'Approved';
    public const CUSTOM_HTML_APPROVAL_STATUS_REJECTED = 'Rejected';
    public const INVISIBLE_LINK_APPROVAL_STATUS_PENDING = 'Pending';
    public const INVISIBLE_LINK_APPROVAL_STATUS_APPROVED = 'Approved';
    public const INVISIBLE_LINK_APPROVAL_STATUS_REJECTED = 'Rejected';
    public const TYPE_IMAGE = 'image';
    public const TYPE_TEXT = 'text';
    public const TYPE_INVISIBLE = 'invisible';
    public const TYPE_DIRECT = 'direct';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomHtmlApprovalStatusAllowableValues()
    {
        return [
            self::CUSTOM_HTML_APPROVAL_STATUS_PENDING,
            self::CUSTOM_HTML_APPROVAL_STATUS_APPROVED,
            self::CUSTOM_HTML_APPROVAL_STATUS_REJECTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvisibleLinkApprovalStatusAllowableValues()
    {
        return [
            self::INVISIBLE_LINK_APPROVAL_STATUS_PENDING,
            self::INVISIBLE_LINK_APPROVAL_STATUS_APPROVED,
            self::INVISIBLE_LINK_APPROVAL_STATUS_REJECTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_IMAGE,
            self::TYPE_TEXT,
            self::TYPE_INVISIBLE,
            self::TYPE_DIRECT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['affiliate_link_oid'] = $data['affiliate_link_oid'] ?? null;
        $this->container['affiliate_managed_link_oid'] = $data['affiliate_managed_link_oid'] ?? null;
        $this->container['affiliate_oid'] = $data['affiliate_oid'] ?? null;
        $this->container['affiliate_program_item_oid'] = $data['affiliate_program_item_oid'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['creative_oid'] = $data['creative_oid'] ?? null;
        $this->container['custom_html'] = $data['custom_html'] ?? null;
        $this->container['custom_html_approval_status'] = $data['custom_html_approval_status'] ?? null;
        $this->container['custom_landing_url'] = $data['custom_landing_url'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
        $this->container['invisible_link_approval_status'] = $data['invisible_link_approval_status'] ?? null;
        $this->container['invisible_link_url_prefix'] = $data['invisible_link_url_prefix'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCustomHtmlApprovalStatusAllowableValues();
        if (!is_null($this->container['custom_html_approval_status']) && !in_array($this->container['custom_html_approval_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'custom_html_approval_status', must be one of '%s'",
                $this->container['custom_html_approval_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvisibleLinkApprovalStatusAllowableValues();
        if (!is_null($this->container['invisible_link_approval_status']) && !in_array($this->container['invisible_link_approval_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invisible_link_approval_status', must be one of '%s'",
                $this->container['invisible_link_approval_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affiliate_link_oid
     *
     * @return int|null
     */
    public function getAffiliateLinkOid()
    {
        return $this->container['affiliate_link_oid'];
    }

    /**
     * Sets affiliate_link_oid
     *
     * @param int|null $affiliate_link_oid Unique object identifier associated with this link
     *
     * @return self
     */
    public function setAffiliateLinkOid($affiliate_link_oid)
    {
        $this->container['affiliate_link_oid'] = $affiliate_link_oid;

        return $this;
    }

    /**
     * Gets affiliate_managed_link_oid
     *
     * @return int|null
     */
    public function getAffiliateManagedLinkOid()
    {
        return $this->container['affiliate_managed_link_oid'];
    }

    /**
     * Sets affiliate_managed_link_oid
     *
     * @param int|null $affiliate_managed_link_oid Managed link OID that this link object was generated from
     *
     * @return self
     */
    public function setAffiliateManagedLinkOid($affiliate_managed_link_oid)
    {
        $this->container['affiliate_managed_link_oid'] = $affiliate_managed_link_oid;

        return $this;
    }

    /**
     * Gets affiliate_oid
     *
     * @return int|null
     */
    public function getAffiliateOid()
    {
        return $this->container['affiliate_oid'];
    }

    /**
     * Sets affiliate_oid
     *
     * @param int|null $affiliate_oid Affiliate object ID associated with this link
     *
     * @return self
     */
    public function setAffiliateOid($affiliate_oid)
    {
        $this->container['affiliate_oid'] = $affiliate_oid;

        return $this;
    }

    /**
     * Gets affiliate_program_item_oid
     *
     * @return int|null
     */
    public function getAffiliateProgramItemOid()
    {
        return $this->container['affiliate_program_item_oid'];
    }

    /**
     * Sets affiliate_program_item_oid
     *
     * @param int|null $affiliate_program_item_oid The affiliate program item this managed link is associated with
     *
     * @return self
     */
    public function setAffiliateProgramItemOid($affiliate_program_item_oid)
    {
        $this->container['affiliate_program_item_oid'] = $affiliate_program_item_oid;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Code associated with the link
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets creative_oid
     *
     * @return int|null
     */
    public function getCreativeOid()
    {
        return $this->container['creative_oid'];
    }

    /**
     * Sets creative_oid
     *
     * @param int|null $creative_oid Creative (image or text) associated with this link
     *
     * @return self
     */
    public function setCreativeOid($creative_oid)
    {
        $this->container['creative_oid'] = $creative_oid;

        return $this;
    }

    /**
     * Gets custom_html
     *
     * @return string|null
     */
    public function getCustomHtml()
    {
        return $this->container['custom_html'];
    }

    /**
     * Sets custom_html
     *
     * @param string|null $custom_html Custom HTML associated with this link
     *
     * @return self
     */
    public function setCustomHtml($custom_html)
    {
        $this->container['custom_html'] = $custom_html;

        return $this;
    }

    /**
     * Gets custom_html_approval_status
     *
     * @return string|null
     */
    public function getCustomHtmlApprovalStatus()
    {
        return $this->container['custom_html_approval_status'];
    }

    /**
     * Sets custom_html_approval_status
     *
     * @param string|null $custom_html_approval_status Approved status of the custom html
     *
     * @return self
     */
    public function setCustomHtmlApprovalStatus($custom_html_approval_status)
    {
        $allowedValues = $this->getCustomHtmlApprovalStatusAllowableValues();
        if (!is_null($custom_html_approval_status) && !in_array($custom_html_approval_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'custom_html_approval_status', must be one of '%s'",
                    $custom_html_approval_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['custom_html_approval_status'] = $custom_html_approval_status;

        return $this;
    }

    /**
     * Gets custom_landing_url
     *
     * @return string|null
     */
    public function getCustomLandingUrl()
    {
        return $this->container['custom_landing_url'];
    }

    /**
     * Sets custom_landing_url
     *
     * @param string|null $custom_landing_url Custom landing page URL if configured
     *
     * @return self
     */
    public function setCustomLandingUrl($custom_landing_url)
    {
        $this->container['custom_landing_url'] = $custom_landing_url;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted True if the link has been deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets invisible_link_approval_status
     *
     * @return string|null
     */
    public function getInvisibleLinkApprovalStatus()
    {
        return $this->container['invisible_link_approval_status'];
    }

    /**
     * Sets invisible_link_approval_status
     *
     * @param string|null $invisible_link_approval_status Invisible link approval status
     *
     * @return self
     */
    public function setInvisibleLinkApprovalStatus($invisible_link_approval_status)
    {
        $allowedValues = $this->getInvisibleLinkApprovalStatusAllowableValues();
        if (!is_null($invisible_link_approval_status) && !in_array($invisible_link_approval_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invisible_link_approval_status', must be one of '%s'",
                    $invisible_link_approval_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invisible_link_approval_status'] = $invisible_link_approval_status;

        return $this;
    }

    /**
     * Gets invisible_link_url_prefix
     *
     * @return string|null
     */
    public function getInvisibleLinkUrlPrefix()
    {
        return $this->container['invisible_link_url_prefix'];
    }

    /**
     * Sets invisible_link_url_prefix
     *
     * @param string|null $invisible_link_url_prefix Invisible link URL prefix
     *
     * @return self
     */
    public function setInvisibleLinkUrlPrefix($invisible_link_url_prefix)
    {
        $this->container['invisible_link_url_prefix'] = $invisible_link_url_prefix;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the link
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of link
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


