<?php
/**
 * CustomDashboardSchedule
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomDashboardSchedule Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomDashboardSchedule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomDashboardSchedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cron_trigger_expression' => 'string',
        'data_warehouse_custom_dashboard_oid' => 'int',
        'data_warehouse_custom_dashboard_schedule_oid' => 'int',
        'emails' => 'string[]',
        'next_send_dts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cron_trigger_expression' => null,
        'data_warehouse_custom_dashboard_oid' => 'int32',
        'data_warehouse_custom_dashboard_schedule_oid' => 'int32',
        'emails' => null,
        'next_send_dts' => 'dateTime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cron_trigger_expression' => 'cron_trigger_expression',
        'data_warehouse_custom_dashboard_oid' => 'data_warehouse_custom_dashboard_oid',
        'data_warehouse_custom_dashboard_schedule_oid' => 'data_warehouse_custom_dashboard_schedule_oid',
        'emails' => 'emails',
        'next_send_dts' => 'next_send_dts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cron_trigger_expression' => 'setCronTriggerExpression',
        'data_warehouse_custom_dashboard_oid' => 'setDataWarehouseCustomDashboardOid',
        'data_warehouse_custom_dashboard_schedule_oid' => 'setDataWarehouseCustomDashboardScheduleOid',
        'emails' => 'setEmails',
        'next_send_dts' => 'setNextSendDts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cron_trigger_expression' => 'getCronTriggerExpression',
        'data_warehouse_custom_dashboard_oid' => 'getDataWarehouseCustomDashboardOid',
        'data_warehouse_custom_dashboard_schedule_oid' => 'getDataWarehouseCustomDashboardScheduleOid',
        'emails' => 'getEmails',
        'next_send_dts' => 'getNextSendDts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cron_trigger_expression'] = isset($data['cron_trigger_expression']) ? $data['cron_trigger_expression'] : null;
        $this->container['data_warehouse_custom_dashboard_oid'] = isset($data['data_warehouse_custom_dashboard_oid']) ? $data['data_warehouse_custom_dashboard_oid'] : null;
        $this->container['data_warehouse_custom_dashboard_schedule_oid'] = isset($data['data_warehouse_custom_dashboard_schedule_oid']) ? $data['data_warehouse_custom_dashboard_schedule_oid'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['next_send_dts'] = isset($data['next_send_dts']) ? $data['next_send_dts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cron_trigger_expression
     *
     * @return string
     */
    public function getCronTriggerExpression()
    {
        return $this->container['cron_trigger_expression'];
    }

    /**
     * Sets cron_trigger_expression
     *
     * @param string $cron_trigger_expression cron_trigger_expression
     *
     * @return $this
     */
    public function setCronTriggerExpression($cron_trigger_expression)
    {
        $this->container['cron_trigger_expression'] = $cron_trigger_expression;

        return $this;
    }

    /**
     * Gets data_warehouse_custom_dashboard_oid
     *
     * @return int
     */
    public function getDataWarehouseCustomDashboardOid()
    {
        return $this->container['data_warehouse_custom_dashboard_oid'];
    }

    /**
     * Sets data_warehouse_custom_dashboard_oid
     *
     * @param int $data_warehouse_custom_dashboard_oid data_warehouse_custom_dashboard_oid
     *
     * @return $this
     */
    public function setDataWarehouseCustomDashboardOid($data_warehouse_custom_dashboard_oid)
    {
        $this->container['data_warehouse_custom_dashboard_oid'] = $data_warehouse_custom_dashboard_oid;

        return $this;
    }

    /**
     * Gets data_warehouse_custom_dashboard_schedule_oid
     *
     * @return int
     */
    public function getDataWarehouseCustomDashboardScheduleOid()
    {
        return $this->container['data_warehouse_custom_dashboard_schedule_oid'];
    }

    /**
     * Sets data_warehouse_custom_dashboard_schedule_oid
     *
     * @param int $data_warehouse_custom_dashboard_schedule_oid data_warehouse_custom_dashboard_schedule_oid
     *
     * @return $this
     */
    public function setDataWarehouseCustomDashboardScheduleOid($data_warehouse_custom_dashboard_schedule_oid)
    {
        $this->container['data_warehouse_custom_dashboard_schedule_oid'] = $data_warehouse_custom_dashboard_schedule_oid;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[] $emails emails
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets next_send_dts
     *
     * @return string
     */
    public function getNextSendDts()
    {
        return $this->container['next_send_dts'];
    }

    /**
     * Sets next_send_dts
     *
     * @param string $next_send_dts Date/time that the next send will occur.
     *
     * @return $this
     */
    public function setNextSendDts($next_send_dts)
    {
        $this->container['next_send_dts'] = $next_send_dts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


