<?php
/**
 * CustomDashboardSchedule
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomDashboardSchedule Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomDashboardSchedule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomDashboardSchedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cron_trigger_expression' => 'string',
        'data_warehouse_custom_dashboard_oid' => 'int',
        'data_warehouse_custom_dashboard_schedule_oid' => 'int',
        'emails' => 'string[]',
        'next_send_dts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cron_trigger_expression' => null,
        'data_warehouse_custom_dashboard_oid' => 'int32',
        'data_warehouse_custom_dashboard_schedule_oid' => 'int32',
        'emails' => null,
        'next_send_dts' => 'dateTime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cron_trigger_expression' => 'cron_trigger_expression',
        'data_warehouse_custom_dashboard_oid' => 'data_warehouse_custom_dashboard_oid',
        'data_warehouse_custom_dashboard_schedule_oid' => 'data_warehouse_custom_dashboard_schedule_oid',
        'emails' => 'emails',
        'next_send_dts' => 'next_send_dts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cron_trigger_expression' => 'setCronTriggerExpression',
        'data_warehouse_custom_dashboard_oid' => 'setDataWarehouseCustomDashboardOid',
        'data_warehouse_custom_dashboard_schedule_oid' => 'setDataWarehouseCustomDashboardScheduleOid',
        'emails' => 'setEmails',
        'next_send_dts' => 'setNextSendDts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cron_trigger_expression' => 'getCronTriggerExpression',
        'data_warehouse_custom_dashboard_oid' => 'getDataWarehouseCustomDashboardOid',
        'data_warehouse_custom_dashboard_schedule_oid' => 'getDataWarehouseCustomDashboardScheduleOid',
        'emails' => 'getEmails',
        'next_send_dts' => 'getNextSendDts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cron_trigger_expression'] = $data['cron_trigger_expression'] ?? null;
        $this->container['data_warehouse_custom_dashboard_oid'] = $data['data_warehouse_custom_dashboard_oid'] ?? null;
        $this->container['data_warehouse_custom_dashboard_schedule_oid'] = $data['data_warehouse_custom_dashboard_schedule_oid'] ?? null;
        $this->container['emails'] = $data['emails'] ?? null;
        $this->container['next_send_dts'] = $data['next_send_dts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cron_trigger_expression
     *
     * @return string|null
     */
    public function getCronTriggerExpression()
    {
        return $this->container['cron_trigger_expression'];
    }

    /**
     * Sets cron_trigger_expression
     *
     * @param string|null $cron_trigger_expression cron_trigger_expression
     *
     * @return self
     */
    public function setCronTriggerExpression($cron_trigger_expression)
    {
        $this->container['cron_trigger_expression'] = $cron_trigger_expression;

        return $this;
    }

    /**
     * Gets data_warehouse_custom_dashboard_oid
     *
     * @return int|null
     */
    public function getDataWarehouseCustomDashboardOid()
    {
        return $this->container['data_warehouse_custom_dashboard_oid'];
    }

    /**
     * Sets data_warehouse_custom_dashboard_oid
     *
     * @param int|null $data_warehouse_custom_dashboard_oid data_warehouse_custom_dashboard_oid
     *
     * @return self
     */
    public function setDataWarehouseCustomDashboardOid($data_warehouse_custom_dashboard_oid)
    {
        $this->container['data_warehouse_custom_dashboard_oid'] = $data_warehouse_custom_dashboard_oid;

        return $this;
    }

    /**
     * Gets data_warehouse_custom_dashboard_schedule_oid
     *
     * @return int|null
     */
    public function getDataWarehouseCustomDashboardScheduleOid()
    {
        return $this->container['data_warehouse_custom_dashboard_schedule_oid'];
    }

    /**
     * Sets data_warehouse_custom_dashboard_schedule_oid
     *
     * @param int|null $data_warehouse_custom_dashboard_schedule_oid data_warehouse_custom_dashboard_schedule_oid
     *
     * @return self
     */
    public function setDataWarehouseCustomDashboardScheduleOid($data_warehouse_custom_dashboard_schedule_oid)
    {
        $this->container['data_warehouse_custom_dashboard_schedule_oid'] = $data_warehouse_custom_dashboard_schedule_oid;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[]|null $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets next_send_dts
     *
     * @return string|null
     */
    public function getNextSendDts()
    {
        return $this->container['next_send_dts'];
    }

    /**
     * Sets next_send_dts
     *
     * @param string|null $next_send_dts Date/time that the next send will occur.
     *
     * @return self
     */
    public function setNextSendDts($next_send_dts)
    {
        $this->container['next_send_dts'] = $next_send_dts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


