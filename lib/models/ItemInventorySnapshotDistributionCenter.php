<?php
/**
 * ItemInventorySnapshotDistributionCenter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemInventorySnapshotDistributionCenter Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemInventorySnapshotDistributionCenter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemInventorySnapshotDistributionCenter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allocated_to_placed_orders' => 'int',
        'allocated_to_shopping_carts' => 'int',
        'available_to_allocate' => 'int',
        'code' => 'string',
        'quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allocated_to_placed_orders' => 'int32',
        'allocated_to_shopping_carts' => 'int32',
        'available_to_allocate' => 'int32',
        'code' => null,
        'quantity' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allocated_to_placed_orders' => 'allocated_to_placed_orders',
        'allocated_to_shopping_carts' => 'allocated_to_shopping_carts',
        'available_to_allocate' => 'available_to_allocate',
        'code' => 'code',
        'quantity' => 'quantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allocated_to_placed_orders' => 'setAllocatedToPlacedOrders',
        'allocated_to_shopping_carts' => 'setAllocatedToShoppingCarts',
        'available_to_allocate' => 'setAvailableToAllocate',
        'code' => 'setCode',
        'quantity' => 'setQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allocated_to_placed_orders' => 'getAllocatedToPlacedOrders',
        'allocated_to_shopping_carts' => 'getAllocatedToShoppingCarts',
        'available_to_allocate' => 'getAvailableToAllocate',
        'code' => 'getCode',
        'quantity' => 'getQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allocated_to_placed_orders'] = $data['allocated_to_placed_orders'] ?? null;
        $this->container['allocated_to_shopping_carts'] = $data['allocated_to_shopping_carts'] ?? null;
        $this->container['available_to_allocate'] = $data['available_to_allocate'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allocated_to_placed_orders
     *
     * @return int|null
     */
    public function getAllocatedToPlacedOrders()
    {
        return $this->container['allocated_to_placed_orders'];
    }

    /**
     * Sets allocated_to_placed_orders
     *
     * @param int|null $allocated_to_placed_orders allocated_to_placed_orders
     *
     * @return self
     */
    public function setAllocatedToPlacedOrders($allocated_to_placed_orders)
    {
        $this->container['allocated_to_placed_orders'] = $allocated_to_placed_orders;

        return $this;
    }

    /**
     * Gets allocated_to_shopping_carts
     *
     * @return int|null
     */
    public function getAllocatedToShoppingCarts()
    {
        return $this->container['allocated_to_shopping_carts'];
    }

    /**
     * Sets allocated_to_shopping_carts
     *
     * @param int|null $allocated_to_shopping_carts allocated_to_shopping_carts
     *
     * @return self
     */
    public function setAllocatedToShoppingCarts($allocated_to_shopping_carts)
    {
        $this->container['allocated_to_shopping_carts'] = $allocated_to_shopping_carts;

        return $this;
    }

    /**
     * Gets available_to_allocate
     *
     * @return int|null
     */
    public function getAvailableToAllocate()
    {
        return $this->container['available_to_allocate'];
    }

    /**
     * Sets available_to_allocate
     *
     * @param int|null $available_to_allocate available_to_allocate
     *
     * @return self
     */
    public function setAvailableToAllocate($available_to_allocate)
    {
        $this->container['available_to_allocate'] = $available_to_allocate;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


