<?php
/**
 * ItemInventorySnapshotDistributionCenter
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemInventorySnapshotDistributionCenter Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemInventorySnapshotDistributionCenter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemInventorySnapshotDistributionCenter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allocated_to_placed_orders' => 'int',
        'allocated_to_shopping_carts' => 'int',
        'available_to_allocate' => 'int',
        'code' => 'string',
        'quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allocated_to_placed_orders' => 'int32',
        'allocated_to_shopping_carts' => 'int32',
        'available_to_allocate' => 'int32',
        'code' => null,
        'quantity' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allocated_to_placed_orders' => 'allocated_to_placed_orders',
        'allocated_to_shopping_carts' => 'allocated_to_shopping_carts',
        'available_to_allocate' => 'available_to_allocate',
        'code' => 'code',
        'quantity' => 'quantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allocated_to_placed_orders' => 'setAllocatedToPlacedOrders',
        'allocated_to_shopping_carts' => 'setAllocatedToShoppingCarts',
        'available_to_allocate' => 'setAvailableToAllocate',
        'code' => 'setCode',
        'quantity' => 'setQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allocated_to_placed_orders' => 'getAllocatedToPlacedOrders',
        'allocated_to_shopping_carts' => 'getAllocatedToShoppingCarts',
        'available_to_allocate' => 'getAvailableToAllocate',
        'code' => 'getCode',
        'quantity' => 'getQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allocated_to_placed_orders'] = isset($data['allocated_to_placed_orders']) ? $data['allocated_to_placed_orders'] : null;
        $this->container['allocated_to_shopping_carts'] = isset($data['allocated_to_shopping_carts']) ? $data['allocated_to_shopping_carts'] : null;
        $this->container['available_to_allocate'] = isset($data['available_to_allocate']) ? $data['available_to_allocate'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allocated_to_placed_orders
     *
     * @return int
     */
    public function getAllocatedToPlacedOrders()
    {
        return $this->container['allocated_to_placed_orders'];
    }

    /**
     * Sets allocated_to_placed_orders
     *
     * @param int $allocated_to_placed_orders allocated_to_placed_orders
     *
     * @return $this
     */
    public function setAllocatedToPlacedOrders($allocated_to_placed_orders)
    {
        $this->container['allocated_to_placed_orders'] = $allocated_to_placed_orders;

        return $this;
    }

    /**
     * Gets allocated_to_shopping_carts
     *
     * @return int
     */
    public function getAllocatedToShoppingCarts()
    {
        return $this->container['allocated_to_shopping_carts'];
    }

    /**
     * Sets allocated_to_shopping_carts
     *
     * @param int $allocated_to_shopping_carts allocated_to_shopping_carts
     *
     * @return $this
     */
    public function setAllocatedToShoppingCarts($allocated_to_shopping_carts)
    {
        $this->container['allocated_to_shopping_carts'] = $allocated_to_shopping_carts;

        return $this;
    }

    /**
     * Gets available_to_allocate
     *
     * @return int
     */
    public function getAvailableToAllocate()
    {
        return $this->container['available_to_allocate'];
    }

    /**
     * Sets available_to_allocate
     *
     * @param int $available_to_allocate available_to_allocate
     *
     * @return $this
     */
    public function setAvailableToAllocate($available_to_allocate)
    {
        $this->container['available_to_allocate'] = $available_to_allocate;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


