<?php
/**
 * ConversationSentiment
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationSentiment Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationSentiment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationSentiment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'last_detect_sentiment' => 'string',
        'mixed' => 'float',
        'negative' => 'float',
        'neutral' => 'float',
        'positive' => 'float',
        'sentiment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'last_detect_sentiment' => 'dateTime',
        'mixed' => null,
        'negative' => null,
        'neutral' => null,
        'positive' => null,
        'sentiment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_detect_sentiment' => 'last_detect_sentiment',
        'mixed' => 'mixed',
        'negative' => 'negative',
        'neutral' => 'neutral',
        'positive' => 'positive',
        'sentiment' => 'sentiment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_detect_sentiment' => 'setLastDetectSentiment',
        'mixed' => 'setMixed',
        'negative' => 'setNegative',
        'neutral' => 'setNeutral',
        'positive' => 'setPositive',
        'sentiment' => 'setSentiment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_detect_sentiment' => 'getLastDetectSentiment',
        'mixed' => 'getMixed',
        'negative' => 'getNegative',
        'neutral' => 'getNeutral',
        'positive' => 'getPositive',
        'sentiment' => 'getSentiment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SENTIMENT_POSITIVE = 'POSITIVE';
    const SENTIMENT_NEUTRAL = 'NEUTRAL';
    const SENTIMENT_NEGATIVE = 'NEGATIVE';
    const SENTIMENT_MIXED = 'MIXED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSentimentAllowableValues()
    {
        return [
            self::SENTIMENT_POSITIVE,
            self::SENTIMENT_NEUTRAL,
            self::SENTIMENT_NEGATIVE,
            self::SENTIMENT_MIXED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_detect_sentiment'] = isset($data['last_detect_sentiment']) ? $data['last_detect_sentiment'] : null;
        $this->container['mixed'] = isset($data['mixed']) ? $data['mixed'] : null;
        $this->container['negative'] = isset($data['negative']) ? $data['negative'] : null;
        $this->container['neutral'] = isset($data['neutral']) ? $data['neutral'] : null;
        $this->container['positive'] = isset($data['positive']) ? $data['positive'] : null;
        $this->container['sentiment'] = isset($data['sentiment']) ? $data['sentiment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSentimentAllowableValues();
        if (!is_null($this->container['sentiment']) && !in_array($this->container['sentiment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sentiment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_detect_sentiment
     *
     * @return string
     */
    public function getLastDetectSentiment()
    {
        return $this->container['last_detect_sentiment'];
    }

    /**
     * Sets last_detect_sentiment
     *
     * @param string $last_detect_sentiment The last time the detect sentiment was run on this conversation
     *
     * @return $this
     */
    public function setLastDetectSentiment($last_detect_sentiment)
    {
        $this->container['last_detect_sentiment'] = $last_detect_sentiment;

        return $this;
    }

    /**
     * Gets mixed
     *
     * @return float
     */
    public function getMixed()
    {
        return $this->container['mixed'];
    }

    /**
     * Sets mixed
     *
     * @param float $mixed The mixed score
     *
     * @return $this
     */
    public function setMixed($mixed)
    {
        $this->container['mixed'] = $mixed;

        return $this;
    }

    /**
     * Gets negative
     *
     * @return float
     */
    public function getNegative()
    {
        return $this->container['negative'];
    }

    /**
     * Sets negative
     *
     * @param float $negative The negative score
     *
     * @return $this
     */
    public function setNegative($negative)
    {
        $this->container['negative'] = $negative;

        return $this;
    }

    /**
     * Gets neutral
     *
     * @return float
     */
    public function getNeutral()
    {
        return $this->container['neutral'];
    }

    /**
     * Sets neutral
     *
     * @param float $neutral The neutral score
     *
     * @return $this
     */
    public function setNeutral($neutral)
    {
        $this->container['neutral'] = $neutral;

        return $this;
    }

    /**
     * Gets positive
     *
     * @return float
     */
    public function getPositive()
    {
        return $this->container['positive'];
    }

    /**
     * Sets positive
     *
     * @param float $positive The positive score
     *
     * @return $this
     */
    public function setPositive($positive)
    {
        $this->container['positive'] = $positive;

        return $this;
    }

    /**
     * Gets sentiment
     *
     * @return string
     */
    public function getSentiment()
    {
        return $this->container['sentiment'];
    }

    /**
     * Sets sentiment
     *
     * @param string $sentiment The overall sentiment
     *
     * @return $this
     */
    public function setSentiment($sentiment)
    {
        $allowedValues = $this->getSentimentAllowableValues();
        if (!is_null($sentiment) && !in_array($sentiment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sentiment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sentiment'] = $sentiment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


