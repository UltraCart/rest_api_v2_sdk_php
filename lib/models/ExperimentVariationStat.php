<?php
/**
 * ExperimentVariationStat
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ExperimentVariationStat Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExperimentVariationStat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExperimentVariationStat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'add_to_cart_count' => 'int',
        'bounce_count' => 'int',
        'duration_seconds_sum' => 'int',
        'event_count' => 'int',
        'initiate_checkout_count' => 'int',
        'order_count' => 'int',
        'order_ids' => 'string[]',
        'order_item_count' => 'int',
        'page_view_count' => 'int',
        'revenue' => 'float',
        'session_count' => 'int',
        'sms_opt_in_count' => 'int',
        'stat_dts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'add_to_cart_count' => 'int32',
        'bounce_count' => 'int32',
        'duration_seconds_sum' => 'int64',
        'event_count' => 'int32',
        'initiate_checkout_count' => 'int32',
        'order_count' => 'int32',
        'order_ids' => null,
        'order_item_count' => 'int32',
        'page_view_count' => 'int32',
        'revenue' => null,
        'session_count' => 'int32',
        'sms_opt_in_count' => 'int32',
        'stat_dts' => 'dateTime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_to_cart_count' => 'add_to_cart_count',
        'bounce_count' => 'bounce_count',
        'duration_seconds_sum' => 'duration_seconds_sum',
        'event_count' => 'event_count',
        'initiate_checkout_count' => 'initiate_checkout_count',
        'order_count' => 'order_count',
        'order_ids' => 'order_ids',
        'order_item_count' => 'order_item_count',
        'page_view_count' => 'page_view_count',
        'revenue' => 'revenue',
        'session_count' => 'session_count',
        'sms_opt_in_count' => 'sms_opt_in_count',
        'stat_dts' => 'stat_dts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_to_cart_count' => 'setAddToCartCount',
        'bounce_count' => 'setBounceCount',
        'duration_seconds_sum' => 'setDurationSecondsSum',
        'event_count' => 'setEventCount',
        'initiate_checkout_count' => 'setInitiateCheckoutCount',
        'order_count' => 'setOrderCount',
        'order_ids' => 'setOrderIds',
        'order_item_count' => 'setOrderItemCount',
        'page_view_count' => 'setPageViewCount',
        'revenue' => 'setRevenue',
        'session_count' => 'setSessionCount',
        'sms_opt_in_count' => 'setSmsOptInCount',
        'stat_dts' => 'setStatDts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_to_cart_count' => 'getAddToCartCount',
        'bounce_count' => 'getBounceCount',
        'duration_seconds_sum' => 'getDurationSecondsSum',
        'event_count' => 'getEventCount',
        'initiate_checkout_count' => 'getInitiateCheckoutCount',
        'order_count' => 'getOrderCount',
        'order_ids' => 'getOrderIds',
        'order_item_count' => 'getOrderItemCount',
        'page_view_count' => 'getPageViewCount',
        'revenue' => 'getRevenue',
        'session_count' => 'getSessionCount',
        'sms_opt_in_count' => 'getSmsOptInCount',
        'stat_dts' => 'getStatDts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_to_cart_count'] = $data['add_to_cart_count'] ?? null;
        $this->container['bounce_count'] = $data['bounce_count'] ?? null;
        $this->container['duration_seconds_sum'] = $data['duration_seconds_sum'] ?? null;
        $this->container['event_count'] = $data['event_count'] ?? null;
        $this->container['initiate_checkout_count'] = $data['initiate_checkout_count'] ?? null;
        $this->container['order_count'] = $data['order_count'] ?? null;
        $this->container['order_ids'] = $data['order_ids'] ?? null;
        $this->container['order_item_count'] = $data['order_item_count'] ?? null;
        $this->container['page_view_count'] = $data['page_view_count'] ?? null;
        $this->container['revenue'] = $data['revenue'] ?? null;
        $this->container['session_count'] = $data['session_count'] ?? null;
        $this->container['sms_opt_in_count'] = $data['sms_opt_in_count'] ?? null;
        $this->container['stat_dts'] = $data['stat_dts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_to_cart_count
     *
     * @return int|null
     */
    public function getAddToCartCount()
    {
        return $this->container['add_to_cart_count'];
    }

    /**
     * Sets add_to_cart_count
     *
     * @param int|null $add_to_cart_count Total add to cart count for this variation
     *
     * @return self
     */
    public function setAddToCartCount($add_to_cart_count)
    {
        $this->container['add_to_cart_count'] = $add_to_cart_count;

        return $this;
    }

    /**
     * Gets bounce_count
     *
     * @return int|null
     */
    public function getBounceCount()
    {
        return $this->container['bounce_count'];
    }

    /**
     * Sets bounce_count
     *
     * @param int|null $bounce_count Total bounce count for this variation
     *
     * @return self
     */
    public function setBounceCount($bounce_count)
    {
        $this->container['bounce_count'] = $bounce_count;

        return $this;
    }

    /**
     * Gets duration_seconds_sum
     *
     * @return int|null
     */
    public function getDurationSecondsSum()
    {
        return $this->container['duration_seconds_sum'];
    }

    /**
     * Sets duration_seconds_sum
     *
     * @param int|null $duration_seconds_sum Total number of seconds spent on the site for this variation
     *
     * @return self
     */
    public function setDurationSecondsSum($duration_seconds_sum)
    {
        $this->container['duration_seconds_sum'] = $duration_seconds_sum;

        return $this;
    }

    /**
     * Gets event_count
     *
     * @return int|null
     */
    public function getEventCount()
    {
        return $this->container['event_count'];
    }

    /**
     * Sets event_count
     *
     * @param int|null $event_count Total event count for this variation
     *
     * @return self
     */
    public function setEventCount($event_count)
    {
        $this->container['event_count'] = $event_count;

        return $this;
    }

    /**
     * Gets initiate_checkout_count
     *
     * @return int|null
     */
    public function getInitiateCheckoutCount()
    {
        return $this->container['initiate_checkout_count'];
    }

    /**
     * Sets initiate_checkout_count
     *
     * @param int|null $initiate_checkout_count Total initiate checkout count for this variation
     *
     * @return self
     */
    public function setInitiateCheckoutCount($initiate_checkout_count)
    {
        $this->container['initiate_checkout_count'] = $initiate_checkout_count;

        return $this;
    }

    /**
     * Gets order_count
     *
     * @return int|null
     */
    public function getOrderCount()
    {
        return $this->container['order_count'];
    }

    /**
     * Sets order_count
     *
     * @param int|null $order_count Total order count for this variation
     *
     * @return self
     */
    public function setOrderCount($order_count)
    {
        $this->container['order_count'] = $order_count;

        return $this;
    }

    /**
     * Gets order_ids
     *
     * @return string[]|null
     */
    public function getOrderIds()
    {
        return $this->container['order_ids'];
    }

    /**
     * Sets order_ids
     *
     * @param string[]|null $order_ids Order ID thats converted on this variation
     *
     * @return self
     */
    public function setOrderIds($order_ids)
    {
        $this->container['order_ids'] = $order_ids;

        return $this;
    }

    /**
     * Gets order_item_count
     *
     * @return int|null
     */
    public function getOrderItemCount()
    {
        return $this->container['order_item_count'];
    }

    /**
     * Sets order_item_count
     *
     * @param int|null $order_item_count Total order item count for this variation
     *
     * @return self
     */
    public function setOrderItemCount($order_item_count)
    {
        $this->container['order_item_count'] = $order_item_count;

        return $this;
    }

    /**
     * Gets page_view_count
     *
     * @return int|null
     */
    public function getPageViewCount()
    {
        return $this->container['page_view_count'];
    }

    /**
     * Sets page_view_count
     *
     * @param int|null $page_view_count Total page view count for this variation
     *
     * @return self
     */
    public function setPageViewCount($page_view_count)
    {
        $this->container['page_view_count'] = $page_view_count;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return float|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param float|null $revenue Total revenue for this variation
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets session_count
     *
     * @return int|null
     */
    public function getSessionCount()
    {
        return $this->container['session_count'];
    }

    /**
     * Sets session_count
     *
     * @param int|null $session_count Total sessions for this variation
     *
     * @return self
     */
    public function setSessionCount($session_count)
    {
        $this->container['session_count'] = $session_count;

        return $this;
    }

    /**
     * Gets sms_opt_in_count
     *
     * @return int|null
     */
    public function getSmsOptInCount()
    {
        return $this->container['sms_opt_in_count'];
    }

    /**
     * Sets sms_opt_in_count
     *
     * @param int|null $sms_opt_in_count Total SMS opt in count for this variation
     *
     * @return self
     */
    public function setSmsOptInCount($sms_opt_in_count)
    {
        $this->container['sms_opt_in_count'] = $sms_opt_in_count;

        return $this;
    }

    /**
     * Gets stat_dts
     *
     * @return string|null
     */
    public function getStatDts()
    {
        return $this->container['stat_dts'];
    }

    /**
     * Sets stat_dts
     *
     * @param string|null $stat_dts Date/time that the statistic was created
     *
     * @return self
     */
    public function setStatDts($stat_dts)
    {
        $this->container['stat_dts'] = $stat_dts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


