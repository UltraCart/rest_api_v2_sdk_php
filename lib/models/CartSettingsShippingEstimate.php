<?php
/**
 * CartSettingsShippingEstimate
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * CartSettingsShippingEstimate Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CartSettingsShippingEstimate implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CartSettingsShippingEstimate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'allow_3rd_party_billing' => 'bool',
        'comment' => 'string',
        'cost' => '\ultracart\v2\models\Currency',
        'cost_before_discount' => '\ultracart\v2\models\Currency',
        'default_method' => 'bool',
        'discount' => '\ultracart\v2\models\Currency',
        'discounted' => 'bool',
        'display_name' => 'string',
        'estimated_delivery' => 'string',
        'lift_gate_option' => 'bool',
        'name' => 'string',
        'tax' => '\ultracart\v2\models\Currency',
        'total_tax' => '\ultracart\v2\models\Currency'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'allow_3rd_party_billing' => 'allow_3rd_party_billing',
        'comment' => 'comment',
        'cost' => 'cost',
        'cost_before_discount' => 'cost_before_discount',
        'default_method' => 'default_method',
        'discount' => 'discount',
        'discounted' => 'discounted',
        'display_name' => 'display_name',
        'estimated_delivery' => 'estimated_delivery',
        'lift_gate_option' => 'lift_gate_option',
        'name' => 'name',
        'tax' => 'tax',
        'total_tax' => 'total_tax'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'allow_3rd_party_billing' => 'setAllow3rdPartyBilling',
        'comment' => 'setComment',
        'cost' => 'setCost',
        'cost_before_discount' => 'setCostBeforeDiscount',
        'default_method' => 'setDefaultMethod',
        'discount' => 'setDiscount',
        'discounted' => 'setDiscounted',
        'display_name' => 'setDisplayName',
        'estimated_delivery' => 'setEstimatedDelivery',
        'lift_gate_option' => 'setLiftGateOption',
        'name' => 'setName',
        'tax' => 'setTax',
        'total_tax' => 'setTotalTax'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'allow_3rd_party_billing' => 'getAllow3rdPartyBilling',
        'comment' => 'getComment',
        'cost' => 'getCost',
        'cost_before_discount' => 'getCostBeforeDiscount',
        'default_method' => 'getDefaultMethod',
        'discount' => 'getDiscount',
        'discounted' => 'getDiscounted',
        'display_name' => 'getDisplayName',
        'estimated_delivery' => 'getEstimatedDelivery',
        'lift_gate_option' => 'getLiftGateOption',
        'name' => 'getName',
        'tax' => 'getTax',
        'total_tax' => 'getTotalTax'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_3rd_party_billing'] = isset($data['allow_3rd_party_billing']) ? $data['allow_3rd_party_billing'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['cost_before_discount'] = isset($data['cost_before_discount']) ? $data['cost_before_discount'] : null;
        $this->container['default_method'] = isset($data['default_method']) ? $data['default_method'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['discounted'] = isset($data['discounted']) ? $data['discounted'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['estimated_delivery'] = isset($data['estimated_delivery']) ? $data['estimated_delivery'] : null;
        $this->container['lift_gate_option'] = isset($data['lift_gate_option']) ? $data['lift_gate_option'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets allow_3rd_party_billing
     * @return bool
     */
    public function getAllow3rdPartyBilling()
    {
        return $this->container['allow_3rd_party_billing'];
    }

    /**
     * Sets allow_3rd_party_billing
     * @param bool $allow_3rd_party_billing True if this method allows the customer to use their own shipper account number
     * @return $this
     */
    public function setAllow3rdPartyBilling($allow_3rd_party_billing)
    {
        $this->container['allow_3rd_party_billing'] = $allow_3rd_party_billing;

        return $this;
    }

    /**
     * Gets comment
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     * @param string $comment Comment to display to the customer about this method
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets cost
     * @return \ultracart\v2\models\Currency
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     * @param \ultracart\v2\models\Currency $cost
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets cost_before_discount
     * @return \ultracart\v2\models\Currency
     */
    public function getCostBeforeDiscount()
    {
        return $this->container['cost_before_discount'];
    }

    /**
     * Sets cost_before_discount
     * @param \ultracart\v2\models\Currency $cost_before_discount
     * @return $this
     */
    public function setCostBeforeDiscount($cost_before_discount)
    {
        $this->container['cost_before_discount'] = $cost_before_discount;

        return $this;
    }

    /**
     * Gets default_method
     * @return bool
     */
    public function getDefaultMethod()
    {
        return $this->container['default_method'];
    }

    /**
     * Sets default_method
     * @param bool $default_method True if this is the default method
     * @return $this
     */
    public function setDefaultMethod($default_method)
    {
        $this->container['default_method'] = $default_method;

        return $this;
    }

    /**
     * Gets discount
     * @return \ultracart\v2\models\Currency
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     * @param \ultracart\v2\models\Currency $discount
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discounted
     * @return bool
     */
    public function getDiscounted()
    {
        return $this->container['discounted'];
    }

    /**
     * Sets discounted
     * @param bool $discounted True if this method is discounted because of a coupon
     * @return $this
     */
    public function setDiscounted($discounted)
    {
        $this->container['discounted'] = $discounted;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name The name to display to the customer
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets estimated_delivery
     * @return string
     */
    public function getEstimatedDelivery()
    {
        return $this->container['estimated_delivery'];
    }

    /**
     * Sets estimated_delivery
     * @param string $estimated_delivery Date of the estimated delivery (or range)
     * @return $this
     */
    public function setEstimatedDelivery($estimated_delivery)
    {
        $this->container['estimated_delivery'] = $estimated_delivery;

        return $this;
    }

    /**
     * Gets lift_gate_option
     * @return bool
     */
    public function getLiftGateOption()
    {
        return $this->container['lift_gate_option'];
    }

    /**
     * Sets lift_gate_option
     * @param bool $lift_gate_option True if a lift gate option for this method should be offered to the customer
     * @return $this
     */
    public function setLiftGateOption($lift_gate_option)
    {
        $this->container['lift_gate_option'] = $lift_gate_option;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Shipping method name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tax
     * @return \ultracart\v2\models\Currency
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     * @param \ultracart\v2\models\Currency $tax
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets total_tax
     * @return \ultracart\v2\models\Currency
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     * @param \ultracart\v2\models\Currency $total_tax
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


