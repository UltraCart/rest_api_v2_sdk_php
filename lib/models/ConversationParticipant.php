<?php
/**
 * ConversationParticipant
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationParticipant Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationParticipant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationParticipant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conversation_participant_arn' => 'string',
        'conversation_participant_name' => 'string',
        'conversation_participant_uuid' => 'string',
        'email' => 'string',
        'joined_dts' => 'string',
        'language_iso_code' => 'string',
        'last_message_dts' => 'string',
        'left_dts' => 'string',
        'profile_image_url' => 'string',
        'sms_phone_number' => 'string',
        'status' => 'string',
        'timezone' => 'string',
        'unread_messages' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conversation_participant_arn' => null,
        'conversation_participant_name' => null,
        'conversation_participant_uuid' => null,
        'email' => null,
        'joined_dts' => 'dateTime',
        'language_iso_code' => null,
        'last_message_dts' => 'dateTime',
        'left_dts' => 'dateTime',
        'profile_image_url' => null,
        'sms_phone_number' => null,
        'status' => null,
        'timezone' => null,
        'unread_messages' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversation_participant_arn' => 'conversation_participant_arn',
        'conversation_participant_name' => 'conversation_participant_name',
        'conversation_participant_uuid' => 'conversation_participant_uuid',
        'email' => 'email',
        'joined_dts' => 'joined_dts',
        'language_iso_code' => 'language_iso_code',
        'last_message_dts' => 'last_message_dts',
        'left_dts' => 'left_dts',
        'profile_image_url' => 'profile_image_url',
        'sms_phone_number' => 'sms_phone_number',
        'status' => 'status',
        'timezone' => 'timezone',
        'unread_messages' => 'unread_messages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversation_participant_arn' => 'setConversationParticipantArn',
        'conversation_participant_name' => 'setConversationParticipantName',
        'conversation_participant_uuid' => 'setConversationParticipantUuid',
        'email' => 'setEmail',
        'joined_dts' => 'setJoinedDts',
        'language_iso_code' => 'setLanguageIsoCode',
        'last_message_dts' => 'setLastMessageDts',
        'left_dts' => 'setLeftDts',
        'profile_image_url' => 'setProfileImageUrl',
        'sms_phone_number' => 'setSmsPhoneNumber',
        'status' => 'setStatus',
        'timezone' => 'setTimezone',
        'unread_messages' => 'setUnreadMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversation_participant_arn' => 'getConversationParticipantArn',
        'conversation_participant_name' => 'getConversationParticipantName',
        'conversation_participant_uuid' => 'getConversationParticipantUuid',
        'email' => 'getEmail',
        'joined_dts' => 'getJoinedDts',
        'language_iso_code' => 'getLanguageIsoCode',
        'last_message_dts' => 'getLastMessageDts',
        'left_dts' => 'getLeftDts',
        'profile_image_url' => 'getProfileImageUrl',
        'sms_phone_number' => 'getSmsPhoneNumber',
        'status' => 'getStatus',
        'timezone' => 'getTimezone',
        'unread_messages' => 'getUnreadMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conversation_participant_arn'] = isset($data['conversation_participant_arn']) ? $data['conversation_participant_arn'] : null;
        $this->container['conversation_participant_name'] = isset($data['conversation_participant_name']) ? $data['conversation_participant_name'] : null;
        $this->container['conversation_participant_uuid'] = isset($data['conversation_participant_uuid']) ? $data['conversation_participant_uuid'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['joined_dts'] = isset($data['joined_dts']) ? $data['joined_dts'] : null;
        $this->container['language_iso_code'] = isset($data['language_iso_code']) ? $data['language_iso_code'] : null;
        $this->container['last_message_dts'] = isset($data['last_message_dts']) ? $data['last_message_dts'] : null;
        $this->container['left_dts'] = isset($data['left_dts']) ? $data['left_dts'] : null;
        $this->container['profile_image_url'] = isset($data['profile_image_url']) ? $data['profile_image_url'] : null;
        $this->container['sms_phone_number'] = isset($data['sms_phone_number']) ? $data['sms_phone_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['unread_messages'] = isset($data['unread_messages']) ? $data['unread_messages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversation_participant_arn
     *
     * @return string
     */
    public function getConversationParticipantArn()
    {
        return $this->container['conversation_participant_arn'];
    }

    /**
     * Sets conversation_participant_arn
     *
     * @param string $conversation_participant_arn conversation_participant_arn
     *
     * @return $this
     */
    public function setConversationParticipantArn($conversation_participant_arn)
    {
        $this->container['conversation_participant_arn'] = $conversation_participant_arn;

        return $this;
    }

    /**
     * Gets conversation_participant_name
     *
     * @return string
     */
    public function getConversationParticipantName()
    {
        return $this->container['conversation_participant_name'];
    }

    /**
     * Sets conversation_participant_name
     *
     * @param string $conversation_participant_name conversation_participant_name
     *
     * @return $this
     */
    public function setConversationParticipantName($conversation_participant_name)
    {
        $this->container['conversation_participant_name'] = $conversation_participant_name;

        return $this;
    }

    /**
     * Gets conversation_participant_uuid
     *
     * @return string
     */
    public function getConversationParticipantUuid()
    {
        return $this->container['conversation_participant_uuid'];
    }

    /**
     * Sets conversation_participant_uuid
     *
     * @param string $conversation_participant_uuid conversation_participant_uuid
     *
     * @return $this
     */
    public function setConversationParticipantUuid($conversation_participant_uuid)
    {
        $this->container['conversation_participant_uuid'] = $conversation_participant_uuid;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets joined_dts
     *
     * @return string
     */
    public function getJoinedDts()
    {
        return $this->container['joined_dts'];
    }

    /**
     * Sets joined_dts
     *
     * @param string $joined_dts Joined conversation date/time
     *
     * @return $this
     */
    public function setJoinedDts($joined_dts)
    {
        $this->container['joined_dts'] = $joined_dts;

        return $this;
    }

    /**
     * Gets language_iso_code
     *
     * @return string
     */
    public function getLanguageIsoCode()
    {
        return $this->container['language_iso_code'];
    }

    /**
     * Sets language_iso_code
     *
     * @param string $language_iso_code language_iso_code
     *
     * @return $this
     */
    public function setLanguageIsoCode($language_iso_code)
    {
        $this->container['language_iso_code'] = $language_iso_code;

        return $this;
    }

    /**
     * Gets last_message_dts
     *
     * @return string
     */
    public function getLastMessageDts()
    {
        return $this->container['last_message_dts'];
    }

    /**
     * Sets last_message_dts
     *
     * @param string $last_message_dts Last message date/time
     *
     * @return $this
     */
    public function setLastMessageDts($last_message_dts)
    {
        $this->container['last_message_dts'] = $last_message_dts;

        return $this;
    }

    /**
     * Gets left_dts
     *
     * @return string
     */
    public function getLeftDts()
    {
        return $this->container['left_dts'];
    }

    /**
     * Sets left_dts
     *
     * @param string $left_dts Left conversation date/time
     *
     * @return $this
     */
    public function setLeftDts($left_dts)
    {
        $this->container['left_dts'] = $left_dts;

        return $this;
    }

    /**
     * Gets profile_image_url
     *
     * @return string
     */
    public function getProfileImageUrl()
    {
        return $this->container['profile_image_url'];
    }

    /**
     * Sets profile_image_url
     *
     * @param string $profile_image_url profile_image_url
     *
     * @return $this
     */
    public function setProfileImageUrl($profile_image_url)
    {
        $this->container['profile_image_url'] = $profile_image_url;

        return $this;
    }

    /**
     * Gets sms_phone_number
     *
     * @return string
     */
    public function getSmsPhoneNumber()
    {
        return $this->container['sms_phone_number'];
    }

    /**
     * Sets sms_phone_number
     *
     * @param string $sms_phone_number sms_phone_number
     *
     * @return $this
     */
    public function setSmsPhoneNumber($sms_phone_number)
    {
        $this->container['sms_phone_number'] = $sms_phone_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets unread_messages
     *
     * @return int
     */
    public function getUnreadMessages()
    {
        return $this->container['unread_messages'];
    }

    /**
     * Sets unread_messages
     *
     * @param int $unread_messages unread_messages
     *
     * @return $this
     */
    public function setUnreadMessages($unread_messages)
    {
        $this->container['unread_messages'] = $unread_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


