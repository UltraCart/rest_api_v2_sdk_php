<?php
/**
 * ScreenRecordingPageView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ScreenRecordingPageView Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScreenRecordingPageView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScreenRecordingPageView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => 'string',
        'events' => '\ultracart\v2\models\ScreenRecordingPageViewEvent[]',
        'first_event_timestamp' => 'string',
        'http_post' => 'bool',
        'last_event_timestamp' => 'string',
        'missing_events' => 'bool',
        'params' => '\ultracart\v2\models\ScreenRecordingPageViewParameter[]',
        'range_end' => 'int',
        'range_start' => 'int',
        'referrer' => 'string',
        'referrer_params' => '\ultracart\v2\models\ScreenRecordingPageViewParameter[]',
        'referrer_raw' => 'string',
        'screen_recording_page_view_uuid' => 'string',
        'time_on_page' => 'int',
        'timing_dom_content_loaded' => 'int',
        'timing_loaded' => 'int',
        'truncated_events' => 'bool',
        'ucapv' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'events' => null,
        'first_event_timestamp' => 'dateTime',
        'http_post' => null,
        'last_event_timestamp' => 'dateTime',
        'missing_events' => null,
        'params' => null,
        'range_end' => 'int32',
        'range_start' => 'int32',
        'referrer' => null,
        'referrer_params' => null,
        'referrer_raw' => null,
        'screen_recording_page_view_uuid' => null,
        'time_on_page' => 'int32',
        'timing_dom_content_loaded' => 'int32',
        'timing_loaded' => 'int32',
        'truncated_events' => null,
        'ucapv' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'events' => 'events',
        'first_event_timestamp' => 'first_event_timestamp',
        'http_post' => 'http_post',
        'last_event_timestamp' => 'last_event_timestamp',
        'missing_events' => 'missing_events',
        'params' => 'params',
        'range_end' => 'range_end',
        'range_start' => 'range_start',
        'referrer' => 'referrer',
        'referrer_params' => 'referrer_params',
        'referrer_raw' => 'referrer_raw',
        'screen_recording_page_view_uuid' => 'screen_recording_page_view_uuid',
        'time_on_page' => 'time_on_page',
        'timing_dom_content_loaded' => 'timing_dom_content_loaded',
        'timing_loaded' => 'timing_loaded',
        'truncated_events' => 'truncated_events',
        'ucapv' => 'ucapv',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'events' => 'setEvents',
        'first_event_timestamp' => 'setFirstEventTimestamp',
        'http_post' => 'setHttpPost',
        'last_event_timestamp' => 'setLastEventTimestamp',
        'missing_events' => 'setMissingEvents',
        'params' => 'setParams',
        'range_end' => 'setRangeEnd',
        'range_start' => 'setRangeStart',
        'referrer' => 'setReferrer',
        'referrer_params' => 'setReferrerParams',
        'referrer_raw' => 'setReferrerRaw',
        'screen_recording_page_view_uuid' => 'setScreenRecordingPageViewUuid',
        'time_on_page' => 'setTimeOnPage',
        'timing_dom_content_loaded' => 'setTimingDomContentLoaded',
        'timing_loaded' => 'setTimingLoaded',
        'truncated_events' => 'setTruncatedEvents',
        'ucapv' => 'setUcapv',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'events' => 'getEvents',
        'first_event_timestamp' => 'getFirstEventTimestamp',
        'http_post' => 'getHttpPost',
        'last_event_timestamp' => 'getLastEventTimestamp',
        'missing_events' => 'getMissingEvents',
        'params' => 'getParams',
        'range_end' => 'getRangeEnd',
        'range_start' => 'getRangeStart',
        'referrer' => 'getReferrer',
        'referrer_params' => 'getReferrerParams',
        'referrer_raw' => 'getReferrerRaw',
        'screen_recording_page_view_uuid' => 'getScreenRecordingPageViewUuid',
        'time_on_page' => 'getTimeOnPage',
        'timing_dom_content_loaded' => 'getTimingDomContentLoaded',
        'timing_loaded' => 'getTimingLoaded',
        'truncated_events' => 'getTruncatedEvents',
        'ucapv' => 'getUcapv',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['events'] = $data['events'] ?? null;
        $this->container['first_event_timestamp'] = $data['first_event_timestamp'] ?? null;
        $this->container['http_post'] = $data['http_post'] ?? null;
        $this->container['last_event_timestamp'] = $data['last_event_timestamp'] ?? null;
        $this->container['missing_events'] = $data['missing_events'] ?? null;
        $this->container['params'] = $data['params'] ?? null;
        $this->container['range_end'] = $data['range_end'] ?? null;
        $this->container['range_start'] = $data['range_start'] ?? null;
        $this->container['referrer'] = $data['referrer'] ?? null;
        $this->container['referrer_params'] = $data['referrer_params'] ?? null;
        $this->container['referrer_raw'] = $data['referrer_raw'] ?? null;
        $this->container['screen_recording_page_view_uuid'] = $data['screen_recording_page_view_uuid'] ?? null;
        $this->container['time_on_page'] = $data['time_on_page'] ?? null;
        $this->container['timing_dom_content_loaded'] = $data['timing_dom_content_loaded'] ?? null;
        $this->container['timing_loaded'] = $data['timing_loaded'] ?? null;
        $this->container['truncated_events'] = $data['truncated_events'] ?? null;
        $this->container['ucapv'] = $data['ucapv'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \ultracart\v2\models\ScreenRecordingPageViewEvent[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \ultracart\v2\models\ScreenRecordingPageViewEvent[]|null $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets first_event_timestamp
     *
     * @return string|null
     */
    public function getFirstEventTimestamp()
    {
        return $this->container['first_event_timestamp'];
    }

    /**
     * Sets first_event_timestamp
     *
     * @param string|null $first_event_timestamp First event timestamp
     *
     * @return self
     */
    public function setFirstEventTimestamp($first_event_timestamp)
    {
        $this->container['first_event_timestamp'] = $first_event_timestamp;

        return $this;
    }

    /**
     * Gets http_post
     *
     * @return bool|null
     */
    public function getHttpPost()
    {
        return $this->container['http_post'];
    }

    /**
     * Sets http_post
     *
     * @param bool|null $http_post http_post
     *
     * @return self
     */
    public function setHttpPost($http_post)
    {
        $this->container['http_post'] = $http_post;

        return $this;
    }

    /**
     * Gets last_event_timestamp
     *
     * @return string|null
     */
    public function getLastEventTimestamp()
    {
        return $this->container['last_event_timestamp'];
    }

    /**
     * Sets last_event_timestamp
     *
     * @param string|null $last_event_timestamp Last event timestamp
     *
     * @return self
     */
    public function setLastEventTimestamp($last_event_timestamp)
    {
        $this->container['last_event_timestamp'] = $last_event_timestamp;

        return $this;
    }

    /**
     * Gets missing_events
     *
     * @return bool|null
     */
    public function getMissingEvents()
    {
        return $this->container['missing_events'];
    }

    /**
     * Sets missing_events
     *
     * @param bool|null $missing_events missing_events
     *
     * @return self
     */
    public function setMissingEvents($missing_events)
    {
        $this->container['missing_events'] = $missing_events;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \ultracart\v2\models\ScreenRecordingPageViewParameter[]|null
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \ultracart\v2\models\ScreenRecordingPageViewParameter[]|null $params params
     *
     * @return self
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets range_end
     *
     * @return int|null
     */
    public function getRangeEnd()
    {
        return $this->container['range_end'];
    }

    /**
     * Sets range_end
     *
     * @param int|null $range_end range_end
     *
     * @return self
     */
    public function setRangeEnd($range_end)
    {
        $this->container['range_end'] = $range_end;

        return $this;
    }

    /**
     * Gets range_start
     *
     * @return int|null
     */
    public function getRangeStart()
    {
        return $this->container['range_start'];
    }

    /**
     * Sets range_start
     *
     * @param int|null $range_start range_start
     *
     * @return self
     */
    public function setRangeStart($range_start)
    {
        $this->container['range_start'] = $range_start;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return string|null
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param string|null $referrer referrer
     *
     * @return self
     */
    public function setReferrer($referrer)
    {
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets referrer_params
     *
     * @return \ultracart\v2\models\ScreenRecordingPageViewParameter[]|null
     */
    public function getReferrerParams()
    {
        return $this->container['referrer_params'];
    }

    /**
     * Sets referrer_params
     *
     * @param \ultracart\v2\models\ScreenRecordingPageViewParameter[]|null $referrer_params referrer_params
     *
     * @return self
     */
    public function setReferrerParams($referrer_params)
    {
        $this->container['referrer_params'] = $referrer_params;

        return $this;
    }

    /**
     * Gets referrer_raw
     *
     * @return string|null
     */
    public function getReferrerRaw()
    {
        return $this->container['referrer_raw'];
    }

    /**
     * Sets referrer_raw
     *
     * @param string|null $referrer_raw referrer_raw
     *
     * @return self
     */
    public function setReferrerRaw($referrer_raw)
    {
        $this->container['referrer_raw'] = $referrer_raw;

        return $this;
    }

    /**
     * Gets screen_recording_page_view_uuid
     *
     * @return string|null
     */
    public function getScreenRecordingPageViewUuid()
    {
        return $this->container['screen_recording_page_view_uuid'];
    }

    /**
     * Sets screen_recording_page_view_uuid
     *
     * @param string|null $screen_recording_page_view_uuid screen_recording_page_view_uuid
     *
     * @return self
     */
    public function setScreenRecordingPageViewUuid($screen_recording_page_view_uuid)
    {
        $this->container['screen_recording_page_view_uuid'] = $screen_recording_page_view_uuid;

        return $this;
    }

    /**
     * Gets time_on_page
     *
     * @return int|null
     */
    public function getTimeOnPage()
    {
        return $this->container['time_on_page'];
    }

    /**
     * Sets time_on_page
     *
     * @param int|null $time_on_page time_on_page
     *
     * @return self
     */
    public function setTimeOnPage($time_on_page)
    {
        $this->container['time_on_page'] = $time_on_page;

        return $this;
    }

    /**
     * Gets timing_dom_content_loaded
     *
     * @return int|null
     */
    public function getTimingDomContentLoaded()
    {
        return $this->container['timing_dom_content_loaded'];
    }

    /**
     * Sets timing_dom_content_loaded
     *
     * @param int|null $timing_dom_content_loaded Amount of time for DOMContentLoaded event to fire (milliseconds)
     *
     * @return self
     */
    public function setTimingDomContentLoaded($timing_dom_content_loaded)
    {
        $this->container['timing_dom_content_loaded'] = $timing_dom_content_loaded;

        return $this;
    }

    /**
     * Gets timing_loaded
     *
     * @return int|null
     */
    public function getTimingLoaded()
    {
        return $this->container['timing_loaded'];
    }

    /**
     * Sets timing_loaded
     *
     * @param int|null $timing_loaded Amount of time for loaded event to fire (milliseconds)
     *
     * @return self
     */
    public function setTimingLoaded($timing_loaded)
    {
        $this->container['timing_loaded'] = $timing_loaded;

        return $this;
    }

    /**
     * Gets truncated_events
     *
     * @return bool|null
     */
    public function getTruncatedEvents()
    {
        return $this->container['truncated_events'];
    }

    /**
     * Sets truncated_events
     *
     * @param bool|null $truncated_events truncated_events
     *
     * @return self
     */
    public function setTruncatedEvents($truncated_events)
    {
        $this->container['truncated_events'] = $truncated_events;

        return $this;
    }

    /**
     * Gets ucapv
     *
     * @return string|null
     */
    public function getUcapv()
    {
        return $this->container['ucapv'];
    }

    /**
     * Sets ucapv
     *
     * @param string|null $ucapv ucapv
     *
     * @return self
     */
    public function setUcapv($ucapv)
    {
        $this->container['ucapv'] = $ucapv;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


