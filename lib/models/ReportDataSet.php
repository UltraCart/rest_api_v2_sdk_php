<?php
/**
 * ReportDataSet
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ReportDataSet Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportDataSet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportDataSet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_set_query_uuid' => 'string',
        'data_set_uuid' => 'string',
        'destination_table_id' => 'string',
        'error_message' => 'string',
        'executed_sql' => 'string',
        'for_object_id' => 'string',
        'for_object_type' => 'string',
        'initial_pages' => '\ultracart\v2\models\ReportDataSetPage[]',
        'max_results' => 'int',
        'merchant_id' => 'string',
        'page_count' => 'int',
        'page_size' => 'int',
        'request_dts' => 'string',
        'schema' => '\ultracart\v2\models\ReportDataSetSchema[]',
        'security_level' => 'string',
        'timezone' => 'string',
        'user_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data_set_query_uuid' => null,
        'data_set_uuid' => null,
        'destination_table_id' => null,
        'error_message' => null,
        'executed_sql' => null,
        'for_object_id' => null,
        'for_object_type' => null,
        'initial_pages' => null,
        'max_results' => 'int64',
        'merchant_id' => null,
        'page_count' => 'int32',
        'page_size' => 'int32',
        'request_dts' => 'dateTime',
        'schema' => null,
        'security_level' => null,
        'timezone' => null,
        'user_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_set_query_uuid' => 'data_set_query_uuid',
        'data_set_uuid' => 'data_set_uuid',
        'destination_table_id' => 'destination_table_id',
        'error_message' => 'error_message',
        'executed_sql' => 'executed_sql',
        'for_object_id' => 'for_object_id',
        'for_object_type' => 'for_object_type',
        'initial_pages' => 'initial_pages',
        'max_results' => 'max_results',
        'merchant_id' => 'merchant_id',
        'page_count' => 'page_count',
        'page_size' => 'page_size',
        'request_dts' => 'request_dts',
        'schema' => 'schema',
        'security_level' => 'security_level',
        'timezone' => 'timezone',
        'user_data' => 'user_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_set_query_uuid' => 'setDataSetQueryUuid',
        'data_set_uuid' => 'setDataSetUuid',
        'destination_table_id' => 'setDestinationTableId',
        'error_message' => 'setErrorMessage',
        'executed_sql' => 'setExecutedSql',
        'for_object_id' => 'setForObjectId',
        'for_object_type' => 'setForObjectType',
        'initial_pages' => 'setInitialPages',
        'max_results' => 'setMaxResults',
        'merchant_id' => 'setMerchantId',
        'page_count' => 'setPageCount',
        'page_size' => 'setPageSize',
        'request_dts' => 'setRequestDts',
        'schema' => 'setSchema',
        'security_level' => 'setSecurityLevel',
        'timezone' => 'setTimezone',
        'user_data' => 'setUserData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_set_query_uuid' => 'getDataSetQueryUuid',
        'data_set_uuid' => 'getDataSetUuid',
        'destination_table_id' => 'getDestinationTableId',
        'error_message' => 'getErrorMessage',
        'executed_sql' => 'getExecutedSql',
        'for_object_id' => 'getForObjectId',
        'for_object_type' => 'getForObjectType',
        'initial_pages' => 'getInitialPages',
        'max_results' => 'getMaxResults',
        'merchant_id' => 'getMerchantId',
        'page_count' => 'getPageCount',
        'page_size' => 'getPageSize',
        'request_dts' => 'getRequestDts',
        'schema' => 'getSchema',
        'security_level' => 'getSecurityLevel',
        'timezone' => 'getTimezone',
        'user_data' => 'getUserData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FOR_OBJECT_TYPE_SCHEMA = 'schema';
    public const FOR_OBJECT_TYPE_FILTER = 'filter';
    public const FOR_OBJECT_TYPE_VISUALIZATION = 'visualization';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForObjectTypeAllowableValues()
    {
        return [
            self::FOR_OBJECT_TYPE_SCHEMA,
            self::FOR_OBJECT_TYPE_FILTER,
            self::FOR_OBJECT_TYPE_VISUALIZATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_set_query_uuid'] = $data['data_set_query_uuid'] ?? null;
        $this->container['data_set_uuid'] = $data['data_set_uuid'] ?? null;
        $this->container['destination_table_id'] = $data['destination_table_id'] ?? null;
        $this->container['error_message'] = $data['error_message'] ?? null;
        $this->container['executed_sql'] = $data['executed_sql'] ?? null;
        $this->container['for_object_id'] = $data['for_object_id'] ?? null;
        $this->container['for_object_type'] = $data['for_object_type'] ?? null;
        $this->container['initial_pages'] = $data['initial_pages'] ?? null;
        $this->container['max_results'] = $data['max_results'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['page_count'] = $data['page_count'] ?? null;
        $this->container['page_size'] = $data['page_size'] ?? null;
        $this->container['request_dts'] = $data['request_dts'] ?? null;
        $this->container['schema'] = $data['schema'] ?? null;
        $this->container['security_level'] = $data['security_level'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['user_data'] = $data['user_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getForObjectTypeAllowableValues();
        if (!is_null($this->container['for_object_type']) && !in_array($this->container['for_object_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'for_object_type', must be one of '%s'",
                $this->container['for_object_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_set_query_uuid
     *
     * @return string|null
     */
    public function getDataSetQueryUuid()
    {
        return $this->container['data_set_query_uuid'];
    }

    /**
     * Sets data_set_query_uuid
     *
     * @param string|null $data_set_query_uuid A unique identifier assigned to the data set query that is returned.
     *
     * @return self
     */
    public function setDataSetQueryUuid($data_set_query_uuid)
    {
        $this->container['data_set_query_uuid'] = $data_set_query_uuid;

        return $this;
    }

    /**
     * Gets data_set_uuid
     *
     * @return string|null
     */
    public function getDataSetUuid()
    {
        return $this->container['data_set_uuid'];
    }

    /**
     * Sets data_set_uuid
     *
     * @param string|null $data_set_uuid A unique identifier assigned to the data set that is returned.
     *
     * @return self
     */
    public function setDataSetUuid($data_set_uuid)
    {
        $this->container['data_set_uuid'] = $data_set_uuid;

        return $this;
    }

    /**
     * Gets destination_table_id
     *
     * @return string|null
     */
    public function getDestinationTableId()
    {
        return $this->container['destination_table_id'];
    }

    /**
     * Sets destination_table_id
     *
     * @param string|null $destination_table_id The BigQuery destination table id that contains the result.
     *
     * @return self
     */
    public function setDestinationTableId($destination_table_id)
    {
        $this->container['destination_table_id'] = $destination_table_id;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message Error message if the query failed.
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets executed_sql
     *
     * @return string|null
     */
    public function getExecutedSql()
    {
        return $this->container['executed_sql'];
    }

    /**
     * Sets executed_sql
     *
     * @param string|null $executed_sql executed_sql
     *
     * @return self
     */
    public function setExecutedSql($executed_sql)
    {
        $this->container['executed_sql'] = $executed_sql;

        return $this;
    }

    /**
     * Gets for_object_id
     *
     * @return string|null
     */
    public function getForObjectId()
    {
        return $this->container['for_object_id'];
    }

    /**
     * Sets for_object_id
     *
     * @param string|null $for_object_id An identifier that can be used to help match up the returned data set
     *
     * @return self
     */
    public function setForObjectId($for_object_id)
    {
        $this->container['for_object_id'] = $for_object_id;

        return $this;
    }

    /**
     * Gets for_object_type
     *
     * @return string|null
     */
    public function getForObjectType()
    {
        return $this->container['for_object_type'];
    }

    /**
     * Sets for_object_type
     *
     * @param string|null $for_object_type The type of object this data set is for
     *
     * @return self
     */
    public function setForObjectType($for_object_type)
    {
        $allowedValues = $this->getForObjectTypeAllowableValues();
        if (!is_null($for_object_type) && !in_array($for_object_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'for_object_type', must be one of '%s'",
                    $for_object_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['for_object_type'] = $for_object_type;

        return $this;
    }

    /**
     * Gets initial_pages
     *
     * @return \ultracart\v2\models\ReportDataSetPage[]|null
     */
    public function getInitialPages()
    {
        return $this->container['initial_pages'];
    }

    /**
     * Sets initial_pages
     *
     * @param \ultracart\v2\models\ReportDataSetPage[]|null $initial_pages Initial pages returned in the dataset
     *
     * @return self
     */
    public function setInitialPages($initial_pages)
    {
        $this->container['initial_pages'] = $initial_pages;

        return $this;
    }

    /**
     * Gets max_results
     *
     * @return int|null
     */
    public function getMaxResults()
    {
        return $this->container['max_results'];
    }

    /**
     * Sets max_results
     *
     * @param int|null $max_results The total number of results
     *
     * @return self
     */
    public function setMaxResults($max_results)
    {
        $this->container['max_results'] = $max_results;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Merchant that owns this data set
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int|null
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int|null $page_count The total number of pages in the result set
     *
     * @return self
     */
    public function setPageCount($page_count)
    {
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int|null $page_size The size of the pages
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets request_dts
     *
     * @return string|null
     */
    public function getRequestDts()
    {
        return $this->container['request_dts'];
    }

    /**
     * Sets request_dts
     *
     * @param string|null $request_dts Date/Time of the client submitted the request.  Can be used to resolve out of order query completion results
     *
     * @return self
     */
    public function setRequestDts($request_dts)
    {
        $this->container['request_dts'] = $request_dts;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return \ultracart\v2\models\ReportDataSetSchema[]|null
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param \ultracart\v2\models\ReportDataSetSchema[]|null $schema The schema associated with the data set.
     *
     * @return self
     */
    public function setSchema($schema)
    {
        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets security_level
     *
     * @return string|null
     */
    public function getSecurityLevel()
    {
        return $this->container['security_level'];
    }

    /**
     * Sets security_level
     *
     * @param string|null $security_level Security level this dataset was read from.
     *
     * @return self
     */
    public function setSecurityLevel($security_level)
    {
        $this->container['security_level'] = $security_level;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets user_data
     *
     * @return string|null
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     *
     * @param string|null $user_data Any other data that needs to be returned with the response to help the UI
     *
     * @return self
     */
    public function setUserData($user_data)
    {
        $this->container['user_data'] = $user_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


