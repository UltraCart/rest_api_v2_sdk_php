<?php
/**
 * RotatingTransactionGateway
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * RotatingTransactionGateway Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RotatingTransactionGateway implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RotatingTransactionGateway';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_native_currency_codes' => '\ultracart\v2\models\RtgCurrency[]',
        'auto_order_cancel_unless_response_name' => 'string',
        'auto_order_cancel_unless_response_values' => 'string[]',
        'base_currency_code' => 'string',
        'cascade_code' => 'string',
        'cascade_codes' => 'string[]',
        'cascade_daily_auto_order_code' => 'string',
        'charge_appears_on_statement_as' => 'string',
        'code' => 'string',
        'current_daily' => 'float',
        'current_daily_auto_order' => 'float',
        'current_monthly' => 'float',
        'customer_service_email' => 'string',
        'customer_service_phone' => 'string',
        'day_of_month_restrictions' => '\ultracart\v2\models\RtgDayOfMonthRestriction[]',
        'day_of_week_restrictions' => '\ultracart\v2\models\RtgDayOfWeekRestriction[]',
        'deactivate_after_failures' => 'int',
        'end_date' => 'string',
        'gateways' => '\ultracart\v2\models\TransactionGateway[]',
        'maximum_daily' => 'float',
        'maximum_daily_auto_order' => 'float',
        'maximum_monthly' => 'float',
        'next_daily_auto_order_reset' => 'string',
        'next_daily_reset' => 'string',
        'next_monthly_reset' => 'string',
        'order_total' => 'float',
        'order_total_comparison' => 'string',
        'rebill_auto_orders_against_this_rtg_code' => 'string',
        'reserve_days' => 'int',
        'reserve_percentage' => 'float',
        'reserve_refunded' => 'bool',
        'reserves_released_through' => 'string',
        'rotating_transaction_gateway_oid' => 'int',
        'selected_gateway_name' => 'string',
        'show_cascade_codes' => 'bool',
        'show_merchant_account_profiles' => 'bool',
        'start_date' => 'string',
        'status' => 'string',
        'theme_restrictions' => '\ultracart\v2\models\RtgThemeRestriction[]',
        'traffic_percentage' => 'float',
        'trial_daily_amount' => 'int',
        'trial_daily_limit' => 'int',
        'trial_monthly_amount' => 'int',
        'trial_monthly_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_native_currency_codes' => null,
        'auto_order_cancel_unless_response_name' => null,
        'auto_order_cancel_unless_response_values' => null,
        'base_currency_code' => null,
        'cascade_code' => null,
        'cascade_codes' => null,
        'cascade_daily_auto_order_code' => null,
        'charge_appears_on_statement_as' => null,
        'code' => null,
        'current_daily' => null,
        'current_daily_auto_order' => null,
        'current_monthly' => null,
        'customer_service_email' => null,
        'customer_service_phone' => null,
        'day_of_month_restrictions' => null,
        'day_of_week_restrictions' => null,
        'deactivate_after_failures' => 'int32',
        'end_date' => 'dateTime',
        'gateways' => null,
        'maximum_daily' => null,
        'maximum_daily_auto_order' => null,
        'maximum_monthly' => null,
        'next_daily_auto_order_reset' => 'dateTime',
        'next_daily_reset' => 'dateTime',
        'next_monthly_reset' => 'dateTime',
        'order_total' => null,
        'order_total_comparison' => null,
        'rebill_auto_orders_against_this_rtg_code' => null,
        'reserve_days' => 'int32',
        'reserve_percentage' => null,
        'reserve_refunded' => null,
        'reserves_released_through' => 'dateTime',
        'rotating_transaction_gateway_oid' => 'int32',
        'selected_gateway_name' => null,
        'show_cascade_codes' => null,
        'show_merchant_account_profiles' => null,
        'start_date' => 'dateTime',
        'status' => null,
        'theme_restrictions' => null,
        'traffic_percentage' => null,
        'trial_daily_amount' => 'int32',
        'trial_daily_limit' => 'int32',
        'trial_monthly_amount' => 'int32',
        'trial_monthly_limit' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_native_currency_codes' => 'additional_native_currency_codes',
        'auto_order_cancel_unless_response_name' => 'auto_order_cancel_unless_response_name',
        'auto_order_cancel_unless_response_values' => 'auto_order_cancel_unless_response_values',
        'base_currency_code' => 'base_currency_code',
        'cascade_code' => 'cascade_code',
        'cascade_codes' => 'cascade_codes',
        'cascade_daily_auto_order_code' => 'cascade_daily_auto_order_code',
        'charge_appears_on_statement_as' => 'charge_appears_on_statement_as',
        'code' => 'code',
        'current_daily' => 'current_daily',
        'current_daily_auto_order' => 'current_daily_auto_order',
        'current_monthly' => 'current_monthly',
        'customer_service_email' => 'customer_service_email',
        'customer_service_phone' => 'customer_service_phone',
        'day_of_month_restrictions' => 'day_of_month_restrictions',
        'day_of_week_restrictions' => 'day_of_week_restrictions',
        'deactivate_after_failures' => 'deactivate_after_failures',
        'end_date' => 'end_date',
        'gateways' => 'gateways',
        'maximum_daily' => 'maximum_daily',
        'maximum_daily_auto_order' => 'maximum_daily_auto_order',
        'maximum_monthly' => 'maximum_monthly',
        'next_daily_auto_order_reset' => 'next_daily_auto_order_reset',
        'next_daily_reset' => 'next_daily_reset',
        'next_monthly_reset' => 'next_monthly_reset',
        'order_total' => 'order_total',
        'order_total_comparison' => 'order_total_comparison',
        'rebill_auto_orders_against_this_rtg_code' => 'rebill_auto_orders_against_this_rtg_code',
        'reserve_days' => 'reserve_days',
        'reserve_percentage' => 'reserve_percentage',
        'reserve_refunded' => 'reserve_refunded',
        'reserves_released_through' => 'reserves_released_through',
        'rotating_transaction_gateway_oid' => 'rotating_transaction_gateway_oid',
        'selected_gateway_name' => 'selected_gateway_name',
        'show_cascade_codes' => 'show_cascade_codes',
        'show_merchant_account_profiles' => 'show_merchant_account_profiles',
        'start_date' => 'start_date',
        'status' => 'status',
        'theme_restrictions' => 'theme_restrictions',
        'traffic_percentage' => 'traffic_percentage',
        'trial_daily_amount' => 'trial_daily_amount',
        'trial_daily_limit' => 'trial_daily_limit',
        'trial_monthly_amount' => 'trial_monthly_amount',
        'trial_monthly_limit' => 'trial_monthly_limit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_native_currency_codes' => 'setAdditionalNativeCurrencyCodes',
        'auto_order_cancel_unless_response_name' => 'setAutoOrderCancelUnlessResponseName',
        'auto_order_cancel_unless_response_values' => 'setAutoOrderCancelUnlessResponseValues',
        'base_currency_code' => 'setBaseCurrencyCode',
        'cascade_code' => 'setCascadeCode',
        'cascade_codes' => 'setCascadeCodes',
        'cascade_daily_auto_order_code' => 'setCascadeDailyAutoOrderCode',
        'charge_appears_on_statement_as' => 'setChargeAppearsOnStatementAs',
        'code' => 'setCode',
        'current_daily' => 'setCurrentDaily',
        'current_daily_auto_order' => 'setCurrentDailyAutoOrder',
        'current_monthly' => 'setCurrentMonthly',
        'customer_service_email' => 'setCustomerServiceEmail',
        'customer_service_phone' => 'setCustomerServicePhone',
        'day_of_month_restrictions' => 'setDayOfMonthRestrictions',
        'day_of_week_restrictions' => 'setDayOfWeekRestrictions',
        'deactivate_after_failures' => 'setDeactivateAfterFailures',
        'end_date' => 'setEndDate',
        'gateways' => 'setGateways',
        'maximum_daily' => 'setMaximumDaily',
        'maximum_daily_auto_order' => 'setMaximumDailyAutoOrder',
        'maximum_monthly' => 'setMaximumMonthly',
        'next_daily_auto_order_reset' => 'setNextDailyAutoOrderReset',
        'next_daily_reset' => 'setNextDailyReset',
        'next_monthly_reset' => 'setNextMonthlyReset',
        'order_total' => 'setOrderTotal',
        'order_total_comparison' => 'setOrderTotalComparison',
        'rebill_auto_orders_against_this_rtg_code' => 'setRebillAutoOrdersAgainstThisRtgCode',
        'reserve_days' => 'setReserveDays',
        'reserve_percentage' => 'setReservePercentage',
        'reserve_refunded' => 'setReserveRefunded',
        'reserves_released_through' => 'setReservesReleasedThrough',
        'rotating_transaction_gateway_oid' => 'setRotatingTransactionGatewayOid',
        'selected_gateway_name' => 'setSelectedGatewayName',
        'show_cascade_codes' => 'setShowCascadeCodes',
        'show_merchant_account_profiles' => 'setShowMerchantAccountProfiles',
        'start_date' => 'setStartDate',
        'status' => 'setStatus',
        'theme_restrictions' => 'setThemeRestrictions',
        'traffic_percentage' => 'setTrafficPercentage',
        'trial_daily_amount' => 'setTrialDailyAmount',
        'trial_daily_limit' => 'setTrialDailyLimit',
        'trial_monthly_amount' => 'setTrialMonthlyAmount',
        'trial_monthly_limit' => 'setTrialMonthlyLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_native_currency_codes' => 'getAdditionalNativeCurrencyCodes',
        'auto_order_cancel_unless_response_name' => 'getAutoOrderCancelUnlessResponseName',
        'auto_order_cancel_unless_response_values' => 'getAutoOrderCancelUnlessResponseValues',
        'base_currency_code' => 'getBaseCurrencyCode',
        'cascade_code' => 'getCascadeCode',
        'cascade_codes' => 'getCascadeCodes',
        'cascade_daily_auto_order_code' => 'getCascadeDailyAutoOrderCode',
        'charge_appears_on_statement_as' => 'getChargeAppearsOnStatementAs',
        'code' => 'getCode',
        'current_daily' => 'getCurrentDaily',
        'current_daily_auto_order' => 'getCurrentDailyAutoOrder',
        'current_monthly' => 'getCurrentMonthly',
        'customer_service_email' => 'getCustomerServiceEmail',
        'customer_service_phone' => 'getCustomerServicePhone',
        'day_of_month_restrictions' => 'getDayOfMonthRestrictions',
        'day_of_week_restrictions' => 'getDayOfWeekRestrictions',
        'deactivate_after_failures' => 'getDeactivateAfterFailures',
        'end_date' => 'getEndDate',
        'gateways' => 'getGateways',
        'maximum_daily' => 'getMaximumDaily',
        'maximum_daily_auto_order' => 'getMaximumDailyAutoOrder',
        'maximum_monthly' => 'getMaximumMonthly',
        'next_daily_auto_order_reset' => 'getNextDailyAutoOrderReset',
        'next_daily_reset' => 'getNextDailyReset',
        'next_monthly_reset' => 'getNextMonthlyReset',
        'order_total' => 'getOrderTotal',
        'order_total_comparison' => 'getOrderTotalComparison',
        'rebill_auto_orders_against_this_rtg_code' => 'getRebillAutoOrdersAgainstThisRtgCode',
        'reserve_days' => 'getReserveDays',
        'reserve_percentage' => 'getReservePercentage',
        'reserve_refunded' => 'getReserveRefunded',
        'reserves_released_through' => 'getReservesReleasedThrough',
        'rotating_transaction_gateway_oid' => 'getRotatingTransactionGatewayOid',
        'selected_gateway_name' => 'getSelectedGatewayName',
        'show_cascade_codes' => 'getShowCascadeCodes',
        'show_merchant_account_profiles' => 'getShowMerchantAccountProfiles',
        'start_date' => 'getStartDate',
        'status' => 'getStatus',
        'theme_restrictions' => 'getThemeRestrictions',
        'traffic_percentage' => 'getTrafficPercentage',
        'trial_daily_amount' => 'getTrialDailyAmount',
        'trial_daily_limit' => 'getTrialDailyLimit',
        'trial_monthly_amount' => 'getTrialMonthlyAmount',
        'trial_monthly_limit' => 'getTrialMonthlyLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORDER_TOTAL_COMPARISON_LESS_THAN = '<';
    const ORDER_TOTAL_COMPARISON_LESS_THAN_OR_EQUAL_TO = '<=';
    const ORDER_TOTAL_COMPARISON_EQUAL = '=';
    const ORDER_TOTAL_COMPARISON_GREATER_THAN = '>';
    const ORDER_TOTAL_COMPARISON_GREATER_THAN_OR_EQUAL_TO = '>=';
    const STATUS_ACTIVE = 'active';
    const STATUS_INACTIVE = 'inactive';
    const STATUS_STANDBY = 'standby';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTotalComparisonAllowableValues()
    {
        return [
            self::ORDER_TOTAL_COMPARISON_LESS_THAN,
            self::ORDER_TOTAL_COMPARISON_LESS_THAN_OR_EQUAL_TO,
            self::ORDER_TOTAL_COMPARISON_EQUAL,
            self::ORDER_TOTAL_COMPARISON_GREATER_THAN,
            self::ORDER_TOTAL_COMPARISON_GREATER_THAN_OR_EQUAL_TO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
            self::STATUS_STANDBY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_native_currency_codes'] = isset($data['additional_native_currency_codes']) ? $data['additional_native_currency_codes'] : null;
        $this->container['auto_order_cancel_unless_response_name'] = isset($data['auto_order_cancel_unless_response_name']) ? $data['auto_order_cancel_unless_response_name'] : null;
        $this->container['auto_order_cancel_unless_response_values'] = isset($data['auto_order_cancel_unless_response_values']) ? $data['auto_order_cancel_unless_response_values'] : null;
        $this->container['base_currency_code'] = isset($data['base_currency_code']) ? $data['base_currency_code'] : null;
        $this->container['cascade_code'] = isset($data['cascade_code']) ? $data['cascade_code'] : null;
        $this->container['cascade_codes'] = isset($data['cascade_codes']) ? $data['cascade_codes'] : null;
        $this->container['cascade_daily_auto_order_code'] = isset($data['cascade_daily_auto_order_code']) ? $data['cascade_daily_auto_order_code'] : null;
        $this->container['charge_appears_on_statement_as'] = isset($data['charge_appears_on_statement_as']) ? $data['charge_appears_on_statement_as'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['current_daily'] = isset($data['current_daily']) ? $data['current_daily'] : null;
        $this->container['current_daily_auto_order'] = isset($data['current_daily_auto_order']) ? $data['current_daily_auto_order'] : null;
        $this->container['current_monthly'] = isset($data['current_monthly']) ? $data['current_monthly'] : null;
        $this->container['customer_service_email'] = isset($data['customer_service_email']) ? $data['customer_service_email'] : null;
        $this->container['customer_service_phone'] = isset($data['customer_service_phone']) ? $data['customer_service_phone'] : null;
        $this->container['day_of_month_restrictions'] = isset($data['day_of_month_restrictions']) ? $data['day_of_month_restrictions'] : null;
        $this->container['day_of_week_restrictions'] = isset($data['day_of_week_restrictions']) ? $data['day_of_week_restrictions'] : null;
        $this->container['deactivate_after_failures'] = isset($data['deactivate_after_failures']) ? $data['deactivate_after_failures'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['gateways'] = isset($data['gateways']) ? $data['gateways'] : null;
        $this->container['maximum_daily'] = isset($data['maximum_daily']) ? $data['maximum_daily'] : null;
        $this->container['maximum_daily_auto_order'] = isset($data['maximum_daily_auto_order']) ? $data['maximum_daily_auto_order'] : null;
        $this->container['maximum_monthly'] = isset($data['maximum_monthly']) ? $data['maximum_monthly'] : null;
        $this->container['next_daily_auto_order_reset'] = isset($data['next_daily_auto_order_reset']) ? $data['next_daily_auto_order_reset'] : null;
        $this->container['next_daily_reset'] = isset($data['next_daily_reset']) ? $data['next_daily_reset'] : null;
        $this->container['next_monthly_reset'] = isset($data['next_monthly_reset']) ? $data['next_monthly_reset'] : null;
        $this->container['order_total'] = isset($data['order_total']) ? $data['order_total'] : null;
        $this->container['order_total_comparison'] = isset($data['order_total_comparison']) ? $data['order_total_comparison'] : null;
        $this->container['rebill_auto_orders_against_this_rtg_code'] = isset($data['rebill_auto_orders_against_this_rtg_code']) ? $data['rebill_auto_orders_against_this_rtg_code'] : null;
        $this->container['reserve_days'] = isset($data['reserve_days']) ? $data['reserve_days'] : null;
        $this->container['reserve_percentage'] = isset($data['reserve_percentage']) ? $data['reserve_percentage'] : null;
        $this->container['reserve_refunded'] = isset($data['reserve_refunded']) ? $data['reserve_refunded'] : null;
        $this->container['reserves_released_through'] = isset($data['reserves_released_through']) ? $data['reserves_released_through'] : null;
        $this->container['rotating_transaction_gateway_oid'] = isset($data['rotating_transaction_gateway_oid']) ? $data['rotating_transaction_gateway_oid'] : null;
        $this->container['selected_gateway_name'] = isset($data['selected_gateway_name']) ? $data['selected_gateway_name'] : null;
        $this->container['show_cascade_codes'] = isset($data['show_cascade_codes']) ? $data['show_cascade_codes'] : null;
        $this->container['show_merchant_account_profiles'] = isset($data['show_merchant_account_profiles']) ? $data['show_merchant_account_profiles'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['theme_restrictions'] = isset($data['theme_restrictions']) ? $data['theme_restrictions'] : null;
        $this->container['traffic_percentage'] = isset($data['traffic_percentage']) ? $data['traffic_percentage'] : null;
        $this->container['trial_daily_amount'] = isset($data['trial_daily_amount']) ? $data['trial_daily_amount'] : null;
        $this->container['trial_daily_limit'] = isset($data['trial_daily_limit']) ? $data['trial_daily_limit'] : null;
        $this->container['trial_monthly_amount'] = isset($data['trial_monthly_amount']) ? $data['trial_monthly_amount'] : null;
        $this->container['trial_monthly_limit'] = isset($data['trial_monthly_limit']) ? $data['trial_monthly_limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderTotalComparisonAllowableValues();
        if (!is_null($this->container['order_total_comparison']) && !in_array($this->container['order_total_comparison'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_total_comparison', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_native_currency_codes
     *
     * @return \ultracart\v2\models\RtgCurrency[]
     */
    public function getAdditionalNativeCurrencyCodes()
    {
        return $this->container['additional_native_currency_codes'];
    }

    /**
     * Sets additional_native_currency_codes
     *
     * @param \ultracart\v2\models\RtgCurrency[] $additional_native_currency_codes An array of all currencies known to the UltraCart system and a boolean indicating whether this gateway supports that currency.
     *
     * @return $this
     */
    public function setAdditionalNativeCurrencyCodes($additional_native_currency_codes)
    {
        $this->container['additional_native_currency_codes'] = $additional_native_currency_codes;

        return $this;
    }

    /**
     * Gets auto_order_cancel_unless_response_name
     *
     * @return string
     */
    public function getAutoOrderCancelUnlessResponseName()
    {
        return $this->container['auto_order_cancel_unless_response_name'];
    }

    /**
     * Sets auto_order_cancel_unless_response_name
     *
     * @param string $auto_order_cancel_unless_response_name Advanced feature for canceling an auto order unless the transaction gateway response contains a field with this name.  If specified, this field must exist and the value must equal a value in the auto_order_cancel_unless_response_values array
     *
     * @return $this
     */
    public function setAutoOrderCancelUnlessResponseName($auto_order_cancel_unless_response_name)
    {
        $this->container['auto_order_cancel_unless_response_name'] = $auto_order_cancel_unless_response_name;

        return $this;
    }

    /**
     * Gets auto_order_cancel_unless_response_values
     *
     * @return string[]
     */
    public function getAutoOrderCancelUnlessResponseValues()
    {
        return $this->container['auto_order_cancel_unless_response_values'];
    }

    /**
     * Sets auto_order_cancel_unless_response_values
     *
     * @param string[] $auto_order_cancel_unless_response_values Advanced feature for canceling an auto order unless the transaction gateway response contains a field with the name specified in auto_order_cancel_unless_response_name.  If specified, this field must exist and the value must equal a value in this array.  If nothing matches, the auto order is canceled.
     *
     * @return $this
     */
    public function setAutoOrderCancelUnlessResponseValues($auto_order_cancel_unless_response_values)
    {
        $this->container['auto_order_cancel_unless_response_values'] = $auto_order_cancel_unless_response_values;

        return $this;
    }

    /**
     * Gets base_currency_code
     *
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['base_currency_code'];
    }

    /**
     * Sets base_currency_code
     *
     * @param string $base_currency_code The base currency code for your gateway.  For example, USD.
     *
     * @return $this
     */
    public function setBaseCurrencyCode($base_currency_code)
    {
        $this->container['base_currency_code'] = $base_currency_code;

        return $this;
    }

    /**
     * Gets cascade_code
     *
     * @return string
     */
    public function getCascadeCode()
    {
        return $this->container['cascade_code'];
    }

    /**
     * Sets cascade_code
     *
     * @param string $cascade_code Optional field specifying a different rotating gateway to use if this gateway fails to process the transaction.
     *
     * @return $this
     */
    public function setCascadeCode($cascade_code)
    {
        $this->container['cascade_code'] = $cascade_code;

        return $this;
    }

    /**
     * Gets cascade_codes
     *
     * @return string[]
     */
    public function getCascadeCodes()
    {
        return $this->container['cascade_codes'];
    }

    /**
     * Sets cascade_codes
     *
     * @param string[] $cascade_codes A list of other rotating transaction gateways that can be used as a lookup to assign actions based on failures of this gateway
     *
     * @return $this
     */
    public function setCascadeCodes($cascade_codes)
    {
        $this->container['cascade_codes'] = $cascade_codes;

        return $this;
    }

    /**
     * Gets cascade_daily_auto_order_code
     *
     * @return string
     */
    public function getCascadeDailyAutoOrderCode()
    {
        return $this->container['cascade_daily_auto_order_code'];
    }

    /**
     * Sets cascade_daily_auto_order_code
     *
     * @param string $cascade_daily_auto_order_code The code for the next rotating gateway that should be used when this gateway reaches a daily limit
     *
     * @return $this
     */
    public function setCascadeDailyAutoOrderCode($cascade_daily_auto_order_code)
    {
        $this->container['cascade_daily_auto_order_code'] = $cascade_daily_auto_order_code;

        return $this;
    }

    /**
     * Gets charge_appears_on_statement_as
     *
     * @return string
     */
    public function getChargeAppearsOnStatementAs()
    {
        return $this->container['charge_appears_on_statement_as'];
    }

    /**
     * Sets charge_appears_on_statement_as
     *
     * @param string $charge_appears_on_statement_as Optional field providing an alternate Charge Appears As value for this rotating gateway
     *
     * @return $this
     */
    public function setChargeAppearsOnStatementAs($charge_appears_on_statement_as)
    {
        $this->container['charge_appears_on_statement_as'] = $charge_appears_on_statement_as;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code A human friendly short code used to recognize and differentiate this rotating gateway with other rotating gateways
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets current_daily
     *
     * @return float
     */
    public function getCurrentDaily()
    {
        return $this->container['current_daily'];
    }

    /**
     * Sets current_daily
     *
     * @param float $current_daily The current daily dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.
     *
     * @return $this
     */
    public function setCurrentDaily($current_daily)
    {
        $this->container['current_daily'] = $current_daily;

        return $this;
    }

    /**
     * Gets current_daily_auto_order
     *
     * @return float
     */
    public function getCurrentDailyAutoOrder()
    {
        return $this->container['current_daily_auto_order'];
    }

    /**
     * Sets current_daily_auto_order
     *
     * @param float $current_daily_auto_order The current daily dollar amount of auto orders (recurring) this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.
     *
     * @return $this
     */
    public function setCurrentDailyAutoOrder($current_daily_auto_order)
    {
        $this->container['current_daily_auto_order'] = $current_daily_auto_order;

        return $this;
    }

    /**
     * Gets current_monthly
     *
     * @return float
     */
    public function getCurrentMonthly()
    {
        return $this->container['current_monthly'];
    }

    /**
     * Sets current_monthly
     *
     * @param float $current_monthly The current monthly dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.
     *
     * @return $this
     */
    public function setCurrentMonthly($current_monthly)
    {
        $this->container['current_monthly'] = $current_monthly;

        return $this;
    }

    /**
     * Gets customer_service_email
     *
     * @return string
     */
    public function getCustomerServiceEmail()
    {
        return $this->container['customer_service_email'];
    }

    /**
     * Sets customer_service_email
     *
     * @param string $customer_service_email The customer service email address for this gateway
     *
     * @return $this
     */
    public function setCustomerServiceEmail($customer_service_email)
    {
        $this->container['customer_service_email'] = $customer_service_email;

        return $this;
    }

    /**
     * Gets customer_service_phone
     *
     * @return string
     */
    public function getCustomerServicePhone()
    {
        return $this->container['customer_service_phone'];
    }

    /**
     * Sets customer_service_phone
     *
     * @param string $customer_service_phone The customer service phone number for this gateway
     *
     * @return $this
     */
    public function setCustomerServicePhone($customer_service_phone)
    {
        $this->container['customer_service_phone'] = $customer_service_phone;

        return $this;
    }

    /**
     * Gets day_of_month_restrictions
     *
     * @return \ultracart\v2\models\RtgDayOfMonthRestriction[]
     */
    public function getDayOfMonthRestrictions()
    {
        return $this->container['day_of_month_restrictions'];
    }

    /**
     * Sets day_of_month_restrictions
     *
     * @param \ultracart\v2\models\RtgDayOfMonthRestriction[] $day_of_month_restrictions Array containing all 31 (possible) days and any optional restrictions for one or more days.
     *
     * @return $this
     */
    public function setDayOfMonthRestrictions($day_of_month_restrictions)
    {
        $this->container['day_of_month_restrictions'] = $day_of_month_restrictions;

        return $this;
    }

    /**
     * Gets day_of_week_restrictions
     *
     * @return \ultracart\v2\models\RtgDayOfWeekRestriction[]
     */
    public function getDayOfWeekRestrictions()
    {
        return $this->container['day_of_week_restrictions'];
    }

    /**
     * Sets day_of_week_restrictions
     *
     * @param \ultracart\v2\models\RtgDayOfWeekRestriction[] $day_of_week_restrictions Array containing all seven days of the week and any optional restrictions for one or more days
     *
     * @return $this
     */
    public function setDayOfWeekRestrictions($day_of_week_restrictions)
    {
        $this->container['day_of_week_restrictions'] = $day_of_week_restrictions;

        return $this;
    }

    /**
     * Gets deactivate_after_failures
     *
     * @return int
     */
    public function getDeactivateAfterFailures()
    {
        return $this->container['deactivate_after_failures'];
    }

    /**
     * Sets deactivate_after_failures
     *
     * @param int $deactivate_after_failures If non-zero, this gateway will be deactivated after reaching this amount of consecutive failures.
     *
     * @return $this
     */
    public function setDeactivateAfterFailures($deactivate_after_failures)
    {
        $this->container['deactivate_after_failures'] = $deactivate_after_failures;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date Optional field to specify an absolute date when this gateway should stop accepting transactions
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets gateways
     *
     * @return \ultracart\v2\models\TransactionGateway[]
     */
    public function getGateways()
    {
        return $this->container['gateways'];
    }

    /**
     * Sets gateways
     *
     * @param \ultracart\v2\models\TransactionGateway[] $gateways An array of all transaction gateways, not just the one currently configured for this rotating gateway. This allows for easy switching to another gateway.  The enabled property on the transaction gateway indicates which one is actually being used.
     *
     * @return $this
     */
    public function setGateways($gateways)
    {
        $this->container['gateways'] = $gateways;

        return $this;
    }

    /**
     * Gets maximum_daily
     *
     * @return float
     */
    public function getMaximumDaily()
    {
        return $this->container['maximum_daily'];
    }

    /**
     * Sets maximum_daily
     *
     * @param float $maximum_daily The maximum daily dollar amount this gateway may process
     *
     * @return $this
     */
    public function setMaximumDaily($maximum_daily)
    {
        $this->container['maximum_daily'] = $maximum_daily;

        return $this;
    }

    /**
     * Gets maximum_daily_auto_order
     *
     * @return float
     */
    public function getMaximumDailyAutoOrder()
    {
        return $this->container['maximum_daily_auto_order'];
    }

    /**
     * Sets maximum_daily_auto_order
     *
     * @param float $maximum_daily_auto_order The maximum daily dollar amount of auto orders (recurring) this gateway may process
     *
     * @return $this
     */
    public function setMaximumDailyAutoOrder($maximum_daily_auto_order)
    {
        $this->container['maximum_daily_auto_order'] = $maximum_daily_auto_order;

        return $this;
    }

    /**
     * Gets maximum_monthly
     *
     * @return float
     */
    public function getMaximumMonthly()
    {
        return $this->container['maximum_monthly'];
    }

    /**
     * Sets maximum_monthly
     *
     * @param float $maximum_monthly The maximum monthly dollar amount this gateway may process.
     *
     * @return $this
     */
    public function setMaximumMonthly($maximum_monthly)
    {
        $this->container['maximum_monthly'] = $maximum_monthly;

        return $this;
    }

    /**
     * Gets next_daily_auto_order_reset
     *
     * @return string
     */
    public function getNextDailyAutoOrderReset()
    {
        return $this->container['next_daily_auto_order_reset'];
    }

    /**
     * Sets next_daily_auto_order_reset
     *
     * @param string $next_daily_auto_order_reset The date and time when this gateway daily limit for auto orders will reset
     *
     * @return $this
     */
    public function setNextDailyAutoOrderReset($next_daily_auto_order_reset)
    {
        $this->container['next_daily_auto_order_reset'] = $next_daily_auto_order_reset;

        return $this;
    }

    /**
     * Gets next_daily_reset
     *
     * @return string
     */
    public function getNextDailyReset()
    {
        return $this->container['next_daily_reset'];
    }

    /**
     * Sets next_daily_reset
     *
     * @param string $next_daily_reset The date and time when this gateway daily limit will reset
     *
     * @return $this
     */
    public function setNextDailyReset($next_daily_reset)
    {
        $this->container['next_daily_reset'] = $next_daily_reset;

        return $this;
    }

    /**
     * Gets next_monthly_reset
     *
     * @return string
     */
    public function getNextMonthlyReset()
    {
        return $this->container['next_monthly_reset'];
    }

    /**
     * Sets next_monthly_reset
     *
     * @param string $next_monthly_reset The date and time when this gateway monthly limit will reset
     *
     * @return $this
     */
    public function setNextMonthlyReset($next_monthly_reset)
    {
        $this->container['next_monthly_reset'] = $next_monthly_reset;

        return $this;
    }

    /**
     * Gets order_total
     *
     * @return float
     */
    public function getOrderTotal()
    {
        return $this->container['order_total'];
    }

    /**
     * Sets order_total
     *
     * @param float $order_total This optional field is combined with order_total_comparison to determine if an order should be processed thorugh this gateway.
     *
     * @return $this
     */
    public function setOrderTotal($order_total)
    {
        $this->container['order_total'] = $order_total;

        return $this;
    }

    /**
     * Gets order_total_comparison
     *
     * @return string
     */
    public function getOrderTotalComparison()
    {
        return $this->container['order_total_comparison'];
    }

    /**
     * Sets order_total_comparison
     *
     * @param string $order_total_comparison The math operator used to determine if the order total is allowed to process through this gateway.
     *
     * @return $this
     */
    public function setOrderTotalComparison($order_total_comparison)
    {
        $allowedValues = $this->getOrderTotalComparisonAllowableValues();
        if (!is_null($order_total_comparison) && !in_array($order_total_comparison, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_total_comparison', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_total_comparison'] = $order_total_comparison;

        return $this;
    }

    /**
     * Gets rebill_auto_orders_against_this_rtg_code
     *
     * @return string
     */
    public function getRebillAutoOrdersAgainstThisRtgCode()
    {
        return $this->container['rebill_auto_orders_against_this_rtg_code'];
    }

    /**
     * Sets rebill_auto_orders_against_this_rtg_code
     *
     * @param string $rebill_auto_orders_against_this_rtg_code If specified auto orders (rebills) are routed to this rotating gateway.  This may be needed because rebills lack a credit card cvv.
     *
     * @return $this
     */
    public function setRebillAutoOrdersAgainstThisRtgCode($rebill_auto_orders_against_this_rtg_code)
    {
        $this->container['rebill_auto_orders_against_this_rtg_code'] = $rebill_auto_orders_against_this_rtg_code;

        return $this;
    }

    /**
     * Gets reserve_days
     *
     * @return int
     */
    public function getReserveDays()
    {
        return $this->container['reserve_days'];
    }

    /**
     * Sets reserve_days
     *
     * @param int $reserve_days The number of days that your gateway holds any reserves.  This aids in profitability reporting.
     *
     * @return $this
     */
    public function setReserveDays($reserve_days)
    {
        $this->container['reserve_days'] = $reserve_days;

        return $this;
    }

    /**
     * Gets reserve_percentage
     *
     * @return float
     */
    public function getReservePercentage()
    {
        return $this->container['reserve_percentage'];
    }

    /**
     * Sets reserve_percentage
     *
     * @param float $reserve_percentage The percentage of an order which your gateway is holding in reserve.  This aids in profitability reporting.
     *
     * @return $this
     */
    public function setReservePercentage($reserve_percentage)
    {
        $this->container['reserve_percentage'] = $reserve_percentage;

        return $this;
    }

    /**
     * Gets reserve_refunded
     *
     * @return bool
     */
    public function getReserveRefunded()
    {
        return $this->container['reserve_refunded'];
    }

    /**
     * Sets reserve_refunded
     *
     * @param bool $reserve_refunded If true, reserves are refunded when an order is refunded.  This aids in profitability reporting.
     *
     * @return $this
     */
    public function setReserveRefunded($reserve_refunded)
    {
        $this->container['reserve_refunded'] = $reserve_refunded;

        return $this;
    }

    /**
     * Gets reserves_released_through
     *
     * @return string
     */
    public function getReservesReleasedThrough()
    {
        return $this->container['reserves_released_through'];
    }

    /**
     * Sets reserves_released_through
     *
     * @param string $reserves_released_through An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.
     *
     * @return $this
     */
    public function setReservesReleasedThrough($reserves_released_through)
    {
        $this->container['reserves_released_through'] = $reserves_released_through;

        return $this;
    }

    /**
     * Gets rotating_transaction_gateway_oid
     *
     * @return int
     */
    public function getRotatingTransactionGatewayOid()
    {
        return $this->container['rotating_transaction_gateway_oid'];
    }

    /**
     * Sets rotating_transaction_gateway_oid
     *
     * @param int $rotating_transaction_gateway_oid Internal identifier used to store and retrieve this gateway information
     *
     * @return $this
     */
    public function setRotatingTransactionGatewayOid($rotating_transaction_gateway_oid)
    {
        $this->container['rotating_transaction_gateway_oid'] = $rotating_transaction_gateway_oid;

        return $this;
    }

    /**
     * Gets selected_gateway_name
     *
     * @return string
     */
    public function getSelectedGatewayName()
    {
        return $this->container['selected_gateway_name'];
    }

    /**
     * Sets selected_gateway_name
     *
     * @param string $selected_gateway_name The name of the currently selected transaction gateway used by this rotating gateway
     *
     * @return $this
     */
    public function setSelectedGatewayName($selected_gateway_name)
    {
        $this->container['selected_gateway_name'] = $selected_gateway_name;

        return $this;
    }

    /**
     * Gets show_cascade_codes
     *
     * @return bool
     */
    public function getShowCascadeCodes()
    {
        return $this->container['show_cascade_codes'];
    }

    /**
     * Sets show_cascade_codes
     *
     * @param bool $show_cascade_codes A boolean used by the builtin UltraCart UI to determine if cascading rtg codes should be shown
     *
     * @return $this
     */
    public function setShowCascadeCodes($show_cascade_codes)
    {
        $this->container['show_cascade_codes'] = $show_cascade_codes;

        return $this;
    }

    /**
     * Gets show_merchant_account_profiles
     *
     * @return bool
     */
    public function getShowMerchantAccountProfiles()
    {
        return $this->container['show_merchant_account_profiles'];
    }

    /**
     * Sets show_merchant_account_profiles
     *
     * @param bool $show_merchant_account_profiles A flag to help the UltraCart UI to know whether to show merchant account profiles or not.
     *
     * @return $this
     */
    public function setShowMerchantAccountProfiles($show_merchant_account_profiles)
    {
        $this->container['show_merchant_account_profiles'] = $show_merchant_account_profiles;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Optional field to specify an absolute date when this gateway should begin accepting transactions
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status A field used to take a gateway offline without removing/deleting the configuration. Inactive marks the gateway as completely unusable.  Standby takes the gateway offline and will not be used unless all other active gateways fail.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets theme_restrictions
     *
     * @return \ultracart\v2\models\RtgThemeRestriction[]
     */
    public function getThemeRestrictions()
    {
        return $this->container['theme_restrictions'];
    }

    /**
     * Sets theme_restrictions
     *
     * @param \ultracart\v2\models\RtgThemeRestriction[] $theme_restrictions Optional restrictions by theme/storefront
     *
     * @return $this
     */
    public function setThemeRestrictions($theme_restrictions)
    {
        $this->container['theme_restrictions'] = $theme_restrictions;

        return $this;
    }

    /**
     * Gets traffic_percentage
     *
     * @return float
     */
    public function getTrafficPercentage()
    {
        return $this->container['traffic_percentage'];
    }

    /**
     * Sets traffic_percentage
     *
     * @param float $traffic_percentage Required field between 0 and 1 that dictates the percentage of traffic that should flow through this gateway
     *
     * @return $this
     */
    public function setTrafficPercentage($traffic_percentage)
    {
        $this->container['traffic_percentage'] = $traffic_percentage;

        return $this;
    }

    /**
     * Gets trial_daily_amount
     *
     * @return int
     */
    public function getTrialDailyAmount()
    {
        return $this->container['trial_daily_amount'];
    }

    /**
     * Sets trial_daily_amount
     *
     * @param int $trial_daily_amount If specified, limits the total daily count of trial orders
     *
     * @return $this
     */
    public function setTrialDailyAmount($trial_daily_amount)
    {
        $this->container['trial_daily_amount'] = $trial_daily_amount;

        return $this;
    }

    /**
     * Gets trial_daily_limit
     *
     * @return int
     */
    public function getTrialDailyLimit()
    {
        return $this->container['trial_daily_limit'];
    }

    /**
     * Sets trial_daily_limit
     *
     * @param int $trial_daily_limit If specified, limits the total daily dollar amount of trial orders
     *
     * @return $this
     */
    public function setTrialDailyLimit($trial_daily_limit)
    {
        $this->container['trial_daily_limit'] = $trial_daily_limit;

        return $this;
    }

    /**
     * Gets trial_monthly_amount
     *
     * @return int
     */
    public function getTrialMonthlyAmount()
    {
        return $this->container['trial_monthly_amount'];
    }

    /**
     * Sets trial_monthly_amount
     *
     * @param int $trial_monthly_amount If specified, limits the total month dollar amount of trial orders
     *
     * @return $this
     */
    public function setTrialMonthlyAmount($trial_monthly_amount)
    {
        $this->container['trial_monthly_amount'] = $trial_monthly_amount;

        return $this;
    }

    /**
     * Gets trial_monthly_limit
     *
     * @return int
     */
    public function getTrialMonthlyLimit()
    {
        return $this->container['trial_monthly_limit'];
    }

    /**
     * Sets trial_monthly_limit
     *
     * @param int $trial_monthly_limit If specified, limits the total month count of trial orders
     *
     * @return $this
     */
    public function setTrialMonthlyLimit($trial_monthly_limit)
    {
        $this->container['trial_monthly_limit'] = $trial_monthly_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


