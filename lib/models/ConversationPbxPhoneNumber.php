<?php
/**
 * ConversationPbxPhoneNumber
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationPbxPhoneNumber Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConversationPbxPhoneNumber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConversationPbxPhoneNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action' => 'string',
        'action_target' => 'string',
        'conversation_pbx_phone_number_uuid' => 'string',
        'merchant_id' => 'string',
        'phone_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action' => null,
        'action_target' => null,
        'conversation_pbx_phone_number_uuid' => null,
        'merchant_id' => null,
        'phone_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'action_target' => 'action_target',
        'conversation_pbx_phone_number_uuid' => 'conversation_pbx_phone_number_uuid',
        'merchant_id' => 'merchant_id',
        'phone_number' => 'phone_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'action_target' => 'setActionTarget',
        'conversation_pbx_phone_number_uuid' => 'setConversationPbxPhoneNumberUuid',
        'merchant_id' => 'setMerchantId',
        'phone_number' => 'setPhoneNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'action_target' => 'getActionTarget',
        'conversation_pbx_phone_number_uuid' => 'getConversationPbxPhoneNumberUuid',
        'merchant_id' => 'getMerchantId',
        'phone_number' => 'getPhoneNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTION_TIME_BASED = 'time based';
    public const ACTION_MENU = 'menu';
    public const ACTION_QUEUE = 'queue';
    public const ACTION_VOICEMAIL = 'voicemail';
    public const ACTION_AGENT = 'agent';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_TIME_BASED,
            self::ACTION_MENU,
            self::ACTION_QUEUE,
            self::ACTION_VOICEMAIL,
            self::ACTION_AGENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = $data['action'] ?? null;
        $this->container['action_target'] = $data['action_target'] ?? null;
        $this->container['conversation_pbx_phone_number_uuid'] = $data['conversation_pbx_phone_number_uuid'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['action']) && (mb_strlen($this->container['action']) > 30)) {
            $invalidProperties[] = "invalid value for 'action', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['action_target']) && (mb_strlen($this->container['action_target']) > 50)) {
            $invalidProperties[] = "invalid value for 'action_target', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['conversation_pbx_phone_number_uuid']) && (mb_strlen($this->container['conversation_pbx_phone_number_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'conversation_pbx_phone_number_uuid', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['merchant_id']) && (mb_strlen($this->container['merchant_id']) > 5)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Action
     *
     * @return self
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($action) && (mb_strlen($action) > 30)) {
            throw new \InvalidArgumentException('invalid length for $action when calling ConversationPbxPhoneNumber., must be smaller than or equal to 30.');
        }

        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets action_target
     *
     * @return string|null
     */
    public function getActionTarget()
    {
        return $this->container['action_target'];
    }

    /**
     * Sets action_target
     *
     * @param string|null $action_target Action target.  This is the UUID associated with the configuration object of that particular type.
     *
     * @return self
     */
    public function setActionTarget($action_target)
    {
        if (!is_null($action_target) && (mb_strlen($action_target) > 50)) {
            throw new \InvalidArgumentException('invalid length for $action_target when calling ConversationPbxPhoneNumber., must be smaller than or equal to 50.');
        }

        $this->container['action_target'] = $action_target;

        return $this;
    }

    /**
     * Gets conversation_pbx_phone_number_uuid
     *
     * @return string|null
     */
    public function getConversationPbxPhoneNumberUuid()
    {
        return $this->container['conversation_pbx_phone_number_uuid'];
    }

    /**
     * Sets conversation_pbx_phone_number_uuid
     *
     * @param string|null $conversation_pbx_phone_number_uuid Conversation Pbx Phone Number UUID
     *
     * @return self
     */
    public function setConversationPbxPhoneNumberUuid($conversation_pbx_phone_number_uuid)
    {
        if (!is_null($conversation_pbx_phone_number_uuid) && (mb_strlen($conversation_pbx_phone_number_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $conversation_pbx_phone_number_uuid when calling ConversationPbxPhoneNumber., must be smaller than or equal to 50.');
        }

        $this->container['conversation_pbx_phone_number_uuid'] = $conversation_pbx_phone_number_uuid;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Merchant Id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (!is_null($merchant_id) && (mb_strlen($merchant_id) > 5)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling ConversationPbxPhoneNumber., must be smaller than or equal to 5.');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Phone number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling ConversationPbxPhoneNumber., must be smaller than or equal to 50.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


