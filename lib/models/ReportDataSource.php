<?php
/**
 * ReportDataSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ReportDataSource Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportDataSource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportDataSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'partition_date_column' => 'string',
        'partition_date_safety_days' => 'int',
        'partition_date_strategy' => 'string',
        'schema' => '\ultracart\v2\models\ReportDataSourceSchema[]',
        'sql' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'partition_date_column' => null,
        'partition_date_safety_days' => 'int32',
        'partition_date_strategy' => null,
        'schema' => null,
        'sql' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'partition_date_column' => 'partition_date_column',
        'partition_date_safety_days' => 'partition_date_safety_days',
        'partition_date_strategy' => 'partition_date_strategy',
        'schema' => 'schema',
        'sql' => 'sql'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'partition_date_column' => 'setPartitionDateColumn',
        'partition_date_safety_days' => 'setPartitionDateSafetyDays',
        'partition_date_strategy' => 'setPartitionDateStrategy',
        'schema' => 'setSchema',
        'sql' => 'setSql'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'partition_date_column' => 'getPartitionDateColumn',
        'partition_date_safety_days' => 'getPartitionDateSafetyDays',
        'partition_date_strategy' => 'getPartitionDateStrategy',
        'schema' => 'getSchema',
        'sql' => 'getSql'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['partition_date_column'] = isset($data['partition_date_column']) ? $data['partition_date_column'] : null;
        $this->container['partition_date_safety_days'] = isset($data['partition_date_safety_days']) ? $data['partition_date_safety_days'] : null;
        $this->container['partition_date_strategy'] = isset($data['partition_date_strategy']) ? $data['partition_date_strategy'] : null;
        $this->container['schema'] = isset($data['schema']) ? $data['schema'] : null;
        $this->container['sql'] = isset($data['sql']) ? $data['sql'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets partition_date_column
     *
     * @return string
     */
    public function getPartitionDateColumn()
    {
        return $this->container['partition_date_column'];
    }

    /**
     * Sets partition_date_column
     *
     * @param string $partition_date_column partition_date_column
     *
     * @return $this
     */
    public function setPartitionDateColumn($partition_date_column)
    {
        $this->container['partition_date_column'] = $partition_date_column;

        return $this;
    }

    /**
     * Gets partition_date_safety_days
     *
     * @return int
     */
    public function getPartitionDateSafetyDays()
    {
        return $this->container['partition_date_safety_days'];
    }

    /**
     * Sets partition_date_safety_days
     *
     * @param int $partition_date_safety_days partition_date_safety_days
     *
     * @return $this
     */
    public function setPartitionDateSafetyDays($partition_date_safety_days)
    {
        $this->container['partition_date_safety_days'] = $partition_date_safety_days;

        return $this;
    }

    /**
     * Gets partition_date_strategy
     *
     * @return string
     */
    public function getPartitionDateStrategy()
    {
        return $this->container['partition_date_strategy'];
    }

    /**
     * Sets partition_date_strategy
     *
     * @param string $partition_date_strategy The partition date strategy, defaults to weekly sunday
     *
     * @return $this
     */
    public function setPartitionDateStrategy($partition_date_strategy)
    {
        $this->container['partition_date_strategy'] = $partition_date_strategy;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return \ultracart\v2\models\ReportDataSourceSchema[]
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param \ultracart\v2\models\ReportDataSourceSchema[] $schema schema
     *
     * @return $this
     */
    public function setSchema($schema)
    {
        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets sql
     *
     * @return string
     */
    public function getSql()
    {
        return $this->container['sql'];
    }

    /**
     * Sets sql
     *
     * @param string $sql sql
     *
     * @return $this
     */
    public function setSql($sql)
    {
        $this->container['sql'] = $sql;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


