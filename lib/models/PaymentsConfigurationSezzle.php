<?php
/**
 * PaymentsConfigurationSezzle
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsConfigurationSezzle Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsConfigurationSezzle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsConfigurationSezzle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accept_sezzle' => 'bool',
        'restrictions' => '\ultracart\v2\models\PaymentsConfigurationRestrictions',
        'sezzle_accounting_code' => 'string',
        'sezzle_business_id' => 'string',
        'sezzle_deposit_to_account' => 'string',
        'sezzle_environment' => 'string',
        'sezzle_private_api_key' => 'string',
        'sezzle_public_api_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accept_sezzle' => null,
        'restrictions' => null,
        'sezzle_accounting_code' => null,
        'sezzle_business_id' => null,
        'sezzle_deposit_to_account' => null,
        'sezzle_environment' => null,
        'sezzle_private_api_key' => null,
        'sezzle_public_api_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accept_sezzle' => 'acceptSezzle',
        'restrictions' => 'restrictions',
        'sezzle_accounting_code' => 'sezzleAccountingCode',
        'sezzle_business_id' => 'sezzleBusinessId',
        'sezzle_deposit_to_account' => 'sezzleDepositToAccount',
        'sezzle_environment' => 'sezzleEnvironment',
        'sezzle_private_api_key' => 'sezzlePrivateApiKey',
        'sezzle_public_api_key' => 'sezzlePublicApiKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accept_sezzle' => 'setAcceptSezzle',
        'restrictions' => 'setRestrictions',
        'sezzle_accounting_code' => 'setSezzleAccountingCode',
        'sezzle_business_id' => 'setSezzleBusinessId',
        'sezzle_deposit_to_account' => 'setSezzleDepositToAccount',
        'sezzle_environment' => 'setSezzleEnvironment',
        'sezzle_private_api_key' => 'setSezzlePrivateApiKey',
        'sezzle_public_api_key' => 'setSezzlePublicApiKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accept_sezzle' => 'getAcceptSezzle',
        'restrictions' => 'getRestrictions',
        'sezzle_accounting_code' => 'getSezzleAccountingCode',
        'sezzle_business_id' => 'getSezzleBusinessId',
        'sezzle_deposit_to_account' => 'getSezzleDepositToAccount',
        'sezzle_environment' => 'getSezzleEnvironment',
        'sezzle_private_api_key' => 'getSezzlePrivateApiKey',
        'sezzle_public_api_key' => 'getSezzlePublicApiKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accept_sezzle'] = isset($data['accept_sezzle']) ? $data['accept_sezzle'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
        $this->container['sezzle_accounting_code'] = isset($data['sezzle_accounting_code']) ? $data['sezzle_accounting_code'] : null;
        $this->container['sezzle_business_id'] = isset($data['sezzle_business_id']) ? $data['sezzle_business_id'] : null;
        $this->container['sezzle_deposit_to_account'] = isset($data['sezzle_deposit_to_account']) ? $data['sezzle_deposit_to_account'] : null;
        $this->container['sezzle_environment'] = isset($data['sezzle_environment']) ? $data['sezzle_environment'] : null;
        $this->container['sezzle_private_api_key'] = isset($data['sezzle_private_api_key']) ? $data['sezzle_private_api_key'] : null;
        $this->container['sezzle_public_api_key'] = isset($data['sezzle_public_api_key']) ? $data['sezzle_public_api_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accept_sezzle
     *
     * @return bool
     */
    public function getAcceptSezzle()
    {
        return $this->container['accept_sezzle'];
    }

    /**
     * Sets accept_sezzle
     *
     * @param bool $accept_sezzle accept_sezzle
     *
     * @return $this
     */
    public function setAcceptSezzle($accept_sezzle)
    {
        $this->container['accept_sezzle'] = $accept_sezzle;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \ultracart\v2\models\PaymentsConfigurationRestrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \ultracart\v2\models\PaymentsConfigurationRestrictions $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets sezzle_accounting_code
     *
     * @return string
     */
    public function getSezzleAccountingCode()
    {
        return $this->container['sezzle_accounting_code'];
    }

    /**
     * Sets sezzle_accounting_code
     *
     * @param string $sezzle_accounting_code sezzle_accounting_code
     *
     * @return $this
     */
    public function setSezzleAccountingCode($sezzle_accounting_code)
    {
        $this->container['sezzle_accounting_code'] = $sezzle_accounting_code;

        return $this;
    }

    /**
     * Gets sezzle_business_id
     *
     * @return string
     */
    public function getSezzleBusinessId()
    {
        return $this->container['sezzle_business_id'];
    }

    /**
     * Sets sezzle_business_id
     *
     * @param string $sezzle_business_id sezzle_business_id
     *
     * @return $this
     */
    public function setSezzleBusinessId($sezzle_business_id)
    {
        $this->container['sezzle_business_id'] = $sezzle_business_id;

        return $this;
    }

    /**
     * Gets sezzle_deposit_to_account
     *
     * @return string
     */
    public function getSezzleDepositToAccount()
    {
        return $this->container['sezzle_deposit_to_account'];
    }

    /**
     * Sets sezzle_deposit_to_account
     *
     * @param string $sezzle_deposit_to_account sezzle_deposit_to_account
     *
     * @return $this
     */
    public function setSezzleDepositToAccount($sezzle_deposit_to_account)
    {
        $this->container['sezzle_deposit_to_account'] = $sezzle_deposit_to_account;

        return $this;
    }

    /**
     * Gets sezzle_environment
     *
     * @return string
     */
    public function getSezzleEnvironment()
    {
        return $this->container['sezzle_environment'];
    }

    /**
     * Sets sezzle_environment
     *
     * @param string $sezzle_environment sezzle_environment
     *
     * @return $this
     */
    public function setSezzleEnvironment($sezzle_environment)
    {
        $this->container['sezzle_environment'] = $sezzle_environment;

        return $this;
    }

    /**
     * Gets sezzle_private_api_key
     *
     * @return string
     */
    public function getSezzlePrivateApiKey()
    {
        return $this->container['sezzle_private_api_key'];
    }

    /**
     * Sets sezzle_private_api_key
     *
     * @param string $sezzle_private_api_key sezzle_private_api_key
     *
     * @return $this
     */
    public function setSezzlePrivateApiKey($sezzle_private_api_key)
    {
        $this->container['sezzle_private_api_key'] = $sezzle_private_api_key;

        return $this;
    }

    /**
     * Gets sezzle_public_api_key
     *
     * @return string
     */
    public function getSezzlePublicApiKey()
    {
        return $this->container['sezzle_public_api_key'];
    }

    /**
     * Sets sezzle_public_api_key
     *
     * @param string $sezzle_public_api_key sezzle_public_api_key
     *
     * @return $this
     */
    public function setSezzlePublicApiKey($sezzle_public_api_key)
    {
        $this->container['sezzle_public_api_key'] = $sezzle_public_api_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


