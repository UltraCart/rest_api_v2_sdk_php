<?php
/**
 * ConversationPbxAgent
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationPbxAgent Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationPbxAgent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationPbxAgent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cellphone' => 'string',
        'conversation_pbx_agent_uuid' => 'string',
        'conversation_pbx_voicemail_mailbox_uuid' => 'string',
        'extension' => 'int',
        'forward_calls_to_cellphone' => 'bool',
        'full_name' => 'string',
        'login' => 'string',
        'merchant_id' => 'string',
        'record_outgoing_automatically' => 'bool',
        'twilio_taskrouter_worker_id' => 'string',
        'unavailable_play_audio_uuid' => 'string',
        'unavailable_say' => 'string',
        'unavailable_say_voice' => 'string',
        'user_id' => 'int',
        'voicemail' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cellphone' => null,
        'conversation_pbx_agent_uuid' => null,
        'conversation_pbx_voicemail_mailbox_uuid' => null,
        'extension' => 'int32',
        'forward_calls_to_cellphone' => null,
        'full_name' => null,
        'login' => null,
        'merchant_id' => null,
        'record_outgoing_automatically' => null,
        'twilio_taskrouter_worker_id' => null,
        'unavailable_play_audio_uuid' => null,
        'unavailable_say' => null,
        'unavailable_say_voice' => null,
        'user_id' => 'int32',
        'voicemail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cellphone' => 'cellphone',
        'conversation_pbx_agent_uuid' => 'conversation_pbx_agent_uuid',
        'conversation_pbx_voicemail_mailbox_uuid' => 'conversation_pbx_voicemail_mailbox_uuid',
        'extension' => 'extension',
        'forward_calls_to_cellphone' => 'forward_calls_to_cellphone',
        'full_name' => 'full_name',
        'login' => 'login',
        'merchant_id' => 'merchant_id',
        'record_outgoing_automatically' => 'record_outgoing_automatically',
        'twilio_taskrouter_worker_id' => 'twilio_taskrouter_worker_id',
        'unavailable_play_audio_uuid' => 'unavailable_play_audio_uuid',
        'unavailable_say' => 'unavailable_say',
        'unavailable_say_voice' => 'unavailable_say_voice',
        'user_id' => 'user_id',
        'voicemail' => 'voicemail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cellphone' => 'setCellphone',
        'conversation_pbx_agent_uuid' => 'setConversationPbxAgentUuid',
        'conversation_pbx_voicemail_mailbox_uuid' => 'setConversationPbxVoicemailMailboxUuid',
        'extension' => 'setExtension',
        'forward_calls_to_cellphone' => 'setForwardCallsToCellphone',
        'full_name' => 'setFullName',
        'login' => 'setLogin',
        'merchant_id' => 'setMerchantId',
        'record_outgoing_automatically' => 'setRecordOutgoingAutomatically',
        'twilio_taskrouter_worker_id' => 'setTwilioTaskrouterWorkerId',
        'unavailable_play_audio_uuid' => 'setUnavailablePlayAudioUuid',
        'unavailable_say' => 'setUnavailableSay',
        'unavailable_say_voice' => 'setUnavailableSayVoice',
        'user_id' => 'setUserId',
        'voicemail' => 'setVoicemail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cellphone' => 'getCellphone',
        'conversation_pbx_agent_uuid' => 'getConversationPbxAgentUuid',
        'conversation_pbx_voicemail_mailbox_uuid' => 'getConversationPbxVoicemailMailboxUuid',
        'extension' => 'getExtension',
        'forward_calls_to_cellphone' => 'getForwardCallsToCellphone',
        'full_name' => 'getFullName',
        'login' => 'getLogin',
        'merchant_id' => 'getMerchantId',
        'record_outgoing_automatically' => 'getRecordOutgoingAutomatically',
        'twilio_taskrouter_worker_id' => 'getTwilioTaskrouterWorkerId',
        'unavailable_play_audio_uuid' => 'getUnavailablePlayAudioUuid',
        'unavailable_say' => 'getUnavailableSay',
        'unavailable_say_voice' => 'getUnavailableSayVoice',
        'user_id' => 'getUserId',
        'voicemail' => 'getVoicemail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cellphone'] = isset($data['cellphone']) ? $data['cellphone'] : null;
        $this->container['conversation_pbx_agent_uuid'] = isset($data['conversation_pbx_agent_uuid']) ? $data['conversation_pbx_agent_uuid'] : null;
        $this->container['conversation_pbx_voicemail_mailbox_uuid'] = isset($data['conversation_pbx_voicemail_mailbox_uuid']) ? $data['conversation_pbx_voicemail_mailbox_uuid'] : null;
        $this->container['extension'] = isset($data['extension']) ? $data['extension'] : null;
        $this->container['forward_calls_to_cellphone'] = isset($data['forward_calls_to_cellphone']) ? $data['forward_calls_to_cellphone'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['record_outgoing_automatically'] = isset($data['record_outgoing_automatically']) ? $data['record_outgoing_automatically'] : null;
        $this->container['twilio_taskrouter_worker_id'] = isset($data['twilio_taskrouter_worker_id']) ? $data['twilio_taskrouter_worker_id'] : null;
        $this->container['unavailable_play_audio_uuid'] = isset($data['unavailable_play_audio_uuid']) ? $data['unavailable_play_audio_uuid'] : null;
        $this->container['unavailable_say'] = isset($data['unavailable_say']) ? $data['unavailable_say'] : null;
        $this->container['unavailable_say_voice'] = isset($data['unavailable_say_voice']) ? $data['unavailable_say_voice'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['voicemail'] = isset($data['voicemail']) ? $data['voicemail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cellphone']) && (mb_strlen($this->container['cellphone']) > 50)) {
            $invalidProperties[] = "invalid value for 'cellphone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['conversation_pbx_voicemail_mailbox_uuid']) && (mb_strlen($this->container['conversation_pbx_voicemail_mailbox_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'conversation_pbx_voicemail_mailbox_uuid', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['merchant_id']) && (mb_strlen($this->container['merchant_id']) > 5)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['twilio_taskrouter_worker_id']) && (mb_strlen($this->container['twilio_taskrouter_worker_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'twilio_taskrouter_worker_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['unavailable_play_audio_uuid']) && (mb_strlen($this->container['unavailable_play_audio_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'unavailable_play_audio_uuid', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['unavailable_say_voice']) && (mb_strlen($this->container['unavailable_say_voice']) > 50)) {
            $invalidProperties[] = "invalid value for 'unavailable_say_voice', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cellphone
     *
     * @return string
     */
    public function getCellphone()
    {
        return $this->container['cellphone'];
    }

    /**
     * Sets cellphone
     *
     * @param string $cellphone Cellphone number of agent in E.164 format
     *
     * @return $this
     */
    public function setCellphone($cellphone)
    {
        if (!is_null($cellphone) && (mb_strlen($cellphone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $cellphone when calling ConversationPbxAgent., must be smaller than or equal to 50.');
        }

        $this->container['cellphone'] = $cellphone;

        return $this;
    }

    /**
     * Gets conversation_pbx_agent_uuid
     *
     * @return string
     */
    public function getConversationPbxAgentUuid()
    {
        return $this->container['conversation_pbx_agent_uuid'];
    }

    /**
     * Sets conversation_pbx_agent_uuid
     *
     * @param string $conversation_pbx_agent_uuid Conversation Pbx Agent unique identifier
     *
     * @return $this
     */
    public function setConversationPbxAgentUuid($conversation_pbx_agent_uuid)
    {
        $this->container['conversation_pbx_agent_uuid'] = $conversation_pbx_agent_uuid;

        return $this;
    }

    /**
     * Gets conversation_pbx_voicemail_mailbox_uuid
     *
     * @return string
     */
    public function getConversationPbxVoicemailMailboxUuid()
    {
        return $this->container['conversation_pbx_voicemail_mailbox_uuid'];
    }

    /**
     * Sets conversation_pbx_voicemail_mailbox_uuid
     *
     * @param string $conversation_pbx_voicemail_mailbox_uuid Conversation Pbx Voicemail Mailbox UUID
     *
     * @return $this
     */
    public function setConversationPbxVoicemailMailboxUuid($conversation_pbx_voicemail_mailbox_uuid)
    {
        if (!is_null($conversation_pbx_voicemail_mailbox_uuid) && (mb_strlen($conversation_pbx_voicemail_mailbox_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $conversation_pbx_voicemail_mailbox_uuid when calling ConversationPbxAgent., must be smaller than or equal to 50.');
        }

        $this->container['conversation_pbx_voicemail_mailbox_uuid'] = $conversation_pbx_voicemail_mailbox_uuid;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return int
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param int $extension Extension
     *
     * @return $this
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets forward_calls_to_cellphone
     *
     * @return bool
     */
    public function getForwardCallsToCellphone()
    {
        return $this->container['forward_calls_to_cellphone'];
    }

    /**
     * Sets forward_calls_to_cellphone
     *
     * @param bool $forward_calls_to_cellphone True if calls to this agent should be forwarded to their cellphone
     *
     * @return $this
     */
    public function setForwardCallsToCellphone($forward_calls_to_cellphone)
    {
        $this->container['forward_calls_to_cellphone'] = $forward_calls_to_cellphone;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name Full name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string $login Agent login
     *
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id Merchant Id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        if (!is_null($merchant_id) && (mb_strlen($merchant_id) > 5)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling ConversationPbxAgent., must be smaller than or equal to 5.');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets record_outgoing_automatically
     *
     * @return bool
     */
    public function getRecordOutgoingAutomatically()
    {
        return $this->container['record_outgoing_automatically'];
    }

    /**
     * Sets record_outgoing_automatically
     *
     * @param bool $record_outgoing_automatically True if outgoing calls should be automatically recorded
     *
     * @return $this
     */
    public function setRecordOutgoingAutomatically($record_outgoing_automatically)
    {
        $this->container['record_outgoing_automatically'] = $record_outgoing_automatically;

        return $this;
    }

    /**
     * Gets twilio_taskrouter_worker_id
     *
     * @return string
     */
    public function getTwilioTaskrouterWorkerId()
    {
        return $this->container['twilio_taskrouter_worker_id'];
    }

    /**
     * Sets twilio_taskrouter_worker_id
     *
     * @param string $twilio_taskrouter_worker_id Twilio taskrouter worker Id
     *
     * @return $this
     */
    public function setTwilioTaskrouterWorkerId($twilio_taskrouter_worker_id)
    {
        if (!is_null($twilio_taskrouter_worker_id) && (mb_strlen($twilio_taskrouter_worker_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $twilio_taskrouter_worker_id when calling ConversationPbxAgent., must be smaller than or equal to 100.');
        }

        $this->container['twilio_taskrouter_worker_id'] = $twilio_taskrouter_worker_id;

        return $this;
    }

    /**
     * Gets unavailable_play_audio_uuid
     *
     * @return string
     */
    public function getUnavailablePlayAudioUuid()
    {
        return $this->container['unavailable_play_audio_uuid'];
    }

    /**
     * Sets unavailable_play_audio_uuid
     *
     * @param string $unavailable_play_audio_uuid Unavailable play audio UUID
     *
     * @return $this
     */
    public function setUnavailablePlayAudioUuid($unavailable_play_audio_uuid)
    {
        if (!is_null($unavailable_play_audio_uuid) && (mb_strlen($unavailable_play_audio_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $unavailable_play_audio_uuid when calling ConversationPbxAgent., must be smaller than or equal to 50.');
        }

        $this->container['unavailable_play_audio_uuid'] = $unavailable_play_audio_uuid;

        return $this;
    }

    /**
     * Gets unavailable_say
     *
     * @return string
     */
    public function getUnavailableSay()
    {
        return $this->container['unavailable_say'];
    }

    /**
     * Sets unavailable_say
     *
     * @param string $unavailable_say Unavailable say
     *
     * @return $this
     */
    public function setUnavailableSay($unavailable_say)
    {
        $this->container['unavailable_say'] = $unavailable_say;

        return $this;
    }

    /**
     * Gets unavailable_say_voice
     *
     * @return string
     */
    public function getUnavailableSayVoice()
    {
        return $this->container['unavailable_say_voice'];
    }

    /**
     * Sets unavailable_say_voice
     *
     * @param string $unavailable_say_voice Unavailable say voice
     *
     * @return $this
     */
    public function setUnavailableSayVoice($unavailable_say_voice)
    {
        if (!is_null($unavailable_say_voice) && (mb_strlen($unavailable_say_voice) > 50)) {
            throw new \InvalidArgumentException('invalid length for $unavailable_say_voice when calling ConversationPbxAgent., must be smaller than or equal to 50.');
        }

        $this->container['unavailable_say_voice'] = $unavailable_say_voice;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id User Id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets voicemail
     *
     * @return bool
     */
    public function getVoicemail()
    {
        return $this->container['voicemail'];
    }

    /**
     * Sets voicemail
     *
     * @param bool $voicemail True if this agent has voicemail configured
     *
     * @return $this
     */
    public function setVoicemail($voicemail)
    {
        $this->container['voicemail'] = $voicemail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


