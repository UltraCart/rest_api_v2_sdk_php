<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activity' => '\ultracart\v2\models\CustomerActivity',
        'affiliate_oid' => 'int',
        'allow_3rd_party_billing' => 'bool',
        'allow_cod' => 'bool',
        'allow_purchase_order' => 'bool',
        'allow_quote_request' => 'bool',
        'allow_selection_of_address_type' => 'bool',
        'attachments' => '\ultracart\v2\models\CustomerAttachment[]',
        'auto_approve_cod' => 'bool',
        'auto_approve_purchase_order' => 'bool',
        'automatic_merchant_notes' => 'string',
        'billing' => '\ultracart\v2\models\CustomerBilling[]',
        'business_notes' => 'string',
        'cards' => '\ultracart\v2\models\CustomerCard[]',
        'cc_emails' => '\ultracart\v2\models\CustomerEmail[]',
        'customer_profile_oid' => 'int',
        'dhl_account_number' => 'string',
        'dhl_duty_account_number' => 'string',
        'email' => 'string',
        'exempt_shipping_handling_charge' => 'bool',
        'fedex_account_number' => 'string',
        'free_shipping' => 'bool',
        'free_shipping_minimum' => 'float',
        'last_modified_by' => 'string',
        'last_modified_dts' => 'string',
        'loyalty' => '\ultracart\v2\models\CustomerLoyalty',
        'maximum_item_count' => 'int',
        'minimum_item_count' => 'int',
        'minimum_subtotal' => 'float',
        'no_coupons' => 'bool',
        'no_free_shipping' => 'bool',
        'no_realtime_charge' => 'bool',
        'orders' => '\ultracart\v2\models\Order[]',
        'orders_summary' => '\ultracart\v2\models\CustomerOrdersSummary',
        'password' => 'string',
        'pricing_tiers' => '\ultracart\v2\models\CustomerPricingTier[]',
        'privacy' => '\ultracart\v2\models\CustomerPrivacy',
        'qb_class' => 'string',
        'qb_code' => 'string',
        'quotes' => '\ultracart\v2\models\Order[]',
        'quotes_summary' => '\ultracart\v2\models\CustomerQuotesSummary',
        'referral_source' => 'string',
        'reviewer' => '\ultracart\v2\models\CustomerReviewer',
        'sales_rep_code' => 'string',
        'send_signup_notification' => 'bool',
        'shipping' => '\ultracart\v2\models\CustomerShipping[]',
        'signup_dts' => 'string',
        'software_entitlements' => '\ultracart\v2\models\CustomerSoftwareEntitlement[]',
        'suppress_buysafe' => 'bool',
        'tags' => '\ultracart\v2\models\CustomerTag[]',
        'tax_codes' => '\ultracart\v2\models\CustomerTaxCodes',
        'tax_exempt' => 'bool',
        'tax_id' => 'string',
        'terms' => 'string',
        'track_separately' => 'bool',
        'unapproved' => 'bool',
        'ups_account_number' => 'string',
        'website_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activity' => null,
        'affiliate_oid' => 'int32',
        'allow_3rd_party_billing' => null,
        'allow_cod' => null,
        'allow_purchase_order' => null,
        'allow_quote_request' => null,
        'allow_selection_of_address_type' => null,
        'attachments' => null,
        'auto_approve_cod' => null,
        'auto_approve_purchase_order' => null,
        'automatic_merchant_notes' => null,
        'billing' => null,
        'business_notes' => null,
        'cards' => null,
        'cc_emails' => null,
        'customer_profile_oid' => 'int32',
        'dhl_account_number' => null,
        'dhl_duty_account_number' => null,
        'email' => null,
        'exempt_shipping_handling_charge' => null,
        'fedex_account_number' => null,
        'free_shipping' => null,
        'free_shipping_minimum' => null,
        'last_modified_by' => null,
        'last_modified_dts' => 'dateTime',
        'loyalty' => null,
        'maximum_item_count' => 'int32',
        'minimum_item_count' => 'int32',
        'minimum_subtotal' => null,
        'no_coupons' => null,
        'no_free_shipping' => null,
        'no_realtime_charge' => null,
        'orders' => null,
        'orders_summary' => null,
        'password' => null,
        'pricing_tiers' => null,
        'privacy' => null,
        'qb_class' => null,
        'qb_code' => null,
        'quotes' => null,
        'quotes_summary' => null,
        'referral_source' => null,
        'reviewer' => null,
        'sales_rep_code' => null,
        'send_signup_notification' => null,
        'shipping' => null,
        'signup_dts' => null,
        'software_entitlements' => null,
        'suppress_buysafe' => null,
        'tags' => null,
        'tax_codes' => null,
        'tax_exempt' => null,
        'tax_id' => null,
        'terms' => null,
        'track_separately' => null,
        'unapproved' => null,
        'ups_account_number' => null,
        'website_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activity' => 'activity',
        'affiliate_oid' => 'affiliate_oid',
        'allow_3rd_party_billing' => 'allow_3rd_party_billing',
        'allow_cod' => 'allow_cod',
        'allow_purchase_order' => 'allow_purchase_order',
        'allow_quote_request' => 'allow_quote_request',
        'allow_selection_of_address_type' => 'allow_selection_of_address_type',
        'attachments' => 'attachments',
        'auto_approve_cod' => 'auto_approve_cod',
        'auto_approve_purchase_order' => 'auto_approve_purchase_order',
        'automatic_merchant_notes' => 'automatic_merchant_notes',
        'billing' => 'billing',
        'business_notes' => 'business_notes',
        'cards' => 'cards',
        'cc_emails' => 'cc_emails',
        'customer_profile_oid' => 'customer_profile_oid',
        'dhl_account_number' => 'dhl_account_number',
        'dhl_duty_account_number' => 'dhl_duty_account_number',
        'email' => 'email',
        'exempt_shipping_handling_charge' => 'exempt_shipping_handling_charge',
        'fedex_account_number' => 'fedex_account_number',
        'free_shipping' => 'free_shipping',
        'free_shipping_minimum' => 'free_shipping_minimum',
        'last_modified_by' => 'last_modified_by',
        'last_modified_dts' => 'last_modified_dts',
        'loyalty' => 'loyalty',
        'maximum_item_count' => 'maximum_item_count',
        'minimum_item_count' => 'minimum_item_count',
        'minimum_subtotal' => 'minimum_subtotal',
        'no_coupons' => 'no_coupons',
        'no_free_shipping' => 'no_free_shipping',
        'no_realtime_charge' => 'no_realtime_charge',
        'orders' => 'orders',
        'orders_summary' => 'orders_summary',
        'password' => 'password',
        'pricing_tiers' => 'pricing_tiers',
        'privacy' => 'privacy',
        'qb_class' => 'qb_class',
        'qb_code' => 'qb_code',
        'quotes' => 'quotes',
        'quotes_summary' => 'quotes_summary',
        'referral_source' => 'referral_source',
        'reviewer' => 'reviewer',
        'sales_rep_code' => 'sales_rep_code',
        'send_signup_notification' => 'send_signup_notification',
        'shipping' => 'shipping',
        'signup_dts' => 'signup_dts',
        'software_entitlements' => 'software_entitlements',
        'suppress_buysafe' => 'suppress_buysafe',
        'tags' => 'tags',
        'tax_codes' => 'tax_codes',
        'tax_exempt' => 'tax_exempt',
        'tax_id' => 'tax_id',
        'terms' => 'terms',
        'track_separately' => 'track_separately',
        'unapproved' => 'unapproved',
        'ups_account_number' => 'ups_account_number',
        'website_url' => 'website_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activity' => 'setActivity',
        'affiliate_oid' => 'setAffiliateOid',
        'allow_3rd_party_billing' => 'setAllow3rdPartyBilling',
        'allow_cod' => 'setAllowCod',
        'allow_purchase_order' => 'setAllowPurchaseOrder',
        'allow_quote_request' => 'setAllowQuoteRequest',
        'allow_selection_of_address_type' => 'setAllowSelectionOfAddressType',
        'attachments' => 'setAttachments',
        'auto_approve_cod' => 'setAutoApproveCod',
        'auto_approve_purchase_order' => 'setAutoApprovePurchaseOrder',
        'automatic_merchant_notes' => 'setAutomaticMerchantNotes',
        'billing' => 'setBilling',
        'business_notes' => 'setBusinessNotes',
        'cards' => 'setCards',
        'cc_emails' => 'setCcEmails',
        'customer_profile_oid' => 'setCustomerProfileOid',
        'dhl_account_number' => 'setDhlAccountNumber',
        'dhl_duty_account_number' => 'setDhlDutyAccountNumber',
        'email' => 'setEmail',
        'exempt_shipping_handling_charge' => 'setExemptShippingHandlingCharge',
        'fedex_account_number' => 'setFedexAccountNumber',
        'free_shipping' => 'setFreeShipping',
        'free_shipping_minimum' => 'setFreeShippingMinimum',
        'last_modified_by' => 'setLastModifiedBy',
        'last_modified_dts' => 'setLastModifiedDts',
        'loyalty' => 'setLoyalty',
        'maximum_item_count' => 'setMaximumItemCount',
        'minimum_item_count' => 'setMinimumItemCount',
        'minimum_subtotal' => 'setMinimumSubtotal',
        'no_coupons' => 'setNoCoupons',
        'no_free_shipping' => 'setNoFreeShipping',
        'no_realtime_charge' => 'setNoRealtimeCharge',
        'orders' => 'setOrders',
        'orders_summary' => 'setOrdersSummary',
        'password' => 'setPassword',
        'pricing_tiers' => 'setPricingTiers',
        'privacy' => 'setPrivacy',
        'qb_class' => 'setQbClass',
        'qb_code' => 'setQbCode',
        'quotes' => 'setQuotes',
        'quotes_summary' => 'setQuotesSummary',
        'referral_source' => 'setReferralSource',
        'reviewer' => 'setReviewer',
        'sales_rep_code' => 'setSalesRepCode',
        'send_signup_notification' => 'setSendSignupNotification',
        'shipping' => 'setShipping',
        'signup_dts' => 'setSignupDts',
        'software_entitlements' => 'setSoftwareEntitlements',
        'suppress_buysafe' => 'setSuppressBuysafe',
        'tags' => 'setTags',
        'tax_codes' => 'setTaxCodes',
        'tax_exempt' => 'setTaxExempt',
        'tax_id' => 'setTaxId',
        'terms' => 'setTerms',
        'track_separately' => 'setTrackSeparately',
        'unapproved' => 'setUnapproved',
        'ups_account_number' => 'setUpsAccountNumber',
        'website_url' => 'setWebsiteUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activity' => 'getActivity',
        'affiliate_oid' => 'getAffiliateOid',
        'allow_3rd_party_billing' => 'getAllow3rdPartyBilling',
        'allow_cod' => 'getAllowCod',
        'allow_purchase_order' => 'getAllowPurchaseOrder',
        'allow_quote_request' => 'getAllowQuoteRequest',
        'allow_selection_of_address_type' => 'getAllowSelectionOfAddressType',
        'attachments' => 'getAttachments',
        'auto_approve_cod' => 'getAutoApproveCod',
        'auto_approve_purchase_order' => 'getAutoApprovePurchaseOrder',
        'automatic_merchant_notes' => 'getAutomaticMerchantNotes',
        'billing' => 'getBilling',
        'business_notes' => 'getBusinessNotes',
        'cards' => 'getCards',
        'cc_emails' => 'getCcEmails',
        'customer_profile_oid' => 'getCustomerProfileOid',
        'dhl_account_number' => 'getDhlAccountNumber',
        'dhl_duty_account_number' => 'getDhlDutyAccountNumber',
        'email' => 'getEmail',
        'exempt_shipping_handling_charge' => 'getExemptShippingHandlingCharge',
        'fedex_account_number' => 'getFedexAccountNumber',
        'free_shipping' => 'getFreeShipping',
        'free_shipping_minimum' => 'getFreeShippingMinimum',
        'last_modified_by' => 'getLastModifiedBy',
        'last_modified_dts' => 'getLastModifiedDts',
        'loyalty' => 'getLoyalty',
        'maximum_item_count' => 'getMaximumItemCount',
        'minimum_item_count' => 'getMinimumItemCount',
        'minimum_subtotal' => 'getMinimumSubtotal',
        'no_coupons' => 'getNoCoupons',
        'no_free_shipping' => 'getNoFreeShipping',
        'no_realtime_charge' => 'getNoRealtimeCharge',
        'orders' => 'getOrders',
        'orders_summary' => 'getOrdersSummary',
        'password' => 'getPassword',
        'pricing_tiers' => 'getPricingTiers',
        'privacy' => 'getPrivacy',
        'qb_class' => 'getQbClass',
        'qb_code' => 'getQbCode',
        'quotes' => 'getQuotes',
        'quotes_summary' => 'getQuotesSummary',
        'referral_source' => 'getReferralSource',
        'reviewer' => 'getReviewer',
        'sales_rep_code' => 'getSalesRepCode',
        'send_signup_notification' => 'getSendSignupNotification',
        'shipping' => 'getShipping',
        'signup_dts' => 'getSignupDts',
        'software_entitlements' => 'getSoftwareEntitlements',
        'suppress_buysafe' => 'getSuppressBuysafe',
        'tags' => 'getTags',
        'tax_codes' => 'getTaxCodes',
        'tax_exempt' => 'getTaxExempt',
        'tax_id' => 'getTaxId',
        'terms' => 'getTerms',
        'track_separately' => 'getTrackSeparately',
        'unapproved' => 'getUnapproved',
        'ups_account_number' => 'getUpsAccountNumber',
        'website_url' => 'getWebsiteUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['affiliate_oid'] = isset($data['affiliate_oid']) ? $data['affiliate_oid'] : null;
        $this->container['allow_3rd_party_billing'] = isset($data['allow_3rd_party_billing']) ? $data['allow_3rd_party_billing'] : null;
        $this->container['allow_cod'] = isset($data['allow_cod']) ? $data['allow_cod'] : null;
        $this->container['allow_purchase_order'] = isset($data['allow_purchase_order']) ? $data['allow_purchase_order'] : null;
        $this->container['allow_quote_request'] = isset($data['allow_quote_request']) ? $data['allow_quote_request'] : null;
        $this->container['allow_selection_of_address_type'] = isset($data['allow_selection_of_address_type']) ? $data['allow_selection_of_address_type'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['auto_approve_cod'] = isset($data['auto_approve_cod']) ? $data['auto_approve_cod'] : null;
        $this->container['auto_approve_purchase_order'] = isset($data['auto_approve_purchase_order']) ? $data['auto_approve_purchase_order'] : null;
        $this->container['automatic_merchant_notes'] = isset($data['automatic_merchant_notes']) ? $data['automatic_merchant_notes'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
        $this->container['business_notes'] = isset($data['business_notes']) ? $data['business_notes'] : null;
        $this->container['cards'] = isset($data['cards']) ? $data['cards'] : null;
        $this->container['cc_emails'] = isset($data['cc_emails']) ? $data['cc_emails'] : null;
        $this->container['customer_profile_oid'] = isset($data['customer_profile_oid']) ? $data['customer_profile_oid'] : null;
        $this->container['dhl_account_number'] = isset($data['dhl_account_number']) ? $data['dhl_account_number'] : null;
        $this->container['dhl_duty_account_number'] = isset($data['dhl_duty_account_number']) ? $data['dhl_duty_account_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['exempt_shipping_handling_charge'] = isset($data['exempt_shipping_handling_charge']) ? $data['exempt_shipping_handling_charge'] : null;
        $this->container['fedex_account_number'] = isset($data['fedex_account_number']) ? $data['fedex_account_number'] : null;
        $this->container['free_shipping'] = isset($data['free_shipping']) ? $data['free_shipping'] : null;
        $this->container['free_shipping_minimum'] = isset($data['free_shipping_minimum']) ? $data['free_shipping_minimum'] : null;
        $this->container['last_modified_by'] = isset($data['last_modified_by']) ? $data['last_modified_by'] : null;
        $this->container['last_modified_dts'] = isset($data['last_modified_dts']) ? $data['last_modified_dts'] : null;
        $this->container['loyalty'] = isset($data['loyalty']) ? $data['loyalty'] : null;
        $this->container['maximum_item_count'] = isset($data['maximum_item_count']) ? $data['maximum_item_count'] : null;
        $this->container['minimum_item_count'] = isset($data['minimum_item_count']) ? $data['minimum_item_count'] : null;
        $this->container['minimum_subtotal'] = isset($data['minimum_subtotal']) ? $data['minimum_subtotal'] : null;
        $this->container['no_coupons'] = isset($data['no_coupons']) ? $data['no_coupons'] : null;
        $this->container['no_free_shipping'] = isset($data['no_free_shipping']) ? $data['no_free_shipping'] : null;
        $this->container['no_realtime_charge'] = isset($data['no_realtime_charge']) ? $data['no_realtime_charge'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
        $this->container['orders_summary'] = isset($data['orders_summary']) ? $data['orders_summary'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['pricing_tiers'] = isset($data['pricing_tiers']) ? $data['pricing_tiers'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['qb_class'] = isset($data['qb_class']) ? $data['qb_class'] : null;
        $this->container['qb_code'] = isset($data['qb_code']) ? $data['qb_code'] : null;
        $this->container['quotes'] = isset($data['quotes']) ? $data['quotes'] : null;
        $this->container['quotes_summary'] = isset($data['quotes_summary']) ? $data['quotes_summary'] : null;
        $this->container['referral_source'] = isset($data['referral_source']) ? $data['referral_source'] : null;
        $this->container['reviewer'] = isset($data['reviewer']) ? $data['reviewer'] : null;
        $this->container['sales_rep_code'] = isset($data['sales_rep_code']) ? $data['sales_rep_code'] : null;
        $this->container['send_signup_notification'] = isset($data['send_signup_notification']) ? $data['send_signup_notification'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['signup_dts'] = isset($data['signup_dts']) ? $data['signup_dts'] : null;
        $this->container['software_entitlements'] = isset($data['software_entitlements']) ? $data['software_entitlements'] : null;
        $this->container['suppress_buysafe'] = isset($data['suppress_buysafe']) ? $data['suppress_buysafe'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['tax_codes'] = isset($data['tax_codes']) ? $data['tax_codes'] : null;
        $this->container['tax_exempt'] = isset($data['tax_exempt']) ? $data['tax_exempt'] : null;
        $this->container['tax_id'] = isset($data['tax_id']) ? $data['tax_id'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['track_separately'] = isset($data['track_separately']) ? $data['track_separately'] : null;
        $this->container['unapproved'] = isset($data['unapproved']) ? $data['unapproved'] : null;
        $this->container['ups_account_number'] = isset($data['ups_account_number']) ? $data['ups_account_number'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['business_notes']) && (mb_strlen($this->container['business_notes']) > 2000)) {
            $invalidProperties[] = "invalid value for 'business_notes', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['dhl_account_number']) && (mb_strlen($this->container['dhl_account_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'dhl_account_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['dhl_duty_account_number']) && (mb_strlen($this->container['dhl_duty_account_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'dhl_duty_account_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['fedex_account_number']) && (mb_strlen($this->container['fedex_account_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'fedex_account_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['last_modified_by']) && (mb_strlen($this->container['last_modified_by']) > 100)) {
            $invalidProperties[] = "invalid value for 'last_modified_by', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) > 30)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['referral_source']) && (mb_strlen($this->container['referral_source']) > 50)) {
            $invalidProperties[] = "invalid value for 'referral_source', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['sales_rep_code']) && (mb_strlen($this->container['sales_rep_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_rep_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['tax_id']) && (mb_strlen($this->container['tax_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'tax_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['ups_account_number']) && (mb_strlen($this->container['ups_account_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'ups_account_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['website_url']) && (mb_strlen($this->container['website_url']) > 100)) {
            $invalidProperties[] = "invalid value for 'website_url', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (mb_strlen($this->container['business_notes']) > 2000) {
            return false;
        }
        if (mb_strlen($this->container['dhl_account_number']) > 20) {
            return false;
        }
        if (mb_strlen($this->container['dhl_duty_account_number']) > 20) {
            return false;
        }
        if (mb_strlen($this->container['fedex_account_number']) > 20) {
            return false;
        }
        if (mb_strlen($this->container['last_modified_by']) > 100) {
            return false;
        }
        if (mb_strlen($this->container['password']) > 30) {
            return false;
        }
        if (mb_strlen($this->container['referral_source']) > 50) {
            return false;
        }
        if (mb_strlen($this->container['sales_rep_code']) > 10) {
            return false;
        }
        if (mb_strlen($this->container['tax_id']) > 15) {
            return false;
        }
        if (mb_strlen($this->container['ups_account_number']) > 20) {
            return false;
        }
        if (mb_strlen($this->container['website_url']) > 100) {
            return false;
        }
        return true;
    }


    /**
     * Gets activity
     *
     * @return \ultracart\v2\models\CustomerActivity
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param \ultracart\v2\models\CustomerActivity $activity activity
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets affiliate_oid
     *
     * @return int
     */
    public function getAffiliateOid()
    {
        return $this->container['affiliate_oid'];
    }

    /**
     * Sets affiliate_oid
     *
     * @param int $affiliate_oid Affiliate oid
     *
     * @return $this
     */
    public function setAffiliateOid($affiliate_oid)
    {
        $this->container['affiliate_oid'] = $affiliate_oid;

        return $this;
    }

    /**
     * Gets allow_3rd_party_billing
     *
     * @return bool
     */
    public function getAllow3rdPartyBilling()
    {
        return $this->container['allow_3rd_party_billing'];
    }

    /**
     * Sets allow_3rd_party_billing
     *
     * @param bool $allow_3rd_party_billing Allow 3rd party billing
     *
     * @return $this
     */
    public function setAllow3rdPartyBilling($allow_3rd_party_billing)
    {
        $this->container['allow_3rd_party_billing'] = $allow_3rd_party_billing;

        return $this;
    }

    /**
     * Gets allow_cod
     *
     * @return bool
     */
    public function getAllowCod()
    {
        return $this->container['allow_cod'];
    }

    /**
     * Sets allow_cod
     *
     * @param bool $allow_cod Allow COD
     *
     * @return $this
     */
    public function setAllowCod($allow_cod)
    {
        $this->container['allow_cod'] = $allow_cod;

        return $this;
    }

    /**
     * Gets allow_purchase_order
     *
     * @return bool
     */
    public function getAllowPurchaseOrder()
    {
        return $this->container['allow_purchase_order'];
    }

    /**
     * Sets allow_purchase_order
     *
     * @param bool $allow_purchase_order Allow purchase orders by this customer
     *
     * @return $this
     */
    public function setAllowPurchaseOrder($allow_purchase_order)
    {
        $this->container['allow_purchase_order'] = $allow_purchase_order;

        return $this;
    }

    /**
     * Gets allow_quote_request
     *
     * @return bool
     */
    public function getAllowQuoteRequest()
    {
        return $this->container['allow_quote_request'];
    }

    /**
     * Sets allow_quote_request
     *
     * @param bool $allow_quote_request Allow quote request
     *
     * @return $this
     */
    public function setAllowQuoteRequest($allow_quote_request)
    {
        $this->container['allow_quote_request'] = $allow_quote_request;

        return $this;
    }

    /**
     * Gets allow_selection_of_address_type
     *
     * @return bool
     */
    public function getAllowSelectionOfAddressType()
    {
        return $this->container['allow_selection_of_address_type'];
    }

    /**
     * Sets allow_selection_of_address_type
     *
     * @param bool $allow_selection_of_address_type Allow selection of residential or business address type
     *
     * @return $this
     */
    public function setAllowSelectionOfAddressType($allow_selection_of_address_type)
    {
        $this->container['allow_selection_of_address_type'] = $allow_selection_of_address_type;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \ultracart\v2\models\CustomerAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \ultracart\v2\models\CustomerAttachment[] $attachments Attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets auto_approve_cod
     *
     * @return bool
     */
    public function getAutoApproveCod()
    {
        return $this->container['auto_approve_cod'];
    }

    /**
     * Sets auto_approve_cod
     *
     * @param bool $auto_approve_cod Auto approve COD
     *
     * @return $this
     */
    public function setAutoApproveCod($auto_approve_cod)
    {
        $this->container['auto_approve_cod'] = $auto_approve_cod;

        return $this;
    }

    /**
     * Gets auto_approve_purchase_order
     *
     * @return bool
     */
    public function getAutoApprovePurchaseOrder()
    {
        return $this->container['auto_approve_purchase_order'];
    }

    /**
     * Sets auto_approve_purchase_order
     *
     * @param bool $auto_approve_purchase_order Auto approve purchase orders by this customer
     *
     * @return $this
     */
    public function setAutoApprovePurchaseOrder($auto_approve_purchase_order)
    {
        $this->container['auto_approve_purchase_order'] = $auto_approve_purchase_order;

        return $this;
    }

    /**
     * Gets automatic_merchant_notes
     *
     * @return string
     */
    public function getAutomaticMerchantNotes()
    {
        return $this->container['automatic_merchant_notes'];
    }

    /**
     * Sets automatic_merchant_notes
     *
     * @param string $automatic_merchant_notes Automatic merchant notes are added to every order placed
     *
     * @return $this
     */
    public function setAutomaticMerchantNotes($automatic_merchant_notes)
    {
        $this->container['automatic_merchant_notes'] = $automatic_merchant_notes;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \ultracart\v2\models\CustomerBilling[]
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \ultracart\v2\models\CustomerBilling[] $billing Billing addresses for this customer
     *
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets business_notes
     *
     * @return string
     */
    public function getBusinessNotes()
    {
        return $this->container['business_notes'];
    }

    /**
     * Sets business_notes
     *
     * @param string $business_notes Business notes (internally visible only)
     *
     * @return $this
     */
    public function setBusinessNotes($business_notes)
    {
        if (!is_null($business_notes) && (mb_strlen($business_notes) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $business_notes when calling Customer., must be smaller than or equal to 2000.');
        }

        $this->container['business_notes'] = $business_notes;

        return $this;
    }

    /**
     * Gets cards
     *
     * @return \ultracart\v2\models\CustomerCard[]
     */
    public function getCards()
    {
        return $this->container['cards'];
    }

    /**
     * Sets cards
     *
     * @param \ultracart\v2\models\CustomerCard[] $cards Credit Cards for this customer
     *
     * @return $this
     */
    public function setCards($cards)
    {
        $this->container['cards'] = $cards;

        return $this;
    }

    /**
     * Gets cc_emails
     *
     * @return \ultracart\v2\models\CustomerEmail[]
     */
    public function getCcEmails()
    {
        return $this->container['cc_emails'];
    }

    /**
     * Sets cc_emails
     *
     * @param \ultracart\v2\models\CustomerEmail[] $cc_emails Additional emails to CC notification
     *
     * @return $this
     */
    public function setCcEmails($cc_emails)
    {
        $this->container['cc_emails'] = $cc_emails;

        return $this;
    }

    /**
     * Gets customer_profile_oid
     *
     * @return int
     */
    public function getCustomerProfileOid()
    {
        return $this->container['customer_profile_oid'];
    }

    /**
     * Sets customer_profile_oid
     *
     * @param int $customer_profile_oid Customer profile object identifier
     *
     * @return $this
     */
    public function setCustomerProfileOid($customer_profile_oid)
    {
        $this->container['customer_profile_oid'] = $customer_profile_oid;

        return $this;
    }

    /**
     * Gets dhl_account_number
     *
     * @return string
     */
    public function getDhlAccountNumber()
    {
        return $this->container['dhl_account_number'];
    }

    /**
     * Sets dhl_account_number
     *
     * @param string $dhl_account_number DHL account number
     *
     * @return $this
     */
    public function setDhlAccountNumber($dhl_account_number)
    {
        if (!is_null($dhl_account_number) && (mb_strlen($dhl_account_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $dhl_account_number when calling Customer., must be smaller than or equal to 20.');
        }

        $this->container['dhl_account_number'] = $dhl_account_number;

        return $this;
    }

    /**
     * Gets dhl_duty_account_number
     *
     * @return string
     */
    public function getDhlDutyAccountNumber()
    {
        return $this->container['dhl_duty_account_number'];
    }

    /**
     * Sets dhl_duty_account_number
     *
     * @param string $dhl_duty_account_number DHL duty account number
     *
     * @return $this
     */
    public function setDhlDutyAccountNumber($dhl_duty_account_number)
    {
        if (!is_null($dhl_duty_account_number) && (mb_strlen($dhl_duty_account_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $dhl_duty_account_number when calling Customer., must be smaller than or equal to 20.');
        }

        $this->container['dhl_duty_account_number'] = $dhl_duty_account_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address of this customer profile
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets exempt_shipping_handling_charge
     *
     * @return bool
     */
    public function getExemptShippingHandlingCharge()
    {
        return $this->container['exempt_shipping_handling_charge'];
    }

    /**
     * Sets exempt_shipping_handling_charge
     *
     * @param bool $exempt_shipping_handling_charge Exempt shipping handling charge
     *
     * @return $this
     */
    public function setExemptShippingHandlingCharge($exempt_shipping_handling_charge)
    {
        $this->container['exempt_shipping_handling_charge'] = $exempt_shipping_handling_charge;

        return $this;
    }

    /**
     * Gets fedex_account_number
     *
     * @return string
     */
    public function getFedexAccountNumber()
    {
        return $this->container['fedex_account_number'];
    }

    /**
     * Sets fedex_account_number
     *
     * @param string $fedex_account_number FedEx account number
     *
     * @return $this
     */
    public function setFedexAccountNumber($fedex_account_number)
    {
        if (!is_null($fedex_account_number) && (mb_strlen($fedex_account_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $fedex_account_number when calling Customer., must be smaller than or equal to 20.');
        }

        $this->container['fedex_account_number'] = $fedex_account_number;

        return $this;
    }

    /**
     * Gets free_shipping
     *
     * @return bool
     */
    public function getFreeShipping()
    {
        return $this->container['free_shipping'];
    }

    /**
     * Sets free_shipping
     *
     * @param bool $free_shipping This customer always receives free shipping
     *
     * @return $this
     */
    public function setFreeShipping($free_shipping)
    {
        $this->container['free_shipping'] = $free_shipping;

        return $this;
    }

    /**
     * Gets free_shipping_minimum
     *
     * @return float
     */
    public function getFreeShippingMinimum()
    {
        return $this->container['free_shipping_minimum'];
    }

    /**
     * Sets free_shipping_minimum
     *
     * @param float $free_shipping_minimum If free_shipping is true, this is the minimum subtotal required for free shipping
     *
     * @return $this
     */
    public function setFreeShippingMinimum($free_shipping_minimum)
    {
        $this->container['free_shipping_minimum'] = $free_shipping_minimum;

        return $this;
    }

    /**
     * Gets last_modified_by
     *
     * @return string
     */
    public function getLastModifiedBy()
    {
        return $this->container['last_modified_by'];
    }

    /**
     * Sets last_modified_by
     *
     * @param string $last_modified_by Last modified by
     *
     * @return $this
     */
    public function setLastModifiedBy($last_modified_by)
    {
        if (!is_null($last_modified_by) && (mb_strlen($last_modified_by) > 100)) {
            throw new \InvalidArgumentException('invalid length for $last_modified_by when calling Customer., must be smaller than or equal to 100.');
        }

        $this->container['last_modified_by'] = $last_modified_by;

        return $this;
    }

    /**
     * Gets last_modified_dts
     *
     * @return string
     */
    public function getLastModifiedDts()
    {
        return $this->container['last_modified_dts'];
    }

    /**
     * Sets last_modified_dts
     *
     * @param string $last_modified_dts Last modified date
     *
     * @return $this
     */
    public function setLastModifiedDts($last_modified_dts)
    {
        $this->container['last_modified_dts'] = $last_modified_dts;

        return $this;
    }

    /**
     * Gets loyalty
     *
     * @return \ultracart\v2\models\CustomerLoyalty
     */
    public function getLoyalty()
    {
        return $this->container['loyalty'];
    }

    /**
     * Sets loyalty
     *
     * @param \ultracart\v2\models\CustomerLoyalty $loyalty loyalty
     *
     * @return $this
     */
    public function setLoyalty($loyalty)
    {
        $this->container['loyalty'] = $loyalty;

        return $this;
    }

    /**
     * Gets maximum_item_count
     *
     * @return int
     */
    public function getMaximumItemCount()
    {
        return $this->container['maximum_item_count'];
    }

    /**
     * Sets maximum_item_count
     *
     * @param int $maximum_item_count Maximum item count
     *
     * @return $this
     */
    public function setMaximumItemCount($maximum_item_count)
    {
        $this->container['maximum_item_count'] = $maximum_item_count;

        return $this;
    }

    /**
     * Gets minimum_item_count
     *
     * @return int
     */
    public function getMinimumItemCount()
    {
        return $this->container['minimum_item_count'];
    }

    /**
     * Sets minimum_item_count
     *
     * @param int $minimum_item_count Minimum item count
     *
     * @return $this
     */
    public function setMinimumItemCount($minimum_item_count)
    {
        $this->container['minimum_item_count'] = $minimum_item_count;

        return $this;
    }

    /**
     * Gets minimum_subtotal
     *
     * @return float
     */
    public function getMinimumSubtotal()
    {
        return $this->container['minimum_subtotal'];
    }

    /**
     * Sets minimum_subtotal
     *
     * @param float $minimum_subtotal Minimum subtotal
     *
     * @return $this
     */
    public function setMinimumSubtotal($minimum_subtotal)
    {
        $this->container['minimum_subtotal'] = $minimum_subtotal;

        return $this;
    }

    /**
     * Gets no_coupons
     *
     * @return bool
     */
    public function getNoCoupons()
    {
        return $this->container['no_coupons'];
    }

    /**
     * Sets no_coupons
     *
     * @param bool $no_coupons No coupons
     *
     * @return $this
     */
    public function setNoCoupons($no_coupons)
    {
        $this->container['no_coupons'] = $no_coupons;

        return $this;
    }

    /**
     * Gets no_free_shipping
     *
     * @return bool
     */
    public function getNoFreeShipping()
    {
        return $this->container['no_free_shipping'];
    }

    /**
     * Sets no_free_shipping
     *
     * @param bool $no_free_shipping No free shipping regardless of coupons or item level settings
     *
     * @return $this
     */
    public function setNoFreeShipping($no_free_shipping)
    {
        $this->container['no_free_shipping'] = $no_free_shipping;

        return $this;
    }

    /**
     * Gets no_realtime_charge
     *
     * @return bool
     */
    public function getNoRealtimeCharge()
    {
        return $this->container['no_realtime_charge'];
    }

    /**
     * Sets no_realtime_charge
     *
     * @param bool $no_realtime_charge No realtime charge
     *
     * @return $this
     */
    public function setNoRealtimeCharge($no_realtime_charge)
    {
        $this->container['no_realtime_charge'] = $no_realtime_charge;

        return $this;
    }

    /**
     * Gets orders
     *
     * @return \ultracart\v2\models\Order[]
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param \ultracart\v2\models\Order[] $orders Orders associated with this customer profile
     *
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }

    /**
     * Gets orders_summary
     *
     * @return \ultracart\v2\models\CustomerOrdersSummary
     */
    public function getOrdersSummary()
    {
        return $this->container['orders_summary'];
    }

    /**
     * Sets orders_summary
     *
     * @param \ultracart\v2\models\CustomerOrdersSummary $orders_summary orders_summary
     *
     * @return $this
     */
    public function setOrdersSummary($orders_summary)
    {
        $this->container['orders_summary'] = $orders_summary;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Password (may only be set, never read)
     *
     * @return $this
     */
    public function setPassword($password)
    {
        if (!is_null($password) && (mb_strlen($password) > 30)) {
            throw new \InvalidArgumentException('invalid length for $password when calling Customer., must be smaller than or equal to 30.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets pricing_tiers
     *
     * @return \ultracart\v2\models\CustomerPricingTier[]
     */
    public function getPricingTiers()
    {
        return $this->container['pricing_tiers'];
    }

    /**
     * Sets pricing_tiers
     *
     * @param \ultracart\v2\models\CustomerPricingTier[] $pricing_tiers Pricing tiers for this customer
     *
     * @return $this
     */
    public function setPricingTiers($pricing_tiers)
    {
        $this->container['pricing_tiers'] = $pricing_tiers;

        return $this;
    }

    /**
     * Gets privacy
     *
     * @return \ultracart\v2\models\CustomerPrivacy
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     *
     * @param \ultracart\v2\models\CustomerPrivacy $privacy privacy
     *
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets qb_class
     *
     * @return string
     */
    public function getQbClass()
    {
        return $this->container['qb_class'];
    }

    /**
     * Sets qb_class
     *
     * @param string $qb_class QuickBooks class to import this customer as
     *
     * @return $this
     */
    public function setQbClass($qb_class)
    {
        $this->container['qb_class'] = $qb_class;

        return $this;
    }

    /**
     * Gets qb_code
     *
     * @return string
     */
    public function getQbCode()
    {
        return $this->container['qb_code'];
    }

    /**
     * Sets qb_code
     *
     * @param string $qb_code QuickBooks name to import this customer as
     *
     * @return $this
     */
    public function setQbCode($qb_code)
    {
        $this->container['qb_code'] = $qb_code;

        return $this;
    }

    /**
     * Gets quotes
     *
     * @return \ultracart\v2\models\Order[]
     */
    public function getQuotes()
    {
        return $this->container['quotes'];
    }

    /**
     * Sets quotes
     *
     * @param \ultracart\v2\models\Order[] $quotes Quotes associated with this customer profile
     *
     * @return $this
     */
    public function setQuotes($quotes)
    {
        $this->container['quotes'] = $quotes;

        return $this;
    }

    /**
     * Gets quotes_summary
     *
     * @return \ultracart\v2\models\CustomerQuotesSummary
     */
    public function getQuotesSummary()
    {
        return $this->container['quotes_summary'];
    }

    /**
     * Sets quotes_summary
     *
     * @param \ultracart\v2\models\CustomerQuotesSummary $quotes_summary quotes_summary
     *
     * @return $this
     */
    public function setQuotesSummary($quotes_summary)
    {
        $this->container['quotes_summary'] = $quotes_summary;

        return $this;
    }

    /**
     * Gets referral_source
     *
     * @return string
     */
    public function getReferralSource()
    {
        return $this->container['referral_source'];
    }

    /**
     * Sets referral_source
     *
     * @param string $referral_source Referral Source
     *
     * @return $this
     */
    public function setReferralSource($referral_source)
    {
        if (!is_null($referral_source) && (mb_strlen($referral_source) > 50)) {
            throw new \InvalidArgumentException('invalid length for $referral_source when calling Customer., must be smaller than or equal to 50.');
        }

        $this->container['referral_source'] = $referral_source;

        return $this;
    }

    /**
     * Gets reviewer
     *
     * @return \ultracart\v2\models\CustomerReviewer
     */
    public function getReviewer()
    {
        return $this->container['reviewer'];
    }

    /**
     * Sets reviewer
     *
     * @param \ultracart\v2\models\CustomerReviewer $reviewer reviewer
     *
     * @return $this
     */
    public function setReviewer($reviewer)
    {
        $this->container['reviewer'] = $reviewer;

        return $this;
    }

    /**
     * Gets sales_rep_code
     *
     * @return string
     */
    public function getSalesRepCode()
    {
        return $this->container['sales_rep_code'];
    }

    /**
     * Sets sales_rep_code
     *
     * @param string $sales_rep_code Sales rep code
     *
     * @return $this
     */
    public function setSalesRepCode($sales_rep_code)
    {
        if (!is_null($sales_rep_code) && (mb_strlen($sales_rep_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_rep_code when calling Customer., must be smaller than or equal to 10.');
        }

        $this->container['sales_rep_code'] = $sales_rep_code;

        return $this;
    }

    /**
     * Gets send_signup_notification
     *
     * @return bool
     */
    public function getSendSignupNotification()
    {
        return $this->container['send_signup_notification'];
    }

    /**
     * Sets send_signup_notification
     *
     * @param bool $send_signup_notification Send signup notification, if true during customer creation, will send a notification.
     *
     * @return $this
     */
    public function setSendSignupNotification($send_signup_notification)
    {
        $this->container['send_signup_notification'] = $send_signup_notification;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \ultracart\v2\models\CustomerShipping[]
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \ultracart\v2\models\CustomerShipping[] $shipping Shipping addresses for this customer
     *
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets signup_dts
     *
     * @return string
     */
    public function getSignupDts()
    {
        return $this->container['signup_dts'];
    }

    /**
     * Sets signup_dts
     *
     * @param string $signup_dts Signup date
     *
     * @return $this
     */
    public function setSignupDts($signup_dts)
    {
        $this->container['signup_dts'] = $signup_dts;

        return $this;
    }

    /**
     * Gets software_entitlements
     *
     * @return \ultracart\v2\models\CustomerSoftwareEntitlement[]
     */
    public function getSoftwareEntitlements()
    {
        return $this->container['software_entitlements'];
    }

    /**
     * Sets software_entitlements
     *
     * @param \ultracart\v2\models\CustomerSoftwareEntitlement[] $software_entitlements Software entitlements owned by this customer
     *
     * @return $this
     */
    public function setSoftwareEntitlements($software_entitlements)
    {
        $this->container['software_entitlements'] = $software_entitlements;

        return $this;
    }

    /**
     * Gets suppress_buysafe
     *
     * @return bool
     */
    public function getSuppressBuysafe()
    {
        return $this->container['suppress_buysafe'];
    }

    /**
     * Sets suppress_buysafe
     *
     * @param bool $suppress_buysafe Suppress buySAFE
     *
     * @return $this
     */
    public function setSuppressBuysafe($suppress_buysafe)
    {
        $this->container['suppress_buysafe'] = $suppress_buysafe;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \ultracart\v2\models\CustomerTag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \ultracart\v2\models\CustomerTag[] $tags Tags for this customer
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets tax_codes
     *
     * @return \ultracart\v2\models\CustomerTaxCodes
     */
    public function getTaxCodes()
    {
        return $this->container['tax_codes'];
    }

    /**
     * Sets tax_codes
     *
     * @param \ultracart\v2\models\CustomerTaxCodes $tax_codes tax_codes
     *
     * @return $this
     */
    public function setTaxCodes($tax_codes)
    {
        $this->container['tax_codes'] = $tax_codes;

        return $this;
    }

    /**
     * Gets tax_exempt
     *
     * @return bool
     */
    public function getTaxExempt()
    {
        return $this->container['tax_exempt'];
    }

    /**
     * Sets tax_exempt
     *
     * @param bool $tax_exempt True if the customer is tax exempt
     *
     * @return $this
     */
    public function setTaxExempt($tax_exempt)
    {
        $this->container['tax_exempt'] = $tax_exempt;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string $tax_id Tax ID
     *
     * @return $this
     */
    public function setTaxId($tax_id)
    {
        if (!is_null($tax_id) && (mb_strlen($tax_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $tax_id when calling Customer., must be smaller than or equal to 15.');
        }

        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return string
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param string $terms Terms for this customer
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets track_separately
     *
     * @return bool
     */
    public function getTrackSeparately()
    {
        return $this->container['track_separately'];
    }

    /**
     * Sets track_separately
     *
     * @param bool $track_separately True if the customer should be tracked separately in QuickBooks
     *
     * @return $this
     */
    public function setTrackSeparately($track_separately)
    {
        $this->container['track_separately'] = $track_separately;

        return $this;
    }

    /**
     * Gets unapproved
     *
     * @return bool
     */
    public function getUnapproved()
    {
        return $this->container['unapproved'];
    }

    /**
     * Sets unapproved
     *
     * @param bool $unapproved Unapproved
     *
     * @return $this
     */
    public function setUnapproved($unapproved)
    {
        $this->container['unapproved'] = $unapproved;

        return $this;
    }

    /**
     * Gets ups_account_number
     *
     * @return string
     */
    public function getUpsAccountNumber()
    {
        return $this->container['ups_account_number'];
    }

    /**
     * Sets ups_account_number
     *
     * @param string $ups_account_number UPS account number
     *
     * @return $this
     */
    public function setUpsAccountNumber($ups_account_number)
    {
        if (!is_null($ups_account_number) && (mb_strlen($ups_account_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $ups_account_number when calling Customer., must be smaller than or equal to 20.');
        }

        $this->container['ups_account_number'] = $ups_account_number;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url Website url
     *
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        if (!is_null($website_url) && (mb_strlen($website_url) > 100)) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling Customer., must be smaller than or equal to 100.');
        }

        $this->container['website_url'] = $website_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


