<?php
/**
 * ConversationPbxTimeBasedMapping
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationPbxTimeBasedMapping Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationPbxTimeBasedMapping implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationPbxTimeBasedMapping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action' => 'string',
        'action_target' => 'string',
        'name' => 'string',
        'time_range_uuid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action' => null,
        'action_target' => null,
        'name' => null,
        'time_range_uuid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'action_target' => 'action_target',
        'name' => 'name',
        'time_range_uuid' => 'time_range_uuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'action_target' => 'setActionTarget',
        'name' => 'setName',
        'time_range_uuid' => 'setTimeRangeUuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'action_target' => 'getActionTarget',
        'name' => 'getName',
        'time_range_uuid' => 'getTimeRangeUuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['action_target'] = isset($data['action_target']) ? $data['action_target'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['time_range_uuid'] = isset($data['time_range_uuid']) ? $data['time_range_uuid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['action']) && (mb_strlen($this->container['action']) > 30)) {
            $invalidProperties[] = "invalid value for 'action', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['action_target']) && (mb_strlen($this->container['action_target']) > 50)) {
            $invalidProperties[] = "invalid value for 'action_target', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['time_range_uuid']) && (mb_strlen($this->container['time_range_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'time_range_uuid', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action
     *
     * @return $this
     */
    public function setAction($action)
    {
        if (!is_null($action) && (mb_strlen($action) > 30)) {
            throw new \InvalidArgumentException('invalid length for $action when calling ConversationPbxTimeBasedMapping., must be smaller than or equal to 30.');
        }

        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets action_target
     *
     * @return string
     */
    public function getActionTarget()
    {
        return $this->container['action_target'];
    }

    /**
     * Sets action_target
     *
     * @param string $action_target Action target
     *
     * @return $this
     */
    public function setActionTarget($action_target)
    {
        if (!is_null($action_target) && (mb_strlen($action_target) > 50)) {
            throw new \InvalidArgumentException('invalid length for $action_target when calling ConversationPbxTimeBasedMapping., must be smaller than or equal to 50.');
        }

        $this->container['action_target'] = $action_target;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ConversationPbxTimeBasedMapping., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets time_range_uuid
     *
     * @return string
     */
    public function getTimeRangeUuid()
    {
        return $this->container['time_range_uuid'];
    }

    /**
     * Sets time_range_uuid
     *
     * @param string $time_range_uuid Time range UUID
     *
     * @return $this
     */
    public function setTimeRangeUuid($time_range_uuid)
    {
        if (!is_null($time_range_uuid) && (mb_strlen($time_range_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $time_range_uuid when calling ConversationPbxTimeBasedMapping., must be smaller than or equal to 50.');
        }

        $this->container['time_range_uuid'] = $time_range_uuid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


