<?php
/**
 * ItemContentMultimedia
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemContentMultimedia Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemContentMultimedia implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemContentMultimedia';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cloud_url' => 'string',
        'cloud_url_expiration' => 'string',
        'code' => 'string',
        'description' => 'string',
        'exclude_from_gallery' => 'bool',
        'file_name' => 'string',
        'height' => 'int',
        'merchant_item_multimedia_oid' => 'int',
        'orphan' => 'bool',
        'placeholder' => 'bool',
        'temp_multimedia_oid' => 'int',
        'thumbnails' => '\ultracart\v2\models\ItemContentMultimediaThumbnail[]',
        'type' => 'string',
        'url' => 'string',
        'width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cloud_url' => null,
        'cloud_url_expiration' => 'dateTime',
        'code' => null,
        'description' => null,
        'exclude_from_gallery' => null,
        'file_name' => null,
        'height' => 'int32',
        'merchant_item_multimedia_oid' => 'int32',
        'orphan' => null,
        'placeholder' => null,
        'temp_multimedia_oid' => 'int32',
        'thumbnails' => null,
        'type' => null,
        'url' => null,
        'width' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cloud_url' => 'cloud_url',
        'cloud_url_expiration' => 'cloud_url_expiration',
        'code' => 'code',
        'description' => 'description',
        'exclude_from_gallery' => 'exclude_from_gallery',
        'file_name' => 'file_name',
        'height' => 'height',
        'merchant_item_multimedia_oid' => 'merchant_item_multimedia_oid',
        'orphan' => 'orphan',
        'placeholder' => 'placeholder',
        'temp_multimedia_oid' => 'temp_multimedia_oid',
        'thumbnails' => 'thumbnails',
        'type' => 'type',
        'url' => 'url',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cloud_url' => 'setCloudUrl',
        'cloud_url_expiration' => 'setCloudUrlExpiration',
        'code' => 'setCode',
        'description' => 'setDescription',
        'exclude_from_gallery' => 'setExcludeFromGallery',
        'file_name' => 'setFileName',
        'height' => 'setHeight',
        'merchant_item_multimedia_oid' => 'setMerchantItemMultimediaOid',
        'orphan' => 'setOrphan',
        'placeholder' => 'setPlaceholder',
        'temp_multimedia_oid' => 'setTempMultimediaOid',
        'thumbnails' => 'setThumbnails',
        'type' => 'setType',
        'url' => 'setUrl',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cloud_url' => 'getCloudUrl',
        'cloud_url_expiration' => 'getCloudUrlExpiration',
        'code' => 'getCode',
        'description' => 'getDescription',
        'exclude_from_gallery' => 'getExcludeFromGallery',
        'file_name' => 'getFileName',
        'height' => 'getHeight',
        'merchant_item_multimedia_oid' => 'getMerchantItemMultimediaOid',
        'orphan' => 'getOrphan',
        'placeholder' => 'getPlaceholder',
        'temp_multimedia_oid' => 'getTempMultimediaOid',
        'thumbnails' => 'getThumbnails',
        'type' => 'getType',
        'url' => 'getUrl',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_IMAGE = 'Image';
    public const TYPE_PDF = 'PDF';
    public const TYPE_TEXT = 'Text';
    public const TYPE_UNKNOWN = 'Unknown';
    public const TYPE_VIDEO = 'Video';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_IMAGE,
            self::TYPE_PDF,
            self::TYPE_TEXT,
            self::TYPE_UNKNOWN,
            self::TYPE_VIDEO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cloud_url'] = $data['cloud_url'] ?? null;
        $this->container['cloud_url_expiration'] = $data['cloud_url_expiration'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['exclude_from_gallery'] = $data['exclude_from_gallery'] ?? null;
        $this->container['file_name'] = $data['file_name'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['merchant_item_multimedia_oid'] = $data['merchant_item_multimedia_oid'] ?? null;
        $this->container['orphan'] = $data['orphan'] ?? null;
        $this->container['placeholder'] = $data['placeholder'] ?? null;
        $this->container['temp_multimedia_oid'] = $data['temp_multimedia_oid'] ?? null;
        $this->container['thumbnails'] = $data['thumbnails'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['width'] = $data['width'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 20)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 50000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 50000.";
        }

        if (!is_null($this->container['file_name']) && (mb_strlen($this->container['file_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'file_name', the character length must be smaller than or equal to 75.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cloud_url
     *
     * @return string|null
     */
    public function getCloudUrl()
    {
        return $this->container['cloud_url'];
    }

    /**
     * Sets cloud_url
     *
     * @param string|null $cloud_url URL where the image can be downloaded from the cloud
     *
     * @return self
     */
    public function setCloudUrl($cloud_url)
    {
        $this->container['cloud_url'] = $cloud_url;

        return $this;
    }

    /**
     * Gets cloud_url_expiration
     *
     * @return string|null
     */
    public function getCloudUrlExpiration()
    {
        return $this->container['cloud_url_expiration'];
    }

    /**
     * Sets cloud_url_expiration
     *
     * @param string|null $cloud_url_expiration Expiration date of the cloud URL
     *
     * @return self
     */
    public function setCloudUrlExpiration($cloud_url_expiration)
    {
        $this->container['cloud_url_expiration'] = $cloud_url_expiration;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Code assigned to the file
     *
     * @return self
     */
    public function setCode($code)
    {
        if (!is_null($code) && (mb_strlen($code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ItemContentMultimedia., must be smaller than or equal to 20.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 50000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ItemContentMultimedia., must be smaller than or equal to 50000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets exclude_from_gallery
     *
     * @return bool|null
     */
    public function getExcludeFromGallery()
    {
        return $this->container['exclude_from_gallery'];
    }

    /**
     * Sets exclude_from_gallery
     *
     * @param bool|null $exclude_from_gallery True to exclude from multimedia gallery
     *
     * @return self
     */
    public function setExcludeFromGallery($exclude_from_gallery)
    {
        $this->container['exclude_from_gallery'] = $exclude_from_gallery;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name File name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (!is_null($file_name) && (mb_strlen($file_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $file_name when calling ItemContentMultimedia., must be smaller than or equal to 75.');
        }

        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Height of the image
     *
     * @return self
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets merchant_item_multimedia_oid
     *
     * @return int|null
     */
    public function getMerchantItemMultimediaOid()
    {
        return $this->container['merchant_item_multimedia_oid'];
    }

    /**
     * Sets merchant_item_multimedia_oid
     *
     * @param int|null $merchant_item_multimedia_oid Item multimedia object identifier
     *
     * @return self
     */
    public function setMerchantItemMultimediaOid($merchant_item_multimedia_oid)
    {
        $this->container['merchant_item_multimedia_oid'] = $merchant_item_multimedia_oid;

        return $this;
    }

    /**
     * Gets orphan
     *
     * @return bool|null
     */
    public function getOrphan()
    {
        return $this->container['orphan'];
    }

    /**
     * Sets orphan
     *
     * @param bool|null $orphan True if the multimedia is an orphan of the active StoreFront themes
     *
     * @return self
     */
    public function setOrphan($orphan)
    {
        $this->container['orphan'] = $orphan;

        return $this;
    }

    /**
     * Gets placeholder
     *
     * @return bool|null
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     *
     * @param bool|null $placeholder True if the object is a place holder that can be populated
     *
     * @return self
     */
    public function setPlaceholder($placeholder)
    {
        $this->container['placeholder'] = $placeholder;

        return $this;
    }

    /**
     * Gets temp_multimedia_oid
     *
     * @return int|null
     */
    public function getTempMultimediaOid()
    {
        return $this->container['temp_multimedia_oid'];
    }

    /**
     * Sets temp_multimedia_oid
     *
     * @param int|null $temp_multimedia_oid Temporary multimedia object identifier assigned if uploading new multimedia
     *
     * @return self
     */
    public function setTempMultimediaOid($temp_multimedia_oid)
    {
        $this->container['temp_multimedia_oid'] = $temp_multimedia_oid;

        return $this;
    }

    /**
     * Gets thumbnails
     *
     * @return \ultracart\v2\models\ItemContentMultimediaThumbnail[]|null
     */
    public function getThumbnails()
    {
        return $this->container['thumbnails'];
    }

    /**
     * Sets thumbnails
     *
     * @param \ultracart\v2\models\ItemContentMultimediaThumbnail[]|null $thumbnails Thumbnails of this image
     *
     * @return self
     */
    public function setThumbnails($thumbnails)
    {
        $this->container['thumbnails'] = $thumbnails;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of file
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL to download file (on new multimedia record this can be a URL for UltraCart to fetch)
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Width of the image
     *
     * @return self
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


