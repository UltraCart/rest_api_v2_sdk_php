<?php
/**
 * OrderItemOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * OrderItemOption Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderItemOption implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderItemOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'additional_dimension_application' => 'string',
        'cost_change' => '\ultracart\v2\models\Currency',
        'file_attachment' => '\ultracart\v2\models\OrderItemOptionFileAttachment',
        'height' => '\ultracart\v2\models\Distance',
        'hidden' => 'bool',
        'label' => 'string',
        'length' => '\ultracart\v2\models\Distance',
        'one_time_fee' => 'bool',
        'value' => 'string',
        'weight_change' => '\ultracart\v2\models\Weight',
        'width' => '\ultracart\v2\models\Distance'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'additional_dimension_application' => 'additional_dimension_application',
        'cost_change' => 'cost_change',
        'file_attachment' => 'file_attachment',
        'height' => 'height',
        'hidden' => 'hidden',
        'label' => 'label',
        'length' => 'length',
        'one_time_fee' => 'one_time_fee',
        'value' => 'value',
        'weight_change' => 'weight_change',
        'width' => 'width'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'additional_dimension_application' => 'setAdditionalDimensionApplication',
        'cost_change' => 'setCostChange',
        'file_attachment' => 'setFileAttachment',
        'height' => 'setHeight',
        'hidden' => 'setHidden',
        'label' => 'setLabel',
        'length' => 'setLength',
        'one_time_fee' => 'setOneTimeFee',
        'value' => 'setValue',
        'weight_change' => 'setWeightChange',
        'width' => 'setWidth'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'additional_dimension_application' => 'getAdditionalDimensionApplication',
        'cost_change' => 'getCostChange',
        'file_attachment' => 'getFileAttachment',
        'height' => 'getHeight',
        'hidden' => 'getHidden',
        'label' => 'getLabel',
        'length' => 'getLength',
        'one_time_fee' => 'getOneTimeFee',
        'value' => 'getValue',
        'weight_change' => 'getWeightChange',
        'width' => 'getWidth'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const ADDITIONAL_DIMENSION_APPLICATION_NONE = 'none';
    const ADDITIONAL_DIMENSION_APPLICATION_SET_ITEM_TO = 'set item to';
    const ADDITIONAL_DIMENSION_APPLICATION_ADD_ITEM = 'add item';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAdditionalDimensionApplicationAllowableValues()
    {
        return [
            self::ADDITIONAL_DIMENSION_APPLICATION_NONE,
            self::ADDITIONAL_DIMENSION_APPLICATION_SET_ITEM_TO,
            self::ADDITIONAL_DIMENSION_APPLICATION_ADD_ITEM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_dimension_application'] = isset($data['additional_dimension_application']) ? $data['additional_dimension_application'] : null;
        $this->container['cost_change'] = isset($data['cost_change']) ? $data['cost_change'] : null;
        $this->container['file_attachment'] = isset($data['file_attachment']) ? $data['file_attachment'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['one_time_fee'] = isset($data['one_time_fee']) ? $data['one_time_fee'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['weight_change'] = isset($data['weight_change']) ? $data['weight_change'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("none", "set item to", "add item");
        if (!in_array($this->container['additional_dimension_application'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'additional_dimension_application', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['label']) && (strlen($this->container['label']) > 50)) {
            $invalid_properties[] = "invalid value for 'label', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['value']) && (strlen($this->container['value']) > 1024)) {
            $invalid_properties[] = "invalid value for 'value', the character length must be smaller than or equal to 1024.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("none", "set item to", "add item");
        if (!in_array($this->container['additional_dimension_application'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['label']) > 50) {
            return false;
        }
        if (strlen($this->container['value']) > 1024) {
            return false;
        }
        return true;
    }


    /**
     * Gets additional_dimension_application
     * @return string
     */
    public function getAdditionalDimensionApplication()
    {
        return $this->container['additional_dimension_application'];
    }

    /**
     * Sets additional_dimension_application
     * @param string $additional_dimension_application How the additional dimensions are applied to the item.
     * @return $this
     */
    public function setAdditionalDimensionApplication($additional_dimension_application)
    {
        $allowed_values = array('none', 'set item to', 'add item');
        if (!in_array($additional_dimension_application, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'additional_dimension_application', must be one of 'none', 'set item to', 'add item'");
        }
        $this->container['additional_dimension_application'] = $additional_dimension_application;

        return $this;
    }

    /**
     * Gets cost_change
     * @return \ultracart\v2\models\Currency
     */
    public function getCostChange()
    {
        return $this->container['cost_change'];
    }

    /**
     * Sets cost_change
     * @param \ultracart\v2\models\Currency $cost_change
     * @return $this
     */
    public function setCostChange($cost_change)
    {
        $this->container['cost_change'] = $cost_change;

        return $this;
    }

    /**
     * Gets file_attachment
     * @return \ultracart\v2\models\OrderItemOptionFileAttachment
     */
    public function getFileAttachment()
    {
        return $this->container['file_attachment'];
    }

    /**
     * Sets file_attachment
     * @param \ultracart\v2\models\OrderItemOptionFileAttachment $file_attachment
     * @return $this
     */
    public function setFileAttachment($file_attachment)
    {
        $this->container['file_attachment'] = $file_attachment;

        return $this;
    }

    /**
     * Gets height
     * @return \ultracart\v2\models\Distance
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param \ultracart\v2\models\Distance $height
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets hidden
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     * @param bool $hidden True if this option is hidden from display on the order
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label Label
     * @return $this
     */
    public function setLabel($label)
    {
        if (strlen($label) > 50) {
            throw new \InvalidArgumentException('invalid length for $label when calling OrderItemOption., must be smaller than or equal to 50.');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets length
     * @return \ultracart\v2\models\Distance
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     * @param \ultracart\v2\models\Distance $length
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets one_time_fee
     * @return bool
     */
    public function getOneTimeFee()
    {
        return $this->container['one_time_fee'];
    }

    /**
     * Sets one_time_fee
     * @param bool $one_time_fee True if the cost associated with this option is a one time fee or multiplied by the quantity of the item
     * @return $this
     */
    public function setOneTimeFee($one_time_fee)
    {
        $this->container['one_time_fee'] = $one_time_fee;

        return $this;
    }

    /**
     * Gets value
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param string $value Value
     * @return $this
     */
    public function setValue($value)
    {
        if (strlen($value) > 1024) {
            throw new \InvalidArgumentException('invalid length for $value when calling OrderItemOption., must be smaller than or equal to 1024.');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets weight_change
     * @return \ultracart\v2\models\Weight
     */
    public function getWeightChange()
    {
        return $this->container['weight_change'];
    }

    /**
     * Sets weight_change
     * @param \ultracart\v2\models\Weight $weight_change
     * @return $this
     */
    public function setWeightChange($weight_change)
    {
        $this->container['weight_change'] = $weight_change;

        return $this;
    }

    /**
     * Gets width
     * @return \ultracart\v2\models\Distance
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param \ultracart\v2\models\Distance $width
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


