<?php
/**
 * OrderCurrentStageHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderCurrentStageHistory Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderCurrentStageHistory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderCurrentStageHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'after_stage' => 'string',
        'before_stage' => 'string',
        'transition_dts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'after_stage' => null,
        'before_stage' => null,
        'transition_dts' => 'dateTime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'after_stage' => 'after_stage',
        'before_stage' => 'before_stage',
        'transition_dts' => 'transition_dts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'after_stage' => 'setAfterStage',
        'before_stage' => 'setBeforeStage',
        'transition_dts' => 'setTransitionDts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'after_stage' => 'getAfterStage',
        'before_stage' => 'getBeforeStage',
        'transition_dts' => 'getTransitionDts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AFTER_STAGE_ACCOUNTS_RECEIVABLE = 'Accounts Receivable';
    const AFTER_STAGE_PENDING_CLEARANCE = 'Pending Clearance';
    const AFTER_STAGE_FRAUD_REVIEW = 'Fraud Review';
    const AFTER_STAGE_REJECTED = 'Rejected';
    const AFTER_STAGE_SHIPPING_DEPARTMENT = 'Shipping Department';
    const AFTER_STAGE_COMPLETED_ORDER = 'Completed Order';
    const AFTER_STAGE_QUOTE_REQUEST = 'Quote Request';
    const AFTER_STAGE_QUOTE_SENT = 'Quote Sent';
    const AFTER_STAGE_LEAST_COST_ROUTING = 'Least Cost Routing';
    const AFTER_STAGE_UNKNOWN = 'Unknown';
    const AFTER_STAGE_PRE_ORDERED = 'Pre-ordered';
    const AFTER_STAGE_ADVANCED_ORDER_ROUTING = 'Advanced Order Routing';
    const AFTER_STAGE_HOLD = 'Hold';
    const BEFORE_STAGE_ACCOUNTS_RECEIVABLE = 'Accounts Receivable';
    const BEFORE_STAGE_PENDING_CLEARANCE = 'Pending Clearance';
    const BEFORE_STAGE_FRAUD_REVIEW = 'Fraud Review';
    const BEFORE_STAGE_REJECTED = 'Rejected';
    const BEFORE_STAGE_SHIPPING_DEPARTMENT = 'Shipping Department';
    const BEFORE_STAGE_COMPLETED_ORDER = 'Completed Order';
    const BEFORE_STAGE_QUOTE_REQUEST = 'Quote Request';
    const BEFORE_STAGE_QUOTE_SENT = 'Quote Sent';
    const BEFORE_STAGE_LEAST_COST_ROUTING = 'Least Cost Routing';
    const BEFORE_STAGE_UNKNOWN = 'Unknown';
    const BEFORE_STAGE_PRE_ORDERED = 'Pre-ordered';
    const BEFORE_STAGE_ADVANCED_ORDER_ROUTING = 'Advanced Order Routing';
    const BEFORE_STAGE_HOLD = 'Hold';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAfterStageAllowableValues()
    {
        return [
            self::AFTER_STAGE_ACCOUNTS_RECEIVABLE,
            self::AFTER_STAGE_PENDING_CLEARANCE,
            self::AFTER_STAGE_FRAUD_REVIEW,
            self::AFTER_STAGE_REJECTED,
            self::AFTER_STAGE_SHIPPING_DEPARTMENT,
            self::AFTER_STAGE_COMPLETED_ORDER,
            self::AFTER_STAGE_QUOTE_REQUEST,
            self::AFTER_STAGE_QUOTE_SENT,
            self::AFTER_STAGE_LEAST_COST_ROUTING,
            self::AFTER_STAGE_UNKNOWN,
            self::AFTER_STAGE_PRE_ORDERED,
            self::AFTER_STAGE_ADVANCED_ORDER_ROUTING,
            self::AFTER_STAGE_HOLD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBeforeStageAllowableValues()
    {
        return [
            self::BEFORE_STAGE_ACCOUNTS_RECEIVABLE,
            self::BEFORE_STAGE_PENDING_CLEARANCE,
            self::BEFORE_STAGE_FRAUD_REVIEW,
            self::BEFORE_STAGE_REJECTED,
            self::BEFORE_STAGE_SHIPPING_DEPARTMENT,
            self::BEFORE_STAGE_COMPLETED_ORDER,
            self::BEFORE_STAGE_QUOTE_REQUEST,
            self::BEFORE_STAGE_QUOTE_SENT,
            self::BEFORE_STAGE_LEAST_COST_ROUTING,
            self::BEFORE_STAGE_UNKNOWN,
            self::BEFORE_STAGE_PRE_ORDERED,
            self::BEFORE_STAGE_ADVANCED_ORDER_ROUTING,
            self::BEFORE_STAGE_HOLD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['after_stage'] = isset($data['after_stage']) ? $data['after_stage'] : null;
        $this->container['before_stage'] = isset($data['before_stage']) ? $data['before_stage'] : null;
        $this->container['transition_dts'] = isset($data['transition_dts']) ? $data['transition_dts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAfterStageAllowableValues();
        if (!is_null($this->container['after_stage']) && !in_array($this->container['after_stage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'after_stage', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBeforeStageAllowableValues();
        if (!is_null($this->container['before_stage']) && !in_array($this->container['before_stage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'before_stage', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets after_stage
     *
     * @return string
     */
    public function getAfterStage()
    {
        return $this->container['after_stage'];
    }

    /**
     * Sets after_stage
     *
     * @param string $after_stage New stage that the order is in.
     *
     * @return $this
     */
    public function setAfterStage($after_stage)
    {
        $allowedValues = $this->getAfterStageAllowableValues();
        if (!is_null($after_stage) && !in_array($after_stage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'after_stage', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['after_stage'] = $after_stage;

        return $this;
    }

    /**
     * Gets before_stage
     *
     * @return string
     */
    public function getBeforeStage()
    {
        return $this->container['before_stage'];
    }

    /**
     * Sets before_stage
     *
     * @param string $before_stage Previous stage that the order was in.
     *
     * @return $this
     */
    public function setBeforeStage($before_stage)
    {
        $allowedValues = $this->getBeforeStageAllowableValues();
        if (!is_null($before_stage) && !in_array($before_stage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'before_stage', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['before_stage'] = $before_stage;

        return $this;
    }

    /**
     * Gets transition_dts
     *
     * @return string
     */
    public function getTransitionDts()
    {
        return $this->container['transition_dts'];
    }

    /**
     * Sets transition_dts
     *
     * @param string $transition_dts Date/time that the stage transitioned
     *
     * @return $this
     */
    public function setTransitionDts($transition_dts)
    {
        $this->container['transition_dts'] = $transition_dts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


