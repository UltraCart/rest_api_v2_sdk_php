<?php
/**
 * CheckoutHandoffRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * CheckoutHandoffRequest Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CheckoutHandoffRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutHandoffRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'cart' => '\ultracart\v2\models\Cart',
        'error_parameter_name' => 'string',
        'error_return_url' => 'string',
        'operation' => 'string',
        'paypal_maximum_upsell_revenue' => 'float',
        'paypal_return_url' => 'string',
        'secure_host_name' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'cart' => 'cart',
        'error_parameter_name' => 'error_parameter_name',
        'error_return_url' => 'error_return_url',
        'operation' => 'operation',
        'paypal_maximum_upsell_revenue' => 'paypal_maximum_upsell_revenue',
        'paypal_return_url' => 'paypal_return_url',
        'secure_host_name' => 'secure_host_name'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'cart' => 'setCart',
        'error_parameter_name' => 'setErrorParameterName',
        'error_return_url' => 'setErrorReturnUrl',
        'operation' => 'setOperation',
        'paypal_maximum_upsell_revenue' => 'setPaypalMaximumUpsellRevenue',
        'paypal_return_url' => 'setPaypalReturnUrl',
        'secure_host_name' => 'setSecureHostName'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'cart' => 'getCart',
        'error_parameter_name' => 'getErrorParameterName',
        'error_return_url' => 'getErrorReturnUrl',
        'operation' => 'getOperation',
        'paypal_maximum_upsell_revenue' => 'getPaypalMaximumUpsellRevenue',
        'paypal_return_url' => 'getPaypalReturnUrl',
        'secure_host_name' => 'getSecureHostName'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const OPERATION_CHECKOUT = 'checkout';
    const OPERATION_PAY_PAL = 'payPal';
    const OPERATION_PAY_PAL_CREDIT = 'payPalCredit';
    const OPERATION_VIEW = 'view';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_CHECKOUT,
            self::OPERATION_PAY_PAL,
            self::OPERATION_PAY_PAL_CREDIT,
            self::OPERATION_VIEW,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cart'] = isset($data['cart']) ? $data['cart'] : null;
        $this->container['error_parameter_name'] = isset($data['error_parameter_name']) ? $data['error_parameter_name'] : null;
        $this->container['error_return_url'] = isset($data['error_return_url']) ? $data['error_return_url'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['paypal_maximum_upsell_revenue'] = isset($data['paypal_maximum_upsell_revenue']) ? $data['paypal_maximum_upsell_revenue'] : null;
        $this->container['paypal_return_url'] = isset($data['paypal_return_url']) ? $data['paypal_return_url'] : null;
        $this->container['secure_host_name'] = isset($data['secure_host_name']) ? $data['secure_host_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("checkout", "payPal", "payPalCredit", "view");
        if (!in_array($this->container['operation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'operation', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("checkout", "payPal", "payPalCredit", "view");
        if (!in_array($this->container['operation'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets cart
     * @return \ultracart\v2\models\Cart
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     * @param \ultracart\v2\models\Cart $cart
     * @return $this
     */
    public function setCart($cart)
    {
        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets error_parameter_name
     * @return string
     */
    public function getErrorParameterName()
    {
        return $this->container['error_parameter_name'];
    }

    /**
     * Sets error_parameter_name
     * @param string $error_parameter_name If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.
     * @return $this
     */
    public function setErrorParameterName($error_parameter_name)
    {
        $this->container['error_parameter_name'] = $error_parameter_name;

        return $this;
    }

    /**
     * Gets error_return_url
     * @return string
     */
    public function getErrorReturnUrl()
    {
        return $this->container['error_return_url'];
    }

    /**
     * Sets error_return_url
     * @param string $error_return_url The URL to return the browser to if there are processing errors on the UltraCart side.
     * @return $this
     */
    public function setErrorReturnUrl($error_return_url)
    {
        $this->container['error_return_url'] = $error_return_url;

        return $this;
    }

    /**
     * Gets operation
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     * @param string $operation The type of handoff operation to perform
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowed_values = array('checkout', 'payPal', 'payPalCredit', 'view');
        if (!in_array($operation, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'operation', must be one of 'checkout', 'payPal', 'payPalCredit', 'view'");
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets paypal_maximum_upsell_revenue
     * @return float
     */
    public function getPaypalMaximumUpsellRevenue()
    {
        return $this->container['paypal_maximum_upsell_revenue'];
    }

    /**
     * Sets paypal_maximum_upsell_revenue
     * @param float $paypal_maximum_upsell_revenue The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.
     * @return $this
     */
    public function setPaypalMaximumUpsellRevenue($paypal_maximum_upsell_revenue)
    {
        $this->container['paypal_maximum_upsell_revenue'] = $paypal_maximum_upsell_revenue;

        return $this;
    }

    /**
     * Gets paypal_return_url
     * @return string
     */
    public function getPaypalReturnUrl()
    {
        return $this->container['paypal_return_url'];
    }

    /**
     * Sets paypal_return_url
     * @param string $paypal_return_url The URl to return the customers browser to after they have completed the PayPal process.
     * @return $this
     */
    public function setPaypalReturnUrl($paypal_return_url)
    {
        $this->container['paypal_return_url'] = $paypal_return_url;

        return $this;
    }

    /**
     * Gets secure_host_name
     * @return string
     */
    public function getSecureHostName()
    {
        return $this->container['secure_host_name'];
    }

    /**
     * Sets secure_host_name
     * @param string $secure_host_name The desired secure host name to perform the handoff on.  This should match the desired StoreFront.
     * @return $this
     */
    public function setSecureHostName($secure_host_name)
    {
        $this->container['secure_host_name'] = $secure_host_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


