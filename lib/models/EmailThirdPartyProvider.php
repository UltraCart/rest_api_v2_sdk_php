<?php
/**
 * EmailThirdPartyProvider
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * EmailThirdPartyProvider Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailThirdPartyProvider implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailThirdPartyProvider';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'connect_url' => 'string',
        'list_count' => 'int',
        'lists' => '\ultracart\v2\models\EmailThirdPartyList[]',
        'logo_url' => 'string',
        'name' => 'string',
        'supports_add_tags' => 'bool',
        'supports_list_subscribe' => 'bool',
        'supports_list_unsubscribe' => 'bool',
        'supports_remove_tags' => 'bool',
        'tag_count' => 'int',
        'tags' => '\ultracart\v2\models\EmailThirdPartyTag[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'connect_url' => null,
        'list_count' => 'int32',
        'lists' => null,
        'logo_url' => null,
        'name' => null,
        'supports_add_tags' => null,
        'supports_list_subscribe' => null,
        'supports_list_unsubscribe' => null,
        'supports_remove_tags' => null,
        'tag_count' => 'int32',
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connect_url' => 'connect_url',
        'list_count' => 'list_count',
        'lists' => 'lists',
        'logo_url' => 'logo_url',
        'name' => 'name',
        'supports_add_tags' => 'supports_add_tags',
        'supports_list_subscribe' => 'supports_list_subscribe',
        'supports_list_unsubscribe' => 'supports_list_unsubscribe',
        'supports_remove_tags' => 'supports_remove_tags',
        'tag_count' => 'tag_count',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connect_url' => 'setConnectUrl',
        'list_count' => 'setListCount',
        'lists' => 'setLists',
        'logo_url' => 'setLogoUrl',
        'name' => 'setName',
        'supports_add_tags' => 'setSupportsAddTags',
        'supports_list_subscribe' => 'setSupportsListSubscribe',
        'supports_list_unsubscribe' => 'setSupportsListUnsubscribe',
        'supports_remove_tags' => 'setSupportsRemoveTags',
        'tag_count' => 'setTagCount',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connect_url' => 'getConnectUrl',
        'list_count' => 'getListCount',
        'lists' => 'getLists',
        'logo_url' => 'getLogoUrl',
        'name' => 'getName',
        'supports_add_tags' => 'getSupportsAddTags',
        'supports_list_subscribe' => 'getSupportsListSubscribe',
        'supports_list_unsubscribe' => 'getSupportsListUnsubscribe',
        'supports_remove_tags' => 'getSupportsRemoveTags',
        'tag_count' => 'getTagCount',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connect_url'] = isset($data['connect_url']) ? $data['connect_url'] : null;
        $this->container['list_count'] = isset($data['list_count']) ? $data['list_count'] : null;
        $this->container['lists'] = isset($data['lists']) ? $data['lists'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['supports_add_tags'] = isset($data['supports_add_tags']) ? $data['supports_add_tags'] : null;
        $this->container['supports_list_subscribe'] = isset($data['supports_list_subscribe']) ? $data['supports_list_subscribe'] : null;
        $this->container['supports_list_unsubscribe'] = isset($data['supports_list_unsubscribe']) ? $data['supports_list_unsubscribe'] : null;
        $this->container['supports_remove_tags'] = isset($data['supports_remove_tags']) ? $data['supports_remove_tags'] : null;
        $this->container['tag_count'] = isset($data['tag_count']) ? $data['tag_count'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connect_url
     *
     * @return string
     */
    public function getConnectUrl()
    {
        return $this->container['connect_url'];
    }

    /**
     * Sets connect_url
     *
     * @param string $connect_url URL to the settings screen to connect.  Null if the provider is already connected.
     *
     * @return $this
     */
    public function setConnectUrl($connect_url)
    {
        $this->container['connect_url'] = $connect_url;

        return $this;
    }

    /**
     * Gets list_count
     *
     * @return int
     */
    public function getListCount()
    {
        return $this->container['list_count'];
    }

    /**
     * Sets list_count
     *
     * @param int $list_count list_count
     *
     * @return $this
     */
    public function setListCount($list_count)
    {
        $this->container['list_count'] = $list_count;

        return $this;
    }

    /**
     * Gets lists
     *
     * @return \ultracart\v2\models\EmailThirdPartyList[]
     */
    public function getLists()
    {
        return $this->container['lists'];
    }

    /**
     * Sets lists
     *
     * @param \ultracart\v2\models\EmailThirdPartyList[] $lists lists
     *
     * @return $this
     */
    public function setLists($lists)
    {
        $this->container['lists'] = $lists;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url logo_url
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets supports_add_tags
     *
     * @return bool
     */
    public function getSupportsAddTags()
    {
        return $this->container['supports_add_tags'];
    }

    /**
     * Sets supports_add_tags
     *
     * @param bool $supports_add_tags True if this provider can support adding tags
     *
     * @return $this
     */
    public function setSupportsAddTags($supports_add_tags)
    {
        $this->container['supports_add_tags'] = $supports_add_tags;

        return $this;
    }

    /**
     * Gets supports_list_subscribe
     *
     * @return bool
     */
    public function getSupportsListSubscribe()
    {
        return $this->container['supports_list_subscribe'];
    }

    /**
     * Sets supports_list_subscribe
     *
     * @param bool $supports_list_subscribe True if this provider can support list subscribe
     *
     * @return $this
     */
    public function setSupportsListSubscribe($supports_list_subscribe)
    {
        $this->container['supports_list_subscribe'] = $supports_list_subscribe;

        return $this;
    }

    /**
     * Gets supports_list_unsubscribe
     *
     * @return bool
     */
    public function getSupportsListUnsubscribe()
    {
        return $this->container['supports_list_unsubscribe'];
    }

    /**
     * Sets supports_list_unsubscribe
     *
     * @param bool $supports_list_unsubscribe True if this provider can support list unsubscribe
     *
     * @return $this
     */
    public function setSupportsListUnsubscribe($supports_list_unsubscribe)
    {
        $this->container['supports_list_unsubscribe'] = $supports_list_unsubscribe;

        return $this;
    }

    /**
     * Gets supports_remove_tags
     *
     * @return bool
     */
    public function getSupportsRemoveTags()
    {
        return $this->container['supports_remove_tags'];
    }

    /**
     * Sets supports_remove_tags
     *
     * @param bool $supports_remove_tags True if this provider can support remove tags
     *
     * @return $this
     */
    public function setSupportsRemoveTags($supports_remove_tags)
    {
        $this->container['supports_remove_tags'] = $supports_remove_tags;

        return $this;
    }

    /**
     * Gets tag_count
     *
     * @return int
     */
    public function getTagCount()
    {
        return $this->container['tag_count'];
    }

    /**
     * Sets tag_count
     *
     * @param int $tag_count tag_count
     *
     * @return $this
     */
    public function setTagCount($tag_count)
    {
        $this->container['tag_count'] = $tag_count;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \ultracart\v2\models\EmailThirdPartyTag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \ultracart\v2\models\EmailThirdPartyTag[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


