<?php
/**
 * EmailThirdPartyProvider
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * EmailThirdPartyProvider Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailThirdPartyProvider implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailThirdPartyProvider';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connect_url' => 'string',
        'list_count' => 'int',
        'lists' => '\ultracart\v2\models\EmailThirdPartyList[]',
        'logo_url' => 'string',
        'name' => 'string',
        'supports_add_tags' => 'bool',
        'supports_list_subscribe' => 'bool',
        'supports_list_unsubscribe' => 'bool',
        'supports_remove_tags' => 'bool',
        'tag_count' => 'int',
        'tags' => '\ultracart\v2\models\EmailThirdPartyTag[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'connect_url' => null,
        'list_count' => 'int32',
        'lists' => null,
        'logo_url' => null,
        'name' => null,
        'supports_add_tags' => null,
        'supports_list_subscribe' => null,
        'supports_list_unsubscribe' => null,
        'supports_remove_tags' => null,
        'tag_count' => 'int32',
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connect_url' => 'connect_url',
        'list_count' => 'list_count',
        'lists' => 'lists',
        'logo_url' => 'logo_url',
        'name' => 'name',
        'supports_add_tags' => 'supports_add_tags',
        'supports_list_subscribe' => 'supports_list_subscribe',
        'supports_list_unsubscribe' => 'supports_list_unsubscribe',
        'supports_remove_tags' => 'supports_remove_tags',
        'tag_count' => 'tag_count',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connect_url' => 'setConnectUrl',
        'list_count' => 'setListCount',
        'lists' => 'setLists',
        'logo_url' => 'setLogoUrl',
        'name' => 'setName',
        'supports_add_tags' => 'setSupportsAddTags',
        'supports_list_subscribe' => 'setSupportsListSubscribe',
        'supports_list_unsubscribe' => 'setSupportsListUnsubscribe',
        'supports_remove_tags' => 'setSupportsRemoveTags',
        'tag_count' => 'setTagCount',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connect_url' => 'getConnectUrl',
        'list_count' => 'getListCount',
        'lists' => 'getLists',
        'logo_url' => 'getLogoUrl',
        'name' => 'getName',
        'supports_add_tags' => 'getSupportsAddTags',
        'supports_list_subscribe' => 'getSupportsListSubscribe',
        'supports_list_unsubscribe' => 'getSupportsListUnsubscribe',
        'supports_remove_tags' => 'getSupportsRemoveTags',
        'tag_count' => 'getTagCount',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connect_url'] = $data['connect_url'] ?? null;
        $this->container['list_count'] = $data['list_count'] ?? null;
        $this->container['lists'] = $data['lists'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['supports_add_tags'] = $data['supports_add_tags'] ?? null;
        $this->container['supports_list_subscribe'] = $data['supports_list_subscribe'] ?? null;
        $this->container['supports_list_unsubscribe'] = $data['supports_list_unsubscribe'] ?? null;
        $this->container['supports_remove_tags'] = $data['supports_remove_tags'] ?? null;
        $this->container['tag_count'] = $data['tag_count'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connect_url
     *
     * @return string|null
     */
    public function getConnectUrl()
    {
        return $this->container['connect_url'];
    }

    /**
     * Sets connect_url
     *
     * @param string|null $connect_url URL to the settings screen to connect.  Null if the provider is already connected.
     *
     * @return self
     */
    public function setConnectUrl($connect_url)
    {
        $this->container['connect_url'] = $connect_url;

        return $this;
    }

    /**
     * Gets list_count
     *
     * @return int|null
     */
    public function getListCount()
    {
        return $this->container['list_count'];
    }

    /**
     * Sets list_count
     *
     * @param int|null $list_count list_count
     *
     * @return self
     */
    public function setListCount($list_count)
    {
        $this->container['list_count'] = $list_count;

        return $this;
    }

    /**
     * Gets lists
     *
     * @return \ultracart\v2\models\EmailThirdPartyList[]|null
     */
    public function getLists()
    {
        return $this->container['lists'];
    }

    /**
     * Sets lists
     *
     * @param \ultracart\v2\models\EmailThirdPartyList[]|null $lists lists
     *
     * @return self
     */
    public function setLists($lists)
    {
        $this->container['lists'] = $lists;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets supports_add_tags
     *
     * @return bool|null
     */
    public function getSupportsAddTags()
    {
        return $this->container['supports_add_tags'];
    }

    /**
     * Sets supports_add_tags
     *
     * @param bool|null $supports_add_tags True if this provider can support adding tags
     *
     * @return self
     */
    public function setSupportsAddTags($supports_add_tags)
    {
        $this->container['supports_add_tags'] = $supports_add_tags;

        return $this;
    }

    /**
     * Gets supports_list_subscribe
     *
     * @return bool|null
     */
    public function getSupportsListSubscribe()
    {
        return $this->container['supports_list_subscribe'];
    }

    /**
     * Sets supports_list_subscribe
     *
     * @param bool|null $supports_list_subscribe True if this provider can support list subscribe
     *
     * @return self
     */
    public function setSupportsListSubscribe($supports_list_subscribe)
    {
        $this->container['supports_list_subscribe'] = $supports_list_subscribe;

        return $this;
    }

    /**
     * Gets supports_list_unsubscribe
     *
     * @return bool|null
     */
    public function getSupportsListUnsubscribe()
    {
        return $this->container['supports_list_unsubscribe'];
    }

    /**
     * Sets supports_list_unsubscribe
     *
     * @param bool|null $supports_list_unsubscribe True if this provider can support list unsubscribe
     *
     * @return self
     */
    public function setSupportsListUnsubscribe($supports_list_unsubscribe)
    {
        $this->container['supports_list_unsubscribe'] = $supports_list_unsubscribe;

        return $this;
    }

    /**
     * Gets supports_remove_tags
     *
     * @return bool|null
     */
    public function getSupportsRemoveTags()
    {
        return $this->container['supports_remove_tags'];
    }

    /**
     * Sets supports_remove_tags
     *
     * @param bool|null $supports_remove_tags True if this provider can support remove tags
     *
     * @return self
     */
    public function setSupportsRemoveTags($supports_remove_tags)
    {
        $this->container['supports_remove_tags'] = $supports_remove_tags;

        return $this;
    }

    /**
     * Gets tag_count
     *
     * @return int|null
     */
    public function getTagCount()
    {
        return $this->container['tag_count'];
    }

    /**
     * Sets tag_count
     *
     * @param int|null $tag_count tag_count
     *
     * @return self
     */
    public function setTagCount($tag_count)
    {
        $this->container['tag_count'] = $tag_count;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \ultracart\v2\models\EmailThirdPartyTag[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \ultracart\v2\models\EmailThirdPartyTag[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


