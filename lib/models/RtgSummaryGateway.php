<?php
/**
 * RtgSummaryGateway
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * RtgSummaryGateway Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RtgSummaryGateway implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RtgSummaryGateway';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cascade_code' => 'string',
        'code' => 'string',
        'delay_auto_orders' => 'string',
        'name' => 'string',
        'reserve_percentage' => 'float',
        'reserves_released_through' => 'string',
        'rotating_transaction_gateway_oid' => 'int',
        'show_ultracart_payments_verification' => 'bool',
        'show_ultracart_payments_verified' => 'bool',
        'status' => 'string',
        'supports_auth' => 'string',
        'supports_refund' => 'string',
        'third_party' => 'string',
        'traffic_percentage' => 'float',
        'warning' => 'string',
        'wepay_account_update_uri' => 'string',
        'wepay_console_hostname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cascade_code' => null,
        'code' => null,
        'delay_auto_orders' => null,
        'name' => null,
        'reserve_percentage' => null,
        'reserves_released_through' => 'dateTime',
        'rotating_transaction_gateway_oid' => 'int32',
        'show_ultracart_payments_verification' => null,
        'show_ultracart_payments_verified' => null,
        'status' => null,
        'supports_auth' => null,
        'supports_refund' => null,
        'third_party' => null,
        'traffic_percentage' => null,
        'warning' => null,
        'wepay_account_update_uri' => null,
        'wepay_console_hostname' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cascade_code' => 'cascade_code',
        'code' => 'code',
        'delay_auto_orders' => 'delay_auto_orders',
        'name' => 'name',
        'reserve_percentage' => 'reserve_percentage',
        'reserves_released_through' => 'reserves_released_through',
        'rotating_transaction_gateway_oid' => 'rotating_transaction_gateway_oid',
        'show_ultracart_payments_verification' => 'show_ultracart_payments_verification',
        'show_ultracart_payments_verified' => 'show_ultracart_payments_verified',
        'status' => 'status',
        'supports_auth' => 'supports_auth',
        'supports_refund' => 'supports_refund',
        'third_party' => 'third_party',
        'traffic_percentage' => 'traffic_percentage',
        'warning' => 'warning',
        'wepay_account_update_uri' => 'wepay_account_update_uri',
        'wepay_console_hostname' => 'wepay_console_hostname'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cascade_code' => 'setCascadeCode',
        'code' => 'setCode',
        'delay_auto_orders' => 'setDelayAutoOrders',
        'name' => 'setName',
        'reserve_percentage' => 'setReservePercentage',
        'reserves_released_through' => 'setReservesReleasedThrough',
        'rotating_transaction_gateway_oid' => 'setRotatingTransactionGatewayOid',
        'show_ultracart_payments_verification' => 'setShowUltracartPaymentsVerification',
        'show_ultracart_payments_verified' => 'setShowUltracartPaymentsVerified',
        'status' => 'setStatus',
        'supports_auth' => 'setSupportsAuth',
        'supports_refund' => 'setSupportsRefund',
        'third_party' => 'setThirdParty',
        'traffic_percentage' => 'setTrafficPercentage',
        'warning' => 'setWarning',
        'wepay_account_update_uri' => 'setWepayAccountUpdateUri',
        'wepay_console_hostname' => 'setWepayConsoleHostname'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cascade_code' => 'getCascadeCode',
        'code' => 'getCode',
        'delay_auto_orders' => 'getDelayAutoOrders',
        'name' => 'getName',
        'reserve_percentage' => 'getReservePercentage',
        'reserves_released_through' => 'getReservesReleasedThrough',
        'rotating_transaction_gateway_oid' => 'getRotatingTransactionGatewayOid',
        'show_ultracart_payments_verification' => 'getShowUltracartPaymentsVerification',
        'show_ultracart_payments_verified' => 'getShowUltracartPaymentsVerified',
        'status' => 'getStatus',
        'supports_auth' => 'getSupportsAuth',
        'supports_refund' => 'getSupportsRefund',
        'third_party' => 'getThirdParty',
        'traffic_percentage' => 'getTrafficPercentage',
        'warning' => 'getWarning',
        'wepay_account_update_uri' => 'getWepayAccountUpdateUri',
        'wepay_console_hostname' => 'getWepayConsoleHostname'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cascade_code'] = isset($data['cascade_code']) ? $data['cascade_code'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['delay_auto_orders'] = isset($data['delay_auto_orders']) ? $data['delay_auto_orders'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['reserve_percentage'] = isset($data['reserve_percentage']) ? $data['reserve_percentage'] : null;
        $this->container['reserves_released_through'] = isset($data['reserves_released_through']) ? $data['reserves_released_through'] : null;
        $this->container['rotating_transaction_gateway_oid'] = isset($data['rotating_transaction_gateway_oid']) ? $data['rotating_transaction_gateway_oid'] : null;
        $this->container['show_ultracart_payments_verification'] = isset($data['show_ultracart_payments_verification']) ? $data['show_ultracart_payments_verification'] : null;
        $this->container['show_ultracart_payments_verified'] = isset($data['show_ultracart_payments_verified']) ? $data['show_ultracart_payments_verified'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['supports_auth'] = isset($data['supports_auth']) ? $data['supports_auth'] : null;
        $this->container['supports_refund'] = isset($data['supports_refund']) ? $data['supports_refund'] : null;
        $this->container['third_party'] = isset($data['third_party']) ? $data['third_party'] : null;
        $this->container['traffic_percentage'] = isset($data['traffic_percentage']) ? $data['traffic_percentage'] : null;
        $this->container['warning'] = isset($data['warning']) ? $data['warning'] : null;
        $this->container['wepay_account_update_uri'] = isset($data['wepay_account_update_uri']) ? $data['wepay_account_update_uri'] : null;
        $this->container['wepay_console_hostname'] = isset($data['wepay_console_hostname']) ? $data['wepay_console_hostname'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cascade_code
     *
     * @return string
     */
    public function getCascadeCode()
    {
        return $this->container['cascade_code'];
    }

    /**
     * Sets cascade_code
     *
     * @param string $cascade_code cascade_code
     *
     * @return $this
     */
    public function setCascadeCode($cascade_code)
    {
        $this->container['cascade_code'] = $cascade_code;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets delay_auto_orders
     *
     * @return string
     */
    public function getDelayAutoOrders()
    {
        return $this->container['delay_auto_orders'];
    }

    /**
     * Sets delay_auto_orders
     *
     * @param string $delay_auto_orders delay_auto_orders
     *
     * @return $this
     */
    public function setDelayAutoOrders($delay_auto_orders)
    {
        $this->container['delay_auto_orders'] = $delay_auto_orders;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reserve_percentage
     *
     * @return float
     */
    public function getReservePercentage()
    {
        return $this->container['reserve_percentage'];
    }

    /**
     * Sets reserve_percentage
     *
     * @param float $reserve_percentage reserve_percentage
     *
     * @return $this
     */
    public function setReservePercentage($reserve_percentage)
    {
        $this->container['reserve_percentage'] = $reserve_percentage;

        return $this;
    }

    /**
     * Gets reserves_released_through
     *
     * @return string
     */
    public function getReservesReleasedThrough()
    {
        return $this->container['reserves_released_through'];
    }

    /**
     * Sets reserves_released_through
     *
     * @param string $reserves_released_through An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.
     *
     * @return $this
     */
    public function setReservesReleasedThrough($reserves_released_through)
    {
        $this->container['reserves_released_through'] = $reserves_released_through;

        return $this;
    }

    /**
     * Gets rotating_transaction_gateway_oid
     *
     * @return int
     */
    public function getRotatingTransactionGatewayOid()
    {
        return $this->container['rotating_transaction_gateway_oid'];
    }

    /**
     * Sets rotating_transaction_gateway_oid
     *
     * @param int $rotating_transaction_gateway_oid rotating_transaction_gateway_oid
     *
     * @return $this
     */
    public function setRotatingTransactionGatewayOid($rotating_transaction_gateway_oid)
    {
        $this->container['rotating_transaction_gateway_oid'] = $rotating_transaction_gateway_oid;

        return $this;
    }

    /**
     * Gets show_ultracart_payments_verification
     *
     * @return bool
     */
    public function getShowUltracartPaymentsVerification()
    {
        return $this->container['show_ultracart_payments_verification'];
    }

    /**
     * Sets show_ultracart_payments_verification
     *
     * @param bool $show_ultracart_payments_verification show_ultracart_payments_verification
     *
     * @return $this
     */
    public function setShowUltracartPaymentsVerification($show_ultracart_payments_verification)
    {
        $this->container['show_ultracart_payments_verification'] = $show_ultracart_payments_verification;

        return $this;
    }

    /**
     * Gets show_ultracart_payments_verified
     *
     * @return bool
     */
    public function getShowUltracartPaymentsVerified()
    {
        return $this->container['show_ultracart_payments_verified'];
    }

    /**
     * Sets show_ultracart_payments_verified
     *
     * @param bool $show_ultracart_payments_verified show_ultracart_payments_verified
     *
     * @return $this
     */
    public function setShowUltracartPaymentsVerified($show_ultracart_payments_verified)
    {
        $this->container['show_ultracart_payments_verified'] = $show_ultracart_payments_verified;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets supports_auth
     *
     * @return string
     */
    public function getSupportsAuth()
    {
        return $this->container['supports_auth'];
    }

    /**
     * Sets supports_auth
     *
     * @param string $supports_auth supports_auth
     *
     * @return $this
     */
    public function setSupportsAuth($supports_auth)
    {
        $this->container['supports_auth'] = $supports_auth;

        return $this;
    }

    /**
     * Gets supports_refund
     *
     * @return string
     */
    public function getSupportsRefund()
    {
        return $this->container['supports_refund'];
    }

    /**
     * Sets supports_refund
     *
     * @param string $supports_refund supports_refund
     *
     * @return $this
     */
    public function setSupportsRefund($supports_refund)
    {
        $this->container['supports_refund'] = $supports_refund;

        return $this;
    }

    /**
     * Gets third_party
     *
     * @return string
     */
    public function getThirdParty()
    {
        return $this->container['third_party'];
    }

    /**
     * Sets third_party
     *
     * @param string $third_party third_party
     *
     * @return $this
     */
    public function setThirdParty($third_party)
    {
        $this->container['third_party'] = $third_party;

        return $this;
    }

    /**
     * Gets traffic_percentage
     *
     * @return float
     */
    public function getTrafficPercentage()
    {
        return $this->container['traffic_percentage'];
    }

    /**
     * Sets traffic_percentage
     *
     * @param float $traffic_percentage traffic_percentage
     *
     * @return $this
     */
    public function setTrafficPercentage($traffic_percentage)
    {
        $this->container['traffic_percentage'] = $traffic_percentage;

        return $this;
    }

    /**
     * Gets warning
     *
     * @return string
     */
    public function getWarning()
    {
        return $this->container['warning'];
    }

    /**
     * Sets warning
     *
     * @param string $warning warning
     *
     * @return $this
     */
    public function setWarning($warning)
    {
        $this->container['warning'] = $warning;

        return $this;
    }

    /**
     * Gets wepay_account_update_uri
     *
     * @return string
     */
    public function getWepayAccountUpdateUri()
    {
        return $this->container['wepay_account_update_uri'];
    }

    /**
     * Sets wepay_account_update_uri
     *
     * @param string $wepay_account_update_uri wepay_account_update_uri
     *
     * @return $this
     */
    public function setWepayAccountUpdateUri($wepay_account_update_uri)
    {
        $this->container['wepay_account_update_uri'] = $wepay_account_update_uri;

        return $this;
    }

    /**
     * Gets wepay_console_hostname
     *
     * @return string
     */
    public function getWepayConsoleHostname()
    {
        return $this->container['wepay_console_hostname'];
    }

    /**
     * Sets wepay_console_hostname
     *
     * @param string $wepay_console_hostname wepay_console_hostname
     *
     * @return $this
     */
    public function setWepayConsoleHostname($wepay_console_hostname)
    {
        $this->container['wepay_console_hostname'] = $wepay_console_hostname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


