<?php
/**
 * OrderPaymentECheck
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderPaymentECheck Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderPaymentECheck implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderPaymentECheck';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bank_aba_code' => 'string',
        'bank_account_name' => 'string',
        'bank_account_number' => 'string',
        'bank_account_type' => 'string',
        'bank_name' => 'string',
        'bank_owner_type' => 'string',
        'customer_tax_id' => 'string',
        'drivers_license_dob' => 'string',
        'drivers_license_number' => 'string',
        'drivers_license_state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bank_aba_code' => null,
        'bank_account_name' => null,
        'bank_account_number' => null,
        'bank_account_type' => null,
        'bank_name' => null,
        'bank_owner_type' => null,
        'customer_tax_id' => null,
        'drivers_license_dob' => null,
        'drivers_license_number' => null,
        'drivers_license_state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_aba_code' => 'bank_aba_code',
        'bank_account_name' => 'bank_account_name',
        'bank_account_number' => 'bank_account_number',
        'bank_account_type' => 'bank_account_type',
        'bank_name' => 'bank_name',
        'bank_owner_type' => 'bank_owner_type',
        'customer_tax_id' => 'customer_tax_id',
        'drivers_license_dob' => 'drivers_license_dob',
        'drivers_license_number' => 'drivers_license_number',
        'drivers_license_state' => 'drivers_license_state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bank_aba_code' => 'setBankAbaCode',
        'bank_account_name' => 'setBankAccountName',
        'bank_account_number' => 'setBankAccountNumber',
        'bank_account_type' => 'setBankAccountType',
        'bank_name' => 'setBankName',
        'bank_owner_type' => 'setBankOwnerType',
        'customer_tax_id' => 'setCustomerTaxId',
        'drivers_license_dob' => 'setDriversLicenseDob',
        'drivers_license_number' => 'setDriversLicenseNumber',
        'drivers_license_state' => 'setDriversLicenseState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bank_aba_code' => 'getBankAbaCode',
        'bank_account_name' => 'getBankAccountName',
        'bank_account_number' => 'getBankAccountNumber',
        'bank_account_type' => 'getBankAccountType',
        'bank_name' => 'getBankName',
        'bank_owner_type' => 'getBankOwnerType',
        'customer_tax_id' => 'getCustomerTaxId',
        'drivers_license_dob' => 'getDriversLicenseDob',
        'drivers_license_number' => 'getDriversLicenseNumber',
        'drivers_license_state' => 'getDriversLicenseState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BANK_ACCOUNT_TYPE_CHECKING = 'Checking';
    public const BANK_ACCOUNT_TYPE_SAVINGS = 'Savings';
    public const BANK_OWNER_TYPE_PERSONAL = 'Personal';
    public const BANK_OWNER_TYPE_BUSINESS = 'Business';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBankAccountTypeAllowableValues()
    {
        return [
            self::BANK_ACCOUNT_TYPE_CHECKING,
            self::BANK_ACCOUNT_TYPE_SAVINGS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBankOwnerTypeAllowableValues()
    {
        return [
            self::BANK_OWNER_TYPE_PERSONAL,
            self::BANK_OWNER_TYPE_BUSINESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bank_aba_code'] = $data['bank_aba_code'] ?? null;
        $this->container['bank_account_name'] = $data['bank_account_name'] ?? null;
        $this->container['bank_account_number'] = $data['bank_account_number'] ?? null;
        $this->container['bank_account_type'] = $data['bank_account_type'] ?? null;
        $this->container['bank_name'] = $data['bank_name'] ?? null;
        $this->container['bank_owner_type'] = $data['bank_owner_type'] ?? null;
        $this->container['customer_tax_id'] = $data['customer_tax_id'] ?? null;
        $this->container['drivers_license_dob'] = $data['drivers_license_dob'] ?? null;
        $this->container['drivers_license_number'] = $data['drivers_license_number'] ?? null;
        $this->container['drivers_license_state'] = $data['drivers_license_state'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bank_aba_code']) && (mb_strlen($this->container['bank_aba_code']) > 9)) {
            $invalidProperties[] = "invalid value for 'bank_aba_code', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['bank_account_name']) && (mb_strlen($this->container['bank_account_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_account_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bank_account_number']) && (mb_strlen($this->container['bank_account_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_account_number', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getBankAccountTypeAllowableValues();
        if (!is_null($this->container['bank_account_type']) && !in_array($this->container['bank_account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bank_account_type', must be one of '%s'",
                $this->container['bank_account_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['bank_name']) && (mb_strlen($this->container['bank_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_name', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getBankOwnerTypeAllowableValues();
        if (!is_null($this->container['bank_owner_type']) && !in_array($this->container['bank_owner_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bank_owner_type', must be one of '%s'",
                $this->container['bank_owner_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['customer_tax_id']) && (mb_strlen($this->container['customer_tax_id']) > 9)) {
            $invalidProperties[] = "invalid value for 'customer_tax_id', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['drivers_license_dob']) && (mb_strlen($this->container['drivers_license_dob']) > 10)) {
            $invalidProperties[] = "invalid value for 'drivers_license_dob', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['drivers_license_number']) && (mb_strlen($this->container['drivers_license_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'drivers_license_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['drivers_license_state']) && (mb_strlen($this->container['drivers_license_state']) > 2)) {
            $invalidProperties[] = "invalid value for 'drivers_license_state', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bank_aba_code
     *
     * @return string|null
     */
    public function getBankAbaCode()
    {
        return $this->container['bank_aba_code'];
    }

    /**
     * Sets bank_aba_code
     *
     * @param string|null $bank_aba_code Bank routing code
     *
     * @return self
     */
    public function setBankAbaCode($bank_aba_code)
    {
        if (!is_null($bank_aba_code) && (mb_strlen($bank_aba_code) > 9)) {
            throw new \InvalidArgumentException('invalid length for $bank_aba_code when calling OrderPaymentECheck., must be smaller than or equal to 9.');
        }

        $this->container['bank_aba_code'] = $bank_aba_code;

        return $this;
    }

    /**
     * Gets bank_account_name
     *
     * @return string|null
     */
    public function getBankAccountName()
    {
        return $this->container['bank_account_name'];
    }

    /**
     * Sets bank_account_name
     *
     * @param string|null $bank_account_name Bank account name
     *
     * @return self
     */
    public function setBankAccountName($bank_account_name)
    {
        if (!is_null($bank_account_name) && (mb_strlen($bank_account_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_name when calling OrderPaymentECheck., must be smaller than or equal to 50.');
        }

        $this->container['bank_account_name'] = $bank_account_name;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string|null
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string|null $bank_account_number Bank account number (masked to last 4)
     *
     * @return self
     */
    public function setBankAccountNumber($bank_account_number)
    {
        if (!is_null($bank_account_number) && (mb_strlen($bank_account_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_number when calling OrderPaymentECheck., must be smaller than or equal to 50.');
        }

        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets bank_account_type
     *
     * @return string|null
     */
    public function getBankAccountType()
    {
        return $this->container['bank_account_type'];
    }

    /**
     * Sets bank_account_type
     *
     * @param string|null $bank_account_type Bank account type
     *
     * @return self
     */
    public function setBankAccountType($bank_account_type)
    {
        $allowedValues = $this->getBankAccountTypeAllowableValues();
        if (!is_null($bank_account_type) && !in_array($bank_account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bank_account_type', must be one of '%s'",
                    $bank_account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bank_account_type'] = $bank_account_type;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name Bank name
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (!is_null($bank_name) && (mb_strlen($bank_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_name when calling OrderPaymentECheck., must be smaller than or equal to 50.');
        }

        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets bank_owner_type
     *
     * @return string|null
     */
    public function getBankOwnerType()
    {
        return $this->container['bank_owner_type'];
    }

    /**
     * Sets bank_owner_type
     *
     * @param string|null $bank_owner_type Bank owner type
     *
     * @return self
     */
    public function setBankOwnerType($bank_owner_type)
    {
        $allowedValues = $this->getBankOwnerTypeAllowableValues();
        if (!is_null($bank_owner_type) && !in_array($bank_owner_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bank_owner_type', must be one of '%s'",
                    $bank_owner_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bank_owner_type'] = $bank_owner_type;

        return $this;
    }

    /**
     * Gets customer_tax_id
     *
     * @return string|null
     */
    public function getCustomerTaxId()
    {
        return $this->container['customer_tax_id'];
    }

    /**
     * Sets customer_tax_id
     *
     * @param string|null $customer_tax_id Customer tax id (masked to last 4)
     *
     * @return self
     */
    public function setCustomerTaxId($customer_tax_id)
    {
        if (!is_null($customer_tax_id) && (mb_strlen($customer_tax_id) > 9)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_id when calling OrderPaymentECheck., must be smaller than or equal to 9.');
        }

        $this->container['customer_tax_id'] = $customer_tax_id;

        return $this;
    }

    /**
     * Gets drivers_license_dob
     *
     * @return string|null
     */
    public function getDriversLicenseDob()
    {
        return $this->container['drivers_license_dob'];
    }

    /**
     * Sets drivers_license_dob
     *
     * @param string|null $drivers_license_dob Driver license date of birth
     *
     * @return self
     */
    public function setDriversLicenseDob($drivers_license_dob)
    {
        if (!is_null($drivers_license_dob) && (mb_strlen($drivers_license_dob) > 10)) {
            throw new \InvalidArgumentException('invalid length for $drivers_license_dob when calling OrderPaymentECheck., must be smaller than or equal to 10.');
        }

        $this->container['drivers_license_dob'] = $drivers_license_dob;

        return $this;
    }

    /**
     * Gets drivers_license_number
     *
     * @return string|null
     */
    public function getDriversLicenseNumber()
    {
        return $this->container['drivers_license_number'];
    }

    /**
     * Sets drivers_license_number
     *
     * @param string|null $drivers_license_number Driver license number (masked to last 4)
     *
     * @return self
     */
    public function setDriversLicenseNumber($drivers_license_number)
    {
        if (!is_null($drivers_license_number) && (mb_strlen($drivers_license_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $drivers_license_number when calling OrderPaymentECheck., must be smaller than or equal to 50.');
        }

        $this->container['drivers_license_number'] = $drivers_license_number;

        return $this;
    }

    /**
     * Gets drivers_license_state
     *
     * @return string|null
     */
    public function getDriversLicenseState()
    {
        return $this->container['drivers_license_state'];
    }

    /**
     * Sets drivers_license_state
     *
     * @param string|null $drivers_license_state Driver license state
     *
     * @return self
     */
    public function setDriversLicenseState($drivers_license_state)
    {
        if (!is_null($drivers_license_state) && (mb_strlen($drivers_license_state) > 2)) {
            throw new \InvalidArgumentException('invalid length for $drivers_license_state when calling OrderPaymentECheck., must be smaller than or equal to 2.');
        }

        $this->container['drivers_license_state'] = $drivers_license_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


