<?php
/**
 * ConversationAgentProfile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationAgentProfile Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConversationAgentProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConversationAgentProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'chat_limit' => 'int',
        'default_language_iso_code' => 'string',
        'default_status' => 'string',
        'display_name' => 'string',
        'name' => 'string',
        'profile_image_upload_key' => 'string',
        'profile_image_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'chat_limit' => 'int32',
        'default_language_iso_code' => null,
        'default_status' => null,
        'display_name' => null,
        'name' => null,
        'profile_image_upload_key' => null,
        'profile_image_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chat_limit' => 'chat_limit',
        'default_language_iso_code' => 'default_language_iso_code',
        'default_status' => 'default_status',
        'display_name' => 'display_name',
        'name' => 'name',
        'profile_image_upload_key' => 'profile_image_upload_key',
        'profile_image_url' => 'profile_image_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chat_limit' => 'setChatLimit',
        'default_language_iso_code' => 'setDefaultLanguageIsoCode',
        'default_status' => 'setDefaultStatus',
        'display_name' => 'setDisplayName',
        'name' => 'setName',
        'profile_image_upload_key' => 'setProfileImageUploadKey',
        'profile_image_url' => 'setProfileImageUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chat_limit' => 'getChatLimit',
        'default_language_iso_code' => 'getDefaultLanguageIsoCode',
        'default_status' => 'getDefaultStatus',
        'display_name' => 'getDisplayName',
        'name' => 'getName',
        'profile_image_upload_key' => 'getProfileImageUploadKey',
        'profile_image_url' => 'getProfileImageUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEFAULT_STATUS_AVAILABLE = 'available';
    public const DEFAULT_STATUS_BUSY = 'busy';
    public const DEFAULT_STATUS_UNAVAILABLE = 'unavailable';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultStatusAllowableValues()
    {
        return [
            self::DEFAULT_STATUS_AVAILABLE,
            self::DEFAULT_STATUS_BUSY,
            self::DEFAULT_STATUS_UNAVAILABLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chat_limit'] = $data['chat_limit'] ?? null;
        $this->container['default_language_iso_code'] = $data['default_language_iso_code'] ?? null;
        $this->container['default_status'] = $data['default_status'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['profile_image_upload_key'] = $data['profile_image_upload_key'] ?? null;
        $this->container['profile_image_url'] = $data['profile_image_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultStatusAllowableValues();
        if (!is_null($this->container['default_status']) && !in_array($this->container['default_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_status', must be one of '%s'",
                $this->container['default_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chat_limit
     *
     * @return int|null
     */
    public function getChatLimit()
    {
        return $this->container['chat_limit'];
    }

    /**
     * Sets chat_limit
     *
     * @param int|null $chat_limit The number of engagement chats that can be pushed on them at any given time.
     *
     * @return self
     */
    public function setChatLimit($chat_limit)
    {
        $this->container['chat_limit'] = $chat_limit;

        return $this;
    }

    /**
     * Gets default_language_iso_code
     *
     * @return string|null
     */
    public function getDefaultLanguageIsoCode()
    {
        return $this->container['default_language_iso_code'];
    }

    /**
     * Sets default_language_iso_code
     *
     * @param string|null $default_language_iso_code The default language the agent is chatting in
     *
     * @return self
     */
    public function setDefaultLanguageIsoCode($default_language_iso_code)
    {
        $this->container['default_language_iso_code'] = $default_language_iso_code;

        return $this;
    }

    /**
     * Gets default_status
     *
     * @return string|null
     */
    public function getDefaultStatus()
    {
        return $this->container['default_status'];
    }

    /**
     * Sets default_status
     *
     * @param string|null $default_status Default status when the agent loads conversations app.
     *
     * @return self
     */
    public function setDefaultStatus($default_status)
    {
        $allowedValues = $this->getDefaultStatusAllowableValues();
        if (!is_null($default_status) && !in_array($default_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_status', must be one of '%s'",
                    $default_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_status'] = $default_status;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name An alternate name that the agent wants to use in chat.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Their actual user name for profile settings display as placeholder test
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets profile_image_upload_key
     *
     * @return string|null
     */
    public function getProfileImageUploadKey()
    {
        return $this->container['profile_image_upload_key'];
    }

    /**
     * Sets profile_image_upload_key
     *
     * @param string|null $profile_image_upload_key An upload key used to update the profile image.
     *
     * @return self
     */
    public function setProfileImageUploadKey($profile_image_upload_key)
    {
        $this->container['profile_image_upload_key'] = $profile_image_upload_key;

        return $this;
    }

    /**
     * Gets profile_image_url
     *
     * @return string|null
     */
    public function getProfileImageUrl()
    {
        return $this->container['profile_image_url'];
    }

    /**
     * Sets profile_image_url
     *
     * @param string|null $profile_image_url Their current profile image URL
     *
     * @return self
     */
    public function setProfileImageUrl($profile_image_url)
    {
        $this->container['profile_image_url'] = $profile_image_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


