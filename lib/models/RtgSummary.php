<?php
/**
 * RtgSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * RtgSummary Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RtgSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RtgSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gateways' => '\ultracart\v2\models\RtgSummaryGateway[]',
        'info_message' => 'string',
        'migration_rtg_code' => 'string',
        'migration_single_gateway_name' => 'string',
        'show_delay_auto_orders' => 'bool',
        'show_migration' => 'bool',
        'warning' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gateways' => null,
        'info_message' => null,
        'migration_rtg_code' => null,
        'migration_single_gateway_name' => null,
        'show_delay_auto_orders' => null,
        'show_migration' => null,
        'warning' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gateways' => 'gateways',
        'info_message' => 'info_message',
        'migration_rtg_code' => 'migration_rtg_code',
        'migration_single_gateway_name' => 'migration_single_gateway_name',
        'show_delay_auto_orders' => 'show_delay_auto_orders',
        'show_migration' => 'show_migration',
        'warning' => 'warning'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gateways' => 'setGateways',
        'info_message' => 'setInfoMessage',
        'migration_rtg_code' => 'setMigrationRtgCode',
        'migration_single_gateway_name' => 'setMigrationSingleGatewayName',
        'show_delay_auto_orders' => 'setShowDelayAutoOrders',
        'show_migration' => 'setShowMigration',
        'warning' => 'setWarning'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gateways' => 'getGateways',
        'info_message' => 'getInfoMessage',
        'migration_rtg_code' => 'getMigrationRtgCode',
        'migration_single_gateway_name' => 'getMigrationSingleGatewayName',
        'show_delay_auto_orders' => 'getShowDelayAutoOrders',
        'show_migration' => 'getShowMigration',
        'warning' => 'getWarning'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gateways'] = isset($data['gateways']) ? $data['gateways'] : null;
        $this->container['info_message'] = isset($data['info_message']) ? $data['info_message'] : null;
        $this->container['migration_rtg_code'] = isset($data['migration_rtg_code']) ? $data['migration_rtg_code'] : null;
        $this->container['migration_single_gateway_name'] = isset($data['migration_single_gateway_name']) ? $data['migration_single_gateway_name'] : null;
        $this->container['show_delay_auto_orders'] = isset($data['show_delay_auto_orders']) ? $data['show_delay_auto_orders'] : null;
        $this->container['show_migration'] = isset($data['show_migration']) ? $data['show_migration'] : null;
        $this->container['warning'] = isset($data['warning']) ? $data['warning'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gateways
     *
     * @return \ultracart\v2\models\RtgSummaryGateway[]
     */
    public function getGateways()
    {
        return $this->container['gateways'];
    }

    /**
     * Sets gateways
     *
     * @param \ultracart\v2\models\RtgSummaryGateway[] $gateways gateways
     *
     * @return $this
     */
    public function setGateways($gateways)
    {
        $this->container['gateways'] = $gateways;

        return $this;
    }

    /**
     * Gets info_message
     *
     * @return string
     */
    public function getInfoMessage()
    {
        return $this->container['info_message'];
    }

    /**
     * Sets info_message
     *
     * @param string $info_message info_message
     *
     * @return $this
     */
    public function setInfoMessage($info_message)
    {
        $this->container['info_message'] = $info_message;

        return $this;
    }

    /**
     * Gets migration_rtg_code
     *
     * @return string
     */
    public function getMigrationRtgCode()
    {
        return $this->container['migration_rtg_code'];
    }

    /**
     * Sets migration_rtg_code
     *
     * @param string $migration_rtg_code migration_rtg_code
     *
     * @return $this
     */
    public function setMigrationRtgCode($migration_rtg_code)
    {
        $this->container['migration_rtg_code'] = $migration_rtg_code;

        return $this;
    }

    /**
     * Gets migration_single_gateway_name
     *
     * @return string
     */
    public function getMigrationSingleGatewayName()
    {
        return $this->container['migration_single_gateway_name'];
    }

    /**
     * Sets migration_single_gateway_name
     *
     * @param string $migration_single_gateway_name migration_single_gateway_name
     *
     * @return $this
     */
    public function setMigrationSingleGatewayName($migration_single_gateway_name)
    {
        $this->container['migration_single_gateway_name'] = $migration_single_gateway_name;

        return $this;
    }

    /**
     * Gets show_delay_auto_orders
     *
     * @return bool
     */
    public function getShowDelayAutoOrders()
    {
        return $this->container['show_delay_auto_orders'];
    }

    /**
     * Sets show_delay_auto_orders
     *
     * @param bool $show_delay_auto_orders show_delay_auto_orders
     *
     * @return $this
     */
    public function setShowDelayAutoOrders($show_delay_auto_orders)
    {
        $this->container['show_delay_auto_orders'] = $show_delay_auto_orders;

        return $this;
    }

    /**
     * Gets show_migration
     *
     * @return bool
     */
    public function getShowMigration()
    {
        return $this->container['show_migration'];
    }

    /**
     * Sets show_migration
     *
     * @param bool $show_migration show_migration
     *
     * @return $this
     */
    public function setShowMigration($show_migration)
    {
        $this->container['show_migration'] = $show_migration;

        return $this;
    }

    /**
     * Gets warning
     *
     * @return string
     */
    public function getWarning()
    {
        return $this->container['warning'];
    }

    /**
     * Sets warning
     *
     * @param string $warning warning
     *
     * @return $this
     */
    public function setWarning($warning)
    {
        $this->container['warning'] = $warning;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


