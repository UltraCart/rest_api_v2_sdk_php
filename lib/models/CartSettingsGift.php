<?php
/**
 * CartSettingsGift
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CartSettingsGift Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CartSettingsGift implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CartSettingsGift';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_gifts' => 'bool',
        'gift_charge' => '\ultracart\v2\models\Currency',
        'gift_wraps' => '\ultracart\v2\models\CartSettingsGiftWrap[]',
        'max_message_length' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_gifts' => null,
        'gift_charge' => null,
        'gift_wraps' => null,
        'max_message_length' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_gifts' => 'allow_gifts',
        'gift_charge' => 'gift_charge',
        'gift_wraps' => 'gift_wraps',
        'max_message_length' => 'max_message_length'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_gifts' => 'setAllowGifts',
        'gift_charge' => 'setGiftCharge',
        'gift_wraps' => 'setGiftWraps',
        'max_message_length' => 'setMaxMessageLength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_gifts' => 'getAllowGifts',
        'gift_charge' => 'getGiftCharge',
        'gift_wraps' => 'getGiftWraps',
        'max_message_length' => 'getMaxMessageLength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_gifts'] = isset($data['allow_gifts']) ? $data['allow_gifts'] : null;
        $this->container['gift_charge'] = isset($data['gift_charge']) ? $data['gift_charge'] : null;
        $this->container['gift_wraps'] = isset($data['gift_wraps']) ? $data['gift_wraps'] : null;
        $this->container['max_message_length'] = isset($data['max_message_length']) ? $data['max_message_length'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets allow_gifts
     *
     * @return bool
     */
    public function getAllowGifts()
    {
        return $this->container['allow_gifts'];
    }

    /**
     * Sets allow_gifts
     *
     * @param bool $allow_gifts True if this checkout supports gift giving
     *
     * @return $this
     */
    public function setAllowGifts($allow_gifts)
    {
        $this->container['allow_gifts'] = $allow_gifts;

        return $this;
    }

    /**
     * Gets gift_charge
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getGiftCharge()
    {
        return $this->container['gift_charge'];
    }

    /**
     * Sets gift_charge
     *
     * @param \ultracart\v2\models\Currency $gift_charge gift_charge
     *
     * @return $this
     */
    public function setGiftCharge($gift_charge)
    {
        $this->container['gift_charge'] = $gift_charge;

        return $this;
    }

    /**
     * Gets gift_wraps
     *
     * @return \ultracart\v2\models\CartSettingsGiftWrap[]
     */
    public function getGiftWraps()
    {
        return $this->container['gift_wraps'];
    }

    /**
     * Sets gift_wraps
     *
     * @param \ultracart\v2\models\CartSettingsGiftWrap[] $gift_wraps The gift wraps available for the customer to select from
     *
     * @return $this
     */
    public function setGiftWraps($gift_wraps)
    {
        $this->container['gift_wraps'] = $gift_wraps;

        return $this;
    }

    /**
     * Gets max_message_length
     *
     * @return int
     */
    public function getMaxMessageLength()
    {
        return $this->container['max_message_length'];
    }

    /**
     * Sets max_message_length
     *
     * @param int $max_message_length The maximum length of the gift message the giver can enter
     *
     * @return $this
     */
    public function setMaxMessageLength($max_message_length)
    {
        $this->container['max_message_length'] = $max_message_length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


