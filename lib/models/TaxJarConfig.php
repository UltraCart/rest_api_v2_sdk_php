<?php
/**
 * TaxJarConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * TaxJarConfig Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaxJarConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaxJarConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'api_key' => 'string',
        'estimate_only' => 'bool',
        'send_outside_nexus' => 'bool',
        'send_test_orders' => 'bool',
        'skip_channel_orders' => 'bool',
        'use_distribution_center_from' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'api_key' => null,
        'estimate_only' => null,
        'send_outside_nexus' => null,
        'send_test_orders' => null,
        'skip_channel_orders' => null,
        'use_distribution_center_from' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'api_key' => 'api_key',
        'estimate_only' => 'estimate_only',
        'send_outside_nexus' => 'send_outside_nexus',
        'send_test_orders' => 'send_test_orders',
        'skip_channel_orders' => 'skip_channel_orders',
        'use_distribution_center_from' => 'use_distribution_center_from'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'api_key' => 'setApiKey',
        'estimate_only' => 'setEstimateOnly',
        'send_outside_nexus' => 'setSendOutsideNexus',
        'send_test_orders' => 'setSendTestOrders',
        'skip_channel_orders' => 'setSkipChannelOrders',
        'use_distribution_center_from' => 'setUseDistributionCenterFrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'api_key' => 'getApiKey',
        'estimate_only' => 'getEstimateOnly',
        'send_outside_nexus' => 'getSendOutsideNexus',
        'send_test_orders' => 'getSendTestOrders',
        'skip_channel_orders' => 'getSkipChannelOrders',
        'use_distribution_center_from' => 'getUseDistributionCenterFrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? null;
        $this->container['api_key'] = $data['api_key'] ?? null;
        $this->container['estimate_only'] = $data['estimate_only'] ?? null;
        $this->container['send_outside_nexus'] = $data['send_outside_nexus'] ?? null;
        $this->container['send_test_orders'] = $data['send_test_orders'] ?? null;
        $this->container['skip_channel_orders'] = $data['skip_channel_orders'] ?? null;
        $this->container['use_distribution_center_from'] = $data['use_distribution_center_from'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active True if TaxJar is active for this merchant
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key TaxJar API key
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets estimate_only
     *
     * @return bool|null
     */
    public function getEstimateOnly()
    {
        return $this->container['estimate_only'];
    }

    /**
     * Sets estimate_only
     *
     * @param bool|null $estimate_only True if this TaxJar configuration is to estimate taxes only and not report placed orders to TaxJar
     *
     * @return self
     */
    public function setEstimateOnly($estimate_only)
    {
        $this->container['estimate_only'] = $estimate_only;

        return $this;
    }

    /**
     * Gets send_outside_nexus
     *
     * @return bool|null
     */
    public function getSendOutsideNexus()
    {
        return $this->container['send_outside_nexus'];
    }

    /**
     * Sets send_outside_nexus
     *
     * @param bool|null $send_outside_nexus Send orders outside your nexus TaxJar.  The default is to not transmit outside orders to TaxJar to reduce API calls.  However, this will prevent TaxJar from dynamically creating new Nexus when thresholds are exceeded for a state.
     *
     * @return self
     */
    public function setSendOutsideNexus($send_outside_nexus)
    {
        $this->container['send_outside_nexus'] = $send_outside_nexus;

        return $this;
    }

    /**
     * Gets send_test_orders
     *
     * @return bool|null
     */
    public function getSendTestOrders()
    {
        return $this->container['send_test_orders'];
    }

    /**
     * Sets send_test_orders
     *
     * @param bool|null $send_test_orders Send test orders through to TaxJar.  The default is to not transmit test orders to TaxJar.
     *
     * @return self
     */
    public function setSendTestOrders($send_test_orders)
    {
        $this->container['send_test_orders'] = $send_test_orders;

        return $this;
    }

    /**
     * Gets skip_channel_orders
     *
     * @return bool|null
     */
    public function getSkipChannelOrders()
    {
        return $this->container['skip_channel_orders'];
    }

    /**
     * Sets skip_channel_orders
     *
     * @param bool|null $skip_channel_orders Do not send channel partner orders to TaxJar.  Set this to true if your channel partner reports tax on their own.
     *
     * @return self
     */
    public function setSkipChannelOrders($skip_channel_orders)
    {
        $this->container['skip_channel_orders'] = $skip_channel_orders;

        return $this;
    }

    /**
     * Gets use_distribution_center_from
     *
     * @return bool|null
     */
    public function getUseDistributionCenterFrom()
    {
        return $this->container['use_distribution_center_from'];
    }

    /**
     * Sets use_distribution_center_from
     *
     * @param bool|null $use_distribution_center_from Use distribution center from address
     *
     * @return self
     */
    public function setUseDistributionCenterFrom($use_distribution_center_from)
    {
        $this->container['use_distribution_center_from'] = $use_distribution_center_from;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


