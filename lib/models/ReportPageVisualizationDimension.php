<?php
/**
 * ReportPageVisualizationDimension
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ReportPageVisualizationDimension Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportPageVisualizationDimension implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportPageVisualizationDimension';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'as' => 'string',
        'cast' => 'string',
        'column' => 'string',
        'datetime_timezone' => 'string',
        'datetime_trunc' => 'string',
        'extract' => 'string',
        'function' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'as' => null,
        'cast' => null,
        'column' => null,
        'datetime_timezone' => null,
        'datetime_trunc' => null,
        'extract' => null,
        'function' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'as' => 'as',
        'cast' => 'cast',
        'column' => 'column',
        'datetime_timezone' => 'datetime_timezone',
        'datetime_trunc' => 'datetime_trunc',
        'extract' => 'extract',
        'function' => 'function'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'as' => 'setAs',
        'cast' => 'setCast',
        'column' => 'setColumn',
        'datetime_timezone' => 'setDatetimeTimezone',
        'datetime_trunc' => 'setDatetimeTrunc',
        'extract' => 'setExtract',
        'function' => 'setFunction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'as' => 'getAs',
        'cast' => 'getCast',
        'column' => 'getColumn',
        'datetime_timezone' => 'getDatetimeTimezone',
        'datetime_trunc' => 'getDatetimeTrunc',
        'extract' => 'getExtract',
        'function' => 'getFunction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['as'] = $data['as'] ?? null;
        $this->container['cast'] = $data['cast'] ?? null;
        $this->container['column'] = $data['column'] ?? null;
        $this->container['datetime_timezone'] = $data['datetime_timezone'] ?? null;
        $this->container['datetime_trunc'] = $data['datetime_trunc'] ?? null;
        $this->container['extract'] = $data['extract'] ?? null;
        $this->container['function'] = $data['function'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets as
     *
     * @return string|null
     */
    public function getAs()
    {
        return $this->container['as'];
    }

    /**
     * Sets as
     *
     * @param string|null $as Return the column as a different name
     *
     * @return self
     */
    public function setAs($as)
    {
        $this->container['as'] = $as;

        return $this;
    }

    /**
     * Gets cast
     *
     * @return string|null
     */
    public function getCast()
    {
        return $this->container['cast'];
    }

    /**
     * Sets cast
     *
     * @param string|null $cast Cast the column to a different data type such as DATETIME -> DATE
     *
     * @return self
     */
    public function setCast($cast)
    {
        $this->container['cast'] = $cast;

        return $this;
    }

    /**
     * Gets column
     *
     * @return string|null
     */
    public function getColumn()
    {
        return $this->container['column'];
    }

    /**
     * Sets column
     *
     * @param string|null $column column
     *
     * @return self
     */
    public function setColumn($column)
    {
        $this->container['column'] = $column;

        return $this;
    }

    /**
     * Gets datetime_timezone
     *
     * @return string|null
     */
    public function getDatetimeTimezone()
    {
        return $this->container['datetime_timezone'];
    }

    /**
     * Sets datetime_timezone
     *
     * @param string|null $datetime_timezone The timezone to shift the date to
     *
     * @return self
     */
    public function setDatetimeTimezone($datetime_timezone)
    {
        $this->container['datetime_timezone'] = $datetime_timezone;

        return $this;
    }

    /**
     * Gets datetime_trunc
     *
     * @return string|null
     */
    public function getDatetimeTrunc()
    {
        return $this->container['datetime_trunc'];
    }

    /**
     * Sets datetime_trunc
     *
     * @param string|null $datetime_trunc The type of truncation to perform on the date, DAY, WEEK(MONDAY), etc.
     *
     * @return self
     */
    public function setDatetimeTrunc($datetime_trunc)
    {
        $this->container['datetime_trunc'] = $datetime_trunc;

        return $this;
    }

    /**
     * Gets extract
     *
     * @return string|null
     */
    public function getExtract()
    {
        return $this->container['extract'];
    }

    /**
     * Sets extract
     *
     * @param string|null $extract Part of a datetime to extract
     *
     * @return self
     */
    public function setExtract($extract)
    {
        $this->container['extract'] = $extract;

        return $this;
    }

    /**
     * Gets function
     *
     * @return string|null
     */
    public function getFunction()
    {
        return $this->container['function'];
    }

    /**
     * Sets function
     *
     * @param string|null $function The function to perform around the column such as DATE_TRUNC(@column, day)
     *
     * @return self
     */
    public function setFunction($function)
    {
        $this->container['function'] = $function;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


