<?php
/**
 * IntegrationLogQueryFilterValues
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * IntegrationLogQueryFilterValues Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IntegrationLogQueryFilterValues implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IntegrationLogQueryFilterValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actions' => 'string[]',
        'directions' => 'string[]',
        'emails' => 'string[]',
        'file_names' => 'string[]',
        'item_ids' => 'string[]',
        'item_ipn_oids' => 'int[]',
        'log_dts_max' => 'string',
        'log_dts_min' => 'string',
        'log_types' => 'string[]',
        'logger_names' => 'string[]',
        'order_ids' => 'string[]',
        'statuses' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actions' => null,
        'directions' => null,
        'emails' => null,
        'file_names' => null,
        'item_ids' => null,
        'item_ipn_oids' => null,
        'log_dts_max' => 'dateTime',
        'log_dts_min' => 'dateTime',
        'log_types' => null,
        'logger_names' => null,
        'order_ids' => null,
        'statuses' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actions' => 'actions',
        'directions' => 'directions',
        'emails' => 'emails',
        'file_names' => 'file_names',
        'item_ids' => 'item_ids',
        'item_ipn_oids' => 'item_ipn_oids',
        'log_dts_max' => 'log_dts_max',
        'log_dts_min' => 'log_dts_min',
        'log_types' => 'log_types',
        'logger_names' => 'logger_names',
        'order_ids' => 'order_ids',
        'statuses' => 'statuses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actions' => 'setActions',
        'directions' => 'setDirections',
        'emails' => 'setEmails',
        'file_names' => 'setFileNames',
        'item_ids' => 'setItemIds',
        'item_ipn_oids' => 'setItemIpnOids',
        'log_dts_max' => 'setLogDtsMax',
        'log_dts_min' => 'setLogDtsMin',
        'log_types' => 'setLogTypes',
        'logger_names' => 'setLoggerNames',
        'order_ids' => 'setOrderIds',
        'statuses' => 'setStatuses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actions' => 'getActions',
        'directions' => 'getDirections',
        'emails' => 'getEmails',
        'file_names' => 'getFileNames',
        'item_ids' => 'getItemIds',
        'item_ipn_oids' => 'getItemIpnOids',
        'log_dts_max' => 'getLogDtsMax',
        'log_dts_min' => 'getLogDtsMin',
        'log_types' => 'getLogTypes',
        'logger_names' => 'getLoggerNames',
        'order_ids' => 'getOrderIds',
        'statuses' => 'getStatuses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actions'] = $data['actions'] ?? null;
        $this->container['directions'] = $data['directions'] ?? null;
        $this->container['emails'] = $data['emails'] ?? null;
        $this->container['file_names'] = $data['file_names'] ?? null;
        $this->container['item_ids'] = $data['item_ids'] ?? null;
        $this->container['item_ipn_oids'] = $data['item_ipn_oids'] ?? null;
        $this->container['log_dts_max'] = $data['log_dts_max'] ?? null;
        $this->container['log_dts_min'] = $data['log_dts_min'] ?? null;
        $this->container['log_types'] = $data['log_types'] ?? null;
        $this->container['logger_names'] = $data['logger_names'] ?? null;
        $this->container['order_ids'] = $data['order_ids'] ?? null;
        $this->container['statuses'] = $data['statuses'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actions
     *
     * @return string[]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param string[]|null $actions actions
     *
     * @return self
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets directions
     *
     * @return string[]|null
     */
    public function getDirections()
    {
        return $this->container['directions'];
    }

    /**
     * Sets directions
     *
     * @param string[]|null $directions directions
     *
     * @return self
     */
    public function setDirections($directions)
    {
        $this->container['directions'] = $directions;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[]|null $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets file_names
     *
     * @return string[]|null
     */
    public function getFileNames()
    {
        return $this->container['file_names'];
    }

    /**
     * Sets file_names
     *
     * @param string[]|null $file_names file_names
     *
     * @return self
     */
    public function setFileNames($file_names)
    {
        $this->container['file_names'] = $file_names;

        return $this;
    }

    /**
     * Gets item_ids
     *
     * @return string[]|null
     */
    public function getItemIds()
    {
        return $this->container['item_ids'];
    }

    /**
     * Sets item_ids
     *
     * @param string[]|null $item_ids item_ids
     *
     * @return self
     */
    public function setItemIds($item_ids)
    {
        $this->container['item_ids'] = $item_ids;

        return $this;
    }

    /**
     * Gets item_ipn_oids
     *
     * @return int[]|null
     */
    public function getItemIpnOids()
    {
        return $this->container['item_ipn_oids'];
    }

    /**
     * Sets item_ipn_oids
     *
     * @param int[]|null $item_ipn_oids item_ipn_oids
     *
     * @return self
     */
    public function setItemIpnOids($item_ipn_oids)
    {
        $this->container['item_ipn_oids'] = $item_ipn_oids;

        return $this;
    }

    /**
     * Gets log_dts_max
     *
     * @return string|null
     */
    public function getLogDtsMax()
    {
        return $this->container['log_dts_max'];
    }

    /**
     * Sets log_dts_max
     *
     * @param string|null $log_dts_max Maximum date/time log date/time
     *
     * @return self
     */
    public function setLogDtsMax($log_dts_max)
    {
        $this->container['log_dts_max'] = $log_dts_max;

        return $this;
    }

    /**
     * Gets log_dts_min
     *
     * @return string|null
     */
    public function getLogDtsMin()
    {
        return $this->container['log_dts_min'];
    }

    /**
     * Sets log_dts_min
     *
     * @param string|null $log_dts_min Minimum date/time log date/time
     *
     * @return self
     */
    public function setLogDtsMin($log_dts_min)
    {
        $this->container['log_dts_min'] = $log_dts_min;

        return $this;
    }

    /**
     * Gets log_types
     *
     * @return string[]|null
     */
    public function getLogTypes()
    {
        return $this->container['log_types'];
    }

    /**
     * Sets log_types
     *
     * @param string[]|null $log_types log_types
     *
     * @return self
     */
    public function setLogTypes($log_types)
    {
        $this->container['log_types'] = $log_types;

        return $this;
    }

    /**
     * Gets logger_names
     *
     * @return string[]|null
     */
    public function getLoggerNames()
    {
        return $this->container['logger_names'];
    }

    /**
     * Sets logger_names
     *
     * @param string[]|null $logger_names logger_names
     *
     * @return self
     */
    public function setLoggerNames($logger_names)
    {
        $this->container['logger_names'] = $logger_names;

        return $this;
    }

    /**
     * Gets order_ids
     *
     * @return string[]|null
     */
    public function getOrderIds()
    {
        return $this->container['order_ids'];
    }

    /**
     * Sets order_ids
     *
     * @param string[]|null $order_ids order_ids
     *
     * @return self
     */
    public function setOrderIds($order_ids)
    {
        $this->container['order_ids'] = $order_ids;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return string[]|null
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param string[]|null $statuses statuses
     *
     * @return self
     */
    public function setStatuses($statuses)
    {
        $this->container['statuses'] = $statuses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


