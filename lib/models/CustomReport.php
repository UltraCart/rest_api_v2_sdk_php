<?php
/**
 * CustomReport
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomReport Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomReport implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_analysis_prompt' => 'string',
        'chart_javascript' => 'string',
        'chart_javascript_url' => 'string',
        'data_warehouse_report_config_oid' => 'int',
        'dataset_security_level' => 'string',
        'group_name' => 'string',
        'merchant_id' => 'string',
        'name' => 'string',
        'parameters' => '\ultracart\v2\models\CustomReportParameter[]',
        'queries' => '\ultracart\v2\models\CustomReportQuery[]',
        'tooltips' => '\ultracart\v2\models\CustomReportTooltip[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_analysis_prompt' => null,
        'chart_javascript' => null,
        'chart_javascript_url' => null,
        'data_warehouse_report_config_oid' => 'int32',
        'dataset_security_level' => null,
        'group_name' => null,
        'merchant_id' => null,
        'name' => null,
        'parameters' => null,
        'queries' => null,
        'tooltips' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_analysis_prompt' => 'business_analysis_prompt',
        'chart_javascript' => 'chart_javascript',
        'chart_javascript_url' => 'chart_javascript_url',
        'data_warehouse_report_config_oid' => 'data_warehouse_report_config_oid',
        'dataset_security_level' => 'dataset_security_level',
        'group_name' => 'group_name',
        'merchant_id' => 'merchant_id',
        'name' => 'name',
        'parameters' => 'parameters',
        'queries' => 'queries',
        'tooltips' => 'tooltips'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_analysis_prompt' => 'setBusinessAnalysisPrompt',
        'chart_javascript' => 'setChartJavascript',
        'chart_javascript_url' => 'setChartJavascriptUrl',
        'data_warehouse_report_config_oid' => 'setDataWarehouseReportConfigOid',
        'dataset_security_level' => 'setDatasetSecurityLevel',
        'group_name' => 'setGroupName',
        'merchant_id' => 'setMerchantId',
        'name' => 'setName',
        'parameters' => 'setParameters',
        'queries' => 'setQueries',
        'tooltips' => 'setTooltips'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_analysis_prompt' => 'getBusinessAnalysisPrompt',
        'chart_javascript' => 'getChartJavascript',
        'chart_javascript_url' => 'getChartJavascriptUrl',
        'data_warehouse_report_config_oid' => 'getDataWarehouseReportConfigOid',
        'dataset_security_level' => 'getDatasetSecurityLevel',
        'group_name' => 'getGroupName',
        'merchant_id' => 'getMerchantId',
        'name' => 'getName',
        'parameters' => 'getParameters',
        'queries' => 'getQueries',
        'tooltips' => 'getTooltips'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_analysis_prompt'] = $data['business_analysis_prompt'] ?? null;
        $this->container['chart_javascript'] = $data['chart_javascript'] ?? null;
        $this->container['chart_javascript_url'] = $data['chart_javascript_url'] ?? null;
        $this->container['data_warehouse_report_config_oid'] = $data['data_warehouse_report_config_oid'] ?? null;
        $this->container['dataset_security_level'] = $data['dataset_security_level'] ?? null;
        $this->container['group_name'] = $data['group_name'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['parameters'] = $data['parameters'] ?? null;
        $this->container['queries'] = $data['queries'] ?? null;
        $this->container['tooltips'] = $data['tooltips'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_analysis_prompt
     *
     * @return string|null
     */
    public function getBusinessAnalysisPrompt()
    {
        return $this->container['business_analysis_prompt'];
    }

    /**
     * Sets business_analysis_prompt
     *
     * @param string|null $business_analysis_prompt business_analysis_prompt
     *
     * @return self
     */
    public function setBusinessAnalysisPrompt($business_analysis_prompt)
    {
        $this->container['business_analysis_prompt'] = $business_analysis_prompt;

        return $this;
    }

    /**
     * Gets chart_javascript
     *
     * @return string|null
     */
    public function getChartJavascript()
    {
        return $this->container['chart_javascript'];
    }

    /**
     * Sets chart_javascript
     *
     * @param string|null $chart_javascript chart_javascript
     *
     * @return self
     */
    public function setChartJavascript($chart_javascript)
    {
        $this->container['chart_javascript'] = $chart_javascript;

        return $this;
    }

    /**
     * Gets chart_javascript_url
     *
     * @return string|null
     */
    public function getChartJavascriptUrl()
    {
        return $this->container['chart_javascript_url'];
    }

    /**
     * Sets chart_javascript_url
     *
     * @param string|null $chart_javascript_url chart_javascript_url
     *
     * @return self
     */
    public function setChartJavascriptUrl($chart_javascript_url)
    {
        $this->container['chart_javascript_url'] = $chart_javascript_url;

        return $this;
    }

    /**
     * Gets data_warehouse_report_config_oid
     *
     * @return int|null
     */
    public function getDataWarehouseReportConfigOid()
    {
        return $this->container['data_warehouse_report_config_oid'];
    }

    /**
     * Sets data_warehouse_report_config_oid
     *
     * @param int|null $data_warehouse_report_config_oid data_warehouse_report_config_oid
     *
     * @return self
     */
    public function setDataWarehouseReportConfigOid($data_warehouse_report_config_oid)
    {
        $this->container['data_warehouse_report_config_oid'] = $data_warehouse_report_config_oid;

        return $this;
    }

    /**
     * Gets dataset_security_level
     *
     * @return string|null
     */
    public function getDatasetSecurityLevel()
    {
        return $this->container['dataset_security_level'];
    }

    /**
     * Sets dataset_security_level
     *
     * @param string|null $dataset_security_level dataset_security_level
     *
     * @return self
     */
    public function setDatasetSecurityLevel($dataset_security_level)
    {
        $this->container['dataset_security_level'] = $dataset_security_level;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name group_name
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \ultracart\v2\models\CustomReportParameter[]|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \ultracart\v2\models\CustomReportParameter[]|null $parameters parameters
     *
     * @return self
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets queries
     *
     * @return \ultracart\v2\models\CustomReportQuery[]|null
     */
    public function getQueries()
    {
        return $this->container['queries'];
    }

    /**
     * Sets queries
     *
     * @param \ultracart\v2\models\CustomReportQuery[]|null $queries queries
     *
     * @return self
     */
    public function setQueries($queries)
    {
        $this->container['queries'] = $queries;

        return $this;
    }

    /**
     * Gets tooltips
     *
     * @return \ultracart\v2\models\CustomReportTooltip[]|null
     */
    public function getTooltips()
    {
        return $this->container['tooltips'];
    }

    /**
     * Sets tooltips
     *
     * @param \ultracart\v2\models\CustomReportTooltip[]|null $tooltips tooltips
     *
     * @return self
     */
    public function setTooltips($tooltips)
    {
        $this->container['tooltips'] = $tooltips;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


