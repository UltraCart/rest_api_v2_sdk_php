<?php
/**
 * ItemEbay
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemEbay Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemEbay implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemEbay';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'category_id' => 'int',
        'category_specifics' => '\ultracart\v2\models\ItemEbayCategorySpecific[]',
        'condition_description' => 'string',
        'condition_id' => 'int',
        'consecutive_failures' => 'int',
        'custom_category1' => 'int',
        'custom_category2' => 'int',
        'dispatch_time_max' => 'int',
        'domestic_1_additional_cost' => 'float',
        'domestic_1_first_cost' => 'float',
        'domestic_2_additional_cost' => 'float',
        'domestic_2_first_cost' => 'float',
        'domestic_3_additional_cost' => 'float',
        'domestic_3_first_cost' => 'float',
        'domestic_4_additional_cost' => 'float',
        'domestic_4_first_cost' => 'float',
        'ebay_auction_id' => 'string',
        'ebay_specific_inventory' => 'int',
        'ebay_template_name' => 'string',
        'ebay_template_oid' => 'int',
        'end_time' => 'string',
        'free_shipping' => 'bool',
        'free_shipping_method' => 'string',
        'international_1_additional_cost' => 'float',
        'international_1_first_cost' => 'float',
        'international_2_additional_cost' => 'float',
        'international_2_first_cost' => 'float',
        'international_3_additional_cost' => 'float',
        'international_3_first_cost' => 'float',
        'international_4_additional_cost' => 'float',
        'international_4_first_cost' => 'float',
        'last_status_dts' => 'string',
        'listed_dispatch_time_max' => 'int',
        'listed_ebay_template_oid' => 'int',
        'listing_dts' => 'string',
        'listing_duration' => 'string',
        'listing_price' => 'float',
        'listing_price_override' => 'float',
        'listing_type' => 'string',
        'marketplace_analysis' => '\ultracart\v2\models\ItemEbayMarketPlaceAnalysis',
        'marketplace_analysis_perform' => 'bool',
        'marketplace_final_value_fee_percentage' => 'float',
        'marketplace_last_check_dts' => 'string',
        'marketplace_lowest' => 'bool',
        'marketplace_map_violation' => 'bool',
        'marketplace_multiplier' => 'float',
        'marketplace_other_price' => 'float',
        'marketplace_other_seller' => 'string',
        'marketplace_other_shipping' => 'float',
        'marketplace_other_total' => 'float',
        'marketplace_our_additional_profit_potential' => 'float',
        'marketplace_our_price' => 'float',
        'marketplace_our_profit' => 'float',
        'marketplace_our_shipping' => 'float',
        'marketplace_our_total' => 'float',
        'marketplace_overhead' => 'float',
        'marketplace_profitable' => 'bool',
        'next_attempt_dts' => 'string',
        'next_listing_duration' => 'string',
        'no_promotional_shipping' => 'bool',
        'packaging_handling_costs' => 'float',
        'previous_ebay_auction_id' => 'string',
        'quantity' => 'int',
        'reserve_price' => 'float',
        'send_dimensions_and_weight' => 'string',
        'start_time' => 'string',
        'status' => 'string',
        'target_dispatch_time_max' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'category_id' => 'int32',
        'category_specifics' => null,
        'condition_description' => null,
        'condition_id' => 'int32',
        'consecutive_failures' => 'int32',
        'custom_category1' => 'int64',
        'custom_category2' => 'int64',
        'dispatch_time_max' => 'int32',
        'domestic_1_additional_cost' => null,
        'domestic_1_first_cost' => null,
        'domestic_2_additional_cost' => null,
        'domestic_2_first_cost' => null,
        'domestic_3_additional_cost' => null,
        'domestic_3_first_cost' => null,
        'domestic_4_additional_cost' => null,
        'domestic_4_first_cost' => null,
        'ebay_auction_id' => null,
        'ebay_specific_inventory' => 'int32',
        'ebay_template_name' => null,
        'ebay_template_oid' => 'int32',
        'end_time' => 'dateTime',
        'free_shipping' => null,
        'free_shipping_method' => null,
        'international_1_additional_cost' => null,
        'international_1_first_cost' => null,
        'international_2_additional_cost' => null,
        'international_2_first_cost' => null,
        'international_3_additional_cost' => null,
        'international_3_first_cost' => null,
        'international_4_additional_cost' => null,
        'international_4_first_cost' => null,
        'last_status_dts' => 'dateTime',
        'listed_dispatch_time_max' => 'int32',
        'listed_ebay_template_oid' => 'int32',
        'listing_dts' => 'dateTime',
        'listing_duration' => null,
        'listing_price' => null,
        'listing_price_override' => null,
        'listing_type' => null,
        'marketplace_analysis' => null,
        'marketplace_analysis_perform' => null,
        'marketplace_final_value_fee_percentage' => null,
        'marketplace_last_check_dts' => 'dateTime',
        'marketplace_lowest' => null,
        'marketplace_map_violation' => null,
        'marketplace_multiplier' => null,
        'marketplace_other_price' => null,
        'marketplace_other_seller' => null,
        'marketplace_other_shipping' => null,
        'marketplace_other_total' => null,
        'marketplace_our_additional_profit_potential' => null,
        'marketplace_our_price' => null,
        'marketplace_our_profit' => null,
        'marketplace_our_shipping' => null,
        'marketplace_our_total' => null,
        'marketplace_overhead' => null,
        'marketplace_profitable' => null,
        'next_attempt_dts' => 'dateTime',
        'next_listing_duration' => null,
        'no_promotional_shipping' => null,
        'packaging_handling_costs' => null,
        'previous_ebay_auction_id' => null,
        'quantity' => 'int32',
        'reserve_price' => null,
        'send_dimensions_and_weight' => null,
        'start_time' => null,
        'status' => null,
        'target_dispatch_time_max' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'category_id' => 'category_id',
        'category_specifics' => 'category_specifics',
        'condition_description' => 'condition_description',
        'condition_id' => 'condition_id',
        'consecutive_failures' => 'consecutive_failures',
        'custom_category1' => 'custom_category1',
        'custom_category2' => 'custom_category2',
        'dispatch_time_max' => 'dispatch_time_max',
        'domestic_1_additional_cost' => 'domestic_1_additional_cost',
        'domestic_1_first_cost' => 'domestic_1_first_cost',
        'domestic_2_additional_cost' => 'domestic_2_additional_cost',
        'domestic_2_first_cost' => 'domestic_2_first_cost',
        'domestic_3_additional_cost' => 'domestic_3_additional_cost',
        'domestic_3_first_cost' => 'domestic_3_first_cost',
        'domestic_4_additional_cost' => 'domestic_4_additional_cost',
        'domestic_4_first_cost' => 'domestic_4_first_cost',
        'ebay_auction_id' => 'ebay_auction_id',
        'ebay_specific_inventory' => 'ebay_specific_inventory',
        'ebay_template_name' => 'ebay_template_name',
        'ebay_template_oid' => 'ebay_template_oid',
        'end_time' => 'end_time',
        'free_shipping' => 'free_shipping',
        'free_shipping_method' => 'free_shipping_method',
        'international_1_additional_cost' => 'international_1_additional_cost',
        'international_1_first_cost' => 'international_1_first_cost',
        'international_2_additional_cost' => 'international_2_additional_cost',
        'international_2_first_cost' => 'international_2_first_cost',
        'international_3_additional_cost' => 'international_3_additional_cost',
        'international_3_first_cost' => 'international_3_first_cost',
        'international_4_additional_cost' => 'international_4_additional_cost',
        'international_4_first_cost' => 'international_4_first_cost',
        'last_status_dts' => 'last_status_dts',
        'listed_dispatch_time_max' => 'listed_dispatch_time_max',
        'listed_ebay_template_oid' => 'listed_ebay_template_oid',
        'listing_dts' => 'listing_dts',
        'listing_duration' => 'listing_duration',
        'listing_price' => 'listing_price',
        'listing_price_override' => 'listing_price_override',
        'listing_type' => 'listing_type',
        'marketplace_analysis' => 'marketplace_analysis',
        'marketplace_analysis_perform' => 'marketplace_analysis_perform',
        'marketplace_final_value_fee_percentage' => 'marketplace_final_value_fee_percentage',
        'marketplace_last_check_dts' => 'marketplace_last_check_dts',
        'marketplace_lowest' => 'marketplace_lowest',
        'marketplace_map_violation' => 'marketplace_map_violation',
        'marketplace_multiplier' => 'marketplace_multiplier',
        'marketplace_other_price' => 'marketplace_other_price',
        'marketplace_other_seller' => 'marketplace_other_seller',
        'marketplace_other_shipping' => 'marketplace_other_shipping',
        'marketplace_other_total' => 'marketplace_other_total',
        'marketplace_our_additional_profit_potential' => 'marketplace_our_additional_profit_potential',
        'marketplace_our_price' => 'marketplace_our_price',
        'marketplace_our_profit' => 'marketplace_our_profit',
        'marketplace_our_shipping' => 'marketplace_our_shipping',
        'marketplace_our_total' => 'marketplace_our_total',
        'marketplace_overhead' => 'marketplace_overhead',
        'marketplace_profitable' => 'marketplace_profitable',
        'next_attempt_dts' => 'next_attempt_dts',
        'next_listing_duration' => 'next_listing_duration',
        'no_promotional_shipping' => 'no_promotional_shipping',
        'packaging_handling_costs' => 'packaging_handling_costs',
        'previous_ebay_auction_id' => 'previous_ebay_auction_id',
        'quantity' => 'quantity',
        'reserve_price' => 'reserve_price',
        'send_dimensions_and_weight' => 'send_dimensions_and_weight',
        'start_time' => 'start_time',
        'status' => 'status',
        'target_dispatch_time_max' => 'target_dispatch_time_max'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'category_id' => 'setCategoryId',
        'category_specifics' => 'setCategorySpecifics',
        'condition_description' => 'setConditionDescription',
        'condition_id' => 'setConditionId',
        'consecutive_failures' => 'setConsecutiveFailures',
        'custom_category1' => 'setCustomCategory1',
        'custom_category2' => 'setCustomCategory2',
        'dispatch_time_max' => 'setDispatchTimeMax',
        'domestic_1_additional_cost' => 'setDomestic1AdditionalCost',
        'domestic_1_first_cost' => 'setDomestic1FirstCost',
        'domestic_2_additional_cost' => 'setDomestic2AdditionalCost',
        'domestic_2_first_cost' => 'setDomestic2FirstCost',
        'domestic_3_additional_cost' => 'setDomestic3AdditionalCost',
        'domestic_3_first_cost' => 'setDomestic3FirstCost',
        'domestic_4_additional_cost' => 'setDomestic4AdditionalCost',
        'domestic_4_first_cost' => 'setDomestic4FirstCost',
        'ebay_auction_id' => 'setEbayAuctionId',
        'ebay_specific_inventory' => 'setEbaySpecificInventory',
        'ebay_template_name' => 'setEbayTemplateName',
        'ebay_template_oid' => 'setEbayTemplateOid',
        'end_time' => 'setEndTime',
        'free_shipping' => 'setFreeShipping',
        'free_shipping_method' => 'setFreeShippingMethod',
        'international_1_additional_cost' => 'setInternational1AdditionalCost',
        'international_1_first_cost' => 'setInternational1FirstCost',
        'international_2_additional_cost' => 'setInternational2AdditionalCost',
        'international_2_first_cost' => 'setInternational2FirstCost',
        'international_3_additional_cost' => 'setInternational3AdditionalCost',
        'international_3_first_cost' => 'setInternational3FirstCost',
        'international_4_additional_cost' => 'setInternational4AdditionalCost',
        'international_4_first_cost' => 'setInternational4FirstCost',
        'last_status_dts' => 'setLastStatusDts',
        'listed_dispatch_time_max' => 'setListedDispatchTimeMax',
        'listed_ebay_template_oid' => 'setListedEbayTemplateOid',
        'listing_dts' => 'setListingDts',
        'listing_duration' => 'setListingDuration',
        'listing_price' => 'setListingPrice',
        'listing_price_override' => 'setListingPriceOverride',
        'listing_type' => 'setListingType',
        'marketplace_analysis' => 'setMarketplaceAnalysis',
        'marketplace_analysis_perform' => 'setMarketplaceAnalysisPerform',
        'marketplace_final_value_fee_percentage' => 'setMarketplaceFinalValueFeePercentage',
        'marketplace_last_check_dts' => 'setMarketplaceLastCheckDts',
        'marketplace_lowest' => 'setMarketplaceLowest',
        'marketplace_map_violation' => 'setMarketplaceMapViolation',
        'marketplace_multiplier' => 'setMarketplaceMultiplier',
        'marketplace_other_price' => 'setMarketplaceOtherPrice',
        'marketplace_other_seller' => 'setMarketplaceOtherSeller',
        'marketplace_other_shipping' => 'setMarketplaceOtherShipping',
        'marketplace_other_total' => 'setMarketplaceOtherTotal',
        'marketplace_our_additional_profit_potential' => 'setMarketplaceOurAdditionalProfitPotential',
        'marketplace_our_price' => 'setMarketplaceOurPrice',
        'marketplace_our_profit' => 'setMarketplaceOurProfit',
        'marketplace_our_shipping' => 'setMarketplaceOurShipping',
        'marketplace_our_total' => 'setMarketplaceOurTotal',
        'marketplace_overhead' => 'setMarketplaceOverhead',
        'marketplace_profitable' => 'setMarketplaceProfitable',
        'next_attempt_dts' => 'setNextAttemptDts',
        'next_listing_duration' => 'setNextListingDuration',
        'no_promotional_shipping' => 'setNoPromotionalShipping',
        'packaging_handling_costs' => 'setPackagingHandlingCosts',
        'previous_ebay_auction_id' => 'setPreviousEbayAuctionId',
        'quantity' => 'setQuantity',
        'reserve_price' => 'setReservePrice',
        'send_dimensions_and_weight' => 'setSendDimensionsAndWeight',
        'start_time' => 'setStartTime',
        'status' => 'setStatus',
        'target_dispatch_time_max' => 'setTargetDispatchTimeMax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'category_id' => 'getCategoryId',
        'category_specifics' => 'getCategorySpecifics',
        'condition_description' => 'getConditionDescription',
        'condition_id' => 'getConditionId',
        'consecutive_failures' => 'getConsecutiveFailures',
        'custom_category1' => 'getCustomCategory1',
        'custom_category2' => 'getCustomCategory2',
        'dispatch_time_max' => 'getDispatchTimeMax',
        'domestic_1_additional_cost' => 'getDomestic1AdditionalCost',
        'domestic_1_first_cost' => 'getDomestic1FirstCost',
        'domestic_2_additional_cost' => 'getDomestic2AdditionalCost',
        'domestic_2_first_cost' => 'getDomestic2FirstCost',
        'domestic_3_additional_cost' => 'getDomestic3AdditionalCost',
        'domestic_3_first_cost' => 'getDomestic3FirstCost',
        'domestic_4_additional_cost' => 'getDomestic4AdditionalCost',
        'domestic_4_first_cost' => 'getDomestic4FirstCost',
        'ebay_auction_id' => 'getEbayAuctionId',
        'ebay_specific_inventory' => 'getEbaySpecificInventory',
        'ebay_template_name' => 'getEbayTemplateName',
        'ebay_template_oid' => 'getEbayTemplateOid',
        'end_time' => 'getEndTime',
        'free_shipping' => 'getFreeShipping',
        'free_shipping_method' => 'getFreeShippingMethod',
        'international_1_additional_cost' => 'getInternational1AdditionalCost',
        'international_1_first_cost' => 'getInternational1FirstCost',
        'international_2_additional_cost' => 'getInternational2AdditionalCost',
        'international_2_first_cost' => 'getInternational2FirstCost',
        'international_3_additional_cost' => 'getInternational3AdditionalCost',
        'international_3_first_cost' => 'getInternational3FirstCost',
        'international_4_additional_cost' => 'getInternational4AdditionalCost',
        'international_4_first_cost' => 'getInternational4FirstCost',
        'last_status_dts' => 'getLastStatusDts',
        'listed_dispatch_time_max' => 'getListedDispatchTimeMax',
        'listed_ebay_template_oid' => 'getListedEbayTemplateOid',
        'listing_dts' => 'getListingDts',
        'listing_duration' => 'getListingDuration',
        'listing_price' => 'getListingPrice',
        'listing_price_override' => 'getListingPriceOverride',
        'listing_type' => 'getListingType',
        'marketplace_analysis' => 'getMarketplaceAnalysis',
        'marketplace_analysis_perform' => 'getMarketplaceAnalysisPerform',
        'marketplace_final_value_fee_percentage' => 'getMarketplaceFinalValueFeePercentage',
        'marketplace_last_check_dts' => 'getMarketplaceLastCheckDts',
        'marketplace_lowest' => 'getMarketplaceLowest',
        'marketplace_map_violation' => 'getMarketplaceMapViolation',
        'marketplace_multiplier' => 'getMarketplaceMultiplier',
        'marketplace_other_price' => 'getMarketplaceOtherPrice',
        'marketplace_other_seller' => 'getMarketplaceOtherSeller',
        'marketplace_other_shipping' => 'getMarketplaceOtherShipping',
        'marketplace_other_total' => 'getMarketplaceOtherTotal',
        'marketplace_our_additional_profit_potential' => 'getMarketplaceOurAdditionalProfitPotential',
        'marketplace_our_price' => 'getMarketplaceOurPrice',
        'marketplace_our_profit' => 'getMarketplaceOurProfit',
        'marketplace_our_shipping' => 'getMarketplaceOurShipping',
        'marketplace_our_total' => 'getMarketplaceOurTotal',
        'marketplace_overhead' => 'getMarketplaceOverhead',
        'marketplace_profitable' => 'getMarketplaceProfitable',
        'next_attempt_dts' => 'getNextAttemptDts',
        'next_listing_duration' => 'getNextListingDuration',
        'no_promotional_shipping' => 'getNoPromotionalShipping',
        'packaging_handling_costs' => 'getPackagingHandlingCosts',
        'previous_ebay_auction_id' => 'getPreviousEbayAuctionId',
        'quantity' => 'getQuantity',
        'reserve_price' => 'getReservePrice',
        'send_dimensions_and_weight' => 'getSendDimensionsAndWeight',
        'start_time' => 'getStartTime',
        'status' => 'getStatus',
        'target_dispatch_time_max' => 'getTargetDispatchTimeMax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? null;
        $this->container['category_id'] = $data['category_id'] ?? null;
        $this->container['category_specifics'] = $data['category_specifics'] ?? null;
        $this->container['condition_description'] = $data['condition_description'] ?? null;
        $this->container['condition_id'] = $data['condition_id'] ?? null;
        $this->container['consecutive_failures'] = $data['consecutive_failures'] ?? null;
        $this->container['custom_category1'] = $data['custom_category1'] ?? null;
        $this->container['custom_category2'] = $data['custom_category2'] ?? null;
        $this->container['dispatch_time_max'] = $data['dispatch_time_max'] ?? null;
        $this->container['domestic_1_additional_cost'] = $data['domestic_1_additional_cost'] ?? null;
        $this->container['domestic_1_first_cost'] = $data['domestic_1_first_cost'] ?? null;
        $this->container['domestic_2_additional_cost'] = $data['domestic_2_additional_cost'] ?? null;
        $this->container['domestic_2_first_cost'] = $data['domestic_2_first_cost'] ?? null;
        $this->container['domestic_3_additional_cost'] = $data['domestic_3_additional_cost'] ?? null;
        $this->container['domestic_3_first_cost'] = $data['domestic_3_first_cost'] ?? null;
        $this->container['domestic_4_additional_cost'] = $data['domestic_4_additional_cost'] ?? null;
        $this->container['domestic_4_first_cost'] = $data['domestic_4_first_cost'] ?? null;
        $this->container['ebay_auction_id'] = $data['ebay_auction_id'] ?? null;
        $this->container['ebay_specific_inventory'] = $data['ebay_specific_inventory'] ?? null;
        $this->container['ebay_template_name'] = $data['ebay_template_name'] ?? null;
        $this->container['ebay_template_oid'] = $data['ebay_template_oid'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['free_shipping'] = $data['free_shipping'] ?? null;
        $this->container['free_shipping_method'] = $data['free_shipping_method'] ?? null;
        $this->container['international_1_additional_cost'] = $data['international_1_additional_cost'] ?? null;
        $this->container['international_1_first_cost'] = $data['international_1_first_cost'] ?? null;
        $this->container['international_2_additional_cost'] = $data['international_2_additional_cost'] ?? null;
        $this->container['international_2_first_cost'] = $data['international_2_first_cost'] ?? null;
        $this->container['international_3_additional_cost'] = $data['international_3_additional_cost'] ?? null;
        $this->container['international_3_first_cost'] = $data['international_3_first_cost'] ?? null;
        $this->container['international_4_additional_cost'] = $data['international_4_additional_cost'] ?? null;
        $this->container['international_4_first_cost'] = $data['international_4_first_cost'] ?? null;
        $this->container['last_status_dts'] = $data['last_status_dts'] ?? null;
        $this->container['listed_dispatch_time_max'] = $data['listed_dispatch_time_max'] ?? null;
        $this->container['listed_ebay_template_oid'] = $data['listed_ebay_template_oid'] ?? null;
        $this->container['listing_dts'] = $data['listing_dts'] ?? null;
        $this->container['listing_duration'] = $data['listing_duration'] ?? null;
        $this->container['listing_price'] = $data['listing_price'] ?? null;
        $this->container['listing_price_override'] = $data['listing_price_override'] ?? null;
        $this->container['listing_type'] = $data['listing_type'] ?? null;
        $this->container['marketplace_analysis'] = $data['marketplace_analysis'] ?? null;
        $this->container['marketplace_analysis_perform'] = $data['marketplace_analysis_perform'] ?? null;
        $this->container['marketplace_final_value_fee_percentage'] = $data['marketplace_final_value_fee_percentage'] ?? null;
        $this->container['marketplace_last_check_dts'] = $data['marketplace_last_check_dts'] ?? null;
        $this->container['marketplace_lowest'] = $data['marketplace_lowest'] ?? null;
        $this->container['marketplace_map_violation'] = $data['marketplace_map_violation'] ?? null;
        $this->container['marketplace_multiplier'] = $data['marketplace_multiplier'] ?? null;
        $this->container['marketplace_other_price'] = $data['marketplace_other_price'] ?? null;
        $this->container['marketplace_other_seller'] = $data['marketplace_other_seller'] ?? null;
        $this->container['marketplace_other_shipping'] = $data['marketplace_other_shipping'] ?? null;
        $this->container['marketplace_other_total'] = $data['marketplace_other_total'] ?? null;
        $this->container['marketplace_our_additional_profit_potential'] = $data['marketplace_our_additional_profit_potential'] ?? null;
        $this->container['marketplace_our_price'] = $data['marketplace_our_price'] ?? null;
        $this->container['marketplace_our_profit'] = $data['marketplace_our_profit'] ?? null;
        $this->container['marketplace_our_shipping'] = $data['marketplace_our_shipping'] ?? null;
        $this->container['marketplace_our_total'] = $data['marketplace_our_total'] ?? null;
        $this->container['marketplace_overhead'] = $data['marketplace_overhead'] ?? null;
        $this->container['marketplace_profitable'] = $data['marketplace_profitable'] ?? null;
        $this->container['next_attempt_dts'] = $data['next_attempt_dts'] ?? null;
        $this->container['next_listing_duration'] = $data['next_listing_duration'] ?? null;
        $this->container['no_promotional_shipping'] = $data['no_promotional_shipping'] ?? null;
        $this->container['packaging_handling_costs'] = $data['packaging_handling_costs'] ?? null;
        $this->container['previous_ebay_auction_id'] = $data['previous_ebay_auction_id'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['reserve_price'] = $data['reserve_price'] ?? null;
        $this->container['send_dimensions_and_weight'] = $data['send_dimensions_and_weight'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['target_dispatch_time_max'] = $data['target_dispatch_time_max'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active True if the item is active for listing
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id e-Bay category ID
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_specifics
     *
     * @return \ultracart\v2\models\ItemEbayCategorySpecific[]|null
     */
    public function getCategorySpecifics()
    {
        return $this->container['category_specifics'];
    }

    /**
     * Sets category_specifics
     *
     * @param \ultracart\v2\models\ItemEbayCategorySpecific[]|null $category_specifics Answers to category specific questions
     *
     * @return self
     */
    public function setCategorySpecifics($category_specifics)
    {
        $this->container['category_specifics'] = $category_specifics;

        return $this;
    }

    /**
     * Gets condition_description
     *
     * @return string|null
     */
    public function getConditionDescription()
    {
        return $this->container['condition_description'];
    }

    /**
     * Sets condition_description
     *
     * @param string|null $condition_description Description of the condition (e-Bay constant)
     *
     * @return self
     */
    public function setConditionDescription($condition_description)
    {
        $this->container['condition_description'] = $condition_description;

        return $this;
    }

    /**
     * Gets condition_id
     *
     * @return int|null
     */
    public function getConditionId()
    {
        return $this->container['condition_id'];
    }

    /**
     * Sets condition_id
     *
     * @param int|null $condition_id Numerical ID of the condition (e-Bay constant)
     *
     * @return self
     */
    public function setConditionId($condition_id)
    {
        $this->container['condition_id'] = $condition_id;

        return $this;
    }

    /**
     * Gets consecutive_failures
     *
     * @return int|null
     */
    public function getConsecutiveFailures()
    {
        return $this->container['consecutive_failures'];
    }

    /**
     * Sets consecutive_failures
     *
     * @param int|null $consecutive_failures Number of consecutive failures trying to list this item
     *
     * @return self
     */
    public function setConsecutiveFailures($consecutive_failures)
    {
        $this->container['consecutive_failures'] = $consecutive_failures;

        return $this;
    }

    /**
     * Gets custom_category1
     *
     * @return int|null
     */
    public function getCustomCategory1()
    {
        return $this->container['custom_category1'];
    }

    /**
     * Sets custom_category1
     *
     * @param int|null $custom_category1 e-Bay Store category 1
     *
     * @return self
     */
    public function setCustomCategory1($custom_category1)
    {
        $this->container['custom_category1'] = $custom_category1;

        return $this;
    }

    /**
     * Gets custom_category2
     *
     * @return int|null
     */
    public function getCustomCategory2()
    {
        return $this->container['custom_category2'];
    }

    /**
     * Sets custom_category2
     *
     * @param int|null $custom_category2 e-Bay Store category 2
     *
     * @return self
     */
    public function setCustomCategory2($custom_category2)
    {
        $this->container['custom_category2'] = $custom_category2;

        return $this;
    }

    /**
     * Gets dispatch_time_max
     *
     * @return int|null
     */
    public function getDispatchTimeMax()
    {
        return $this->container['dispatch_time_max'];
    }

    /**
     * Sets dispatch_time_max
     *
     * @param int|null $dispatch_time_max Maximum number of days it will take to ship the item
     *
     * @return self
     */
    public function setDispatchTimeMax($dispatch_time_max)
    {
        $this->container['dispatch_time_max'] = $dispatch_time_max;

        return $this;
    }

    /**
     * Gets domestic_1_additional_cost
     *
     * @return float|null
     */
    public function getDomestic1AdditionalCost()
    {
        return $this->container['domestic_1_additional_cost'];
    }

    /**
     * Sets domestic_1_additional_cost
     *
     * @param float|null $domestic_1_additional_cost Domestic 1 method additional item cost
     *
     * @return self
     */
    public function setDomestic1AdditionalCost($domestic_1_additional_cost)
    {
        $this->container['domestic_1_additional_cost'] = $domestic_1_additional_cost;

        return $this;
    }

    /**
     * Gets domestic_1_first_cost
     *
     * @return float|null
     */
    public function getDomestic1FirstCost()
    {
        return $this->container['domestic_1_first_cost'];
    }

    /**
     * Sets domestic_1_first_cost
     *
     * @param float|null $domestic_1_first_cost Domestic 1 method first item cost
     *
     * @return self
     */
    public function setDomestic1FirstCost($domestic_1_first_cost)
    {
        $this->container['domestic_1_first_cost'] = $domestic_1_first_cost;

        return $this;
    }

    /**
     * Gets domestic_2_additional_cost
     *
     * @return float|null
     */
    public function getDomestic2AdditionalCost()
    {
        return $this->container['domestic_2_additional_cost'];
    }

    /**
     * Sets domestic_2_additional_cost
     *
     * @param float|null $domestic_2_additional_cost Domestic 2 method additional item cost
     *
     * @return self
     */
    public function setDomestic2AdditionalCost($domestic_2_additional_cost)
    {
        $this->container['domestic_2_additional_cost'] = $domestic_2_additional_cost;

        return $this;
    }

    /**
     * Gets domestic_2_first_cost
     *
     * @return float|null
     */
    public function getDomestic2FirstCost()
    {
        return $this->container['domestic_2_first_cost'];
    }

    /**
     * Sets domestic_2_first_cost
     *
     * @param float|null $domestic_2_first_cost Domestic 2 method first item cost
     *
     * @return self
     */
    public function setDomestic2FirstCost($domestic_2_first_cost)
    {
        $this->container['domestic_2_first_cost'] = $domestic_2_first_cost;

        return $this;
    }

    /**
     * Gets domestic_3_additional_cost
     *
     * @return float|null
     */
    public function getDomestic3AdditionalCost()
    {
        return $this->container['domestic_3_additional_cost'];
    }

    /**
     * Sets domestic_3_additional_cost
     *
     * @param float|null $domestic_3_additional_cost Domestic 3 method additional item cost
     *
     * @return self
     */
    public function setDomestic3AdditionalCost($domestic_3_additional_cost)
    {
        $this->container['domestic_3_additional_cost'] = $domestic_3_additional_cost;

        return $this;
    }

    /**
     * Gets domestic_3_first_cost
     *
     * @return float|null
     */
    public function getDomestic3FirstCost()
    {
        return $this->container['domestic_3_first_cost'];
    }

    /**
     * Sets domestic_3_first_cost
     *
     * @param float|null $domestic_3_first_cost Domestic 3 method first item cost
     *
     * @return self
     */
    public function setDomestic3FirstCost($domestic_3_first_cost)
    {
        $this->container['domestic_3_first_cost'] = $domestic_3_first_cost;

        return $this;
    }

    /**
     * Gets domestic_4_additional_cost
     *
     * @return float|null
     */
    public function getDomestic4AdditionalCost()
    {
        return $this->container['domestic_4_additional_cost'];
    }

    /**
     * Sets domestic_4_additional_cost
     *
     * @param float|null $domestic_4_additional_cost Domestic 4 method additional item cost
     *
     * @return self
     */
    public function setDomestic4AdditionalCost($domestic_4_additional_cost)
    {
        $this->container['domestic_4_additional_cost'] = $domestic_4_additional_cost;

        return $this;
    }

    /**
     * Gets domestic_4_first_cost
     *
     * @return float|null
     */
    public function getDomestic4FirstCost()
    {
        return $this->container['domestic_4_first_cost'];
    }

    /**
     * Sets domestic_4_first_cost
     *
     * @param float|null $domestic_4_first_cost Domestic 4 method first item cost
     *
     * @return self
     */
    public function setDomestic4FirstCost($domestic_4_first_cost)
    {
        $this->container['domestic_4_first_cost'] = $domestic_4_first_cost;

        return $this;
    }

    /**
     * Gets ebay_auction_id
     *
     * @return string|null
     */
    public function getEbayAuctionId()
    {
        return $this->container['ebay_auction_id'];
    }

    /**
     * Sets ebay_auction_id
     *
     * @param string|null $ebay_auction_id If listed, this is the e-Bay auction id
     *
     * @return self
     */
    public function setEbayAuctionId($ebay_auction_id)
    {
        $this->container['ebay_auction_id'] = $ebay_auction_id;

        return $this;
    }

    /**
     * Gets ebay_specific_inventory
     *
     * @return int|null
     */
    public function getEbaySpecificInventory()
    {
        return $this->container['ebay_specific_inventory'];
    }

    /**
     * Sets ebay_specific_inventory
     *
     * @param int|null $ebay_specific_inventory e-Bay specific inventory
     *
     * @return self
     */
    public function setEbaySpecificInventory($ebay_specific_inventory)
    {
        $this->container['ebay_specific_inventory'] = $ebay_specific_inventory;

        return $this;
    }

    /**
     * Gets ebay_template_name
     *
     * @return string|null
     */
    public function getEbayTemplateName()
    {
        return $this->container['ebay_template_name'];
    }

    /**
     * Sets ebay_template_name
     *
     * @param string|null $ebay_template_name The template name to use hwen rendering the e-Bay listing
     *
     * @return self
     */
    public function setEbayTemplateName($ebay_template_name)
    {
        $this->container['ebay_template_name'] = $ebay_template_name;

        return $this;
    }

    /**
     * Gets ebay_template_oid
     *
     * @return int|null
     */
    public function getEbayTemplateOid()
    {
        return $this->container['ebay_template_oid'];
    }

    /**
     * Sets ebay_template_oid
     *
     * @param int|null $ebay_template_oid The template object identifier to use when rendering the e-Bay listing
     *
     * @return self
     */
    public function setEbayTemplateOid($ebay_template_oid)
    {
        $this->container['ebay_template_oid'] = $ebay_template_oid;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string|null $end_time Date/time of the auction end
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets free_shipping
     *
     * @return bool|null
     */
    public function getFreeShipping()
    {
        return $this->container['free_shipping'];
    }

    /**
     * Sets free_shipping
     *
     * @param bool|null $free_shipping True if item receives free shipping
     *
     * @return self
     */
    public function setFreeShipping($free_shipping)
    {
        $this->container['free_shipping'] = $free_shipping;

        return $this;
    }

    /**
     * Gets free_shipping_method
     *
     * @return string|null
     */
    public function getFreeShippingMethod()
    {
        return $this->container['free_shipping_method'];
    }

    /**
     * Sets free_shipping_method
     *
     * @param string|null $free_shipping_method The method that is free for free shipping
     *
     * @return self
     */
    public function setFreeShippingMethod($free_shipping_method)
    {
        $this->container['free_shipping_method'] = $free_shipping_method;

        return $this;
    }

    /**
     * Gets international_1_additional_cost
     *
     * @return float|null
     */
    public function getInternational1AdditionalCost()
    {
        return $this->container['international_1_additional_cost'];
    }

    /**
     * Sets international_1_additional_cost
     *
     * @param float|null $international_1_additional_cost International 1 method additional item cost
     *
     * @return self
     */
    public function setInternational1AdditionalCost($international_1_additional_cost)
    {
        $this->container['international_1_additional_cost'] = $international_1_additional_cost;

        return $this;
    }

    /**
     * Gets international_1_first_cost
     *
     * @return float|null
     */
    public function getInternational1FirstCost()
    {
        return $this->container['international_1_first_cost'];
    }

    /**
     * Sets international_1_first_cost
     *
     * @param float|null $international_1_first_cost International 1 method first item cost
     *
     * @return self
     */
    public function setInternational1FirstCost($international_1_first_cost)
    {
        $this->container['international_1_first_cost'] = $international_1_first_cost;

        return $this;
    }

    /**
     * Gets international_2_additional_cost
     *
     * @return float|null
     */
    public function getInternational2AdditionalCost()
    {
        return $this->container['international_2_additional_cost'];
    }

    /**
     * Sets international_2_additional_cost
     *
     * @param float|null $international_2_additional_cost International 2 method additional item cost
     *
     * @return self
     */
    public function setInternational2AdditionalCost($international_2_additional_cost)
    {
        $this->container['international_2_additional_cost'] = $international_2_additional_cost;

        return $this;
    }

    /**
     * Gets international_2_first_cost
     *
     * @return float|null
     */
    public function getInternational2FirstCost()
    {
        return $this->container['international_2_first_cost'];
    }

    /**
     * Sets international_2_first_cost
     *
     * @param float|null $international_2_first_cost International 2 method first item cost
     *
     * @return self
     */
    public function setInternational2FirstCost($international_2_first_cost)
    {
        $this->container['international_2_first_cost'] = $international_2_first_cost;

        return $this;
    }

    /**
     * Gets international_3_additional_cost
     *
     * @return float|null
     */
    public function getInternational3AdditionalCost()
    {
        return $this->container['international_3_additional_cost'];
    }

    /**
     * Sets international_3_additional_cost
     *
     * @param float|null $international_3_additional_cost International 3 method additional item cost
     *
     * @return self
     */
    public function setInternational3AdditionalCost($international_3_additional_cost)
    {
        $this->container['international_3_additional_cost'] = $international_3_additional_cost;

        return $this;
    }

    /**
     * Gets international_3_first_cost
     *
     * @return float|null
     */
    public function getInternational3FirstCost()
    {
        return $this->container['international_3_first_cost'];
    }

    /**
     * Sets international_3_first_cost
     *
     * @param float|null $international_3_first_cost International 3 method first item cost
     *
     * @return self
     */
    public function setInternational3FirstCost($international_3_first_cost)
    {
        $this->container['international_3_first_cost'] = $international_3_first_cost;

        return $this;
    }

    /**
     * Gets international_4_additional_cost
     *
     * @return float|null
     */
    public function getInternational4AdditionalCost()
    {
        return $this->container['international_4_additional_cost'];
    }

    /**
     * Sets international_4_additional_cost
     *
     * @param float|null $international_4_additional_cost International 4 method additional item cost
     *
     * @return self
     */
    public function setInternational4AdditionalCost($international_4_additional_cost)
    {
        $this->container['international_4_additional_cost'] = $international_4_additional_cost;

        return $this;
    }

    /**
     * Gets international_4_first_cost
     *
     * @return float|null
     */
    public function getInternational4FirstCost()
    {
        return $this->container['international_4_first_cost'];
    }

    /**
     * Sets international_4_first_cost
     *
     * @param float|null $international_4_first_cost International 4 method first item cost
     *
     * @return self
     */
    public function setInternational4FirstCost($international_4_first_cost)
    {
        $this->container['international_4_first_cost'] = $international_4_first_cost;

        return $this;
    }

    /**
     * Gets last_status_dts
     *
     * @return string|null
     */
    public function getLastStatusDts()
    {
        return $this->container['last_status_dts'];
    }

    /**
     * Sets last_status_dts
     *
     * @param string|null $last_status_dts Date/time of the last status check
     *
     * @return self
     */
    public function setLastStatusDts($last_status_dts)
    {
        $this->container['last_status_dts'] = $last_status_dts;

        return $this;
    }

    /**
     * Gets listed_dispatch_time_max
     *
     * @return int|null
     */
    public function getListedDispatchTimeMax()
    {
        return $this->container['listed_dispatch_time_max'];
    }

    /**
     * Sets listed_dispatch_time_max
     *
     * @param int|null $listed_dispatch_time_max Current listing dispatch time maximum
     *
     * @return self
     */
    public function setListedDispatchTimeMax($listed_dispatch_time_max)
    {
        $this->container['listed_dispatch_time_max'] = $listed_dispatch_time_max;

        return $this;
    }

    /**
     * Gets listed_ebay_template_oid
     *
     * @return int|null
     */
    public function getListedEbayTemplateOid()
    {
        return $this->container['listed_ebay_template_oid'];
    }

    /**
     * Sets listed_ebay_template_oid
     *
     * @param int|null $listed_ebay_template_oid The template object identifier used for the listing
     *
     * @return self
     */
    public function setListedEbayTemplateOid($listed_ebay_template_oid)
    {
        $this->container['listed_ebay_template_oid'] = $listed_ebay_template_oid;

        return $this;
    }

    /**
     * Gets listing_dts
     *
     * @return string|null
     */
    public function getListingDts()
    {
        return $this->container['listing_dts'];
    }

    /**
     * Sets listing_dts
     *
     * @param string|null $listing_dts Date/time of the listing
     *
     * @return self
     */
    public function setListingDts($listing_dts)
    {
        $this->container['listing_dts'] = $listing_dts;

        return $this;
    }

    /**
     * Gets listing_duration
     *
     * @return string|null
     */
    public function getListingDuration()
    {
        return $this->container['listing_duration'];
    }

    /**
     * Sets listing_duration
     *
     * @param string|null $listing_duration The duration of the listing
     *
     * @return self
     */
    public function setListingDuration($listing_duration)
    {
        $this->container['listing_duration'] = $listing_duration;

        return $this;
    }

    /**
     * Gets listing_price
     *
     * @return float|null
     */
    public function getListingPrice()
    {
        return $this->container['listing_price'];
    }

    /**
     * Sets listing_price
     *
     * @param float|null $listing_price Price to list the item at
     *
     * @return self
     */
    public function setListingPrice($listing_price)
    {
        $this->container['listing_price'] = $listing_price;

        return $this;
    }

    /**
     * Gets listing_price_override
     *
     * @return float|null
     */
    public function getListingPriceOverride()
    {
        return $this->container['listing_price_override'];
    }

    /**
     * Sets listing_price_override
     *
     * @param float|null $listing_price_override The price to list the item at if different than the regular UltraCart item price
     *
     * @return self
     */
    public function setListingPriceOverride($listing_price_override)
    {
        $this->container['listing_price_override'] = $listing_price_override;

        return $this;
    }

    /**
     * Gets listing_type
     *
     * @return string|null
     */
    public function getListingType()
    {
        return $this->container['listing_type'];
    }

    /**
     * Sets listing_type
     *
     * @param string|null $listing_type The type of e-Bay listing
     *
     * @return self
     */
    public function setListingType($listing_type)
    {
        $this->container['listing_type'] = $listing_type;

        return $this;
    }

    /**
     * Gets marketplace_analysis
     *
     * @return \ultracart\v2\models\ItemEbayMarketPlaceAnalysis|null
     */
    public function getMarketplaceAnalysis()
    {
        return $this->container['marketplace_analysis'];
    }

    /**
     * Sets marketplace_analysis
     *
     * @param \ultracart\v2\models\ItemEbayMarketPlaceAnalysis|null $marketplace_analysis marketplace_analysis
     *
     * @return self
     */
    public function setMarketplaceAnalysis($marketplace_analysis)
    {
        $this->container['marketplace_analysis'] = $marketplace_analysis;

        return $this;
    }

    /**
     * Gets marketplace_analysis_perform
     *
     * @return bool|null
     */
    public function getMarketplaceAnalysisPerform()
    {
        return $this->container['marketplace_analysis_perform'];
    }

    /**
     * Sets marketplace_analysis_perform
     *
     * @param bool|null $marketplace_analysis_perform True if marketplace analysis should be performed
     *
     * @return self
     */
    public function setMarketplaceAnalysisPerform($marketplace_analysis_perform)
    {
        $this->container['marketplace_analysis_perform'] = $marketplace_analysis_perform;

        return $this;
    }

    /**
     * Gets marketplace_final_value_fee_percentage
     *
     * @return float|null
     */
    public function getMarketplaceFinalValueFeePercentage()
    {
        return $this->container['marketplace_final_value_fee_percentage'];
    }

    /**
     * Sets marketplace_final_value_fee_percentage
     *
     * @param float|null $marketplace_final_value_fee_percentage Marketplace FVF percentage
     *
     * @return self
     */
    public function setMarketplaceFinalValueFeePercentage($marketplace_final_value_fee_percentage)
    {
        $this->container['marketplace_final_value_fee_percentage'] = $marketplace_final_value_fee_percentage;

        return $this;
    }

    /**
     * Gets marketplace_last_check_dts
     *
     * @return string|null
     */
    public function getMarketplaceLastCheckDts()
    {
        return $this->container['marketplace_last_check_dts'];
    }

    /**
     * Sets marketplace_last_check_dts
     *
     * @param string|null $marketplace_last_check_dts Date/time of the marketplace analysis last check
     *
     * @return self
     */
    public function setMarketplaceLastCheckDts($marketplace_last_check_dts)
    {
        $this->container['marketplace_last_check_dts'] = $marketplace_last_check_dts;

        return $this;
    }

    /**
     * Gets marketplace_lowest
     *
     * @return bool|null
     */
    public function getMarketplaceLowest()
    {
        return $this->container['marketplace_lowest'];
    }

    /**
     * Sets marketplace_lowest
     *
     * @param bool|null $marketplace_lowest True if we are the lowest offer in the marketplace
     *
     * @return self
     */
    public function setMarketplaceLowest($marketplace_lowest)
    {
        $this->container['marketplace_lowest'] = $marketplace_lowest;

        return $this;
    }

    /**
     * Gets marketplace_map_violation
     *
     * @return bool|null
     */
    public function getMarketplaceMapViolation()
    {
        return $this->container['marketplace_map_violation'];
    }

    /**
     * Sets marketplace_map_violation
     *
     * @param bool|null $marketplace_map_violation True if another seller is violating MAP
     *
     * @return self
     */
    public function setMarketplaceMapViolation($marketplace_map_violation)
    {
        $this->container['marketplace_map_violation'] = $marketplace_map_violation;

        return $this;
    }

    /**
     * Gets marketplace_multiplier
     *
     * @return float|null
     */
    public function getMarketplaceMultiplier()
    {
        return $this->container['marketplace_multiplier'];
    }

    /**
     * Sets marketplace_multiplier
     *
     * @param float|null $marketplace_multiplier Marketplace multiplier
     *
     * @return self
     */
    public function setMarketplaceMultiplier($marketplace_multiplier)
    {
        $this->container['marketplace_multiplier'] = $marketplace_multiplier;

        return $this;
    }

    /**
     * Gets marketplace_other_price
     *
     * @return float|null
     */
    public function getMarketplaceOtherPrice()
    {
        return $this->container['marketplace_other_price'];
    }

    /**
     * Sets marketplace_other_price
     *
     * @param float|null $marketplace_other_price Marketplace other price
     *
     * @return self
     */
    public function setMarketplaceOtherPrice($marketplace_other_price)
    {
        $this->container['marketplace_other_price'] = $marketplace_other_price;

        return $this;
    }

    /**
     * Gets marketplace_other_seller
     *
     * @return string|null
     */
    public function getMarketplaceOtherSeller()
    {
        return $this->container['marketplace_other_seller'];
    }

    /**
     * Sets marketplace_other_seller
     *
     * @param string|null $marketplace_other_seller Marketplace other seller
     *
     * @return self
     */
    public function setMarketplaceOtherSeller($marketplace_other_seller)
    {
        $this->container['marketplace_other_seller'] = $marketplace_other_seller;

        return $this;
    }

    /**
     * Gets marketplace_other_shipping
     *
     * @return float|null
     */
    public function getMarketplaceOtherShipping()
    {
        return $this->container['marketplace_other_shipping'];
    }

    /**
     * Sets marketplace_other_shipping
     *
     * @param float|null $marketplace_other_shipping Marketplace other shipping
     *
     * @return self
     */
    public function setMarketplaceOtherShipping($marketplace_other_shipping)
    {
        $this->container['marketplace_other_shipping'] = $marketplace_other_shipping;

        return $this;
    }

    /**
     * Gets marketplace_other_total
     *
     * @return float|null
     */
    public function getMarketplaceOtherTotal()
    {
        return $this->container['marketplace_other_total'];
    }

    /**
     * Sets marketplace_other_total
     *
     * @param float|null $marketplace_other_total Marketplace other total
     *
     * @return self
     */
    public function setMarketplaceOtherTotal($marketplace_other_total)
    {
        $this->container['marketplace_other_total'] = $marketplace_other_total;

        return $this;
    }

    /**
     * Gets marketplace_our_additional_profit_potential
     *
     * @return float|null
     */
    public function getMarketplaceOurAdditionalProfitPotential()
    {
        return $this->container['marketplace_our_additional_profit_potential'];
    }

    /**
     * Sets marketplace_our_additional_profit_potential
     *
     * @param float|null $marketplace_our_additional_profit_potential Marketplace our additional profit potential
     *
     * @return self
     */
    public function setMarketplaceOurAdditionalProfitPotential($marketplace_our_additional_profit_potential)
    {
        $this->container['marketplace_our_additional_profit_potential'] = $marketplace_our_additional_profit_potential;

        return $this;
    }

    /**
     * Gets marketplace_our_price
     *
     * @return float|null
     */
    public function getMarketplaceOurPrice()
    {
        return $this->container['marketplace_our_price'];
    }

    /**
     * Sets marketplace_our_price
     *
     * @param float|null $marketplace_our_price Marketplace our price
     *
     * @return self
     */
    public function setMarketplaceOurPrice($marketplace_our_price)
    {
        $this->container['marketplace_our_price'] = $marketplace_our_price;

        return $this;
    }

    /**
     * Gets marketplace_our_profit
     *
     * @return float|null
     */
    public function getMarketplaceOurProfit()
    {
        return $this->container['marketplace_our_profit'];
    }

    /**
     * Sets marketplace_our_profit
     *
     * @param float|null $marketplace_our_profit Marketplace our profit
     *
     * @return self
     */
    public function setMarketplaceOurProfit($marketplace_our_profit)
    {
        $this->container['marketplace_our_profit'] = $marketplace_our_profit;

        return $this;
    }

    /**
     * Gets marketplace_our_shipping
     *
     * @return float|null
     */
    public function getMarketplaceOurShipping()
    {
        return $this->container['marketplace_our_shipping'];
    }

    /**
     * Sets marketplace_our_shipping
     *
     * @param float|null $marketplace_our_shipping Marketplace our shipping
     *
     * @return self
     */
    public function setMarketplaceOurShipping($marketplace_our_shipping)
    {
        $this->container['marketplace_our_shipping'] = $marketplace_our_shipping;

        return $this;
    }

    /**
     * Gets marketplace_our_total
     *
     * @return float|null
     */
    public function getMarketplaceOurTotal()
    {
        return $this->container['marketplace_our_total'];
    }

    /**
     * Sets marketplace_our_total
     *
     * @param float|null $marketplace_our_total Marketplace our total
     *
     * @return self
     */
    public function setMarketplaceOurTotal($marketplace_our_total)
    {
        $this->container['marketplace_our_total'] = $marketplace_our_total;

        return $this;
    }

    /**
     * Gets marketplace_overhead
     *
     * @return float|null
     */
    public function getMarketplaceOverhead()
    {
        return $this->container['marketplace_overhead'];
    }

    /**
     * Sets marketplace_overhead
     *
     * @param float|null $marketplace_overhead Marketplace overhead
     *
     * @return self
     */
    public function setMarketplaceOverhead($marketplace_overhead)
    {
        $this->container['marketplace_overhead'] = $marketplace_overhead;

        return $this;
    }

    /**
     * Gets marketplace_profitable
     *
     * @return bool|null
     */
    public function getMarketplaceProfitable()
    {
        return $this->container['marketplace_profitable'];
    }

    /**
     * Sets marketplace_profitable
     *
     * @param bool|null $marketplace_profitable True if our listing is profitable to sell
     *
     * @return self
     */
    public function setMarketplaceProfitable($marketplace_profitable)
    {
        $this->container['marketplace_profitable'] = $marketplace_profitable;

        return $this;
    }

    /**
     * Gets next_attempt_dts
     *
     * @return string|null
     */
    public function getNextAttemptDts()
    {
        return $this->container['next_attempt_dts'];
    }

    /**
     * Sets next_attempt_dts
     *
     * @param string|null $next_attempt_dts Date/time for the next attempt to list
     *
     * @return self
     */
    public function setNextAttemptDts($next_attempt_dts)
    {
        $this->container['next_attempt_dts'] = $next_attempt_dts;

        return $this;
    }

    /**
     * Gets next_listing_duration
     *
     * @return string|null
     */
    public function getNextListingDuration()
    {
        return $this->container['next_listing_duration'];
    }

    /**
     * Sets next_listing_duration
     *
     * @param string|null $next_listing_duration The next listing duration to use when the current listing ends.
     *
     * @return self
     */
    public function setNextListingDuration($next_listing_duration)
    {
        $this->container['next_listing_duration'] = $next_listing_duration;

        return $this;
    }

    /**
     * Gets no_promotional_shipping
     *
     * @return bool|null
     */
    public function getNoPromotionalShipping()
    {
        return $this->container['no_promotional_shipping'];
    }

    /**
     * Sets no_promotional_shipping
     *
     * @param bool|null $no_promotional_shipping True if the item should not qualify for promotional shipping
     *
     * @return self
     */
    public function setNoPromotionalShipping($no_promotional_shipping)
    {
        $this->container['no_promotional_shipping'] = $no_promotional_shipping;

        return $this;
    }

    /**
     * Gets packaging_handling_costs
     *
     * @return float|null
     */
    public function getPackagingHandlingCosts()
    {
        return $this->container['packaging_handling_costs'];
    }

    /**
     * Sets packaging_handling_costs
     *
     * @param float|null $packaging_handling_costs Packaging and handling costs
     *
     * @return self
     */
    public function setPackagingHandlingCosts($packaging_handling_costs)
    {
        $this->container['packaging_handling_costs'] = $packaging_handling_costs;

        return $this;
    }

    /**
     * Gets previous_ebay_auction_id
     *
     * @return string|null
     */
    public function getPreviousEbayAuctionId()
    {
        return $this->container['previous_ebay_auction_id'];
    }

    /**
     * Sets previous_ebay_auction_id
     *
     * @param string|null $previous_ebay_auction_id Previous e-Bay auction id
     *
     * @return self
     */
    public function setPreviousEbayAuctionId($previous_ebay_auction_id)
    {
        $this->container['previous_ebay_auction_id'] = $previous_ebay_auction_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Quantity available of the item
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reserve_price
     *
     * @return float|null
     */
    public function getReservePrice()
    {
        return $this->container['reserve_price'];
    }

    /**
     * Sets reserve_price
     *
     * @param float|null $reserve_price Reserve price
     *
     * @return self
     */
    public function setReservePrice($reserve_price)
    {
        $this->container['reserve_price'] = $reserve_price;

        return $this;
    }

    /**
     * Gets send_dimensions_and_weight
     *
     * @return string|null
     */
    public function getSendDimensionsAndWeight()
    {
        return $this->container['send_dimensions_and_weight'];
    }

    /**
     * Sets send_dimensions_and_weight
     *
     * @param string|null $send_dimensions_and_weight How to send the item dimensions and weights to e-Bay
     *
     * @return self
     */
    public function setSendDimensionsAndWeight($send_dimensions_and_weight)
    {
        $this->container['send_dimensions_and_weight'] = $send_dimensions_and_weight;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string|null $start_time Date/time of the auction start
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the item's listing
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets target_dispatch_time_max
     *
     * @return int|null
     */
    public function getTargetDispatchTimeMax()
    {
        return $this->container['target_dispatch_time_max'];
    }

    /**
     * Sets target_dispatch_time_max
     *
     * @param int|null $target_dispatch_time_max Typical number of days it will take to ship the item
     *
     * @return self
     */
    public function setTargetDispatchTimeMax($target_dispatch_time_max)
    {
        $this->container['target_dispatch_time_max'] = $target_dispatch_time_max;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


