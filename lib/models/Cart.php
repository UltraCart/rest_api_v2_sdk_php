<?php
/**
 * Cart
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * Cart Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Cart implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cart';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'affiliate' => '\ultracart\v2\models\CartAffiliate',
        'affiliate_network_pixel_oid' => 'int',
        'base_currency_code' => 'string',
        'billing' => '\ultracart\v2\models\CartBilling',
        'buysafe' => '\ultracart\v2\models\CartBuysafe',
        'cart_id' => 'string',
        'checkout' => '\ultracart\v2\models\CartCheckout',
        'coupons' => '\ultracart\v2\models\CartCoupon[]',
        'currency_code' => 'string',
        'currency_conversion' => '\ultracart\v2\models\CartCurrencyConversion',
        'customer_profile' => '\ultracart\v2\models\CartCustomerProfile',
        'exchange_rate' => 'float',
        'gift' => '\ultracart\v2\models\CartGift',
        'gift_certificate' => '\ultracart\v2\models\CartGiftCertificate',
        'items' => '\ultracart\v2\models\CartItem[]',
        'language_iso_code' => 'string',
        'logged_in' => 'bool',
        'marketing' => '\ultracart\v2\models\CartMarketing',
        'merchant_id' => 'string',
        'payment' => '\ultracart\v2\models\CartPayment',
        'properties' => '\ultracart\v2\models\CartProperty[]',
        'settings' => '\ultracart\v2\models\CartSettings',
        'shipping' => '\ultracart\v2\models\CartShipping',
        'summary' => '\ultracart\v2\models\CartSummary',
        'taxes' => '\ultracart\v2\models\CartTaxes',
        'upsell_after' => '\ultracart\v2\models\CartUpsellAfter'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'affiliate' => null,
        'affiliate_network_pixel_oid' => 'int32',
        'base_currency_code' => null,
        'billing' => null,
        'buysafe' => null,
        'cart_id' => null,
        'checkout' => null,
        'coupons' => null,
        'currency_code' => null,
        'currency_conversion' => null,
        'customer_profile' => null,
        'exchange_rate' => null,
        'gift' => null,
        'gift_certificate' => null,
        'items' => null,
        'language_iso_code' => null,
        'logged_in' => null,
        'marketing' => null,
        'merchant_id' => null,
        'payment' => null,
        'properties' => null,
        'settings' => null,
        'shipping' => null,
        'summary' => null,
        'taxes' => null,
        'upsell_after' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affiliate' => 'affiliate',
        'affiliate_network_pixel_oid' => 'affiliate_network_pixel_oid',
        'base_currency_code' => 'base_currency_code',
        'billing' => 'billing',
        'buysafe' => 'buysafe',
        'cart_id' => 'cart_id',
        'checkout' => 'checkout',
        'coupons' => 'coupons',
        'currency_code' => 'currency_code',
        'currency_conversion' => 'currency_conversion',
        'customer_profile' => 'customer_profile',
        'exchange_rate' => 'exchange_rate',
        'gift' => 'gift',
        'gift_certificate' => 'gift_certificate',
        'items' => 'items',
        'language_iso_code' => 'language_iso_code',
        'logged_in' => 'logged_in',
        'marketing' => 'marketing',
        'merchant_id' => 'merchant_id',
        'payment' => 'payment',
        'properties' => 'properties',
        'settings' => 'settings',
        'shipping' => 'shipping',
        'summary' => 'summary',
        'taxes' => 'taxes',
        'upsell_after' => 'upsell_after'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affiliate' => 'setAffiliate',
        'affiliate_network_pixel_oid' => 'setAffiliateNetworkPixelOid',
        'base_currency_code' => 'setBaseCurrencyCode',
        'billing' => 'setBilling',
        'buysafe' => 'setBuysafe',
        'cart_id' => 'setCartId',
        'checkout' => 'setCheckout',
        'coupons' => 'setCoupons',
        'currency_code' => 'setCurrencyCode',
        'currency_conversion' => 'setCurrencyConversion',
        'customer_profile' => 'setCustomerProfile',
        'exchange_rate' => 'setExchangeRate',
        'gift' => 'setGift',
        'gift_certificate' => 'setGiftCertificate',
        'items' => 'setItems',
        'language_iso_code' => 'setLanguageIsoCode',
        'logged_in' => 'setLoggedIn',
        'marketing' => 'setMarketing',
        'merchant_id' => 'setMerchantId',
        'payment' => 'setPayment',
        'properties' => 'setProperties',
        'settings' => 'setSettings',
        'shipping' => 'setShipping',
        'summary' => 'setSummary',
        'taxes' => 'setTaxes',
        'upsell_after' => 'setUpsellAfter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affiliate' => 'getAffiliate',
        'affiliate_network_pixel_oid' => 'getAffiliateNetworkPixelOid',
        'base_currency_code' => 'getBaseCurrencyCode',
        'billing' => 'getBilling',
        'buysafe' => 'getBuysafe',
        'cart_id' => 'getCartId',
        'checkout' => 'getCheckout',
        'coupons' => 'getCoupons',
        'currency_code' => 'getCurrencyCode',
        'currency_conversion' => 'getCurrencyConversion',
        'customer_profile' => 'getCustomerProfile',
        'exchange_rate' => 'getExchangeRate',
        'gift' => 'getGift',
        'gift_certificate' => 'getGiftCertificate',
        'items' => 'getItems',
        'language_iso_code' => 'getLanguageIsoCode',
        'logged_in' => 'getLoggedIn',
        'marketing' => 'getMarketing',
        'merchant_id' => 'getMerchantId',
        'payment' => 'getPayment',
        'properties' => 'getProperties',
        'settings' => 'getSettings',
        'shipping' => 'getShipping',
        'summary' => 'getSummary',
        'taxes' => 'getTaxes',
        'upsell_after' => 'getUpsellAfter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['affiliate'] = $data['affiliate'] ?? null;
        $this->container['affiliate_network_pixel_oid'] = $data['affiliate_network_pixel_oid'] ?? null;
        $this->container['base_currency_code'] = $data['base_currency_code'] ?? null;
        $this->container['billing'] = $data['billing'] ?? null;
        $this->container['buysafe'] = $data['buysafe'] ?? null;
        $this->container['cart_id'] = $data['cart_id'] ?? null;
        $this->container['checkout'] = $data['checkout'] ?? null;
        $this->container['coupons'] = $data['coupons'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['currency_conversion'] = $data['currency_conversion'] ?? null;
        $this->container['customer_profile'] = $data['customer_profile'] ?? null;
        $this->container['exchange_rate'] = $data['exchange_rate'] ?? null;
        $this->container['gift'] = $data['gift'] ?? null;
        $this->container['gift_certificate'] = $data['gift_certificate'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['language_iso_code'] = $data['language_iso_code'] ?? null;
        $this->container['logged_in'] = $data['logged_in'] ?? null;
        $this->container['marketing'] = $data['marketing'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['payment'] = $data['payment'] ?? null;
        $this->container['properties'] = $data['properties'] ?? null;
        $this->container['settings'] = $data['settings'] ?? null;
        $this->container['shipping'] = $data['shipping'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
        $this->container['taxes'] = $data['taxes'] ?? null;
        $this->container['upsell_after'] = $data['upsell_after'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['base_currency_code']) && (mb_strlen($this->container['base_currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['language_iso_code']) && (mb_strlen($this->container['language_iso_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'language_iso_code', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affiliate
     *
     * @return \ultracart\v2\models\CartAffiliate|null
     */
    public function getAffiliate()
    {
        return $this->container['affiliate'];
    }

    /**
     * Sets affiliate
     *
     * @param \ultracart\v2\models\CartAffiliate|null $affiliate affiliate
     *
     * @return self
     */
    public function setAffiliate($affiliate)
    {
        $this->container['affiliate'] = $affiliate;

        return $this;
    }

    /**
     * Gets affiliate_network_pixel_oid
     *
     * @return int|null
     */
    public function getAffiliateNetworkPixelOid()
    {
        return $this->container['affiliate_network_pixel_oid'];
    }

    /**
     * Sets affiliate_network_pixel_oid
     *
     * @param int|null $affiliate_network_pixel_oid The affiliate network pixel identifier associated with the cart
     *
     * @return self
     */
    public function setAffiliateNetworkPixelOid($affiliate_network_pixel_oid)
    {
        $this->container['affiliate_network_pixel_oid'] = $affiliate_network_pixel_oid;

        return $this;
    }

    /**
     * Gets base_currency_code
     *
     * @return string|null
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['base_currency_code'];
    }

    /**
     * Sets base_currency_code
     *
     * @param string|null $base_currency_code The ISO-4217 three letter base currency code of the account
     *
     * @return self
     */
    public function setBaseCurrencyCode($base_currency_code)
    {
        if (!is_null($base_currency_code) && (mb_strlen($base_currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_currency_code when calling Cart., must be smaller than or equal to 3.');
        }

        $this->container['base_currency_code'] = $base_currency_code;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \ultracart\v2\models\CartBilling|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \ultracart\v2\models\CartBilling|null $billing billing
     *
     * @return self
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets buysafe
     *
     * @return \ultracart\v2\models\CartBuysafe|null
     */
    public function getBuysafe()
    {
        return $this->container['buysafe'];
    }

    /**
     * Sets buysafe
     *
     * @param \ultracart\v2\models\CartBuysafe|null $buysafe buysafe
     *
     * @return self
     */
    public function setBuysafe($buysafe)
    {
        $this->container['buysafe'] = $buysafe;

        return $this;
    }

    /**
     * Gets cart_id
     *
     * @return string|null
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string|null $cart_id Unique identifier for this cart
     *
     * @return self
     */
    public function setCartId($cart_id)
    {
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets checkout
     *
     * @return \ultracart\v2\models\CartCheckout|null
     */
    public function getCheckout()
    {
        return $this->container['checkout'];
    }

    /**
     * Sets checkout
     *
     * @param \ultracart\v2\models\CartCheckout|null $checkout checkout
     *
     * @return self
     */
    public function setCheckout($checkout)
    {
        $this->container['checkout'] = $checkout;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return \ultracart\v2\models\CartCoupon[]|null
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param \ultracart\v2\models\CartCoupon[]|null $coupons Coupons
     *
     * @return self
     */
    public function setCoupons($coupons)
    {
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The ISO-4217 three letter currency code the customer is viewing prices in
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (!is_null($currency_code) && (mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling Cart., must be smaller than or equal to 3.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_conversion
     *
     * @return \ultracart\v2\models\CartCurrencyConversion|null
     */
    public function getCurrencyConversion()
    {
        return $this->container['currency_conversion'];
    }

    /**
     * Sets currency_conversion
     *
     * @param \ultracart\v2\models\CartCurrencyConversion|null $currency_conversion currency_conversion
     *
     * @return self
     */
    public function setCurrencyConversion($currency_conversion)
    {
        $this->container['currency_conversion'] = $currency_conversion;

        return $this;
    }

    /**
     * Gets customer_profile
     *
     * @return \ultracart\v2\models\CartCustomerProfile|null
     */
    public function getCustomerProfile()
    {
        return $this->container['customer_profile'];
    }

    /**
     * Sets customer_profile
     *
     * @param \ultracart\v2\models\CartCustomerProfile|null $customer_profile customer_profile
     *
     * @return self
     */
    public function setCustomerProfile($customer_profile)
    {
        $this->container['customer_profile'] = $customer_profile;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float|null $exchange_rate The exchange rate if the customer is viewing a different currency than the base
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets gift
     *
     * @return \ultracart\v2\models\CartGift|null
     */
    public function getGift()
    {
        return $this->container['gift'];
    }

    /**
     * Sets gift
     *
     * @param \ultracart\v2\models\CartGift|null $gift gift
     *
     * @return self
     */
    public function setGift($gift)
    {
        $this->container['gift'] = $gift;

        return $this;
    }

    /**
     * Gets gift_certificate
     *
     * @return \ultracart\v2\models\CartGiftCertificate|null
     */
    public function getGiftCertificate()
    {
        return $this->container['gift_certificate'];
    }

    /**
     * Sets gift_certificate
     *
     * @param \ultracart\v2\models\CartGiftCertificate|null $gift_certificate gift_certificate
     *
     * @return self
     */
    public function setGiftCertificate($gift_certificate)
    {
        $this->container['gift_certificate'] = $gift_certificate;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \ultracart\v2\models\CartItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \ultracart\v2\models\CartItem[]|null $items Items
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets language_iso_code
     *
     * @return string|null
     */
    public function getLanguageIsoCode()
    {
        return $this->container['language_iso_code'];
    }

    /**
     * Sets language_iso_code
     *
     * @param string|null $language_iso_code The ISO-631 three letter code the customer would like to checkout with
     *
     * @return self
     */
    public function setLanguageIsoCode($language_iso_code)
    {
        if (!is_null($language_iso_code) && (mb_strlen($language_iso_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $language_iso_code when calling Cart., must be smaller than or equal to 3.');
        }

        $this->container['language_iso_code'] = $language_iso_code;

        return $this;
    }

    /**
     * Gets logged_in
     *
     * @return bool|null
     */
    public function getLoggedIn()
    {
        return $this->container['logged_in'];
    }

    /**
     * Sets logged_in
     *
     * @param bool|null $logged_in True if the customer is logged into their profile
     *
     * @return self
     */
    public function setLoggedIn($logged_in)
    {
        $this->container['logged_in'] = $logged_in;

        return $this;
    }

    /**
     * Gets marketing
     *
     * @return \ultracart\v2\models\CartMarketing|null
     */
    public function getMarketing()
    {
        return $this->container['marketing'];
    }

    /**
     * Sets marketing
     *
     * @param \ultracart\v2\models\CartMarketing|null $marketing marketing
     *
     * @return self
     */
    public function setMarketing($marketing)
    {
        $this->container['marketing'] = $marketing;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Merchant ID this cart is associated with
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \ultracart\v2\models\CartPayment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \ultracart\v2\models\CartPayment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \ultracart\v2\models\CartProperty[]|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \ultracart\v2\models\CartProperty[]|null $properties Properties associated with the cart
     *
     * @return self
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \ultracart\v2\models\CartSettings|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \ultracart\v2\models\CartSettings|null $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \ultracart\v2\models\CartShipping|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \ultracart\v2\models\CartShipping|null $shipping shipping
     *
     * @return self
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \ultracart\v2\models\CartSummary|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \ultracart\v2\models\CartSummary|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \ultracart\v2\models\CartTaxes|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \ultracart\v2\models\CartTaxes|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets upsell_after
     *
     * @return \ultracart\v2\models\CartUpsellAfter|null
     */
    public function getUpsellAfter()
    {
        return $this->container['upsell_after'];
    }

    /**
     * Sets upsell_after
     *
     * @param \ultracart\v2\models\CartUpsellAfter|null $upsell_after upsell_after
     *
     * @return self
     */
    public function setUpsellAfter($upsell_after)
    {
        $this->container['upsell_after'] = $upsell_after;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


