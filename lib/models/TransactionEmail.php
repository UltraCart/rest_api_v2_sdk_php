<?php
/**
 * TransactionEmail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * TransactionEmail Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionEmail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionEmail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'content' => 'string',
        'esp_domain_uuid' => 'string',
        'esp_friendly_name' => 'string',
        'esp_user' => 'string',
        'file_exists' => 'bool',
        'file_name' => 'string',
        'group' => 'string',
        'handlebar_variables' => 'string[]',
        'invalid' => 'bool',
        'last_modified' => 'string',
        'library_item_oid' => 'int',
        'options' => '\ultracart\v2\models\TransactionEmailOption[]',
        'path' => 'string',
        'size' => 'string',
        'store_front_fs_directory_oid' => 'int',
        'store_front_fs_file_oid' => 'int',
        'subject' => 'string',
        'syntax_errors' => 'string',
        'template_path_relative_path' => 'string',
        'theme_relative_path' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'content' => null,
        'esp_domain_uuid' => null,
        'esp_friendly_name' => null,
        'esp_user' => null,
        'file_exists' => null,
        'file_name' => null,
        'group' => null,
        'handlebar_variables' => null,
        'invalid' => null,
        'last_modified' => 'dateTime',
        'library_item_oid' => 'int32',
        'options' => null,
        'path' => null,
        'size' => null,
        'store_front_fs_directory_oid' => 'int32',
        'store_front_fs_file_oid' => 'int32',
        'subject' => null,
        'syntax_errors' => null,
        'template_path_relative_path' => null,
        'theme_relative_path' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'content',
        'esp_domain_uuid' => 'esp_domain_uuid',
        'esp_friendly_name' => 'esp_friendly_name',
        'esp_user' => 'esp_user',
        'file_exists' => 'file_exists',
        'file_name' => 'file_name',
        'group' => 'group',
        'handlebar_variables' => 'handlebar_variables',
        'invalid' => 'invalid',
        'last_modified' => 'last_modified',
        'library_item_oid' => 'library_item_oid',
        'options' => 'options',
        'path' => 'path',
        'size' => 'size',
        'store_front_fs_directory_oid' => 'store_front_fs_directory_oid',
        'store_front_fs_file_oid' => 'store_front_fs_file_oid',
        'subject' => 'subject',
        'syntax_errors' => 'syntax_errors',
        'template_path_relative_path' => 'template_path_relative_path',
        'theme_relative_path' => 'theme_relative_path'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
        'esp_domain_uuid' => 'setEspDomainUuid',
        'esp_friendly_name' => 'setEspFriendlyName',
        'esp_user' => 'setEspUser',
        'file_exists' => 'setFileExists',
        'file_name' => 'setFileName',
        'group' => 'setGroup',
        'handlebar_variables' => 'setHandlebarVariables',
        'invalid' => 'setInvalid',
        'last_modified' => 'setLastModified',
        'library_item_oid' => 'setLibraryItemOid',
        'options' => 'setOptions',
        'path' => 'setPath',
        'size' => 'setSize',
        'store_front_fs_directory_oid' => 'setStoreFrontFsDirectoryOid',
        'store_front_fs_file_oid' => 'setStoreFrontFsFileOid',
        'subject' => 'setSubject',
        'syntax_errors' => 'setSyntaxErrors',
        'template_path_relative_path' => 'setTemplatePathRelativePath',
        'theme_relative_path' => 'setThemeRelativePath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
        'esp_domain_uuid' => 'getEspDomainUuid',
        'esp_friendly_name' => 'getEspFriendlyName',
        'esp_user' => 'getEspUser',
        'file_exists' => 'getFileExists',
        'file_name' => 'getFileName',
        'group' => 'getGroup',
        'handlebar_variables' => 'getHandlebarVariables',
        'invalid' => 'getInvalid',
        'last_modified' => 'getLastModified',
        'library_item_oid' => 'getLibraryItemOid',
        'options' => 'getOptions',
        'path' => 'getPath',
        'size' => 'getSize',
        'store_front_fs_directory_oid' => 'getStoreFrontFsDirectoryOid',
        'store_front_fs_file_oid' => 'getStoreFrontFsFileOid',
        'subject' => 'getSubject',
        'syntax_errors' => 'getSyntaxErrors',
        'template_path_relative_path' => 'getTemplatePathRelativePath',
        'theme_relative_path' => 'getThemeRelativePath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content'] = $data['content'] ?? null;
        $this->container['esp_domain_uuid'] = $data['esp_domain_uuid'] ?? null;
        $this->container['esp_friendly_name'] = $data['esp_friendly_name'] ?? null;
        $this->container['esp_user'] = $data['esp_user'] ?? null;
        $this->container['file_exists'] = $data['file_exists'] ?? null;
        $this->container['file_name'] = $data['file_name'] ?? null;
        $this->container['group'] = $data['group'] ?? null;
        $this->container['handlebar_variables'] = $data['handlebar_variables'] ?? null;
        $this->container['invalid'] = $data['invalid'] ?? null;
        $this->container['last_modified'] = $data['last_modified'] ?? null;
        $this->container['library_item_oid'] = $data['library_item_oid'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['path'] = $data['path'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['store_front_fs_directory_oid'] = $data['store_front_fs_directory_oid'] ?? null;
        $this->container['store_front_fs_file_oid'] = $data['store_front_fs_file_oid'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['syntax_errors'] = $data['syntax_errors'] ?? null;
        $this->container['template_path_relative_path'] = $data['template_path_relative_path'] ?? null;
        $this->container['theme_relative_path'] = $data['theme_relative_path'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Actual template contents
     *
     * @return self
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets esp_domain_uuid
     *
     * @return string|null
     */
    public function getEspDomainUuid()
    {
        return $this->container['esp_domain_uuid'];
    }

    /**
     * Sets esp_domain_uuid
     *
     * @param string|null $esp_domain_uuid The uuid of the sending domain
     *
     * @return self
     */
    public function setEspDomainUuid($esp_domain_uuid)
    {
        $this->container['esp_domain_uuid'] = $esp_domain_uuid;

        return $this;
    }

    /**
     * Gets esp_friendly_name
     *
     * @return string|null
     */
    public function getEspFriendlyName()
    {
        return $this->container['esp_friendly_name'];
    }

    /**
     * Sets esp_friendly_name
     *
     * @param string|null $esp_friendly_name Friendly from that will appear in customer email clients.
     *
     * @return self
     */
    public function setEspFriendlyName($esp_friendly_name)
    {
        $this->container['esp_friendly_name'] = $esp_friendly_name;

        return $this;
    }

    /**
     * Gets esp_user
     *
     * @return string|null
     */
    public function getEspUser()
    {
        return $this->container['esp_user'];
    }

    /**
     * Sets esp_user
     *
     * @param string|null $esp_user The username of the sending email.  This is not the full email.  Only the username which is everything before the @ sign.
     *
     * @return self
     */
    public function setEspUser($esp_user)
    {
        $this->container['esp_user'] = $esp_user;

        return $this;
    }

    /**
     * Gets file_exists
     *
     * @return bool|null
     */
    public function getFileExists()
    {
        return $this->container['file_exists'];
    }

    /**
     * Sets file_exists
     *
     * @param bool|null $file_exists An internal identifier used to aid in retrieving templates from the filesystem.
     *
     * @return self
     */
    public function setFileExists($file_exists)
    {
        $this->container['file_exists'] = $file_exists;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name File name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string|null $group Group
     *
     * @return self
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets handlebar_variables
     *
     * @return string[]|null
     */
    public function getHandlebarVariables()
    {
        return $this->container['handlebar_variables'];
    }

    /**
     * Sets handlebar_variables
     *
     * @param string[]|null $handlebar_variables Handlebar Variables available for email template
     *
     * @return self
     */
    public function setHandlebarVariables($handlebar_variables)
    {
        $this->container['handlebar_variables'] = $handlebar_variables;

        return $this;
    }

    /**
     * Gets invalid
     *
     * @return bool|null
     */
    public function getInvalid()
    {
        return $this->container['invalid'];
    }

    /**
     * Sets invalid
     *
     * @param bool|null $invalid Invalid will be true if the template cannot compile
     *
     * @return self
     */
    public function setInvalid($invalid)
    {
        $this->container['invalid'] = $invalid;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return string|null
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param string|null $last_modified Last modified timestamp
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets library_item_oid
     *
     * @return int|null
     */
    public function getLibraryItemOid()
    {
        return $this->container['library_item_oid'];
    }

    /**
     * Sets library_item_oid
     *
     * @param int|null $library_item_oid If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.
     *
     * @return self
     */
    public function setLibraryItemOid($library_item_oid)
    {
        $this->container['library_item_oid'] = $library_item_oid;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \ultracart\v2\models\TransactionEmailOption[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \ultracart\v2\models\TransactionEmailOption[]|null $options Options that help govern how and when this template is used
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path directory path where template is stored in file system
     *
     * @return self
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size Size of file in friendly description
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets store_front_fs_directory_oid
     *
     * @return int|null
     */
    public function getStoreFrontFsDirectoryOid()
    {
        return $this->container['store_front_fs_directory_oid'];
    }

    /**
     * Sets store_front_fs_directory_oid
     *
     * @param int|null $store_front_fs_directory_oid Internal identifier used to store and retrieve template from filesystem
     *
     * @return self
     */
    public function setStoreFrontFsDirectoryOid($store_front_fs_directory_oid)
    {
        $this->container['store_front_fs_directory_oid'] = $store_front_fs_directory_oid;

        return $this;
    }

    /**
     * Gets store_front_fs_file_oid
     *
     * @return int|null
     */
    public function getStoreFrontFsFileOid()
    {
        return $this->container['store_front_fs_file_oid'];
    }

    /**
     * Sets store_front_fs_file_oid
     *
     * @param int|null $store_front_fs_file_oid Internal identifier used to store and retrieve template from filesystem
     *
     * @return self
     */
    public function setStoreFrontFsFileOid($store_front_fs_file_oid)
    {
        $this->container['store_front_fs_file_oid'] = $store_front_fs_file_oid;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets syntax_errors
     *
     * @return string|null
     */
    public function getSyntaxErrors()
    {
        return $this->container['syntax_errors'];
    }

    /**
     * Sets syntax_errors
     *
     * @param string|null $syntax_errors Any syntax errors contained within the tempalate
     *
     * @return self
     */
    public function setSyntaxErrors($syntax_errors)
    {
        $this->container['syntax_errors'] = $syntax_errors;

        return $this;
    }

    /**
     * Gets template_path_relative_path
     *
     * @return string|null
     */
    public function getTemplatePathRelativePath()
    {
        return $this->container['template_path_relative_path'];
    }

    /**
     * Sets template_path_relative_path
     *
     * @param string|null $template_path_relative_path Internal value used to locate the template in the filesystem
     *
     * @return self
     */
    public function setTemplatePathRelativePath($template_path_relative_path)
    {
        $this->container['template_path_relative_path'] = $template_path_relative_path;

        return $this;
    }

    /**
     * Gets theme_relative_path
     *
     * @return string|null
     */
    public function getThemeRelativePath()
    {
        return $this->container['theme_relative_path'];
    }

    /**
     * Sets theme_relative_path
     *
     * @param string|null $theme_relative_path Theme relative path in the filesystem.
     *
     * @return self
     */
    public function setThemeRelativePath($theme_relative_path)
    {
        $this->container['theme_relative_path'] = $theme_relative_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


