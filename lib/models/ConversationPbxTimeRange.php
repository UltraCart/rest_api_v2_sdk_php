<?php
/**
 * ConversationPbxTimeRange
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationPbxTimeRange Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConversationPbxTimeRange implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConversationPbxTimeRange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'configs' => '\ultracart\v2\models\ConversationPbxTimeRangeConfig[]',
        'conversation_pbx_time_range_uuid' => 'string',
        'merchant_id' => 'string',
        'time_range_name' => 'string',
        'timezone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'configs' => null,
        'conversation_pbx_time_range_uuid' => null,
        'merchant_id' => null,
        'time_range_name' => null,
        'timezone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'configs' => 'configs',
        'conversation_pbx_time_range_uuid' => 'conversation_pbx_time_range_uuid',
        'merchant_id' => 'merchant_id',
        'time_range_name' => 'time_range_name',
        'timezone' => 'timezone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'configs' => 'setConfigs',
        'conversation_pbx_time_range_uuid' => 'setConversationPbxTimeRangeUuid',
        'merchant_id' => 'setMerchantId',
        'time_range_name' => 'setTimeRangeName',
        'timezone' => 'setTimezone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'configs' => 'getConfigs',
        'conversation_pbx_time_range_uuid' => 'getConversationPbxTimeRangeUuid',
        'merchant_id' => 'getMerchantId',
        'time_range_name' => 'getTimeRangeName',
        'timezone' => 'getTimezone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['configs'] = $data['configs'] ?? null;
        $this->container['conversation_pbx_time_range_uuid'] = $data['conversation_pbx_time_range_uuid'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['time_range_name'] = $data['time_range_name'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['conversation_pbx_time_range_uuid']) && (mb_strlen($this->container['conversation_pbx_time_range_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'conversation_pbx_time_range_uuid', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['merchant_id']) && (mb_strlen($this->container['merchant_id']) > 5)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['time_range_name']) && (mb_strlen($this->container['time_range_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'time_range_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['timezone']) && (mb_strlen($this->container['timezone']) > 100)) {
            $invalidProperties[] = "invalid value for 'timezone', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets configs
     *
     * @return \ultracart\v2\models\ConversationPbxTimeRangeConfig[]|null
     */
    public function getConfigs()
    {
        return $this->container['configs'];
    }

    /**
     * Sets configs
     *
     * @param \ultracart\v2\models\ConversationPbxTimeRangeConfig[]|null $configs Configurations for all ranges in this time range
     *
     * @return self
     */
    public function setConfigs($configs)
    {
        $this->container['configs'] = $configs;

        return $this;
    }

    /**
     * Gets conversation_pbx_time_range_uuid
     *
     * @return string|null
     */
    public function getConversationPbxTimeRangeUuid()
    {
        return $this->container['conversation_pbx_time_range_uuid'];
    }

    /**
     * Sets conversation_pbx_time_range_uuid
     *
     * @param string|null $conversation_pbx_time_range_uuid Conversation Pbx Time Range UUID
     *
     * @return self
     */
    public function setConversationPbxTimeRangeUuid($conversation_pbx_time_range_uuid)
    {
        if (!is_null($conversation_pbx_time_range_uuid) && (mb_strlen($conversation_pbx_time_range_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $conversation_pbx_time_range_uuid when calling ConversationPbxTimeRange., must be smaller than or equal to 50.');
        }

        $this->container['conversation_pbx_time_range_uuid'] = $conversation_pbx_time_range_uuid;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Merchant Id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (!is_null($merchant_id) && (mb_strlen($merchant_id) > 5)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling ConversationPbxTimeRange., must be smaller than or equal to 5.');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets time_range_name
     *
     * @return string|null
     */
    public function getTimeRangeName()
    {
        return $this->container['time_range_name'];
    }

    /**
     * Sets time_range_name
     *
     * @param string|null $time_range_name Time range name
     *
     * @return self
     */
    public function setTimeRangeName($time_range_name)
    {
        if (!is_null($time_range_name) && (mb_strlen($time_range_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $time_range_name when calling ConversationPbxTimeRange., must be smaller than or equal to 50.');
        }

        $this->container['time_range_name'] = $time_range_name;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (!is_null($timezone) && (mb_strlen($timezone) > 100)) {
            throw new \InvalidArgumentException('invalid length for $timezone when calling ConversationPbxTimeRange., must be smaller than or equal to 100.');
        }

        $this->container['timezone'] = $timezone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


