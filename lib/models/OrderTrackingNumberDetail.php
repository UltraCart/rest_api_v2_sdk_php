<?php
/**
 * OrderTrackingNumberDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderTrackingNumberDetail Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderTrackingNumberDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderTrackingNumberDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'city' => 'string',
        'event_dts' => 'string',
        'event_local_date' => 'string',
        'event_local_time' => 'string',
        'event_timezone_id' => 'string',
        'state' => 'string',
        'subtag' => 'string',
        'subtag_message' => 'string',
        'tag' => 'string',
        'tag_description' => 'string',
        'tag_icon' => 'string',
        'zip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'city' => null,
        'event_dts' => 'dateTime',
        'event_local_date' => null,
        'event_local_time' => null,
        'event_timezone_id' => null,
        'state' => null,
        'subtag' => null,
        'subtag_message' => null,
        'tag' => null,
        'tag_description' => null,
        'tag_icon' => null,
        'zip' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'city' => 'city',
        'event_dts' => 'event_dts',
        'event_local_date' => 'event_local_date',
        'event_local_time' => 'event_local_time',
        'event_timezone_id' => 'event_timezone_id',
        'state' => 'state',
        'subtag' => 'subtag',
        'subtag_message' => 'subtag_message',
        'tag' => 'tag',
        'tag_description' => 'tag_description',
        'tag_icon' => 'tag_icon',
        'zip' => 'zip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'city' => 'setCity',
        'event_dts' => 'setEventDts',
        'event_local_date' => 'setEventLocalDate',
        'event_local_time' => 'setEventLocalTime',
        'event_timezone_id' => 'setEventTimezoneId',
        'state' => 'setState',
        'subtag' => 'setSubtag',
        'subtag_message' => 'setSubtagMessage',
        'tag' => 'setTag',
        'tag_description' => 'setTagDescription',
        'tag_icon' => 'setTagIcon',
        'zip' => 'setZip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'city' => 'getCity',
        'event_dts' => 'getEventDts',
        'event_local_date' => 'getEventLocalDate',
        'event_local_time' => 'getEventLocalTime',
        'event_timezone_id' => 'getEventTimezoneId',
        'state' => 'getState',
        'subtag' => 'getSubtag',
        'subtag_message' => 'getSubtagMessage',
        'tag' => 'getTag',
        'tag_description' => 'getTagDescription',
        'tag_icon' => 'getTagIcon',
        'zip' => 'getZip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['city'] = $data['city'] ?? null;
        $this->container['event_dts'] = $data['event_dts'] ?? null;
        $this->container['event_local_date'] = $data['event_local_date'] ?? null;
        $this->container['event_local_time'] = $data['event_local_time'] ?? null;
        $this->container['event_timezone_id'] = $data['event_timezone_id'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['subtag'] = $data['subtag'] ?? null;
        $this->container['subtag_message'] = $data['subtag_message'] ?? null;
        $this->container['tag'] = $data['tag'] ?? null;
        $this->container['tag_description'] = $data['tag_description'] ?? null;
        $this->container['tag_icon'] = $data['tag_icon'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets event_dts
     *
     * @return string|null
     */
    public function getEventDts()
    {
        return $this->container['event_dts'];
    }

    /**
     * Sets event_dts
     *
     * @param string|null $event_dts ISO 8601 timestamp that the event occurred
     *
     * @return self
     */
    public function setEventDts($event_dts)
    {
        $this->container['event_dts'] = $event_dts;

        return $this;
    }

    /**
     * Gets event_local_date
     *
     * @return string|null
     */
    public function getEventLocalDate()
    {
        return $this->container['event_local_date'];
    }

    /**
     * Sets event_local_date
     *
     * @param string|null $event_local_date event_local_date
     *
     * @return self
     */
    public function setEventLocalDate($event_local_date)
    {
        $this->container['event_local_date'] = $event_local_date;

        return $this;
    }

    /**
     * Gets event_local_time
     *
     * @return string|null
     */
    public function getEventLocalTime()
    {
        return $this->container['event_local_time'];
    }

    /**
     * Sets event_local_time
     *
     * @param string|null $event_local_time event_local_time
     *
     * @return self
     */
    public function setEventLocalTime($event_local_time)
    {
        $this->container['event_local_time'] = $event_local_time;

        return $this;
    }

    /**
     * Gets event_timezone_id
     *
     * @return string|null
     */
    public function getEventTimezoneId()
    {
        return $this->container['event_timezone_id'];
    }

    /**
     * Sets event_timezone_id
     *
     * @param string|null $event_timezone_id Timezone the event occurred in.  Use this in conjunction with event_dts to format a local date/time.
     *
     * @return self
     */
    public function setEventTimezoneId($event_timezone_id)
    {
        $this->container['event_timezone_id'] = $event_timezone_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets subtag
     *
     * @return string|null
     */
    public function getSubtag()
    {
        return $this->container['subtag'];
    }

    /**
     * Sets subtag
     *
     * @param string|null $subtag subtag
     *
     * @return self
     */
    public function setSubtag($subtag)
    {
        $this->container['subtag'] = $subtag;

        return $this;
    }

    /**
     * Gets subtag_message
     *
     * @return string|null
     */
    public function getSubtagMessage()
    {
        return $this->container['subtag_message'];
    }

    /**
     * Sets subtag_message
     *
     * @param string|null $subtag_message subtag_message
     *
     * @return self
     */
    public function setSubtagMessage($subtag_message)
    {
        $this->container['subtag_message'] = $subtag_message;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag tag
     *
     * @return self
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets tag_description
     *
     * @return string|null
     */
    public function getTagDescription()
    {
        return $this->container['tag_description'];
    }

    /**
     * Sets tag_description
     *
     * @param string|null $tag_description tag_description
     *
     * @return self
     */
    public function setTagDescription($tag_description)
    {
        $this->container['tag_description'] = $tag_description;

        return $this;
    }

    /**
     * Gets tag_icon
     *
     * @return string|null
     */
    public function getTagIcon()
    {
        return $this->container['tag_icon'];
    }

    /**
     * Sets tag_icon
     *
     * @param string|null $tag_icon tag_icon
     *
     * @return self
     */
    public function setTagIcon($tag_icon)
    {
        $this->container['tag_icon'] = $tag_icon;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


