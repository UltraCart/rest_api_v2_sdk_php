<?php
/**
 * CustomerReviewer
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomerReviewer Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerReviewer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerReviewer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_approve' => 'bool',
        'average_overall_rating' => 'float',
        'expert' => 'bool',
        'first_review' => 'string',
        'last_review' => 'string',
        'location' => 'string',
        'nickname' => 'string',
        'number_helpful_review_votes' => 'int',
        'rank' => 'int',
        'reviews_contributed' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_approve' => null,
        'average_overall_rating' => null,
        'expert' => null,
        'first_review' => 'dateTime',
        'last_review' => 'dateTime',
        'location' => null,
        'nickname' => null,
        'number_helpful_review_votes' => 'int32',
        'rank' => 'int32',
        'reviews_contributed' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_approve' => 'auto_approve',
        'average_overall_rating' => 'average_overall_rating',
        'expert' => 'expert',
        'first_review' => 'first_review',
        'last_review' => 'last_review',
        'location' => 'location',
        'nickname' => 'nickname',
        'number_helpful_review_votes' => 'number_helpful_review_votes',
        'rank' => 'rank',
        'reviews_contributed' => 'reviews_contributed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_approve' => 'setAutoApprove',
        'average_overall_rating' => 'setAverageOverallRating',
        'expert' => 'setExpert',
        'first_review' => 'setFirstReview',
        'last_review' => 'setLastReview',
        'location' => 'setLocation',
        'nickname' => 'setNickname',
        'number_helpful_review_votes' => 'setNumberHelpfulReviewVotes',
        'rank' => 'setRank',
        'reviews_contributed' => 'setReviewsContributed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_approve' => 'getAutoApprove',
        'average_overall_rating' => 'getAverageOverallRating',
        'expert' => 'getExpert',
        'first_review' => 'getFirstReview',
        'last_review' => 'getLastReview',
        'location' => 'getLocation',
        'nickname' => 'getNickname',
        'number_helpful_review_votes' => 'getNumberHelpfulReviewVotes',
        'rank' => 'getRank',
        'reviews_contributed' => 'getReviewsContributed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_approve'] = isset($data['auto_approve']) ? $data['auto_approve'] : null;
        $this->container['average_overall_rating'] = isset($data['average_overall_rating']) ? $data['average_overall_rating'] : null;
        $this->container['expert'] = isset($data['expert']) ? $data['expert'] : null;
        $this->container['first_review'] = isset($data['first_review']) ? $data['first_review'] : null;
        $this->container['last_review'] = isset($data['last_review']) ? $data['last_review'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['number_helpful_review_votes'] = isset($data['number_helpful_review_votes']) ? $data['number_helpful_review_votes'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
        $this->container['reviews_contributed'] = isset($data['reviews_contributed']) ? $data['reviews_contributed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets auto_approve
     *
     * @return bool
     */
    public function getAutoApprove()
    {
        return $this->container['auto_approve'];
    }

    /**
     * Sets auto_approve
     *
     * @param bool $auto_approve True if reviewes from this customer profile should automatically be approved
     *
     * @return $this
     */
    public function setAutoApprove($auto_approve)
    {
        $this->container['auto_approve'] = $auto_approve;

        return $this;
    }

    /**
     * Gets average_overall_rating
     *
     * @return float
     */
    public function getAverageOverallRating()
    {
        return $this->container['average_overall_rating'];
    }

    /**
     * Sets average_overall_rating
     *
     * @param float $average_overall_rating Average overall rating of items reviewed
     *
     * @return $this
     */
    public function setAverageOverallRating($average_overall_rating)
    {
        $this->container['average_overall_rating'] = $average_overall_rating;

        return $this;
    }

    /**
     * Gets expert
     *
     * @return bool
     */
    public function getExpert()
    {
        return $this->container['expert'];
    }

    /**
     * Sets expert
     *
     * @param bool $expert True if the customer is an expert
     *
     * @return $this
     */
    public function setExpert($expert)
    {
        $this->container['expert'] = $expert;

        return $this;
    }

    /**
     * Gets first_review
     *
     * @return string
     */
    public function getFirstReview()
    {
        return $this->container['first_review'];
    }

    /**
     * Sets first_review
     *
     * @param string $first_review First review
     *
     * @return $this
     */
    public function setFirstReview($first_review)
    {
        $this->container['first_review'] = $first_review;

        return $this;
    }

    /**
     * Gets last_review
     *
     * @return string
     */
    public function getLastReview()
    {
        return $this->container['last_review'];
    }

    /**
     * Sets last_review
     *
     * @param string $last_review Last review
     *
     * @return $this
     */
    public function setLastReview($last_review)
    {
        $this->container['last_review'] = $last_review;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Location of the reviewer
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname Nickname of the reviewer
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets number_helpful_review_votes
     *
     * @return int
     */
    public function getNumberHelpfulReviewVotes()
    {
        return $this->container['number_helpful_review_votes'];
    }

    /**
     * Sets number_helpful_review_votes
     *
     * @param int $number_helpful_review_votes Number of helpful review votes
     *
     * @return $this
     */
    public function setNumberHelpfulReviewVotes($number_helpful_review_votes)
    {
        $this->container['number_helpful_review_votes'] = $number_helpful_review_votes;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int $rank Rank of this reviewer
     *
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets reviews_contributed
     *
     * @return int
     */
    public function getReviewsContributed()
    {
        return $this->container['reviews_contributed'];
    }

    /**
     * Sets reviews_contributed
     *
     * @param int $reviews_contributed Number of reviews contributed
     *
     * @return $this
     */
    public function setReviewsContributed($reviews_contributed)
    {
        $this->container['reviews_contributed'] = $reviews_contributed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


