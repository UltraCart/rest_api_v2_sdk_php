<?php
/**
 * AvalaraConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * AvalaraConfig Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AvalaraConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AvalaraConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'active' => 'bool',
        'avalara_oid' => 'int',
        'company_id' => 'string',
        'enable_upc' => 'bool',
        'estimate_only' => 'bool',
        'guest_customer_code' => 'string',
        'last_test_dts' => 'string',
        'license_key' => 'string',
        'sandbox' => 'bool',
        'send_test_orders' => 'bool',
        'service_url' => 'string',
        'test_results' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'active' => null,
        'avalara_oid' => 'int32',
        'company_id' => null,
        'enable_upc' => null,
        'estimate_only' => null,
        'guest_customer_code' => null,
        'last_test_dts' => 'dateTime',
        'license_key' => null,
        'sandbox' => null,
        'send_test_orders' => null,
        'service_url' => null,
        'test_results' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'active' => 'active',
        'avalara_oid' => 'avalara_oid',
        'company_id' => 'company_id',
        'enable_upc' => 'enable_upc',
        'estimate_only' => 'estimate_only',
        'guest_customer_code' => 'guest_customer_code',
        'last_test_dts' => 'last_test_dts',
        'license_key' => 'license_key',
        'sandbox' => 'sandbox',
        'send_test_orders' => 'send_test_orders',
        'service_url' => 'service_url',
        'test_results' => 'test_results'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'active' => 'setActive',
        'avalara_oid' => 'setAvalaraOid',
        'company_id' => 'setCompanyId',
        'enable_upc' => 'setEnableUpc',
        'estimate_only' => 'setEstimateOnly',
        'guest_customer_code' => 'setGuestCustomerCode',
        'last_test_dts' => 'setLastTestDts',
        'license_key' => 'setLicenseKey',
        'sandbox' => 'setSandbox',
        'send_test_orders' => 'setSendTestOrders',
        'service_url' => 'setServiceUrl',
        'test_results' => 'setTestResults'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'active' => 'getActive',
        'avalara_oid' => 'getAvalaraOid',
        'company_id' => 'getCompanyId',
        'enable_upc' => 'getEnableUpc',
        'estimate_only' => 'getEstimateOnly',
        'guest_customer_code' => 'getGuestCustomerCode',
        'last_test_dts' => 'getLastTestDts',
        'license_key' => 'getLicenseKey',
        'sandbox' => 'getSandbox',
        'send_test_orders' => 'getSendTestOrders',
        'service_url' => 'getServiceUrl',
        'test_results' => 'getTestResults'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['avalara_oid'] = $data['avalara_oid'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['enable_upc'] = $data['enable_upc'] ?? null;
        $this->container['estimate_only'] = $data['estimate_only'] ?? null;
        $this->container['guest_customer_code'] = $data['guest_customer_code'] ?? null;
        $this->container['last_test_dts'] = $data['last_test_dts'] ?? null;
        $this->container['license_key'] = $data['license_key'] ?? null;
        $this->container['sandbox'] = $data['sandbox'] ?? null;
        $this->container['send_test_orders'] = $data['send_test_orders'] ?? null;
        $this->container['service_url'] = $data['service_url'] ?? null;
        $this->container['test_results'] = $data['test_results'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id Avalara account ID
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active True if Avalara is active for this merchant
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets avalara_oid
     *
     * @return int|null
     */
    public function getAvalaraOid()
    {
        return $this->container['avalara_oid'];
    }

    /**
     * Sets avalara_oid
     *
     * @param int|null $avalara_oid Unique identifier for this avalara config object
     *
     * @return self
     */
    public function setAvalaraOid($avalara_oid)
    {
        $this->container['avalara_oid'] = $avalara_oid;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id Avalara company ID
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets enable_upc
     *
     * @return bool|null
     */
    public function getEnableUpc()
    {
        return $this->container['enable_upc'];
    }

    /**
     * Sets enable_upc
     *
     * @param bool|null $enable_upc True if this Avalara configuration is set to enable tax valuation by UPC
     *
     * @return self
     */
    public function setEnableUpc($enable_upc)
    {
        $this->container['enable_upc'] = $enable_upc;

        return $this;
    }

    /**
     * Gets estimate_only
     *
     * @return bool|null
     */
    public function getEstimateOnly()
    {
        return $this->container['estimate_only'];
    }

    /**
     * Sets estimate_only
     *
     * @param bool|null $estimate_only True if this Avalara configuration is to estimate taxes only and not report placed orders to Avalara
     *
     * @return self
     */
    public function setEstimateOnly($estimate_only)
    {
        $this->container['estimate_only'] = $estimate_only;

        return $this;
    }

    /**
     * Gets guest_customer_code
     *
     * @return string|null
     */
    public function getGuestCustomerCode()
    {
        return $this->container['guest_customer_code'];
    }

    /**
     * Sets guest_customer_code
     *
     * @param string|null $guest_customer_code Optional customer code for customers without profiles, defaults to GuestCustomer
     *
     * @return self
     */
    public function setGuestCustomerCode($guest_customer_code)
    {
        $this->container['guest_customer_code'] = $guest_customer_code;

        return $this;
    }

    /**
     * Gets last_test_dts
     *
     * @return string|null
     */
    public function getLastTestDts()
    {
        return $this->container['last_test_dts'];
    }

    /**
     * Sets last_test_dts
     *
     * @param string|null $last_test_dts Date/time of the connection test to Avalara
     *
     * @return self
     */
    public function setLastTestDts($last_test_dts)
    {
        $this->container['last_test_dts'] = $last_test_dts;

        return $this;
    }

    /**
     * Gets license_key
     *
     * @return string|null
     */
    public function getLicenseKey()
    {
        return $this->container['license_key'];
    }

    /**
     * Sets license_key
     *
     * @param string|null $license_key Avalara license key
     *
     * @return self
     */
    public function setLicenseKey($license_key)
    {
        $this->container['license_key'] = $license_key;

        return $this;
    }

    /**
     * Gets sandbox
     *
     * @return bool|null
     */
    public function getSandbox()
    {
        return $this->container['sandbox'];
    }

    /**
     * Sets sandbox
     *
     * @param bool|null $sandbox True if this Avalara instance is pointed at the Avalara Sandbox
     *
     * @return self
     */
    public function setSandbox($sandbox)
    {
        $this->container['sandbox'] = $sandbox;

        return $this;
    }

    /**
     * Gets send_test_orders
     *
     * @return bool|null
     */
    public function getSendTestOrders()
    {
        return $this->container['send_test_orders'];
    }

    /**
     * Sets send_test_orders
     *
     * @param bool|null $send_test_orders Send test orders through to Avalara.  The default is to not transmit test orders to Avalara.
     *
     * @return self
     */
    public function setSendTestOrders($send_test_orders)
    {
        $this->container['send_test_orders'] = $send_test_orders;

        return $this;
    }

    /**
     * Gets service_url
     *
     * @return string|null
     */
    public function getServiceUrl()
    {
        return $this->container['service_url'];
    }

    /**
     * Sets service_url
     *
     * @param string|null $service_url Avalara service URL
     *
     * @return self
     */
    public function setServiceUrl($service_url)
    {
        $this->container['service_url'] = $service_url;

        return $this;
    }

    /**
     * Gets test_results
     *
     * @return string|null
     */
    public function getTestResults()
    {
        return $this->container['test_results'];
    }

    /**
     * Sets test_results
     *
     * @param string|null $test_results Test results of the last connection test to Avalara
     *
     * @return self
     */
    public function setTestResults($test_results)
    {
        $this->container['test_results'] = $test_results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


