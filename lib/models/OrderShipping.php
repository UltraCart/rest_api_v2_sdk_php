<?php
/**
 * OrderShipping
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderShipping Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderShipping implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderShipping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address1' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'company' => 'string',
        'country_code' => 'string',
        'day_phone' => 'string',
        'day_phone_e164' => 'string',
        'delivery_date' => 'string',
        'evening_phone' => 'string',
        'evening_phone_e164' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'least_cost_route' => 'bool',
        'least_cost_route_shipping_methods' => 'string[]',
        'lift_gate' => 'bool',
        'postal_code' => 'string',
        'rma' => 'string',
        'ship_on_date' => 'string',
        'ship_to_residential' => 'bool',
        'shipping_3rd_party_account_number' => 'string',
        'shipping_date' => 'string',
        'shipping_department_status' => 'string',
        'shipping_method' => 'string',
        'shipping_method_accounting_code' => 'string',
        'special_instructions' => 'string',
        'state_region' => 'string',
        'title' => 'string',
        'tracking_number_details' => '\ultracart\v2\models\OrderTrackingNumberDetails[]',
        'tracking_numbers' => 'string[]',
        'weight' => '\ultracart\v2\models\Weight'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address1' => null,
        'address2' => null,
        'city' => null,
        'company' => null,
        'country_code' => null,
        'day_phone' => null,
        'day_phone_e164' => null,
        'delivery_date' => 'dateTime',
        'evening_phone' => null,
        'evening_phone_e164' => null,
        'first_name' => null,
        'last_name' => null,
        'least_cost_route' => null,
        'least_cost_route_shipping_methods' => null,
        'lift_gate' => null,
        'postal_code' => null,
        'rma' => null,
        'ship_on_date' => 'dateTime',
        'ship_to_residential' => null,
        'shipping_3rd_party_account_number' => null,
        'shipping_date' => 'dateTime',
        'shipping_department_status' => null,
        'shipping_method' => null,
        'shipping_method_accounting_code' => null,
        'special_instructions' => null,
        'state_region' => null,
        'title' => null,
        'tracking_number_details' => null,
        'tracking_numbers' => null,
        'weight' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address1' => 'address1',
        'address2' => 'address2',
        'city' => 'city',
        'company' => 'company',
        'country_code' => 'country_code',
        'day_phone' => 'day_phone',
        'day_phone_e164' => 'day_phone_e164',
        'delivery_date' => 'delivery_date',
        'evening_phone' => 'evening_phone',
        'evening_phone_e164' => 'evening_phone_e164',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'least_cost_route' => 'least_cost_route',
        'least_cost_route_shipping_methods' => 'least_cost_route_shipping_methods',
        'lift_gate' => 'lift_gate',
        'postal_code' => 'postal_code',
        'rma' => 'rma',
        'ship_on_date' => 'ship_on_date',
        'ship_to_residential' => 'ship_to_residential',
        'shipping_3rd_party_account_number' => 'shipping_3rd_party_account_number',
        'shipping_date' => 'shipping_date',
        'shipping_department_status' => 'shipping_department_status',
        'shipping_method' => 'shipping_method',
        'shipping_method_accounting_code' => 'shipping_method_accounting_code',
        'special_instructions' => 'special_instructions',
        'state_region' => 'state_region',
        'title' => 'title',
        'tracking_number_details' => 'tracking_number_details',
        'tracking_numbers' => 'tracking_numbers',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'company' => 'setCompany',
        'country_code' => 'setCountryCode',
        'day_phone' => 'setDayPhone',
        'day_phone_e164' => 'setDayPhoneE164',
        'delivery_date' => 'setDeliveryDate',
        'evening_phone' => 'setEveningPhone',
        'evening_phone_e164' => 'setEveningPhoneE164',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'least_cost_route' => 'setLeastCostRoute',
        'least_cost_route_shipping_methods' => 'setLeastCostRouteShippingMethods',
        'lift_gate' => 'setLiftGate',
        'postal_code' => 'setPostalCode',
        'rma' => 'setRma',
        'ship_on_date' => 'setShipOnDate',
        'ship_to_residential' => 'setShipToResidential',
        'shipping_3rd_party_account_number' => 'setShipping3rdPartyAccountNumber',
        'shipping_date' => 'setShippingDate',
        'shipping_department_status' => 'setShippingDepartmentStatus',
        'shipping_method' => 'setShippingMethod',
        'shipping_method_accounting_code' => 'setShippingMethodAccountingCode',
        'special_instructions' => 'setSpecialInstructions',
        'state_region' => 'setStateRegion',
        'title' => 'setTitle',
        'tracking_number_details' => 'setTrackingNumberDetails',
        'tracking_numbers' => 'setTrackingNumbers',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'company' => 'getCompany',
        'country_code' => 'getCountryCode',
        'day_phone' => 'getDayPhone',
        'day_phone_e164' => 'getDayPhoneE164',
        'delivery_date' => 'getDeliveryDate',
        'evening_phone' => 'getEveningPhone',
        'evening_phone_e164' => 'getEveningPhoneE164',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'least_cost_route' => 'getLeastCostRoute',
        'least_cost_route_shipping_methods' => 'getLeastCostRouteShippingMethods',
        'lift_gate' => 'getLiftGate',
        'postal_code' => 'getPostalCode',
        'rma' => 'getRma',
        'ship_on_date' => 'getShipOnDate',
        'ship_to_residential' => 'getShipToResidential',
        'shipping_3rd_party_account_number' => 'getShipping3rdPartyAccountNumber',
        'shipping_date' => 'getShippingDate',
        'shipping_department_status' => 'getShippingDepartmentStatus',
        'shipping_method' => 'getShippingMethod',
        'shipping_method_accounting_code' => 'getShippingMethodAccountingCode',
        'special_instructions' => 'getSpecialInstructions',
        'state_region' => 'getStateRegion',
        'title' => 'getTitle',
        'tracking_number_details' => 'getTrackingNumberDetails',
        'tracking_numbers' => 'getTrackingNumbers',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address1'] = $data['address1'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['day_phone'] = $data['day_phone'] ?? null;
        $this->container['day_phone_e164'] = $data['day_phone_e164'] ?? null;
        $this->container['delivery_date'] = $data['delivery_date'] ?? null;
        $this->container['evening_phone'] = $data['evening_phone'] ?? null;
        $this->container['evening_phone_e164'] = $data['evening_phone_e164'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['least_cost_route'] = $data['least_cost_route'] ?? null;
        $this->container['least_cost_route_shipping_methods'] = $data['least_cost_route_shipping_methods'] ?? null;
        $this->container['lift_gate'] = $data['lift_gate'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['rma'] = $data['rma'] ?? null;
        $this->container['ship_on_date'] = $data['ship_on_date'] ?? null;
        $this->container['ship_to_residential'] = $data['ship_to_residential'] ?? null;
        $this->container['shipping_3rd_party_account_number'] = $data['shipping_3rd_party_account_number'] ?? null;
        $this->container['shipping_date'] = $data['shipping_date'] ?? null;
        $this->container['shipping_department_status'] = $data['shipping_department_status'] ?? null;
        $this->container['shipping_method'] = $data['shipping_method'] ?? null;
        $this->container['shipping_method_accounting_code'] = $data['shipping_method_accounting_code'] ?? null;
        $this->container['special_instructions'] = $data['special_instructions'] ?? null;
        $this->container['state_region'] = $data['state_region'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['tracking_number_details'] = $data['tracking_number_details'] ?? null;
        $this->container['tracking_numbers'] = $data['tracking_numbers'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 32)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 50)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['day_phone']) && (mb_strlen($this->container['day_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'day_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['day_phone_e164']) && (mb_strlen($this->container['day_phone_e164']) > 25)) {
            $invalidProperties[] = "invalid value for 'day_phone_e164', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['evening_phone']) && (mb_strlen($this->container['evening_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'evening_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['evening_phone_e164']) && (mb_strlen($this->container['evening_phone_e164']) > 25)) {
            $invalidProperties[] = "invalid value for 'evening_phone_e164', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['rma']) && (mb_strlen($this->container['rma']) > 30)) {
            $invalidProperties[] = "invalid value for 'rma', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['shipping_3rd_party_account_number']) && (mb_strlen($this->container['shipping_3rd_party_account_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'shipping_3rd_party_account_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['shipping_department_status']) && (mb_strlen($this->container['shipping_department_status']) > 30)) {
            $invalidProperties[] = "invalid value for 'shipping_department_status', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['state_region']) && (mb_strlen($this->container['state_region']) > 32)) {
            $invalidProperties[] = "invalid value for 'state_region', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 50)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 Address line 1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (!is_null($address1) && (mb_strlen($address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling OrderShipping., must be smaller than or equal to 50.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (mb_strlen($address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling OrderShipping., must be smaller than or equal to 50.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 32)) {
            throw new \InvalidArgumentException('invalid length for $city when calling OrderShipping., must be smaller than or equal to 32.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (!is_null($company) && (mb_strlen($company) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company when calling OrderShipping., must be smaller than or equal to 50.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code ISO-3166 two letter country code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling OrderShipping., must be smaller than or equal to 2.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets day_phone
     *
     * @return string|null
     */
    public function getDayPhone()
    {
        return $this->container['day_phone'];
    }

    /**
     * Sets day_phone
     *
     * @param string|null $day_phone Day time phone
     *
     * @return self
     */
    public function setDayPhone($day_phone)
    {
        if (!is_null($day_phone) && (mb_strlen($day_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $day_phone when calling OrderShipping., must be smaller than or equal to 25.');
        }

        $this->container['day_phone'] = $day_phone;

        return $this;
    }

    /**
     * Gets day_phone_e164
     *
     * @return string|null
     */
    public function getDayPhoneE164()
    {
        return $this->container['day_phone_e164'];
    }

    /**
     * Sets day_phone_e164
     *
     * @param string|null $day_phone_e164 Day time phone (E164 format)
     *
     * @return self
     */
    public function setDayPhoneE164($day_phone_e164)
    {
        if (!is_null($day_phone_e164) && (mb_strlen($day_phone_e164) > 25)) {
            throw new \InvalidArgumentException('invalid length for $day_phone_e164 when calling OrderShipping., must be smaller than or equal to 25.');
        }

        $this->container['day_phone_e164'] = $day_phone_e164;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string|null $delivery_date Date the customer is requesting delivery on.  Typically used for perishable product delivery.
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets evening_phone
     *
     * @return string|null
     */
    public function getEveningPhone()
    {
        return $this->container['evening_phone'];
    }

    /**
     * Sets evening_phone
     *
     * @param string|null $evening_phone Evening phone
     *
     * @return self
     */
    public function setEveningPhone($evening_phone)
    {
        if (!is_null($evening_phone) && (mb_strlen($evening_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $evening_phone when calling OrderShipping., must be smaller than or equal to 25.');
        }

        $this->container['evening_phone'] = $evening_phone;

        return $this;
    }

    /**
     * Gets evening_phone_e164
     *
     * @return string|null
     */
    public function getEveningPhoneE164()
    {
        return $this->container['evening_phone_e164'];
    }

    /**
     * Sets evening_phone_e164
     *
     * @param string|null $evening_phone_e164 Evening phone (E164 format)
     *
     * @return self
     */
    public function setEveningPhoneE164($evening_phone_e164)
    {
        if (!is_null($evening_phone_e164) && (mb_strlen($evening_phone_e164) > 25)) {
            throw new \InvalidArgumentException('invalid length for $evening_phone_e164 when calling OrderShipping., must be smaller than or equal to 25.');
        }

        $this->container['evening_phone_e164'] = $evening_phone_e164;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling OrderShipping., must be smaller than or equal to 30.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling OrderShipping., must be smaller than or equal to 30.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets least_cost_route
     *
     * @return bool|null
     */
    public function getLeastCostRoute()
    {
        return $this->container['least_cost_route'];
    }

    /**
     * Sets least_cost_route
     *
     * @param bool|null $least_cost_route If true, instructs UltraCart to apply the cheapest shipping method to this order.  Used only for channel partner order inserts.
     *
     * @return self
     */
    public function setLeastCostRoute($least_cost_route)
    {
        $this->container['least_cost_route'] = $least_cost_route;

        return $this;
    }

    /**
     * Gets least_cost_route_shipping_methods
     *
     * @return string[]|null
     */
    public function getLeastCostRouteShippingMethods()
    {
        return $this->container['least_cost_route_shipping_methods'];
    }

    /**
     * Sets least_cost_route_shipping_methods
     *
     * @param string[]|null $least_cost_route_shipping_methods List of shipping methods to consider if least_code_route is true. Used only for channel parter order inserts.
     *
     * @return self
     */
    public function setLeastCostRouteShippingMethods($least_cost_route_shipping_methods)
    {
        $this->container['least_cost_route_shipping_methods'] = $least_cost_route_shipping_methods;

        return $this;
    }

    /**
     * Gets lift_gate
     *
     * @return bool|null
     */
    public function getLiftGate()
    {
        return $this->container['lift_gate'];
    }

    /**
     * Sets lift_gate
     *
     * @param bool|null $lift_gate Lift gate requested (LTL shipping methods only)
     *
     * @return self
     */
    public function setLiftGate($lift_gate)
    {
        $this->container['lift_gate'] = $lift_gate;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling OrderShipping., must be smaller than or equal to 20.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets rma
     *
     * @return string|null
     */
    public function getRma()
    {
        return $this->container['rma'];
    }

    /**
     * Sets rma
     *
     * @param string|null $rma RMA number
     *
     * @return self
     */
    public function setRma($rma)
    {
        if (!is_null($rma) && (mb_strlen($rma) > 30)) {
            throw new \InvalidArgumentException('invalid length for $rma when calling OrderShipping., must be smaller than or equal to 30.');
        }

        $this->container['rma'] = $rma;

        return $this;
    }

    /**
     * Gets ship_on_date
     *
     * @return string|null
     */
    public function getShipOnDate()
    {
        return $this->container['ship_on_date'];
    }

    /**
     * Sets ship_on_date
     *
     * @param string|null $ship_on_date Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.
     *
     * @return self
     */
    public function setShipOnDate($ship_on_date)
    {
        $this->container['ship_on_date'] = $ship_on_date;

        return $this;
    }

    /**
     * Gets ship_to_residential
     *
     * @return bool|null
     */
    public function getShipToResidential()
    {
        return $this->container['ship_to_residential'];
    }

    /**
     * Sets ship_to_residential
     *
     * @param bool|null $ship_to_residential True if the shipping address is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.
     *
     * @return self
     */
    public function setShipToResidential($ship_to_residential)
    {
        $this->container['ship_to_residential'] = $ship_to_residential;

        return $this;
    }

    /**
     * Gets shipping_3rd_party_account_number
     *
     * @return string|null
     */
    public function getShipping3rdPartyAccountNumber()
    {
        return $this->container['shipping_3rd_party_account_number'];
    }

    /**
     * Sets shipping_3rd_party_account_number
     *
     * @param string|null $shipping_3rd_party_account_number Shipping 3rd party account number
     *
     * @return self
     */
    public function setShipping3rdPartyAccountNumber($shipping_3rd_party_account_number)
    {
        if (!is_null($shipping_3rd_party_account_number) && (mb_strlen($shipping_3rd_party_account_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $shipping_3rd_party_account_number when calling OrderShipping., must be smaller than or equal to 20.');
        }

        $this->container['shipping_3rd_party_account_number'] = $shipping_3rd_party_account_number;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return string|null
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param string|null $shipping_date Date/time the order shipped on.  This date is set once the first shipment is sent to the customer.
     *
     * @return self
     */
    public function setShippingDate($shipping_date)
    {
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets shipping_department_status
     *
     * @return string|null
     */
    public function getShippingDepartmentStatus()
    {
        return $this->container['shipping_department_status'];
    }

    /**
     * Sets shipping_department_status
     *
     * @param string|null $shipping_department_status Shipping department status
     *
     * @return self
     */
    public function setShippingDepartmentStatus($shipping_department_status)
    {
        if (!is_null($shipping_department_status) && (mb_strlen($shipping_department_status) > 30)) {
            throw new \InvalidArgumentException('invalid length for $shipping_department_status when calling OrderShipping., must be smaller than or equal to 30.');
        }

        $this->container['shipping_department_status'] = $shipping_department_status;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method Shipping method
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets shipping_method_accounting_code
     *
     * @return string|null
     */
    public function getShippingMethodAccountingCode()
    {
        return $this->container['shipping_method_accounting_code'];
    }

    /**
     * Sets shipping_method_accounting_code
     *
     * @param string|null $shipping_method_accounting_code Shipping method accounting code
     *
     * @return self
     */
    public function setShippingMethodAccountingCode($shipping_method_accounting_code)
    {
        $this->container['shipping_method_accounting_code'] = $shipping_method_accounting_code;

        return $this;
    }

    /**
     * Gets special_instructions
     *
     * @return string|null
     */
    public function getSpecialInstructions()
    {
        return $this->container['special_instructions'];
    }

    /**
     * Sets special_instructions
     *
     * @param string|null $special_instructions Special instructions from the customer regarding shipping
     *
     * @return self
     */
    public function setSpecialInstructions($special_instructions)
    {
        $this->container['special_instructions'] = $special_instructions;

        return $this;
    }

    /**
     * Gets state_region
     *
     * @return string|null
     */
    public function getStateRegion()
    {
        return $this->container['state_region'];
    }

    /**
     * Sets state_region
     *
     * @param string|null $state_region State
     *
     * @return self
     */
    public function setStateRegion($state_region)
    {
        if (!is_null($state_region) && (mb_strlen($state_region) > 32)) {
            throw new \InvalidArgumentException('invalid length for $state_region when calling OrderShipping., must be smaller than or equal to 32.');
        }

        $this->container['state_region'] = $state_region;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $title when calling OrderShipping., must be smaller than or equal to 50.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets tracking_number_details
     *
     * @return \ultracart\v2\models\OrderTrackingNumberDetails[]|null
     */
    public function getTrackingNumberDetails()
    {
        return $this->container['tracking_number_details'];
    }

    /**
     * Sets tracking_number_details
     *
     * @param \ultracart\v2\models\OrderTrackingNumberDetails[]|null $tracking_number_details Tracking number details
     *
     * @return self
     */
    public function setTrackingNumberDetails($tracking_number_details)
    {
        $this->container['tracking_number_details'] = $tracking_number_details;

        return $this;
    }

    /**
     * Gets tracking_numbers
     *
     * @return string[]|null
     */
    public function getTrackingNumbers()
    {
        return $this->container['tracking_numbers'];
    }

    /**
     * Sets tracking_numbers
     *
     * @param string[]|null $tracking_numbers Tracking numbers
     *
     * @return self
     */
    public function setTrackingNumbers($tracking_numbers)
    {
        $this->container['tracking_numbers'] = $tracking_numbers;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \ultracart\v2\models\Weight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \ultracart\v2\models\Weight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


