<?php
/**
 * OrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * OrderItem Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'accounting_code' => 'string',
        'activation_codes' => 'string[]',
        'barcode' => 'string',
        'channel_partner_item_id' => 'string',
        'cogs' => 'float',
        'component_unit_value' => 'float',
        'cost' => '\ultracart\v2\models\Currency',
        'country_code_of_origin' => 'string',
        'customs_description' => 'string',
        'description' => 'string',
        'discount' => '\ultracart\v2\models\Currency',
        'discount_quantity' => 'float',
        'discount_shipping_weight' => '\ultracart\v2\models\Weight',
        'distribution_center_code' => 'string',
        'edi' => '\ultracart\v2\models\OrderItemEdi',
        'exclude_coupon' => 'bool',
        'free_shipping' => 'bool',
        'hazmat' => 'bool',
        'height' => '\ultracart\v2\models\Distance',
        'item_reference_oid' => 'int',
        'kit' => 'bool',
        'kit_component' => 'bool',
        'length' => '\ultracart\v2\models\Distance',
        'manufacturer_sku' => 'string',
        'max_days_time_in_transit' => 'int',
        'merchant_item_id' => 'string',
        'mix_and_match_group_name' => 'string',
        'mix_and_match_group_oid' => 'int',
        'no_shipping_discount' => 'bool',
        'options' => '\ultracart\v2\models\OrderItemOption[]',
        'packed_by_user' => 'string',
        'perishable_class' => 'string',
        'pricing_tier_name' => 'string',
        'quantity' => 'float',
        'quantity_refunded' => 'float',
        'quickbooks_class' => 'string',
        'ship_separately' => 'bool',
        'shipped_by_user' => 'string',
        'shipped_dts' => 'string',
        'special_product_type' => 'string',
        'tax_free' => 'bool',
        'taxable_cost' => '\ultracart\v2\models\Currency',
        'total_cost_with_discount' => '\ultracart\v2\models\Currency',
        'total_refunded' => '\ultracart\v2\models\Currency',
        'transmitted_to_distribution_center_dts' => 'string',
        'unit_cost_with_discount' => '\ultracart\v2\models\Currency',
        'upsell' => 'bool',
        'weight' => '\ultracart\v2\models\Weight',
        'width' => '\ultracart\v2\models\Distance'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'accounting_code' => 'accounting_code',
        'activation_codes' => 'activation_codes',
        'barcode' => 'barcode',
        'channel_partner_item_id' => 'channel_partner_item_id',
        'cogs' => 'cogs',
        'component_unit_value' => 'component_unit_value',
        'cost' => 'cost',
        'country_code_of_origin' => 'country_code_of_origin',
        'customs_description' => 'customs_description',
        'description' => 'description',
        'discount' => 'discount',
        'discount_quantity' => 'discount_quantity',
        'discount_shipping_weight' => 'discount_shipping_weight',
        'distribution_center_code' => 'distribution_center_code',
        'edi' => 'edi',
        'exclude_coupon' => 'exclude_coupon',
        'free_shipping' => 'free_shipping',
        'hazmat' => 'hazmat',
        'height' => 'height',
        'item_reference_oid' => 'item_reference_oid',
        'kit' => 'kit',
        'kit_component' => 'kit_component',
        'length' => 'length',
        'manufacturer_sku' => 'manufacturer_sku',
        'max_days_time_in_transit' => 'max_days_time_in_transit',
        'merchant_item_id' => 'merchant_item_id',
        'mix_and_match_group_name' => 'mix_and_match_group_name',
        'mix_and_match_group_oid' => 'mix_and_match_group_oid',
        'no_shipping_discount' => 'no_shipping_discount',
        'options' => 'options',
        'packed_by_user' => 'packed_by_user',
        'perishable_class' => 'perishable_class',
        'pricing_tier_name' => 'pricing_tier_name',
        'quantity' => 'quantity',
        'quantity_refunded' => 'quantity_refunded',
        'quickbooks_class' => 'quickbooks_class',
        'ship_separately' => 'ship_separately',
        'shipped_by_user' => 'shipped_by_user',
        'shipped_dts' => 'shipped_dts',
        'special_product_type' => 'special_product_type',
        'tax_free' => 'tax_free',
        'taxable_cost' => 'taxable_cost',
        'total_cost_with_discount' => 'total_cost_with_discount',
        'total_refunded' => 'total_refunded',
        'transmitted_to_distribution_center_dts' => 'transmitted_to_distribution_center_dts',
        'unit_cost_with_discount' => 'unit_cost_with_discount',
        'upsell' => 'upsell',
        'weight' => 'weight',
        'width' => 'width'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'accounting_code' => 'setAccountingCode',
        'activation_codes' => 'setActivationCodes',
        'barcode' => 'setBarcode',
        'channel_partner_item_id' => 'setChannelPartnerItemId',
        'cogs' => 'setCogs',
        'component_unit_value' => 'setComponentUnitValue',
        'cost' => 'setCost',
        'country_code_of_origin' => 'setCountryCodeOfOrigin',
        'customs_description' => 'setCustomsDescription',
        'description' => 'setDescription',
        'discount' => 'setDiscount',
        'discount_quantity' => 'setDiscountQuantity',
        'discount_shipping_weight' => 'setDiscountShippingWeight',
        'distribution_center_code' => 'setDistributionCenterCode',
        'edi' => 'setEdi',
        'exclude_coupon' => 'setExcludeCoupon',
        'free_shipping' => 'setFreeShipping',
        'hazmat' => 'setHazmat',
        'height' => 'setHeight',
        'item_reference_oid' => 'setItemReferenceOid',
        'kit' => 'setKit',
        'kit_component' => 'setKitComponent',
        'length' => 'setLength',
        'manufacturer_sku' => 'setManufacturerSku',
        'max_days_time_in_transit' => 'setMaxDaysTimeInTransit',
        'merchant_item_id' => 'setMerchantItemId',
        'mix_and_match_group_name' => 'setMixAndMatchGroupName',
        'mix_and_match_group_oid' => 'setMixAndMatchGroupOid',
        'no_shipping_discount' => 'setNoShippingDiscount',
        'options' => 'setOptions',
        'packed_by_user' => 'setPackedByUser',
        'perishable_class' => 'setPerishableClass',
        'pricing_tier_name' => 'setPricingTierName',
        'quantity' => 'setQuantity',
        'quantity_refunded' => 'setQuantityRefunded',
        'quickbooks_class' => 'setQuickbooksClass',
        'ship_separately' => 'setShipSeparately',
        'shipped_by_user' => 'setShippedByUser',
        'shipped_dts' => 'setShippedDts',
        'special_product_type' => 'setSpecialProductType',
        'tax_free' => 'setTaxFree',
        'taxable_cost' => 'setTaxableCost',
        'total_cost_with_discount' => 'setTotalCostWithDiscount',
        'total_refunded' => 'setTotalRefunded',
        'transmitted_to_distribution_center_dts' => 'setTransmittedToDistributionCenterDts',
        'unit_cost_with_discount' => 'setUnitCostWithDiscount',
        'upsell' => 'setUpsell',
        'weight' => 'setWeight',
        'width' => 'setWidth'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'accounting_code' => 'getAccountingCode',
        'activation_codes' => 'getActivationCodes',
        'barcode' => 'getBarcode',
        'channel_partner_item_id' => 'getChannelPartnerItemId',
        'cogs' => 'getCogs',
        'component_unit_value' => 'getComponentUnitValue',
        'cost' => 'getCost',
        'country_code_of_origin' => 'getCountryCodeOfOrigin',
        'customs_description' => 'getCustomsDescription',
        'description' => 'getDescription',
        'discount' => 'getDiscount',
        'discount_quantity' => 'getDiscountQuantity',
        'discount_shipping_weight' => 'getDiscountShippingWeight',
        'distribution_center_code' => 'getDistributionCenterCode',
        'edi' => 'getEdi',
        'exclude_coupon' => 'getExcludeCoupon',
        'free_shipping' => 'getFreeShipping',
        'hazmat' => 'getHazmat',
        'height' => 'getHeight',
        'item_reference_oid' => 'getItemReferenceOid',
        'kit' => 'getKit',
        'kit_component' => 'getKitComponent',
        'length' => 'getLength',
        'manufacturer_sku' => 'getManufacturerSku',
        'max_days_time_in_transit' => 'getMaxDaysTimeInTransit',
        'merchant_item_id' => 'getMerchantItemId',
        'mix_and_match_group_name' => 'getMixAndMatchGroupName',
        'mix_and_match_group_oid' => 'getMixAndMatchGroupOid',
        'no_shipping_discount' => 'getNoShippingDiscount',
        'options' => 'getOptions',
        'packed_by_user' => 'getPackedByUser',
        'perishable_class' => 'getPerishableClass',
        'pricing_tier_name' => 'getPricingTierName',
        'quantity' => 'getQuantity',
        'quantity_refunded' => 'getQuantityRefunded',
        'quickbooks_class' => 'getQuickbooksClass',
        'ship_separately' => 'getShipSeparately',
        'shipped_by_user' => 'getShippedByUser',
        'shipped_dts' => 'getShippedDts',
        'special_product_type' => 'getSpecialProductType',
        'tax_free' => 'getTaxFree',
        'taxable_cost' => 'getTaxableCost',
        'total_cost_with_discount' => 'getTotalCostWithDiscount',
        'total_refunded' => 'getTotalRefunded',
        'transmitted_to_distribution_center_dts' => 'getTransmittedToDistributionCenterDts',
        'unit_cost_with_discount' => 'getUnitCostWithDiscount',
        'upsell' => 'getUpsell',
        'weight' => 'getWeight',
        'width' => 'getWidth'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounting_code'] = isset($data['accounting_code']) ? $data['accounting_code'] : null;
        $this->container['activation_codes'] = isset($data['activation_codes']) ? $data['activation_codes'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['channel_partner_item_id'] = isset($data['channel_partner_item_id']) ? $data['channel_partner_item_id'] : null;
        $this->container['cogs'] = isset($data['cogs']) ? $data['cogs'] : null;
        $this->container['component_unit_value'] = isset($data['component_unit_value']) ? $data['component_unit_value'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['country_code_of_origin'] = isset($data['country_code_of_origin']) ? $data['country_code_of_origin'] : null;
        $this->container['customs_description'] = isset($data['customs_description']) ? $data['customs_description'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['discount_quantity'] = isset($data['discount_quantity']) ? $data['discount_quantity'] : null;
        $this->container['discount_shipping_weight'] = isset($data['discount_shipping_weight']) ? $data['discount_shipping_weight'] : null;
        $this->container['distribution_center_code'] = isset($data['distribution_center_code']) ? $data['distribution_center_code'] : null;
        $this->container['edi'] = isset($data['edi']) ? $data['edi'] : null;
        $this->container['exclude_coupon'] = isset($data['exclude_coupon']) ? $data['exclude_coupon'] : null;
        $this->container['free_shipping'] = isset($data['free_shipping']) ? $data['free_shipping'] : null;
        $this->container['hazmat'] = isset($data['hazmat']) ? $data['hazmat'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['item_reference_oid'] = isset($data['item_reference_oid']) ? $data['item_reference_oid'] : null;
        $this->container['kit'] = isset($data['kit']) ? $data['kit'] : null;
        $this->container['kit_component'] = isset($data['kit_component']) ? $data['kit_component'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['manufacturer_sku'] = isset($data['manufacturer_sku']) ? $data['manufacturer_sku'] : null;
        $this->container['max_days_time_in_transit'] = isset($data['max_days_time_in_transit']) ? $data['max_days_time_in_transit'] : null;
        $this->container['merchant_item_id'] = isset($data['merchant_item_id']) ? $data['merchant_item_id'] : null;
        $this->container['mix_and_match_group_name'] = isset($data['mix_and_match_group_name']) ? $data['mix_and_match_group_name'] : null;
        $this->container['mix_and_match_group_oid'] = isset($data['mix_and_match_group_oid']) ? $data['mix_and_match_group_oid'] : null;
        $this->container['no_shipping_discount'] = isset($data['no_shipping_discount']) ? $data['no_shipping_discount'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['packed_by_user'] = isset($data['packed_by_user']) ? $data['packed_by_user'] : null;
        $this->container['perishable_class'] = isset($data['perishable_class']) ? $data['perishable_class'] : null;
        $this->container['pricing_tier_name'] = isset($data['pricing_tier_name']) ? $data['pricing_tier_name'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_refunded'] = isset($data['quantity_refunded']) ? $data['quantity_refunded'] : null;
        $this->container['quickbooks_class'] = isset($data['quickbooks_class']) ? $data['quickbooks_class'] : null;
        $this->container['ship_separately'] = isset($data['ship_separately']) ? $data['ship_separately'] : null;
        $this->container['shipped_by_user'] = isset($data['shipped_by_user']) ? $data['shipped_by_user'] : null;
        $this->container['shipped_dts'] = isset($data['shipped_dts']) ? $data['shipped_dts'] : null;
        $this->container['special_product_type'] = isset($data['special_product_type']) ? $data['special_product_type'] : null;
        $this->container['tax_free'] = isset($data['tax_free']) ? $data['tax_free'] : null;
        $this->container['taxable_cost'] = isset($data['taxable_cost']) ? $data['taxable_cost'] : null;
        $this->container['total_cost_with_discount'] = isset($data['total_cost_with_discount']) ? $data['total_cost_with_discount'] : null;
        $this->container['total_refunded'] = isset($data['total_refunded']) ? $data['total_refunded'] : null;
        $this->container['transmitted_to_distribution_center_dts'] = isset($data['transmitted_to_distribution_center_dts']) ? $data['transmitted_to_distribution_center_dts'] : null;
        $this->container['unit_cost_with_discount'] = isset($data['unit_cost_with_discount']) ? $data['unit_cost_with_discount'] : null;
        $this->container['upsell'] = isset($data['upsell']) ? $data['upsell'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if (!is_null($this->container['channel_partner_item_id']) && (strlen($this->container['channel_partner_item_id']) > 30)) {
            $invalid_properties[] = "invalid value for 'channel_partner_item_id', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['country_code_of_origin']) && (strlen($this->container['country_code_of_origin']) > 2)) {
            $invalid_properties[] = "invalid value for 'country_code_of_origin', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['description']) && (strlen($this->container['description']) > 2000)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['merchant_item_id']) && (strlen($this->container['merchant_item_id']) > 20)) {
            $invalid_properties[] = "invalid value for 'merchant_item_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['perishable_class']) && (strlen($this->container['perishable_class']) > 50)) {
            $invalid_properties[] = "invalid value for 'perishable_class', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['quickbooks_class']) && (strlen($this->container['quickbooks_class']) > 31)) {
            $invalid_properties[] = "invalid value for 'quickbooks_class', the character length must be smaller than or equal to 31.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['channel_partner_item_id']) > 30) {
            return false;
        }
        if (strlen($this->container['country_code_of_origin']) > 2) {
            return false;
        }
        if (strlen($this->container['description']) > 2000) {
            return false;
        }
        if (strlen($this->container['merchant_item_id']) > 20) {
            return false;
        }
        if (strlen($this->container['perishable_class']) > 50) {
            return false;
        }
        if (strlen($this->container['quickbooks_class']) > 31) {
            return false;
        }
        return true;
    }


    /**
     * Gets accounting_code
     * @return string
     */
    public function getAccountingCode()
    {
        return $this->container['accounting_code'];
    }

    /**
     * Sets accounting_code
     * @param string $accounting_code QuickBooks code
     * @return $this
     */
    public function setAccountingCode($accounting_code)
    {
        $this->container['accounting_code'] = $accounting_code;

        return $this;
    }

    /**
     * Gets activation_codes
     * @return string[]
     */
    public function getActivationCodes()
    {
        return $this->container['activation_codes'];
    }

    /**
     * Sets activation_codes
     * @param string[] $activation_codes Activation codes assigned to this item
     * @return $this
     */
    public function setActivationCodes($activation_codes)
    {
        $this->container['activation_codes'] = $activation_codes;

        return $this;
    }

    /**
     * Gets barcode
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     * @param string $barcode Barcode
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets channel_partner_item_id
     * @return string
     */
    public function getChannelPartnerItemId()
    {
        return $this->container['channel_partner_item_id'];
    }

    /**
     * Sets channel_partner_item_id
     * @param string $channel_partner_item_id Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id
     * @return $this
     */
    public function setChannelPartnerItemId($channel_partner_item_id)
    {
        if (strlen($channel_partner_item_id) > 30) {
            throw new \InvalidArgumentException('invalid length for $channel_partner_item_id when calling OrderItem., must be smaller than or equal to 30.');
        }
        $this->container['channel_partner_item_id'] = $channel_partner_item_id;

        return $this;
    }

    /**
     * Gets cogs
     * @return float
     */
    public function getCogs()
    {
        return $this->container['cogs'];
    }

    /**
     * Sets cogs
     * @param float $cogs Cost of goods sold
     * @return $this
     */
    public function setCogs($cogs)
    {
        $this->container['cogs'] = $cogs;

        return $this;
    }

    /**
     * Gets component_unit_value
     * @return float
     */
    public function getComponentUnitValue()
    {
        return $this->container['component_unit_value'];
    }

    /**
     * Sets component_unit_value
     * @param float $component_unit_value Value of the kit component item
     * @return $this
     */
    public function setComponentUnitValue($component_unit_value)
    {
        $this->container['component_unit_value'] = $component_unit_value;

        return $this;
    }

    /**
     * Gets cost
     * @return \ultracart\v2\models\Currency
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     * @param \ultracart\v2\models\Currency $cost
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets country_code_of_origin
     * @return string
     */
    public function getCountryCodeOfOrigin()
    {
        return $this->container['country_code_of_origin'];
    }

    /**
     * Sets country_code_of_origin
     * @param string $country_code_of_origin Country of origin (ISO-3166 two letter code)
     * @return $this
     */
    public function setCountryCodeOfOrigin($country_code_of_origin)
    {
        if (strlen($country_code_of_origin) > 2) {
            throw new \InvalidArgumentException('invalid length for $country_code_of_origin when calling OrderItem., must be smaller than or equal to 2.');
        }
        $this->container['country_code_of_origin'] = $country_code_of_origin;

        return $this;
    }

    /**
     * Gets customs_description
     * @return string
     */
    public function getCustomsDescription()
    {
        return $this->container['customs_description'];
    }

    /**
     * Sets customs_description
     * @param string $customs_description Customs description
     * @return $this
     */
    public function setCustomsDescription($customs_description)
    {
        $this->container['customs_description'] = $customs_description;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description
     * @return $this
     */
    public function setDescription($description)
    {
        if (strlen($description) > 2000) {
            throw new \InvalidArgumentException('invalid length for $description when calling OrderItem., must be smaller than or equal to 2000.');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discount
     * @return \ultracart\v2\models\Currency
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     * @param \ultracart\v2\models\Currency $discount
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discount_quantity
     * @return float
     */
    public function getDiscountQuantity()
    {
        return $this->container['discount_quantity'];
    }

    /**
     * Sets discount_quantity
     * @param float $discount_quantity Discount quantity
     * @return $this
     */
    public function setDiscountQuantity($discount_quantity)
    {
        $this->container['discount_quantity'] = $discount_quantity;

        return $this;
    }

    /**
     * Gets discount_shipping_weight
     * @return \ultracart\v2\models\Weight
     */
    public function getDiscountShippingWeight()
    {
        return $this->container['discount_shipping_weight'];
    }

    /**
     * Sets discount_shipping_weight
     * @param \ultracart\v2\models\Weight $discount_shipping_weight
     * @return $this
     */
    public function setDiscountShippingWeight($discount_shipping_weight)
    {
        $this->container['discount_shipping_weight'] = $discount_shipping_weight;

        return $this;
    }

    /**
     * Gets distribution_center_code
     * @return string
     */
    public function getDistributionCenterCode()
    {
        return $this->container['distribution_center_code'];
    }

    /**
     * Sets distribution_center_code
     * @param string $distribution_center_code Distribution center code responsible for shipping this item
     * @return $this
     */
    public function setDistributionCenterCode($distribution_center_code)
    {
        $this->container['distribution_center_code'] = $distribution_center_code;

        return $this;
    }

    /**
     * Gets edi
     * @return \ultracart\v2\models\OrderItemEdi
     */
    public function getEdi()
    {
        return $this->container['edi'];
    }

    /**
     * Sets edi
     * @param \ultracart\v2\models\OrderItemEdi $edi
     * @return $this
     */
    public function setEdi($edi)
    {
        $this->container['edi'] = $edi;

        return $this;
    }

    /**
     * Gets exclude_coupon
     * @return bool
     */
    public function getExcludeCoupon()
    {
        return $this->container['exclude_coupon'];
    }

    /**
     * Sets exclude_coupon
     * @param bool $exclude_coupon True if this item is excluded from coupons
     * @return $this
     */
    public function setExcludeCoupon($exclude_coupon)
    {
        $this->container['exclude_coupon'] = $exclude_coupon;

        return $this;
    }

    /**
     * Gets free_shipping
     * @return bool
     */
    public function getFreeShipping()
    {
        return $this->container['free_shipping'];
    }

    /**
     * Sets free_shipping
     * @param bool $free_shipping True if the item receives free shipping
     * @return $this
     */
    public function setFreeShipping($free_shipping)
    {
        $this->container['free_shipping'] = $free_shipping;

        return $this;
    }

    /**
     * Gets hazmat
     * @return bool
     */
    public function getHazmat()
    {
        return $this->container['hazmat'];
    }

    /**
     * Sets hazmat
     * @param bool $hazmat Hazardous materials indicator
     * @return $this
     */
    public function setHazmat($hazmat)
    {
        $this->container['hazmat'] = $hazmat;

        return $this;
    }

    /**
     * Gets height
     * @return \ultracart\v2\models\Distance
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param \ultracart\v2\models\Distance $height
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets item_reference_oid
     * @return int
     */
    public function getItemReferenceOid()
    {
        return $this->container['item_reference_oid'];
    }

    /**
     * Sets item_reference_oid
     * @param int $item_reference_oid Item reference object identifier used to linked to auto order item record
     * @return $this
     */
    public function setItemReferenceOid($item_reference_oid)
    {
        $this->container['item_reference_oid'] = $item_reference_oid;

        return $this;
    }

    /**
     * Gets kit
     * @return bool
     */
    public function getKit()
    {
        return $this->container['kit'];
    }

    /**
     * Sets kit
     * @param bool $kit True if this item is a kit
     * @return $this
     */
    public function setKit($kit)
    {
        $this->container['kit'] = $kit;

        return $this;
    }

    /**
     * Gets kit_component
     * @return bool
     */
    public function getKitComponent()
    {
        return $this->container['kit_component'];
    }

    /**
     * Sets kit_component
     * @param bool $kit_component True if this item is a kit component
     * @return $this
     */
    public function setKitComponent($kit_component)
    {
        $this->container['kit_component'] = $kit_component;

        return $this;
    }

    /**
     * Gets length
     * @return \ultracart\v2\models\Distance
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     * @param \ultracart\v2\models\Distance $length
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets manufacturer_sku
     * @return string
     */
    public function getManufacturerSku()
    {
        return $this->container['manufacturer_sku'];
    }

    /**
     * Sets manufacturer_sku
     * @param string $manufacturer_sku Manufacturer SKU
     * @return $this
     */
    public function setManufacturerSku($manufacturer_sku)
    {
        $this->container['manufacturer_sku'] = $manufacturer_sku;

        return $this;
    }

    /**
     * Gets max_days_time_in_transit
     * @return int
     */
    public function getMaxDaysTimeInTransit()
    {
        return $this->container['max_days_time_in_transit'];
    }

    /**
     * Sets max_days_time_in_transit
     * @param int $max_days_time_in_transit Maximum days that the item can be in transit before spoilage (perishable products)
     * @return $this
     */
    public function setMaxDaysTimeInTransit($max_days_time_in_transit)
    {
        $this->container['max_days_time_in_transit'] = $max_days_time_in_transit;

        return $this;
    }

    /**
     * Gets merchant_item_id
     * @return string
     */
    public function getMerchantItemId()
    {
        return $this->container['merchant_item_id'];
    }

    /**
     * Sets merchant_item_id
     * @param string $merchant_item_id Item ID
     * @return $this
     */
    public function setMerchantItemId($merchant_item_id)
    {
        if (strlen($merchant_item_id) > 20) {
            throw new \InvalidArgumentException('invalid length for $merchant_item_id when calling OrderItem., must be smaller than or equal to 20.');
        }
        $this->container['merchant_item_id'] = $merchant_item_id;

        return $this;
    }

    /**
     * Gets mix_and_match_group_name
     * @return string
     */
    public function getMixAndMatchGroupName()
    {
        return $this->container['mix_and_match_group_name'];
    }

    /**
     * Sets mix_and_match_group_name
     * @param string $mix_and_match_group_name Mix and match group name
     * @return $this
     */
    public function setMixAndMatchGroupName($mix_and_match_group_name)
    {
        $this->container['mix_and_match_group_name'] = $mix_and_match_group_name;

        return $this;
    }

    /**
     * Gets mix_and_match_group_oid
     * @return int
     */
    public function getMixAndMatchGroupOid()
    {
        return $this->container['mix_and_match_group_oid'];
    }

    /**
     * Sets mix_and_match_group_oid
     * @param int $mix_and_match_group_oid Mix and match group object identifier
     * @return $this
     */
    public function setMixAndMatchGroupOid($mix_and_match_group_oid)
    {
        $this->container['mix_and_match_group_oid'] = $mix_and_match_group_oid;

        return $this;
    }

    /**
     * Gets no_shipping_discount
     * @return bool
     */
    public function getNoShippingDiscount()
    {
        return $this->container['no_shipping_discount'];
    }

    /**
     * Sets no_shipping_discount
     * @param bool $no_shipping_discount True if this item is excluded from shipping discounts
     * @return $this
     */
    public function setNoShippingDiscount($no_shipping_discount)
    {
        $this->container['no_shipping_discount'] = $no_shipping_discount;

        return $this;
    }

    /**
     * Gets options
     * @return \ultracart\v2\models\OrderItemOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \ultracart\v2\models\OrderItemOption[] $options Options
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets packed_by_user
     * @return string
     */
    public function getPackedByUser()
    {
        return $this->container['packed_by_user'];
    }

    /**
     * Sets packed_by_user
     * @param string $packed_by_user Packed by user
     * @return $this
     */
    public function setPackedByUser($packed_by_user)
    {
        $this->container['packed_by_user'] = $packed_by_user;

        return $this;
    }

    /**
     * Gets perishable_class
     * @return string
     */
    public function getPerishableClass()
    {
        return $this->container['perishable_class'];
    }

    /**
     * Sets perishable_class
     * @param string $perishable_class Perishable class of the item
     * @return $this
     */
    public function setPerishableClass($perishable_class)
    {
        if (strlen($perishable_class) > 50) {
            throw new \InvalidArgumentException('invalid length for $perishable_class when calling OrderItem., must be smaller than or equal to 50.');
        }
        $this->container['perishable_class'] = $perishable_class;

        return $this;
    }

    /**
     * Gets pricing_tier_name
     * @return string
     */
    public function getPricingTierName()
    {
        return $this->container['pricing_tier_name'];
    }

    /**
     * Sets pricing_tier_name
     * @param string $pricing_tier_name Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned
     * @return $this
     */
    public function setPricingTierName($pricing_tier_name)
    {
        $this->container['pricing_tier_name'] = $pricing_tier_name;

        return $this;
    }

    /**
     * Gets quantity
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param float $quantity Quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_refunded
     * @return float
     */
    public function getQuantityRefunded()
    {
        return $this->container['quantity_refunded'];
    }

    /**
     * Sets quantity_refunded
     * @param float $quantity_refunded Quantity refunded on this item
     * @return $this
     */
    public function setQuantityRefunded($quantity_refunded)
    {
        $this->container['quantity_refunded'] = $quantity_refunded;

        return $this;
    }

    /**
     * Gets quickbooks_class
     * @return string
     */
    public function getQuickbooksClass()
    {
        return $this->container['quickbooks_class'];
    }

    /**
     * Sets quickbooks_class
     * @param string $quickbooks_class QuickBooks class
     * @return $this
     */
    public function setQuickbooksClass($quickbooks_class)
    {
        if (strlen($quickbooks_class) > 31) {
            throw new \InvalidArgumentException('invalid length for $quickbooks_class when calling OrderItem., must be smaller than or equal to 31.');
        }
        $this->container['quickbooks_class'] = $quickbooks_class;

        return $this;
    }

    /**
     * Gets ship_separately
     * @return bool
     */
    public function getShipSeparately()
    {
        return $this->container['ship_separately'];
    }

    /**
     * Sets ship_separately
     * @param bool $ship_separately True if this item ships in a separate box
     * @return $this
     */
    public function setShipSeparately($ship_separately)
    {
        $this->container['ship_separately'] = $ship_separately;

        return $this;
    }

    /**
     * Gets shipped_by_user
     * @return string
     */
    public function getShippedByUser()
    {
        return $this->container['shipped_by_user'];
    }

    /**
     * Sets shipped_by_user
     * @param string $shipped_by_user Shipped by user
     * @return $this
     */
    public function setShippedByUser($shipped_by_user)
    {
        $this->container['shipped_by_user'] = $shipped_by_user;

        return $this;
    }

    /**
     * Gets shipped_dts
     * @return string
     */
    public function getShippedDts()
    {
        return $this->container['shipped_dts'];
    }

    /**
     * Sets shipped_dts
     * @param string $shipped_dts Date/time that this item was marked shipped
     * @return $this
     */
    public function setShippedDts($shipped_dts)
    {
        $this->container['shipped_dts'] = $shipped_dts;

        return $this;
    }

    /**
     * Gets special_product_type
     * @return string
     */
    public function getSpecialProductType()
    {
        return $this->container['special_product_type'];
    }

    /**
     * Sets special_product_type
     * @param string $special_product_type Special product type (USPS Media Mail)
     * @return $this
     */
    public function setSpecialProductType($special_product_type)
    {
        $this->container['special_product_type'] = $special_product_type;

        return $this;
    }

    /**
     * Gets tax_free
     * @return bool
     */
    public function getTaxFree()
    {
        return $this->container['tax_free'];
    }

    /**
     * Sets tax_free
     * @param bool $tax_free True if the item is tax free
     * @return $this
     */
    public function setTaxFree($tax_free)
    {
        $this->container['tax_free'] = $tax_free;

        return $this;
    }

    /**
     * Gets taxable_cost
     * @return \ultracart\v2\models\Currency
     */
    public function getTaxableCost()
    {
        return $this->container['taxable_cost'];
    }

    /**
     * Sets taxable_cost
     * @param \ultracart\v2\models\Currency $taxable_cost
     * @return $this
     */
    public function setTaxableCost($taxable_cost)
    {
        $this->container['taxable_cost'] = $taxable_cost;

        return $this;
    }

    /**
     * Gets total_cost_with_discount
     * @return \ultracart\v2\models\Currency
     */
    public function getTotalCostWithDiscount()
    {
        return $this->container['total_cost_with_discount'];
    }

    /**
     * Sets total_cost_with_discount
     * @param \ultracart\v2\models\Currency $total_cost_with_discount
     * @return $this
     */
    public function setTotalCostWithDiscount($total_cost_with_discount)
    {
        $this->container['total_cost_with_discount'] = $total_cost_with_discount;

        return $this;
    }

    /**
     * Gets total_refunded
     * @return \ultracart\v2\models\Currency
     */
    public function getTotalRefunded()
    {
        return $this->container['total_refunded'];
    }

    /**
     * Sets total_refunded
     * @param \ultracart\v2\models\Currency $total_refunded
     * @return $this
     */
    public function setTotalRefunded($total_refunded)
    {
        $this->container['total_refunded'] = $total_refunded;

        return $this;
    }

    /**
     * Gets transmitted_to_distribution_center_dts
     * @return string
     */
    public function getTransmittedToDistributionCenterDts()
    {
        return $this->container['transmitted_to_distribution_center_dts'];
    }

    /**
     * Sets transmitted_to_distribution_center_dts
     * @param string $transmitted_to_distribution_center_dts Date/time that this item was transmitted to the distribution center
     * @return $this
     */
    public function setTransmittedToDistributionCenterDts($transmitted_to_distribution_center_dts)
    {
        $this->container['transmitted_to_distribution_center_dts'] = $transmitted_to_distribution_center_dts;

        return $this;
    }

    /**
     * Gets unit_cost_with_discount
     * @return \ultracart\v2\models\Currency
     */
    public function getUnitCostWithDiscount()
    {
        return $this->container['unit_cost_with_discount'];
    }

    /**
     * Sets unit_cost_with_discount
     * @param \ultracart\v2\models\Currency $unit_cost_with_discount
     * @return $this
     */
    public function setUnitCostWithDiscount($unit_cost_with_discount)
    {
        $this->container['unit_cost_with_discount'] = $unit_cost_with_discount;

        return $this;
    }

    /**
     * Gets upsell
     * @return bool
     */
    public function getUpsell()
    {
        return $this->container['upsell'];
    }

    /**
     * Sets upsell
     * @param bool $upsell True if this item was added to the order as part of an upsell
     * @return $this
     */
    public function setUpsell($upsell)
    {
        $this->container['upsell'] = $upsell;

        return $this;
    }

    /**
     * Gets weight
     * @return \ultracart\v2\models\Weight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     * @param \ultracart\v2\models\Weight $weight
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     * @return \ultracart\v2\models\Distance
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param \ultracart\v2\models\Distance $width
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


