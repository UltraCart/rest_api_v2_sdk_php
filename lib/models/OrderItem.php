<?php
/**
 * OrderItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderItem Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounting_code' => 'string',
        'activation_codes' => 'string[]',
        'arbitrary_unit_cost' => '\ultracart\v2\models\Currency',
        'auto_order_last_rebill_dts' => 'string',
        'auto_order_schedule' => 'string',
        'barcode' => 'string',
        'channel_partner_item_id' => 'string',
        'cogs' => 'float',
        'component_unit_value' => 'float',
        'cost' => '\ultracart\v2\models\Currency',
        'country_code_of_origin' => 'string',
        'customs_description' => 'string',
        'description' => 'string',
        'discount' => '\ultracart\v2\models\Currency',
        'discount_quantity' => 'float',
        'discount_shipping_weight' => '\ultracart\v2\models\Weight',
        'distribution_center_code' => 'string',
        'edi' => '\ultracart\v2\models\OrderItemEdi',
        'exclude_coupon' => 'bool',
        'free_shipping' => 'bool',
        'hazmat' => 'bool',
        'height' => '\ultracart\v2\models\Distance',
        'item_reference_oid' => 'int',
        'kit' => 'bool',
        'kit_component' => 'bool',
        'length' => '\ultracart\v2\models\Distance',
        'manufacturer_sku' => 'string',
        'max_days_time_in_transit' => 'int',
        'merchant_item_id' => 'string',
        'mix_and_match_group_name' => 'string',
        'mix_and_match_group_oid' => 'int',
        'no_shipping_discount' => 'bool',
        'options' => '\ultracart\v2\models\OrderItemOption[]',
        'packed_by_user' => 'string',
        'perishable_class' => 'string',
        'pricing_tier_name' => 'string',
        'properties' => '\ultracart\v2\models\OrderItemProperty[]',
        'quantity' => 'float',
        'quantity_refunded' => 'float',
        'quickbooks_class' => 'string',
        'ship_separately' => 'bool',
        'shipped_by_user' => 'string',
        'shipped_dts' => 'string',
        'shipping_status' => 'string',
        'special_product_type' => 'string',
        'tags' => '\ultracart\v2\models\OrderItemTag[]',
        'tax_free' => 'bool',
        'tax_product_type' => 'string',
        'taxable_cost' => '\ultracart\v2\models\Currency',
        'total_cost_with_discount' => '\ultracart\v2\models\Currency',
        'total_refunded' => '\ultracart\v2\models\Currency',
        'transmitted_to_distribution_center_dts' => 'string',
        'unit_cost_with_discount' => '\ultracart\v2\models\Currency',
        'upsell' => 'bool',
        'weight' => '\ultracart\v2\models\Weight',
        'width' => '\ultracart\v2\models\Distance'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accounting_code' => null,
        'activation_codes' => null,
        'arbitrary_unit_cost' => null,
        'auto_order_last_rebill_dts' => 'dateTime',
        'auto_order_schedule' => null,
        'barcode' => null,
        'channel_partner_item_id' => null,
        'cogs' => null,
        'component_unit_value' => null,
        'cost' => null,
        'country_code_of_origin' => null,
        'customs_description' => null,
        'description' => null,
        'discount' => null,
        'discount_quantity' => null,
        'discount_shipping_weight' => null,
        'distribution_center_code' => null,
        'edi' => null,
        'exclude_coupon' => null,
        'free_shipping' => null,
        'hazmat' => null,
        'height' => null,
        'item_reference_oid' => 'int32',
        'kit' => null,
        'kit_component' => null,
        'length' => null,
        'manufacturer_sku' => null,
        'max_days_time_in_transit' => 'int32',
        'merchant_item_id' => null,
        'mix_and_match_group_name' => null,
        'mix_and_match_group_oid' => 'int32',
        'no_shipping_discount' => null,
        'options' => null,
        'packed_by_user' => null,
        'perishable_class' => null,
        'pricing_tier_name' => null,
        'properties' => null,
        'quantity' => null,
        'quantity_refunded' => null,
        'quickbooks_class' => null,
        'ship_separately' => null,
        'shipped_by_user' => null,
        'shipped_dts' => 'dateTime',
        'shipping_status' => null,
        'special_product_type' => null,
        'tags' => null,
        'tax_free' => null,
        'tax_product_type' => null,
        'taxable_cost' => null,
        'total_cost_with_discount' => null,
        'total_refunded' => null,
        'transmitted_to_distribution_center_dts' => 'dateTime',
        'unit_cost_with_discount' => null,
        'upsell' => null,
        'weight' => null,
        'width' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounting_code' => 'accounting_code',
        'activation_codes' => 'activation_codes',
        'arbitrary_unit_cost' => 'arbitrary_unit_cost',
        'auto_order_last_rebill_dts' => 'auto_order_last_rebill_dts',
        'auto_order_schedule' => 'auto_order_schedule',
        'barcode' => 'barcode',
        'channel_partner_item_id' => 'channel_partner_item_id',
        'cogs' => 'cogs',
        'component_unit_value' => 'component_unit_value',
        'cost' => 'cost',
        'country_code_of_origin' => 'country_code_of_origin',
        'customs_description' => 'customs_description',
        'description' => 'description',
        'discount' => 'discount',
        'discount_quantity' => 'discount_quantity',
        'discount_shipping_weight' => 'discount_shipping_weight',
        'distribution_center_code' => 'distribution_center_code',
        'edi' => 'edi',
        'exclude_coupon' => 'exclude_coupon',
        'free_shipping' => 'free_shipping',
        'hazmat' => 'hazmat',
        'height' => 'height',
        'item_reference_oid' => 'item_reference_oid',
        'kit' => 'kit',
        'kit_component' => 'kit_component',
        'length' => 'length',
        'manufacturer_sku' => 'manufacturer_sku',
        'max_days_time_in_transit' => 'max_days_time_in_transit',
        'merchant_item_id' => 'merchant_item_id',
        'mix_and_match_group_name' => 'mix_and_match_group_name',
        'mix_and_match_group_oid' => 'mix_and_match_group_oid',
        'no_shipping_discount' => 'no_shipping_discount',
        'options' => 'options',
        'packed_by_user' => 'packed_by_user',
        'perishable_class' => 'perishable_class',
        'pricing_tier_name' => 'pricing_tier_name',
        'properties' => 'properties',
        'quantity' => 'quantity',
        'quantity_refunded' => 'quantity_refunded',
        'quickbooks_class' => 'quickbooks_class',
        'ship_separately' => 'ship_separately',
        'shipped_by_user' => 'shipped_by_user',
        'shipped_dts' => 'shipped_dts',
        'shipping_status' => 'shipping_status',
        'special_product_type' => 'special_product_type',
        'tags' => 'tags',
        'tax_free' => 'tax_free',
        'tax_product_type' => 'tax_product_type',
        'taxable_cost' => 'taxable_cost',
        'total_cost_with_discount' => 'total_cost_with_discount',
        'total_refunded' => 'total_refunded',
        'transmitted_to_distribution_center_dts' => 'transmitted_to_distribution_center_dts',
        'unit_cost_with_discount' => 'unit_cost_with_discount',
        'upsell' => 'upsell',
        'weight' => 'weight',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounting_code' => 'setAccountingCode',
        'activation_codes' => 'setActivationCodes',
        'arbitrary_unit_cost' => 'setArbitraryUnitCost',
        'auto_order_last_rebill_dts' => 'setAutoOrderLastRebillDts',
        'auto_order_schedule' => 'setAutoOrderSchedule',
        'barcode' => 'setBarcode',
        'channel_partner_item_id' => 'setChannelPartnerItemId',
        'cogs' => 'setCogs',
        'component_unit_value' => 'setComponentUnitValue',
        'cost' => 'setCost',
        'country_code_of_origin' => 'setCountryCodeOfOrigin',
        'customs_description' => 'setCustomsDescription',
        'description' => 'setDescription',
        'discount' => 'setDiscount',
        'discount_quantity' => 'setDiscountQuantity',
        'discount_shipping_weight' => 'setDiscountShippingWeight',
        'distribution_center_code' => 'setDistributionCenterCode',
        'edi' => 'setEdi',
        'exclude_coupon' => 'setExcludeCoupon',
        'free_shipping' => 'setFreeShipping',
        'hazmat' => 'setHazmat',
        'height' => 'setHeight',
        'item_reference_oid' => 'setItemReferenceOid',
        'kit' => 'setKit',
        'kit_component' => 'setKitComponent',
        'length' => 'setLength',
        'manufacturer_sku' => 'setManufacturerSku',
        'max_days_time_in_transit' => 'setMaxDaysTimeInTransit',
        'merchant_item_id' => 'setMerchantItemId',
        'mix_and_match_group_name' => 'setMixAndMatchGroupName',
        'mix_and_match_group_oid' => 'setMixAndMatchGroupOid',
        'no_shipping_discount' => 'setNoShippingDiscount',
        'options' => 'setOptions',
        'packed_by_user' => 'setPackedByUser',
        'perishable_class' => 'setPerishableClass',
        'pricing_tier_name' => 'setPricingTierName',
        'properties' => 'setProperties',
        'quantity' => 'setQuantity',
        'quantity_refunded' => 'setQuantityRefunded',
        'quickbooks_class' => 'setQuickbooksClass',
        'ship_separately' => 'setShipSeparately',
        'shipped_by_user' => 'setShippedByUser',
        'shipped_dts' => 'setShippedDts',
        'shipping_status' => 'setShippingStatus',
        'special_product_type' => 'setSpecialProductType',
        'tags' => 'setTags',
        'tax_free' => 'setTaxFree',
        'tax_product_type' => 'setTaxProductType',
        'taxable_cost' => 'setTaxableCost',
        'total_cost_with_discount' => 'setTotalCostWithDiscount',
        'total_refunded' => 'setTotalRefunded',
        'transmitted_to_distribution_center_dts' => 'setTransmittedToDistributionCenterDts',
        'unit_cost_with_discount' => 'setUnitCostWithDiscount',
        'upsell' => 'setUpsell',
        'weight' => 'setWeight',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounting_code' => 'getAccountingCode',
        'activation_codes' => 'getActivationCodes',
        'arbitrary_unit_cost' => 'getArbitraryUnitCost',
        'auto_order_last_rebill_dts' => 'getAutoOrderLastRebillDts',
        'auto_order_schedule' => 'getAutoOrderSchedule',
        'barcode' => 'getBarcode',
        'channel_partner_item_id' => 'getChannelPartnerItemId',
        'cogs' => 'getCogs',
        'component_unit_value' => 'getComponentUnitValue',
        'cost' => 'getCost',
        'country_code_of_origin' => 'getCountryCodeOfOrigin',
        'customs_description' => 'getCustomsDescription',
        'description' => 'getDescription',
        'discount' => 'getDiscount',
        'discount_quantity' => 'getDiscountQuantity',
        'discount_shipping_weight' => 'getDiscountShippingWeight',
        'distribution_center_code' => 'getDistributionCenterCode',
        'edi' => 'getEdi',
        'exclude_coupon' => 'getExcludeCoupon',
        'free_shipping' => 'getFreeShipping',
        'hazmat' => 'getHazmat',
        'height' => 'getHeight',
        'item_reference_oid' => 'getItemReferenceOid',
        'kit' => 'getKit',
        'kit_component' => 'getKitComponent',
        'length' => 'getLength',
        'manufacturer_sku' => 'getManufacturerSku',
        'max_days_time_in_transit' => 'getMaxDaysTimeInTransit',
        'merchant_item_id' => 'getMerchantItemId',
        'mix_and_match_group_name' => 'getMixAndMatchGroupName',
        'mix_and_match_group_oid' => 'getMixAndMatchGroupOid',
        'no_shipping_discount' => 'getNoShippingDiscount',
        'options' => 'getOptions',
        'packed_by_user' => 'getPackedByUser',
        'perishable_class' => 'getPerishableClass',
        'pricing_tier_name' => 'getPricingTierName',
        'properties' => 'getProperties',
        'quantity' => 'getQuantity',
        'quantity_refunded' => 'getQuantityRefunded',
        'quickbooks_class' => 'getQuickbooksClass',
        'ship_separately' => 'getShipSeparately',
        'shipped_by_user' => 'getShippedByUser',
        'shipped_dts' => 'getShippedDts',
        'shipping_status' => 'getShippingStatus',
        'special_product_type' => 'getSpecialProductType',
        'tags' => 'getTags',
        'tax_free' => 'getTaxFree',
        'tax_product_type' => 'getTaxProductType',
        'taxable_cost' => 'getTaxableCost',
        'total_cost_with_discount' => 'getTotalCostWithDiscount',
        'total_refunded' => 'getTotalRefunded',
        'transmitted_to_distribution_center_dts' => 'getTransmittedToDistributionCenterDts',
        'unit_cost_with_discount' => 'getUnitCostWithDiscount',
        'upsell' => 'getUpsell',
        'weight' => 'getWeight',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TAX_PRODUCT_TYPE_EMPTY = '';
    public const TAX_PRODUCT_TYPE_DIGITAL = 'digital';
    public const TAX_PRODUCT_TYPE_PHYSICAL = 'physical';
    public const TAX_PRODUCT_TYPE_SERVICE = 'service';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxProductTypeAllowableValues()
    {
        return [
            self::TAX_PRODUCT_TYPE_EMPTY,
            self::TAX_PRODUCT_TYPE_DIGITAL,
            self::TAX_PRODUCT_TYPE_PHYSICAL,
            self::TAX_PRODUCT_TYPE_SERVICE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounting_code'] = $data['accounting_code'] ?? null;
        $this->container['activation_codes'] = $data['activation_codes'] ?? null;
        $this->container['arbitrary_unit_cost'] = $data['arbitrary_unit_cost'] ?? null;
        $this->container['auto_order_last_rebill_dts'] = $data['auto_order_last_rebill_dts'] ?? null;
        $this->container['auto_order_schedule'] = $data['auto_order_schedule'] ?? null;
        $this->container['barcode'] = $data['barcode'] ?? null;
        $this->container['channel_partner_item_id'] = $data['channel_partner_item_id'] ?? null;
        $this->container['cogs'] = $data['cogs'] ?? null;
        $this->container['component_unit_value'] = $data['component_unit_value'] ?? null;
        $this->container['cost'] = $data['cost'] ?? null;
        $this->container['country_code_of_origin'] = $data['country_code_of_origin'] ?? null;
        $this->container['customs_description'] = $data['customs_description'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['discount'] = $data['discount'] ?? null;
        $this->container['discount_quantity'] = $data['discount_quantity'] ?? null;
        $this->container['discount_shipping_weight'] = $data['discount_shipping_weight'] ?? null;
        $this->container['distribution_center_code'] = $data['distribution_center_code'] ?? null;
        $this->container['edi'] = $data['edi'] ?? null;
        $this->container['exclude_coupon'] = $data['exclude_coupon'] ?? null;
        $this->container['free_shipping'] = $data['free_shipping'] ?? null;
        $this->container['hazmat'] = $data['hazmat'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['item_reference_oid'] = $data['item_reference_oid'] ?? null;
        $this->container['kit'] = $data['kit'] ?? null;
        $this->container['kit_component'] = $data['kit_component'] ?? null;
        $this->container['length'] = $data['length'] ?? null;
        $this->container['manufacturer_sku'] = $data['manufacturer_sku'] ?? null;
        $this->container['max_days_time_in_transit'] = $data['max_days_time_in_transit'] ?? null;
        $this->container['merchant_item_id'] = $data['merchant_item_id'] ?? null;
        $this->container['mix_and_match_group_name'] = $data['mix_and_match_group_name'] ?? null;
        $this->container['mix_and_match_group_oid'] = $data['mix_and_match_group_oid'] ?? null;
        $this->container['no_shipping_discount'] = $data['no_shipping_discount'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['packed_by_user'] = $data['packed_by_user'] ?? null;
        $this->container['perishable_class'] = $data['perishable_class'] ?? null;
        $this->container['pricing_tier_name'] = $data['pricing_tier_name'] ?? null;
        $this->container['properties'] = $data['properties'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['quantity_refunded'] = $data['quantity_refunded'] ?? null;
        $this->container['quickbooks_class'] = $data['quickbooks_class'] ?? null;
        $this->container['ship_separately'] = $data['ship_separately'] ?? null;
        $this->container['shipped_by_user'] = $data['shipped_by_user'] ?? null;
        $this->container['shipped_dts'] = $data['shipped_dts'] ?? null;
        $this->container['shipping_status'] = $data['shipping_status'] ?? null;
        $this->container['special_product_type'] = $data['special_product_type'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['tax_free'] = $data['tax_free'] ?? null;
        $this->container['tax_product_type'] = $data['tax_product_type'] ?? null;
        $this->container['taxable_cost'] = $data['taxable_cost'] ?? null;
        $this->container['total_cost_with_discount'] = $data['total_cost_with_discount'] ?? null;
        $this->container['total_refunded'] = $data['total_refunded'] ?? null;
        $this->container['transmitted_to_distribution_center_dts'] = $data['transmitted_to_distribution_center_dts'] ?? null;
        $this->container['unit_cost_with_discount'] = $data['unit_cost_with_discount'] ?? null;
        $this->container['upsell'] = $data['upsell'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['width'] = $data['width'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['channel_partner_item_id']) && (mb_strlen($this->container['channel_partner_item_id']) > 30)) {
            $invalidProperties[] = "invalid value for 'channel_partner_item_id', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['country_code_of_origin']) && (mb_strlen($this->container['country_code_of_origin']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code_of_origin', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 2000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['merchant_item_id']) && (mb_strlen($this->container['merchant_item_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'merchant_item_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['perishable_class']) && (mb_strlen($this->container['perishable_class']) > 50)) {
            $invalidProperties[] = "invalid value for 'perishable_class', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['quickbooks_class']) && (mb_strlen($this->container['quickbooks_class']) > 31)) {
            $invalidProperties[] = "invalid value for 'quickbooks_class', the character length must be smaller than or equal to 31.";
        }

        $allowedValues = $this->getTaxProductTypeAllowableValues();
        if (!is_null($this->container['tax_product_type']) && !in_array($this->container['tax_product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_product_type', must be one of '%s'",
                $this->container['tax_product_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounting_code
     *
     * @return string|null
     */
    public function getAccountingCode()
    {
        return $this->container['accounting_code'];
    }

    /**
     * Sets accounting_code
     *
     * @param string|null $accounting_code QuickBooks code
     *
     * @return self
     */
    public function setAccountingCode($accounting_code)
    {
        $this->container['accounting_code'] = $accounting_code;

        return $this;
    }

    /**
     * Gets activation_codes
     *
     * @return string[]|null
     */
    public function getActivationCodes()
    {
        return $this->container['activation_codes'];
    }

    /**
     * Sets activation_codes
     *
     * @param string[]|null $activation_codes Activation codes assigned to this item
     *
     * @return self
     */
    public function setActivationCodes($activation_codes)
    {
        $this->container['activation_codes'] = $activation_codes;

        return $this;
    }

    /**
     * Gets arbitrary_unit_cost
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getArbitraryUnitCost()
    {
        return $this->container['arbitrary_unit_cost'];
    }

    /**
     * Sets arbitrary_unit_cost
     *
     * @param \ultracart\v2\models\Currency|null $arbitrary_unit_cost arbitrary_unit_cost
     *
     * @return self
     */
    public function setArbitraryUnitCost($arbitrary_unit_cost)
    {
        $this->container['arbitrary_unit_cost'] = $arbitrary_unit_cost;

        return $this;
    }

    /**
     * Gets auto_order_last_rebill_dts
     *
     * @return string|null
     */
    public function getAutoOrderLastRebillDts()
    {
        return $this->container['auto_order_last_rebill_dts'];
    }

    /**
     * Sets auto_order_last_rebill_dts
     *
     * @param string|null $auto_order_last_rebill_dts Date/time of the last rebill, used only during order insert to help project future rebills
     *
     * @return self
     */
    public function setAutoOrderLastRebillDts($auto_order_last_rebill_dts)
    {
        $this->container['auto_order_last_rebill_dts'] = $auto_order_last_rebill_dts;

        return $this;
    }

    /**
     * Gets auto_order_schedule
     *
     * @return string|null
     */
    public function getAutoOrderSchedule()
    {
        return $this->container['auto_order_schedule'];
    }

    /**
     * Sets auto_order_schedule
     *
     * @param string|null $auto_order_schedule Auto order schedule, used only during inserts supplying the recurring schedule
     *
     * @return self
     */
    public function setAutoOrderSchedule($auto_order_schedule)
    {
        $this->container['auto_order_schedule'] = $auto_order_schedule;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode Barcode
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets channel_partner_item_id
     *
     * @return string|null
     */
    public function getChannelPartnerItemId()
    {
        return $this->container['channel_partner_item_id'];
    }

    /**
     * Sets channel_partner_item_id
     *
     * @param string|null $channel_partner_item_id Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id
     *
     * @return self
     */
    public function setChannelPartnerItemId($channel_partner_item_id)
    {
        if (!is_null($channel_partner_item_id) && (mb_strlen($channel_partner_item_id) > 30)) {
            throw new \InvalidArgumentException('invalid length for $channel_partner_item_id when calling OrderItem., must be smaller than or equal to 30.');
        }

        $this->container['channel_partner_item_id'] = $channel_partner_item_id;

        return $this;
    }

    /**
     * Gets cogs
     *
     * @return float|null
     */
    public function getCogs()
    {
        return $this->container['cogs'];
    }

    /**
     * Sets cogs
     *
     * @param float|null $cogs Cost of goods sold
     *
     * @return self
     */
    public function setCogs($cogs)
    {
        $this->container['cogs'] = $cogs;

        return $this;
    }

    /**
     * Gets component_unit_value
     *
     * @return float|null
     */
    public function getComponentUnitValue()
    {
        return $this->container['component_unit_value'];
    }

    /**
     * Sets component_unit_value
     *
     * @param float|null $component_unit_value Value of the kit component item
     *
     * @return self
     */
    public function setComponentUnitValue($component_unit_value)
    {
        $this->container['component_unit_value'] = $component_unit_value;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param \ultracart\v2\models\Currency|null $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets country_code_of_origin
     *
     * @return string|null
     */
    public function getCountryCodeOfOrigin()
    {
        return $this->container['country_code_of_origin'];
    }

    /**
     * Sets country_code_of_origin
     *
     * @param string|null $country_code_of_origin Country of origin (ISO-3166 two letter code)
     *
     * @return self
     */
    public function setCountryCodeOfOrigin($country_code_of_origin)
    {
        if (!is_null($country_code_of_origin) && (mb_strlen($country_code_of_origin) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code_of_origin when calling OrderItem., must be smaller than or equal to 2.');
        }

        $this->container['country_code_of_origin'] = $country_code_of_origin;

        return $this;
    }

    /**
     * Gets customs_description
     *
     * @return string|null
     */
    public function getCustomsDescription()
    {
        return $this->container['customs_description'];
    }

    /**
     * Sets customs_description
     *
     * @param string|null $customs_description Customs description
     *
     * @return self
     */
    public function setCustomsDescription($customs_description)
    {
        $this->container['customs_description'] = $customs_description;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling OrderItem., must be smaller than or equal to 2000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \ultracart\v2\models\Currency|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discount_quantity
     *
     * @return float|null
     */
    public function getDiscountQuantity()
    {
        return $this->container['discount_quantity'];
    }

    /**
     * Sets discount_quantity
     *
     * @param float|null $discount_quantity Discount quantity
     *
     * @return self
     */
    public function setDiscountQuantity($discount_quantity)
    {
        $this->container['discount_quantity'] = $discount_quantity;

        return $this;
    }

    /**
     * Gets discount_shipping_weight
     *
     * @return \ultracart\v2\models\Weight|null
     */
    public function getDiscountShippingWeight()
    {
        return $this->container['discount_shipping_weight'];
    }

    /**
     * Sets discount_shipping_weight
     *
     * @param \ultracart\v2\models\Weight|null $discount_shipping_weight discount_shipping_weight
     *
     * @return self
     */
    public function setDiscountShippingWeight($discount_shipping_weight)
    {
        $this->container['discount_shipping_weight'] = $discount_shipping_weight;

        return $this;
    }

    /**
     * Gets distribution_center_code
     *
     * @return string|null
     */
    public function getDistributionCenterCode()
    {
        return $this->container['distribution_center_code'];
    }

    /**
     * Sets distribution_center_code
     *
     * @param string|null $distribution_center_code Distribution center code responsible for shipping this item
     *
     * @return self
     */
    public function setDistributionCenterCode($distribution_center_code)
    {
        $this->container['distribution_center_code'] = $distribution_center_code;

        return $this;
    }

    /**
     * Gets edi
     *
     * @return \ultracart\v2\models\OrderItemEdi|null
     */
    public function getEdi()
    {
        return $this->container['edi'];
    }

    /**
     * Sets edi
     *
     * @param \ultracart\v2\models\OrderItemEdi|null $edi edi
     *
     * @return self
     */
    public function setEdi($edi)
    {
        $this->container['edi'] = $edi;

        return $this;
    }

    /**
     * Gets exclude_coupon
     *
     * @return bool|null
     */
    public function getExcludeCoupon()
    {
        return $this->container['exclude_coupon'];
    }

    /**
     * Sets exclude_coupon
     *
     * @param bool|null $exclude_coupon True if this item is excluded from coupons
     *
     * @return self
     */
    public function setExcludeCoupon($exclude_coupon)
    {
        $this->container['exclude_coupon'] = $exclude_coupon;

        return $this;
    }

    /**
     * Gets free_shipping
     *
     * @return bool|null
     */
    public function getFreeShipping()
    {
        return $this->container['free_shipping'];
    }

    /**
     * Sets free_shipping
     *
     * @param bool|null $free_shipping True if the item receives free shipping
     *
     * @return self
     */
    public function setFreeShipping($free_shipping)
    {
        $this->container['free_shipping'] = $free_shipping;

        return $this;
    }

    /**
     * Gets hazmat
     *
     * @return bool|null
     */
    public function getHazmat()
    {
        return $this->container['hazmat'];
    }

    /**
     * Sets hazmat
     *
     * @param bool|null $hazmat Hazardous materials indicator
     *
     * @return self
     */
    public function setHazmat($hazmat)
    {
        $this->container['hazmat'] = $hazmat;

        return $this;
    }

    /**
     * Gets height
     *
     * @return \ultracart\v2\models\Distance|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param \ultracart\v2\models\Distance|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets item_reference_oid
     *
     * @return int|null
     */
    public function getItemReferenceOid()
    {
        return $this->container['item_reference_oid'];
    }

    /**
     * Sets item_reference_oid
     *
     * @param int|null $item_reference_oid Item reference object identifier used to linked to auto order item record
     *
     * @return self
     */
    public function setItemReferenceOid($item_reference_oid)
    {
        $this->container['item_reference_oid'] = $item_reference_oid;

        return $this;
    }

    /**
     * Gets kit
     *
     * @return bool|null
     */
    public function getKit()
    {
        return $this->container['kit'];
    }

    /**
     * Sets kit
     *
     * @param bool|null $kit True if this item is a kit
     *
     * @return self
     */
    public function setKit($kit)
    {
        $this->container['kit'] = $kit;

        return $this;
    }

    /**
     * Gets kit_component
     *
     * @return bool|null
     */
    public function getKitComponent()
    {
        return $this->container['kit_component'];
    }

    /**
     * Sets kit_component
     *
     * @param bool|null $kit_component True if this item is a kit component
     *
     * @return self
     */
    public function setKitComponent($kit_component)
    {
        $this->container['kit_component'] = $kit_component;

        return $this;
    }

    /**
     * Gets length
     *
     * @return \ultracart\v2\models\Distance|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param \ultracart\v2\models\Distance|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets manufacturer_sku
     *
     * @return string|null
     */
    public function getManufacturerSku()
    {
        return $this->container['manufacturer_sku'];
    }

    /**
     * Sets manufacturer_sku
     *
     * @param string|null $manufacturer_sku Manufacturer SKU
     *
     * @return self
     */
    public function setManufacturerSku($manufacturer_sku)
    {
        $this->container['manufacturer_sku'] = $manufacturer_sku;

        return $this;
    }

    /**
     * Gets max_days_time_in_transit
     *
     * @return int|null
     */
    public function getMaxDaysTimeInTransit()
    {
        return $this->container['max_days_time_in_transit'];
    }

    /**
     * Sets max_days_time_in_transit
     *
     * @param int|null $max_days_time_in_transit Maximum days that the item can be in transit before spoilage (perishable products)
     *
     * @return self
     */
    public function setMaxDaysTimeInTransit($max_days_time_in_transit)
    {
        $this->container['max_days_time_in_transit'] = $max_days_time_in_transit;

        return $this;
    }

    /**
     * Gets merchant_item_id
     *
     * @return string|null
     */
    public function getMerchantItemId()
    {
        return $this->container['merchant_item_id'];
    }

    /**
     * Sets merchant_item_id
     *
     * @param string|null $merchant_item_id Item ID
     *
     * @return self
     */
    public function setMerchantItemId($merchant_item_id)
    {
        if (!is_null($merchant_item_id) && (mb_strlen($merchant_item_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $merchant_item_id when calling OrderItem., must be smaller than or equal to 20.');
        }

        $this->container['merchant_item_id'] = $merchant_item_id;

        return $this;
    }

    /**
     * Gets mix_and_match_group_name
     *
     * @return string|null
     */
    public function getMixAndMatchGroupName()
    {
        return $this->container['mix_and_match_group_name'];
    }

    /**
     * Sets mix_and_match_group_name
     *
     * @param string|null $mix_and_match_group_name Mix and match group name
     *
     * @return self
     */
    public function setMixAndMatchGroupName($mix_and_match_group_name)
    {
        $this->container['mix_and_match_group_name'] = $mix_and_match_group_name;

        return $this;
    }

    /**
     * Gets mix_and_match_group_oid
     *
     * @return int|null
     */
    public function getMixAndMatchGroupOid()
    {
        return $this->container['mix_and_match_group_oid'];
    }

    /**
     * Sets mix_and_match_group_oid
     *
     * @param int|null $mix_and_match_group_oid Mix and match group object identifier
     *
     * @return self
     */
    public function setMixAndMatchGroupOid($mix_and_match_group_oid)
    {
        $this->container['mix_and_match_group_oid'] = $mix_and_match_group_oid;

        return $this;
    }

    /**
     * Gets no_shipping_discount
     *
     * @return bool|null
     */
    public function getNoShippingDiscount()
    {
        return $this->container['no_shipping_discount'];
    }

    /**
     * Sets no_shipping_discount
     *
     * @param bool|null $no_shipping_discount True if this item is excluded from shipping discounts
     *
     * @return self
     */
    public function setNoShippingDiscount($no_shipping_discount)
    {
        $this->container['no_shipping_discount'] = $no_shipping_discount;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \ultracart\v2\models\OrderItemOption[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \ultracart\v2\models\OrderItemOption[]|null $options Options
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets packed_by_user
     *
     * @return string|null
     */
    public function getPackedByUser()
    {
        return $this->container['packed_by_user'];
    }

    /**
     * Sets packed_by_user
     *
     * @param string|null $packed_by_user Packed by user
     *
     * @return self
     */
    public function setPackedByUser($packed_by_user)
    {
        $this->container['packed_by_user'] = $packed_by_user;

        return $this;
    }

    /**
     * Gets perishable_class
     *
     * @return string|null
     */
    public function getPerishableClass()
    {
        return $this->container['perishable_class'];
    }

    /**
     * Sets perishable_class
     *
     * @param string|null $perishable_class Perishable class of the item
     *
     * @return self
     */
    public function setPerishableClass($perishable_class)
    {
        if (!is_null($perishable_class) && (mb_strlen($perishable_class) > 50)) {
            throw new \InvalidArgumentException('invalid length for $perishable_class when calling OrderItem., must be smaller than or equal to 50.');
        }

        $this->container['perishable_class'] = $perishable_class;

        return $this;
    }

    /**
     * Gets pricing_tier_name
     *
     * @return string|null
     */
    public function getPricingTierName()
    {
        return $this->container['pricing_tier_name'];
    }

    /**
     * Sets pricing_tier_name
     *
     * @param string|null $pricing_tier_name Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned
     *
     * @return self
     */
    public function setPricingTierName($pricing_tier_name)
    {
        $this->container['pricing_tier_name'] = $pricing_tier_name;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \ultracart\v2\models\OrderItemProperty[]|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \ultracart\v2\models\OrderItemProperty[]|null $properties Properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity Quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_refunded
     *
     * @return float|null
     */
    public function getQuantityRefunded()
    {
        return $this->container['quantity_refunded'];
    }

    /**
     * Sets quantity_refunded
     *
     * @param float|null $quantity_refunded Quantity refunded on this item (read only except refund operation)
     *
     * @return self
     */
    public function setQuantityRefunded($quantity_refunded)
    {
        $this->container['quantity_refunded'] = $quantity_refunded;

        return $this;
    }

    /**
     * Gets quickbooks_class
     *
     * @return string|null
     */
    public function getQuickbooksClass()
    {
        return $this->container['quickbooks_class'];
    }

    /**
     * Sets quickbooks_class
     *
     * @param string|null $quickbooks_class QuickBooks class
     *
     * @return self
     */
    public function setQuickbooksClass($quickbooks_class)
    {
        if (!is_null($quickbooks_class) && (mb_strlen($quickbooks_class) > 31)) {
            throw new \InvalidArgumentException('invalid length for $quickbooks_class when calling OrderItem., must be smaller than or equal to 31.');
        }

        $this->container['quickbooks_class'] = $quickbooks_class;

        return $this;
    }

    /**
     * Gets ship_separately
     *
     * @return bool|null
     */
    public function getShipSeparately()
    {
        return $this->container['ship_separately'];
    }

    /**
     * Sets ship_separately
     *
     * @param bool|null $ship_separately True if this item ships in a separate box
     *
     * @return self
     */
    public function setShipSeparately($ship_separately)
    {
        $this->container['ship_separately'] = $ship_separately;

        return $this;
    }

    /**
     * Gets shipped_by_user
     *
     * @return string|null
     */
    public function getShippedByUser()
    {
        return $this->container['shipped_by_user'];
    }

    /**
     * Sets shipped_by_user
     *
     * @param string|null $shipped_by_user Shipped by user
     *
     * @return self
     */
    public function setShippedByUser($shipped_by_user)
    {
        $this->container['shipped_by_user'] = $shipped_by_user;

        return $this;
    }

    /**
     * Gets shipped_dts
     *
     * @return string|null
     */
    public function getShippedDts()
    {
        return $this->container['shipped_dts'];
    }

    /**
     * Sets shipped_dts
     *
     * @param string|null $shipped_dts Date/time that this item was marked shipped
     *
     * @return self
     */
    public function setShippedDts($shipped_dts)
    {
        $this->container['shipped_dts'] = $shipped_dts;

        return $this;
    }

    /**
     * Gets shipping_status
     *
     * @return string|null
     */
    public function getShippingStatus()
    {
        return $this->container['shipping_status'];
    }

    /**
     * Sets shipping_status
     *
     * @param string|null $shipping_status Shipping status for this item.  This is the replacement for the old order level shipping status.
     *
     * @return self
     */
    public function setShippingStatus($shipping_status)
    {
        $this->container['shipping_status'] = $shipping_status;

        return $this;
    }

    /**
     * Gets special_product_type
     *
     * @return string|null
     */
    public function getSpecialProductType()
    {
        return $this->container['special_product_type'];
    }

    /**
     * Sets special_product_type
     *
     * @param string|null $special_product_type Special product type (USPS Media Mail)
     *
     * @return self
     */
    public function setSpecialProductType($special_product_type)
    {
        $this->container['special_product_type'] = $special_product_type;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \ultracart\v2\models\OrderItemTag[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \ultracart\v2\models\OrderItemTag[]|null $tags Tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets tax_free
     *
     * @return bool|null
     */
    public function getTaxFree()
    {
        return $this->container['tax_free'];
    }

    /**
     * Sets tax_free
     *
     * @param bool|null $tax_free True if the item is tax free
     *
     * @return self
     */
    public function setTaxFree($tax_free)
    {
        $this->container['tax_free'] = $tax_free;

        return $this;
    }

    /**
     * Gets tax_product_type
     *
     * @return string|null
     */
    public function getTaxProductType()
    {
        return $this->container['tax_product_type'];
    }

    /**
     * Sets tax_product_type
     *
     * @param string|null $tax_product_type Type of product for tax purposes (self or UltraCart Managed taxes)
     *
     * @return self
     */
    public function setTaxProductType($tax_product_type)
    {
        $allowedValues = $this->getTaxProductTypeAllowableValues();
        if (!is_null($tax_product_type) && !in_array($tax_product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_product_type', must be one of '%s'",
                    $tax_product_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_product_type'] = $tax_product_type;

        return $this;
    }

    /**
     * Gets taxable_cost
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getTaxableCost()
    {
        return $this->container['taxable_cost'];
    }

    /**
     * Sets taxable_cost
     *
     * @param \ultracart\v2\models\Currency|null $taxable_cost taxable_cost
     *
     * @return self
     */
    public function setTaxableCost($taxable_cost)
    {
        $this->container['taxable_cost'] = $taxable_cost;

        return $this;
    }

    /**
     * Gets total_cost_with_discount
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getTotalCostWithDiscount()
    {
        return $this->container['total_cost_with_discount'];
    }

    /**
     * Sets total_cost_with_discount
     *
     * @param \ultracart\v2\models\Currency|null $total_cost_with_discount total_cost_with_discount
     *
     * @return self
     */
    public function setTotalCostWithDiscount($total_cost_with_discount)
    {
        $this->container['total_cost_with_discount'] = $total_cost_with_discount;

        return $this;
    }

    /**
     * Gets total_refunded
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getTotalRefunded()
    {
        return $this->container['total_refunded'];
    }

    /**
     * Sets total_refunded
     *
     * @param \ultracart\v2\models\Currency|null $total_refunded total_refunded
     *
     * @return self
     */
    public function setTotalRefunded($total_refunded)
    {
        $this->container['total_refunded'] = $total_refunded;

        return $this;
    }

    /**
     * Gets transmitted_to_distribution_center_dts
     *
     * @return string|null
     */
    public function getTransmittedToDistributionCenterDts()
    {
        return $this->container['transmitted_to_distribution_center_dts'];
    }

    /**
     * Sets transmitted_to_distribution_center_dts
     *
     * @param string|null $transmitted_to_distribution_center_dts Date/time that this item was transmitted to the distribution center
     *
     * @return self
     */
    public function setTransmittedToDistributionCenterDts($transmitted_to_distribution_center_dts)
    {
        $this->container['transmitted_to_distribution_center_dts'] = $transmitted_to_distribution_center_dts;

        return $this;
    }

    /**
     * Gets unit_cost_with_discount
     *
     * @return \ultracart\v2\models\Currency|null
     */
    public function getUnitCostWithDiscount()
    {
        return $this->container['unit_cost_with_discount'];
    }

    /**
     * Sets unit_cost_with_discount
     *
     * @param \ultracart\v2\models\Currency|null $unit_cost_with_discount unit_cost_with_discount
     *
     * @return self
     */
    public function setUnitCostWithDiscount($unit_cost_with_discount)
    {
        $this->container['unit_cost_with_discount'] = $unit_cost_with_discount;

        return $this;
    }

    /**
     * Gets upsell
     *
     * @return bool|null
     */
    public function getUpsell()
    {
        return $this->container['upsell'];
    }

    /**
     * Sets upsell
     *
     * @param bool|null $upsell True if this item was added to the order as part of an upsell
     *
     * @return self
     */
    public function setUpsell($upsell)
    {
        $this->container['upsell'] = $upsell;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \ultracart\v2\models\Weight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \ultracart\v2\models\Weight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     *
     * @return \ultracart\v2\models\Distance|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param \ultracart\v2\models\Distance|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


