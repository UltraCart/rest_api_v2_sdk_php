<?php
/**
 * LibraryItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * LibraryItem Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LibraryItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LibraryItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assets' => '\ultracart\v2\models\LibraryItemAsset[]',
        'categories' => 'string[]',
        'content' => 'string',
        'content_type' => 'string',
        'description' => 'string',
        'industries' => 'string[]',
        'library_item_oid' => 'int',
        'merchant_id' => 'string',
        'my_purchased_version' => 'int',
        'original_object_id' => 'string',
        'price' => 'float',
        'price_formatted' => 'string',
        'published' => 'bool',
        'published_from_library_item_oid' => 'int',
        'published_version' => 'int',
        'purchased' => 'bool',
        'purchased_from_library_item_oid' => 'int',
        'purchased_version' => 'int',
        'rejected' => 'bool',
        'rejected_reason' => 'string',
        'reviewed' => 'bool',
        'reviewed_dts' => 'object',
        'screenshots' => '\ultracart\v2\models\LibraryItemScreenshot[]',
        'share_with_accounts' => '\ultracart\v2\models\LibraryItemAccount[]',
        'share_with_other_emails' => '\ultracart\v2\models\LibraryItemEmail[]',
        'shared' => 'bool',
        'source' => 'bool',
        'source_to_library_item_oid' => 'int',
        'source_version' => 'int',
        'style' => 'string',
        'times_purchased' => 'int',
        'title' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assets' => null,
        'categories' => null,
        'content' => null,
        'content_type' => null,
        'description' => null,
        'industries' => null,
        'library_item_oid' => 'int32',
        'merchant_id' => null,
        'my_purchased_version' => 'int32',
        'original_object_id' => null,
        'price' => null,
        'price_formatted' => null,
        'published' => null,
        'published_from_library_item_oid' => 'int32',
        'published_version' => 'int32',
        'purchased' => null,
        'purchased_from_library_item_oid' => 'int32',
        'purchased_version' => 'int32',
        'rejected' => null,
        'rejected_reason' => null,
        'reviewed' => null,
        'reviewed_dts' => null,
        'screenshots' => null,
        'share_with_accounts' => null,
        'share_with_other_emails' => null,
        'shared' => null,
        'source' => null,
        'source_to_library_item_oid' => 'int32',
        'source_version' => 'int32',
        'style' => null,
        'times_purchased' => 'int32',
        'title' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assets' => 'assets',
        'categories' => 'categories',
        'content' => 'content',
        'content_type' => 'content_type',
        'description' => 'description',
        'industries' => 'industries',
        'library_item_oid' => 'library_item_oid',
        'merchant_id' => 'merchant_id',
        'my_purchased_version' => 'my_purchased_version',
        'original_object_id' => 'original_object_id',
        'price' => 'price',
        'price_formatted' => 'price_formatted',
        'published' => 'published',
        'published_from_library_item_oid' => 'published_from_library_item_oid',
        'published_version' => 'published_version',
        'purchased' => 'purchased',
        'purchased_from_library_item_oid' => 'purchased_from_library_item_oid',
        'purchased_version' => 'purchased_version',
        'rejected' => 'rejected',
        'rejected_reason' => 'rejected_reason',
        'reviewed' => 'reviewed',
        'reviewed_dts' => 'reviewed_dts',
        'screenshots' => 'screenshots',
        'share_with_accounts' => 'share_with_accounts',
        'share_with_other_emails' => 'share_with_other_emails',
        'shared' => 'shared',
        'source' => 'source',
        'source_to_library_item_oid' => 'source_to_library_item_oid',
        'source_version' => 'source_version',
        'style' => 'style',
        'times_purchased' => 'times_purchased',
        'title' => 'title',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assets' => 'setAssets',
        'categories' => 'setCategories',
        'content' => 'setContent',
        'content_type' => 'setContentType',
        'description' => 'setDescription',
        'industries' => 'setIndustries',
        'library_item_oid' => 'setLibraryItemOid',
        'merchant_id' => 'setMerchantId',
        'my_purchased_version' => 'setMyPurchasedVersion',
        'original_object_id' => 'setOriginalObjectId',
        'price' => 'setPrice',
        'price_formatted' => 'setPriceFormatted',
        'published' => 'setPublished',
        'published_from_library_item_oid' => 'setPublishedFromLibraryItemOid',
        'published_version' => 'setPublishedVersion',
        'purchased' => 'setPurchased',
        'purchased_from_library_item_oid' => 'setPurchasedFromLibraryItemOid',
        'purchased_version' => 'setPurchasedVersion',
        'rejected' => 'setRejected',
        'rejected_reason' => 'setRejectedReason',
        'reviewed' => 'setReviewed',
        'reviewed_dts' => 'setReviewedDts',
        'screenshots' => 'setScreenshots',
        'share_with_accounts' => 'setShareWithAccounts',
        'share_with_other_emails' => 'setShareWithOtherEmails',
        'shared' => 'setShared',
        'source' => 'setSource',
        'source_to_library_item_oid' => 'setSourceToLibraryItemOid',
        'source_version' => 'setSourceVersion',
        'style' => 'setStyle',
        'times_purchased' => 'setTimesPurchased',
        'title' => 'setTitle',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assets' => 'getAssets',
        'categories' => 'getCategories',
        'content' => 'getContent',
        'content_type' => 'getContentType',
        'description' => 'getDescription',
        'industries' => 'getIndustries',
        'library_item_oid' => 'getLibraryItemOid',
        'merchant_id' => 'getMerchantId',
        'my_purchased_version' => 'getMyPurchasedVersion',
        'original_object_id' => 'getOriginalObjectId',
        'price' => 'getPrice',
        'price_formatted' => 'getPriceFormatted',
        'published' => 'getPublished',
        'published_from_library_item_oid' => 'getPublishedFromLibraryItemOid',
        'published_version' => 'getPublishedVersion',
        'purchased' => 'getPurchased',
        'purchased_from_library_item_oid' => 'getPurchasedFromLibraryItemOid',
        'purchased_version' => 'getPurchasedVersion',
        'rejected' => 'getRejected',
        'rejected_reason' => 'getRejectedReason',
        'reviewed' => 'getReviewed',
        'reviewed_dts' => 'getReviewedDts',
        'screenshots' => 'getScreenshots',
        'share_with_accounts' => 'getShareWithAccounts',
        'share_with_other_emails' => 'getShareWithOtherEmails',
        'shared' => 'getShared',
        'source' => 'getSource',
        'source_to_library_item_oid' => 'getSourceToLibraryItemOid',
        'source_version' => 'getSourceVersion',
        'style' => 'getStyle',
        'times_purchased' => 'getTimesPurchased',
        'title' => 'getTitle',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assets'] = isset($data['assets']) ? $data['assets'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['industries'] = isset($data['industries']) ? $data['industries'] : null;
        $this->container['library_item_oid'] = isset($data['library_item_oid']) ? $data['library_item_oid'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['my_purchased_version'] = isset($data['my_purchased_version']) ? $data['my_purchased_version'] : null;
        $this->container['original_object_id'] = isset($data['original_object_id']) ? $data['original_object_id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['price_formatted'] = isset($data['price_formatted']) ? $data['price_formatted'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['published_from_library_item_oid'] = isset($data['published_from_library_item_oid']) ? $data['published_from_library_item_oid'] : null;
        $this->container['published_version'] = isset($data['published_version']) ? $data['published_version'] : null;
        $this->container['purchased'] = isset($data['purchased']) ? $data['purchased'] : null;
        $this->container['purchased_from_library_item_oid'] = isset($data['purchased_from_library_item_oid']) ? $data['purchased_from_library_item_oid'] : null;
        $this->container['purchased_version'] = isset($data['purchased_version']) ? $data['purchased_version'] : null;
        $this->container['rejected'] = isset($data['rejected']) ? $data['rejected'] : null;
        $this->container['rejected_reason'] = isset($data['rejected_reason']) ? $data['rejected_reason'] : null;
        $this->container['reviewed'] = isset($data['reviewed']) ? $data['reviewed'] : null;
        $this->container['reviewed_dts'] = isset($data['reviewed_dts']) ? $data['reviewed_dts'] : null;
        $this->container['screenshots'] = isset($data['screenshots']) ? $data['screenshots'] : null;
        $this->container['share_with_accounts'] = isset($data['share_with_accounts']) ? $data['share_with_accounts'] : null;
        $this->container['share_with_other_emails'] = isset($data['share_with_other_emails']) ? $data['share_with_other_emails'] : null;
        $this->container['shared'] = isset($data['shared']) ? $data['shared'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['source_to_library_item_oid'] = isset($data['source_to_library_item_oid']) ? $data['source_to_library_item_oid'] : null;
        $this->container['source_version'] = isset($data['source_version']) ? $data['source_version'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['times_purchased'] = isset($data['times_purchased']) ? $data['times_purchased'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assets
     *
     * @return \ultracart\v2\models\LibraryItemAsset[]
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param \ultracart\v2\models\LibraryItemAsset[] $assets assets
     *
     * @return $this
     */
    public function setAssets($assets)
    {
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type content_type
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets industries
     *
     * @return string[]
     */
    public function getIndustries()
    {
        return $this->container['industries'];
    }

    /**
     * Sets industries
     *
     * @param string[] $industries industries
     *
     * @return $this
     */
    public function setIndustries($industries)
    {
        $this->container['industries'] = $industries;

        return $this;
    }

    /**
     * Gets library_item_oid
     *
     * @return int
     */
    public function getLibraryItemOid()
    {
        return $this->container['library_item_oid'];
    }

    /**
     * Sets library_item_oid
     *
     * @param int $library_item_oid library_item_oid
     *
     * @return $this
     */
    public function setLibraryItemOid($library_item_oid)
    {
        $this->container['library_item_oid'] = $library_item_oid;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets my_purchased_version
     *
     * @return int
     */
    public function getMyPurchasedVersion()
    {
        return $this->container['my_purchased_version'];
    }

    /**
     * Sets my_purchased_version
     *
     * @param int $my_purchased_version If this is a public item and the merchant has already purchased it, this is their version.  If not yet purchased, this will be zero.  This value will only be populated during a searchPublicItems() call.
     *
     * @return $this
     */
    public function setMyPurchasedVersion($my_purchased_version)
    {
        $this->container['my_purchased_version'] = $my_purchased_version;

        return $this;
    }

    /**
     * Gets original_object_id
     *
     * @return string
     */
    public function getOriginalObjectId()
    {
        return $this->container['original_object_id'];
    }

    /**
     * Sets original_object_id
     *
     * @param string $original_object_id This id points to the original object that was added to the library. For flows and campaigns, this is a uuid string.  For upsells, it is an oid integer.  For transactional_emails, it is an email name.
     *
     * @return $this
     */
    public function setOriginalObjectId($original_object_id)
    {
        $this->container['original_object_id'] = $original_object_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price The price of the published item.  Null for any private library items.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_formatted
     *
     * @return string
     */
    public function getPriceFormatted()
    {
        return $this->container['price_formatted'];
    }

    /**
     * Sets price_formatted
     *
     * @param string $price_formatted The formatted price of the published item.  Null for any private library items.
     *
     * @return $this
     */
    public function setPriceFormatted($price_formatted)
    {
        $this->container['price_formatted'] = $price_formatted;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool $published True if this library item is a published item (not source)
     *
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets published_from_library_item_oid
     *
     * @return int
     */
    public function getPublishedFromLibraryItemOid()
    {
        return $this->container['published_from_library_item_oid'];
    }

    /**
     * Sets published_from_library_item_oid
     *
     * @param int $published_from_library_item_oid The source item used to publish this item.  This allows for comparisons between source and published
     *
     * @return $this
     */
    public function setPublishedFromLibraryItemOid($published_from_library_item_oid)
    {
        $this->container['published_from_library_item_oid'] = $published_from_library_item_oid;

        return $this;
    }

    /**
     * Gets published_version
     *
     * @return int
     */
    public function getPublishedVersion()
    {
        return $this->container['published_version'];
    }

    /**
     * Sets published_version
     *
     * @param int $published_version The source version when this item was published.  This allows for out-of-date alerts to be shown when there is a difference between source and published
     *
     * @return $this
     */
    public function setPublishedVersion($published_version)
    {
        $this->container['published_version'] = $published_version;

        return $this;
    }

    /**
     * Gets purchased
     *
     * @return bool
     */
    public function getPurchased()
    {
        return $this->container['purchased'];
    }

    /**
     * Sets purchased
     *
     * @param bool $purchased True if this library item has been purchased
     *
     * @return $this
     */
    public function setPurchased($purchased)
    {
        $this->container['purchased'] = $purchased;

        return $this;
    }

    /**
     * Gets purchased_from_library_item_oid
     *
     * @return int
     */
    public function getPurchasedFromLibraryItemOid()
    {
        return $this->container['purchased_from_library_item_oid'];
    }

    /**
     * Sets purchased_from_library_item_oid
     *
     * @param int $purchased_from_library_item_oid The published item that was purchased to make this item.  This allows for comparisons between published and purchased
     *
     * @return $this
     */
    public function setPurchasedFromLibraryItemOid($purchased_from_library_item_oid)
    {
        $this->container['purchased_from_library_item_oid'] = $purchased_from_library_item_oid;

        return $this;
    }

    /**
     * Gets purchased_version
     *
     * @return int
     */
    public function getPurchasedVersion()
    {
        return $this->container['purchased_version'];
    }

    /**
     * Sets purchased_version
     *
     * @param int $purchased_version The published version when this item was purchased.  This allows for out-of-date alerts to be shown when there is a difference between published and purchased
     *
     * @return $this
     */
    public function setPurchasedVersion($purchased_version)
    {
        $this->container['purchased_version'] = $purchased_version;

        return $this;
    }

    /**
     * Gets rejected
     *
     * @return bool
     */
    public function getRejected()
    {
        return $this->container['rejected'];
    }

    /**
     * Sets rejected
     *
     * @param bool $rejected Any published library reviewed by UltraCart staff for malicious or inappropriate content will have this flag set to true.  This is always false for non-published items
     *
     * @return $this
     */
    public function setRejected($rejected)
    {
        $this->container['rejected'] = $rejected;

        return $this;
    }

    /**
     * Gets rejected_reason
     *
     * @return string
     */
    public function getRejectedReason()
    {
        return $this->container['rejected_reason'];
    }

    /**
     * Sets rejected_reason
     *
     * @param string $rejected_reason Any rejected published item will have this field populated with the reason.
     *
     * @return $this
     */
    public function setRejectedReason($rejected_reason)
    {
        $this->container['rejected_reason'] = $rejected_reason;

        return $this;
    }

    /**
     * Gets reviewed
     *
     * @return bool
     */
    public function getReviewed()
    {
        return $this->container['reviewed'];
    }

    /**
     * Sets reviewed
     *
     * @param bool $reviewed Any published library items must be reviewed by UltraCart staff for malicious content.  This flag shows the status of that review.  This is always false for non-published items
     *
     * @return $this
     */
    public function setReviewed($reviewed)
    {
        $this->container['reviewed'] = $reviewed;

        return $this;
    }

    /**
     * Gets reviewed_dts
     *
     * @return object
     */
    public function getReviewedDts()
    {
        return $this->container['reviewed_dts'];
    }

    /**
     * Sets reviewed_dts
     *
     * @param object $reviewed_dts This is the timestamp for a published items formal review by UltraCart staff for malicious content.
     *
     * @return $this
     */
    public function setReviewedDts($reviewed_dts)
    {
        $this->container['reviewed_dts'] = $reviewed_dts;

        return $this;
    }

    /**
     * Gets screenshots
     *
     * @return \ultracart\v2\models\LibraryItemScreenshot[]
     */
    public function getScreenshots()
    {
        return $this->container['screenshots'];
    }

    /**
     * Sets screenshots
     *
     * @param \ultracart\v2\models\LibraryItemScreenshot[] $screenshots screenshots
     *
     * @return $this
     */
    public function setScreenshots($screenshots)
    {
        $this->container['screenshots'] = $screenshots;

        return $this;
    }

    /**
     * Gets share_with_accounts
     *
     * @return \ultracart\v2\models\LibraryItemAccount[]
     */
    public function getShareWithAccounts()
    {
        return $this->container['share_with_accounts'];
    }

    /**
     * Sets share_with_accounts
     *
     * @param \ultracart\v2\models\LibraryItemAccount[] $share_with_accounts share_with_accounts
     *
     * @return $this
     */
    public function setShareWithAccounts($share_with_accounts)
    {
        $this->container['share_with_accounts'] = $share_with_accounts;

        return $this;
    }

    /**
     * Gets share_with_other_emails
     *
     * @return \ultracart\v2\models\LibraryItemEmail[]
     */
    public function getShareWithOtherEmails()
    {
        return $this->container['share_with_other_emails'];
    }

    /**
     * Sets share_with_other_emails
     *
     * @param \ultracart\v2\models\LibraryItemEmail[] $share_with_other_emails share_with_other_emails
     *
     * @return $this
     */
    public function setShareWithOtherEmails($share_with_other_emails)
    {
        $this->container['share_with_other_emails'] = $share_with_other_emails;

        return $this;
    }

    /**
     * Gets shared
     *
     * @return bool
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param bool $shared True if this item is shared from another merchant account
     *
     * @return $this
     */
    public function setShared($shared)
    {
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets source
     *
     * @return bool
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param bool $source True if this library item has been published
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_to_library_item_oid
     *
     * @return int
     */
    public function getSourceToLibraryItemOid()
    {
        return $this->container['source_to_library_item_oid'];
    }

    /**
     * Sets source_to_library_item_oid
     *
     * @param int $source_to_library_item_oid This oid points to the published library item, if there is one.
     *
     * @return $this
     */
    public function setSourceToLibraryItemOid($source_to_library_item_oid)
    {
        $this->container['source_to_library_item_oid'] = $source_to_library_item_oid;

        return $this;
    }

    /**
     * Gets source_version
     *
     * @return int
     */
    public function getSourceVersion()
    {
        return $this->container['source_version'];
    }

    /**
     * Sets source_version
     *
     * @param int $source_version The version of this item.  Increment every time the item is saved.
     *
     * @return $this
     */
    public function setSourceVersion($source_version)
    {
        $this->container['source_version'] = $source_version;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string $style style
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets times_purchased
     *
     * @return int
     */
    public function getTimesPurchased()
    {
        return $this->container['times_purchased'];
    }

    /**
     * Sets times_purchased
     *
     * @param int $times_purchased times_purchased
     *
     * @return $this
     */
    public function setTimesPurchased($times_purchased)
    {
        $this->container['times_purchased'] = $times_purchased;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


