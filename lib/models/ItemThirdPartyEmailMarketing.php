<?php
/**
 * ItemThirdPartyEmailMarketing
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * ItemThirdPartyEmailMarketing Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemThirdPartyEmailMarketing implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ItemThirdPartyEmailMarketing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'add_tags' => 'string[]',
        'provider_name' => 'string',
        'remove_tags' => 'string[]',
        'subscribe_lists' => 'string[]',
        'unsubscribe_lists' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'add_tags' => 'add_tags',
        'provider_name' => 'provider_name',
        'remove_tags' => 'remove_tags',
        'subscribe_lists' => 'subscribe_lists',
        'unsubscribe_lists' => 'unsubscribe_lists'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'add_tags' => 'setAddTags',
        'provider_name' => 'setProviderName',
        'remove_tags' => 'setRemoveTags',
        'subscribe_lists' => 'setSubscribeLists',
        'unsubscribe_lists' => 'setUnsubscribeLists'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'add_tags' => 'getAddTags',
        'provider_name' => 'getProviderName',
        'remove_tags' => 'getRemoveTags',
        'subscribe_lists' => 'getSubscribeLists',
        'unsubscribe_lists' => 'getUnsubscribeLists'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const PROVIDER_NAME_ACTIVE_CAMPAIGN = 'ActiveCampaign';
    const PROVIDER_NAME_A_WEBER = 'AWeber';
    const PROVIDER_NAME_CAMPAIGN_MONITOR = 'Campaign Monitor';
    const PROVIDER_NAME_CONSTANT_CONTACT = 'ConstantContact';
    const PROVIDER_NAME_EMMA = 'Emma';
    const PROVIDER_NAME_GET_RESPONSE = 'GetResponse';
    const PROVIDER_NAME_I_CONTACT = 'iContact';
    const PROVIDER_NAME_KLAVIYO = 'Klaviyo';
    const PROVIDER_NAME_LYRIS = 'Lyris';
    const PROVIDER_NAME_LYRIS_HQ = 'LyrisHQ';
    const PROVIDER_NAME_MAIL_CHIMP = 'MailChimp';
    const PROVIDER_NAME_SILVER_POP = 'SilverPop';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProviderNameAllowableValues()
    {
        return [
            self::PROVIDER_NAME_ACTIVE_CAMPAIGN,
            self::PROVIDER_NAME_A_WEBER,
            self::PROVIDER_NAME_CAMPAIGN_MONITOR,
            self::PROVIDER_NAME_CONSTANT_CONTACT,
            self::PROVIDER_NAME_EMMA,
            self::PROVIDER_NAME_GET_RESPONSE,
            self::PROVIDER_NAME_I_CONTACT,
            self::PROVIDER_NAME_KLAVIYO,
            self::PROVIDER_NAME_LYRIS,
            self::PROVIDER_NAME_LYRIS_HQ,
            self::PROVIDER_NAME_MAIL_CHIMP,
            self::PROVIDER_NAME_SILVER_POP,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_tags'] = isset($data['add_tags']) ? $data['add_tags'] : null;
        $this->container['provider_name'] = isset($data['provider_name']) ? $data['provider_name'] : null;
        $this->container['remove_tags'] = isset($data['remove_tags']) ? $data['remove_tags'] : null;
        $this->container['subscribe_lists'] = isset($data['subscribe_lists']) ? $data['subscribe_lists'] : null;
        $this->container['unsubscribe_lists'] = isset($data['unsubscribe_lists']) ? $data['unsubscribe_lists'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("ActiveCampaign", "AWeber", "Campaign Monitor", "ConstantContact", "Emma", "GetResponse", "iContact", "Klaviyo", "Lyris", "LyrisHQ", "MailChimp", "SilverPop");
        if (!in_array($this->container['provider_name'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'provider_name', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("ActiveCampaign", "AWeber", "Campaign Monitor", "ConstantContact", "Emma", "GetResponse", "iContact", "Klaviyo", "Lyris", "LyrisHQ", "MailChimp", "SilverPop");
        if (!in_array($this->container['provider_name'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets add_tags
     * @return string[]
     */
    public function getAddTags()
    {
        return $this->container['add_tags'];
    }

    /**
     * Sets add_tags
     * @param string[] $add_tags Add tags
     * @return $this
     */
    public function setAddTags($add_tags)
    {
        $this->container['add_tags'] = $add_tags;

        return $this;
    }

    /**
     * Gets provider_name
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     * @param string $provider_name Provider name
     * @return $this
     */
    public function setProviderName($provider_name)
    {
        $allowed_values = array('ActiveCampaign', 'AWeber', 'Campaign Monitor', 'ConstantContact', 'Emma', 'GetResponse', 'iContact', 'Klaviyo', 'Lyris', 'LyrisHQ', 'MailChimp', 'SilverPop');
        if (!in_array($provider_name, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'provider_name', must be one of 'ActiveCampaign', 'AWeber', 'Campaign Monitor', 'ConstantContact', 'Emma', 'GetResponse', 'iContact', 'Klaviyo', 'Lyris', 'LyrisHQ', 'MailChimp', 'SilverPop'");
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets remove_tags
     * @return string[]
     */
    public function getRemoveTags()
    {
        return $this->container['remove_tags'];
    }

    /**
     * Sets remove_tags
     * @param string[] $remove_tags Remove tags
     * @return $this
     */
    public function setRemoveTags($remove_tags)
    {
        $this->container['remove_tags'] = $remove_tags;

        return $this;
    }

    /**
     * Gets subscribe_lists
     * @return string[]
     */
    public function getSubscribeLists()
    {
        return $this->container['subscribe_lists'];
    }

    /**
     * Sets subscribe_lists
     * @param string[] $subscribe_lists Subscribe to lists
     * @return $this
     */
    public function setSubscribeLists($subscribe_lists)
    {
        $this->container['subscribe_lists'] = $subscribe_lists;

        return $this;
    }

    /**
     * Gets unsubscribe_lists
     * @return string[]
     */
    public function getUnsubscribeLists()
    {
        return $this->container['unsubscribe_lists'];
    }

    /**
     * Sets unsubscribe_lists
     * @param string[] $unsubscribe_lists Unsubscribe from lists
     * @return $this
     */
    public function setUnsubscribeLists($unsubscribe_lists)
    {
        $this->container['unsubscribe_lists'] = $unsubscribe_lists;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


