<?php
/**
 * CouponPercentOffMsrpItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CouponPercentOffMsrpItems Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CouponPercentOffMsrpItems implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CouponPercentOffMsrpItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'discount_percent' => 'float',
        'excluded_items' => 'string[]',
        'items' => 'string[]',
        'limit' => 'int',
        'minimum_cumulative_msrp' => 'float',
        'minimum_subtotal' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'discount_percent' => null,
        'excluded_items' => null,
        'items' => null,
        'limit' => 'int32',
        'minimum_cumulative_msrp' => null,
        'minimum_subtotal' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'discount_percent' => 'discount_percent',
        'excluded_items' => 'excluded_items',
        'items' => 'items',
        'limit' => 'limit',
        'minimum_cumulative_msrp' => 'minimum_cumulative_msrp',
        'minimum_subtotal' => 'minimum_subtotal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'discount_percent' => 'setDiscountPercent',
        'excluded_items' => 'setExcludedItems',
        'items' => 'setItems',
        'limit' => 'setLimit',
        'minimum_cumulative_msrp' => 'setMinimumCumulativeMsrp',
        'minimum_subtotal' => 'setMinimumSubtotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'discount_percent' => 'getDiscountPercent',
        'excluded_items' => 'getExcludedItems',
        'items' => 'getItems',
        'limit' => 'getLimit',
        'minimum_cumulative_msrp' => 'getMinimumCumulativeMsrp',
        'minimum_subtotal' => 'getMinimumSubtotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['excluded_items'] = isset($data['excluded_items']) ? $data['excluded_items'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['minimum_cumulative_msrp'] = isset($data['minimum_cumulative_msrp']) ? $data['minimum_cumulative_msrp'] : null;
        $this->container['minimum_subtotal'] = isset($data['minimum_subtotal']) ? $data['minimum_subtotal'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets discount_percent
     *
     * @return float
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param float $discount_percent The percentage of subtotal discount
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets excluded_items
     *
     * @return string[]
     */
    public function getExcludedItems()
    {
        return $this->container['excluded_items'];
    }

    /**
     * Sets excluded_items
     *
     * @param string[] $excluded_items A list of items which cannot be discounted.
     *
     * @return $this
     */
    public function setExcludedItems($excluded_items)
    {
        $this->container['excluded_items'] = $excluded_items;

        return $this;
    }

    /**
     * Gets items
     *
     * @return string[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param string[] $items An list of items which will receive a discount.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit The (optional) maximum quantity of discounted items.
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets minimum_cumulative_msrp
     *
     * @return float
     */
    public function getMinimumCumulativeMsrp()
    {
        return $this->container['minimum_cumulative_msrp'];
    }

    /**
     * Sets minimum_cumulative_msrp
     *
     * @param float $minimum_cumulative_msrp The (optional) minimum cumulative msrp of qualifying items.
     *
     * @return $this
     */
    public function setMinimumCumulativeMsrp($minimum_cumulative_msrp)
    {
        $this->container['minimum_cumulative_msrp'] = $minimum_cumulative_msrp;

        return $this;
    }

    /**
     * Gets minimum_subtotal
     *
     * @return float
     */
    public function getMinimumSubtotal()
    {
        return $this->container['minimum_subtotal'];
    }

    /**
     * Sets minimum_subtotal
     *
     * @param float $minimum_subtotal The (optional) minimum subtotal of qualifying items.
     *
     * @return $this
     */
    public function setMinimumSubtotal($minimum_subtotal)
    {
        $this->container['minimum_subtotal'] = $minimum_subtotal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


