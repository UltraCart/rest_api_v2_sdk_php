<?php
/**
 * EmailPerformanceDaily
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * EmailPerformanceDaily Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailPerformanceDaily implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailPerformanceDaily';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bounce_count' => 'int',
        'delivered_count' => 'int',
        'revenue' => 'float',
        'sequence_send_count' => 'int',
        'spam_count' => 'int',
        'stat_dts' => 'string',
        'transactional_send_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bounce_count' => 'int32',
        'delivered_count' => 'int32',
        'revenue' => null,
        'sequence_send_count' => 'int32',
        'spam_count' => 'int32',
        'stat_dts' => 'dateTime',
        'transactional_send_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bounce_count' => 'bounce_count',
        'delivered_count' => 'delivered_count',
        'revenue' => 'revenue',
        'sequence_send_count' => 'sequence_send_count',
        'spam_count' => 'spam_count',
        'stat_dts' => 'stat_dts',
        'transactional_send_count' => 'transactional_send_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bounce_count' => 'setBounceCount',
        'delivered_count' => 'setDeliveredCount',
        'revenue' => 'setRevenue',
        'sequence_send_count' => 'setSequenceSendCount',
        'spam_count' => 'setSpamCount',
        'stat_dts' => 'setStatDts',
        'transactional_send_count' => 'setTransactionalSendCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bounce_count' => 'getBounceCount',
        'delivered_count' => 'getDeliveredCount',
        'revenue' => 'getRevenue',
        'sequence_send_count' => 'getSequenceSendCount',
        'spam_count' => 'getSpamCount',
        'stat_dts' => 'getStatDts',
        'transactional_send_count' => 'getTransactionalSendCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bounce_count'] = $data['bounce_count'] ?? null;
        $this->container['delivered_count'] = $data['delivered_count'] ?? null;
        $this->container['revenue'] = $data['revenue'] ?? null;
        $this->container['sequence_send_count'] = $data['sequence_send_count'] ?? null;
        $this->container['spam_count'] = $data['spam_count'] ?? null;
        $this->container['stat_dts'] = $data['stat_dts'] ?? null;
        $this->container['transactional_send_count'] = $data['transactional_send_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bounce_count
     *
     * @return int|null
     */
    public function getBounceCount()
    {
        return $this->container['bounce_count'];
    }

    /**
     * Sets bounce_count
     *
     * @param int|null $bounce_count Bounce count
     *
     * @return self
     */
    public function setBounceCount($bounce_count)
    {
        $this->container['bounce_count'] = $bounce_count;

        return $this;
    }

    /**
     * Gets delivered_count
     *
     * @return int|null
     */
    public function getDeliveredCount()
    {
        return $this->container['delivered_count'];
    }

    /**
     * Sets delivered_count
     *
     * @param int|null $delivered_count Delivered count
     *
     * @return self
     */
    public function setDeliveredCount($delivered_count)
    {
        $this->container['delivered_count'] = $delivered_count;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return float|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param float|null $revenue Revenue
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets sequence_send_count
     *
     * @return int|null
     */
    public function getSequenceSendCount()
    {
        return $this->container['sequence_send_count'];
    }

    /**
     * Sets sequence_send_count
     *
     * @param int|null $sequence_send_count Total sequence (campaign/flow) emails sent
     *
     * @return self
     */
    public function setSequenceSendCount($sequence_send_count)
    {
        $this->container['sequence_send_count'] = $sequence_send_count;

        return $this;
    }

    /**
     * Gets spam_count
     *
     * @return int|null
     */
    public function getSpamCount()
    {
        return $this->container['spam_count'];
    }

    /**
     * Sets spam_count
     *
     * @param int|null $spam_count Spam complaints
     *
     * @return self
     */
    public function setSpamCount($spam_count)
    {
        $this->container['spam_count'] = $spam_count;

        return $this;
    }

    /**
     * Gets stat_dts
     *
     * @return string|null
     */
    public function getStatDts()
    {
        return $this->container['stat_dts'];
    }

    /**
     * Sets stat_dts
     *
     * @param string|null $stat_dts The date that these statistcs are for
     *
     * @return self
     */
    public function setStatDts($stat_dts)
    {
        $this->container['stat_dts'] = $stat_dts;

        return $this;
    }

    /**
     * Gets transactional_send_count
     *
     * @return int|null
     */
    public function getTransactionalSendCount()
    {
        return $this->container['transactional_send_count'];
    }

    /**
     * Sets transactional_send_count
     *
     * @param int|null $transactional_send_count Total transactions emails sent
     *
     * @return self
     */
    public function setTransactionalSendCount($transactional_send_count)
    {
        $this->container['transactional_send_count'] = $transactional_send_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


