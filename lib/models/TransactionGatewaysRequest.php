<?php
/**
 * TransactionGatewaysRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * TransactionGatewaysRequest Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionGatewaysRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionGatewaysRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default_credit_card_transaction_type' => 'string',
        'gateways' => '\ultracart\v2\models\TransactionGateway[]',
        'theme_credit_card_transaction_types' => '\ultracart\v2\models\PaymentsThemeTransactionType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default_credit_card_transaction_type' => null,
        'gateways' => null,
        'theme_credit_card_transaction_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_credit_card_transaction_type' => 'default_credit_card_transaction_type',
        'gateways' => 'gateways',
        'theme_credit_card_transaction_types' => 'theme_credit_card_transaction_types'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_credit_card_transaction_type' => 'setDefaultCreditCardTransactionType',
        'gateways' => 'setGateways',
        'theme_credit_card_transaction_types' => 'setThemeCreditCardTransactionTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_credit_card_transaction_type' => 'getDefaultCreditCardTransactionType',
        'gateways' => 'getGateways',
        'theme_credit_card_transaction_types' => 'getThemeCreditCardTransactionTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEFAULT_CREDIT_CARD_TRANSACTION_TYPE_AND_CAPTURE = 'auth and capture';
    const DEFAULT_CREDIT_CARD_TRANSACTION_TYPE_THEN_CAPTURE = 'auth then capture';
    const DEFAULT_CREDIT_CARD_TRANSACTION_TYPE_ONLY = 'auth only';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultCreditCardTransactionTypeAllowableValues()
    {
        return [
            self::DEFAULT_CREDIT_CARD_TRANSACTION_TYPE_AND_CAPTURE,
            self::DEFAULT_CREDIT_CARD_TRANSACTION_TYPE_THEN_CAPTURE,
            self::DEFAULT_CREDIT_CARD_TRANSACTION_TYPE_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_credit_card_transaction_type'] = isset($data['default_credit_card_transaction_type']) ? $data['default_credit_card_transaction_type'] : null;
        $this->container['gateways'] = isset($data['gateways']) ? $data['gateways'] : null;
        $this->container['theme_credit_card_transaction_types'] = isset($data['theme_credit_card_transaction_types']) ? $data['theme_credit_card_transaction_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultCreditCardTransactionTypeAllowableValues();
        if (!is_null($this->container['default_credit_card_transaction_type']) && !in_array($this->container['default_credit_card_transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'default_credit_card_transaction_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_credit_card_transaction_type
     *
     * @return string
     */
    public function getDefaultCreditCardTransactionType()
    {
        return $this->container['default_credit_card_transaction_type'];
    }

    /**
     * Sets default_credit_card_transaction_type
     *
     * @param string $default_credit_card_transaction_type The default transaction type for this merchant account
     *
     * @return $this
     */
    public function setDefaultCreditCardTransactionType($default_credit_card_transaction_type)
    {
        $allowedValues = $this->getDefaultCreditCardTransactionTypeAllowableValues();
        if (!is_null($default_credit_card_transaction_type) && !in_array($default_credit_card_transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'default_credit_card_transaction_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_credit_card_transaction_type'] = $default_credit_card_transaction_type;

        return $this;
    }

    /**
     * Gets gateways
     *
     * @return \ultracart\v2\models\TransactionGateway[]
     */
    public function getGateways()
    {
        return $this->container['gateways'];
    }

    /**
     * Sets gateways
     *
     * @param \ultracart\v2\models\TransactionGateway[] $gateways gateways
     *
     * @return $this
     */
    public function setGateways($gateways)
    {
        $this->container['gateways'] = $gateways;

        return $this;
    }

    /**
     * Gets theme_credit_card_transaction_types
     *
     * @return \ultracart\v2\models\PaymentsThemeTransactionType[]
     */
    public function getThemeCreditCardTransactionTypes()
    {
        return $this->container['theme_credit_card_transaction_types'];
    }

    /**
     * Sets theme_credit_card_transaction_types
     *
     * @param \ultracart\v2\models\PaymentsThemeTransactionType[] $theme_credit_card_transaction_types A list of the storefronts and themes for this merchant account and what type of transaction should be attempted
     *
     * @return $this
     */
    public function setThemeCreditCardTransactionTypes($theme_credit_card_transaction_types)
    {
        $this->container['theme_credit_card_transaction_types'] = $theme_credit_card_transaction_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


