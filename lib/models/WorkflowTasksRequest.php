<?php
/**
 * WorkflowTasksRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * WorkflowTasksRequest Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkflowTasksRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkflowTasksRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assigned_to_group_id' => 'int',
        'assigned_to_me' => 'bool',
        'assigned_to_user_id' => 'int',
        'created_by' => '\ultracart\v2\models\WorkflowUser',
        'created_dts_begin' => 'string',
        'created_dts_end' => 'string',
        'delay_until_dts_begin' => 'string',
        'delay_until_dts_end' => 'string',
        'due_dts_begin' => 'string',
        'due_dts_end' => 'string',
        'last_update_dts_begin' => 'string',
        'last_update_dts_end' => 'string',
        'object_email' => 'string',
        'object_type' => 'string',
        'priority' => 'string',
        'status' => 'string',
        'unassigned' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assigned_to_group_id' => 'int32',
        'assigned_to_me' => null,
        'assigned_to_user_id' => 'int32',
        'created_by' => null,
        'created_dts_begin' => 'dateTime',
        'created_dts_end' => 'dateTime',
        'delay_until_dts_begin' => 'dateTime',
        'delay_until_dts_end' => 'dateTime',
        'due_dts_begin' => 'dateTime',
        'due_dts_end' => 'dateTime',
        'last_update_dts_begin' => 'dateTime',
        'last_update_dts_end' => 'dateTime',
        'object_email' => null,
        'object_type' => null,
        'priority' => null,
        'status' => null,
        'unassigned' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assigned_to_group_id' => 'assigned_to_group_id',
        'assigned_to_me' => 'assigned_to_me',
        'assigned_to_user_id' => 'assigned_to_user_id',
        'created_by' => 'created_by',
        'created_dts_begin' => 'created_dts_begin',
        'created_dts_end' => 'created_dts_end',
        'delay_until_dts_begin' => 'delay_until_dts_begin',
        'delay_until_dts_end' => 'delay_until_dts_end',
        'due_dts_begin' => 'due_dts_begin',
        'due_dts_end' => 'due_dts_end',
        'last_update_dts_begin' => 'last_update_dts_begin',
        'last_update_dts_end' => 'last_update_dts_end',
        'object_email' => 'object_email',
        'object_type' => 'object_type',
        'priority' => 'priority',
        'status' => 'status',
        'unassigned' => 'unassigned'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assigned_to_group_id' => 'setAssignedToGroupId',
        'assigned_to_me' => 'setAssignedToMe',
        'assigned_to_user_id' => 'setAssignedToUserId',
        'created_by' => 'setCreatedBy',
        'created_dts_begin' => 'setCreatedDtsBegin',
        'created_dts_end' => 'setCreatedDtsEnd',
        'delay_until_dts_begin' => 'setDelayUntilDtsBegin',
        'delay_until_dts_end' => 'setDelayUntilDtsEnd',
        'due_dts_begin' => 'setDueDtsBegin',
        'due_dts_end' => 'setDueDtsEnd',
        'last_update_dts_begin' => 'setLastUpdateDtsBegin',
        'last_update_dts_end' => 'setLastUpdateDtsEnd',
        'object_email' => 'setObjectEmail',
        'object_type' => 'setObjectType',
        'priority' => 'setPriority',
        'status' => 'setStatus',
        'unassigned' => 'setUnassigned'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assigned_to_group_id' => 'getAssignedToGroupId',
        'assigned_to_me' => 'getAssignedToMe',
        'assigned_to_user_id' => 'getAssignedToUserId',
        'created_by' => 'getCreatedBy',
        'created_dts_begin' => 'getCreatedDtsBegin',
        'created_dts_end' => 'getCreatedDtsEnd',
        'delay_until_dts_begin' => 'getDelayUntilDtsBegin',
        'delay_until_dts_end' => 'getDelayUntilDtsEnd',
        'due_dts_begin' => 'getDueDtsBegin',
        'due_dts_end' => 'getDueDtsEnd',
        'last_update_dts_begin' => 'getLastUpdateDtsBegin',
        'last_update_dts_end' => 'getLastUpdateDtsEnd',
        'object_email' => 'getObjectEmail',
        'object_type' => 'getObjectType',
        'priority' => 'getPriority',
        'status' => 'getStatus',
        'unassigned' => 'getUnassigned'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OBJECT_TYPE_ORDER = 'order';
    const OBJECT_TYPE_AUTO_ORDER = 'auto order';
    const OBJECT_TYPE_ITEM = 'item';
    const OBJECT_TYPE_CUSTOMER_PROFILE = 'customer profile';
    const PRIORITY__1___LOW = '1 - low';
    const PRIORITY__2___MEDIUM = '2 - medium';
    const PRIORITY__3___HIGH = '3 - high';
    const PRIORITY__4___CRITICAL = '4 - critical';
    const STATUS_OPEN = 'open';
    const STATUS_CLOSED = 'closed';
    const STATUS_DELAYED = 'delayed';
    const STATUS_AWAITING_CUSTOMER_FEEDBACK = 'awaiting customer feedback';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectTypeAllowableValues()
    {
        return [
            self::OBJECT_TYPE_ORDER,
            self::OBJECT_TYPE_AUTO_ORDER,
            self::OBJECT_TYPE_ITEM,
            self::OBJECT_TYPE_CUSTOMER_PROFILE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY__1___LOW,
            self::PRIORITY__2___MEDIUM,
            self::PRIORITY__3___HIGH,
            self::PRIORITY__4___CRITICAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_CLOSED,
            self::STATUS_DELAYED,
            self::STATUS_AWAITING_CUSTOMER_FEEDBACK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assigned_to_group_id'] = isset($data['assigned_to_group_id']) ? $data['assigned_to_group_id'] : null;
        $this->container['assigned_to_me'] = isset($data['assigned_to_me']) ? $data['assigned_to_me'] : null;
        $this->container['assigned_to_user_id'] = isset($data['assigned_to_user_id']) ? $data['assigned_to_user_id'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_dts_begin'] = isset($data['created_dts_begin']) ? $data['created_dts_begin'] : null;
        $this->container['created_dts_end'] = isset($data['created_dts_end']) ? $data['created_dts_end'] : null;
        $this->container['delay_until_dts_begin'] = isset($data['delay_until_dts_begin']) ? $data['delay_until_dts_begin'] : null;
        $this->container['delay_until_dts_end'] = isset($data['delay_until_dts_end']) ? $data['delay_until_dts_end'] : null;
        $this->container['due_dts_begin'] = isset($data['due_dts_begin']) ? $data['due_dts_begin'] : null;
        $this->container['due_dts_end'] = isset($data['due_dts_end']) ? $data['due_dts_end'] : null;
        $this->container['last_update_dts_begin'] = isset($data['last_update_dts_begin']) ? $data['last_update_dts_begin'] : null;
        $this->container['last_update_dts_end'] = isset($data['last_update_dts_end']) ? $data['last_update_dts_end'] : null;
        $this->container['object_email'] = isset($data['object_email']) ? $data['object_email'] : null;
        $this->container['object_type'] = isset($data['object_type']) ? $data['object_type'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['unassigned'] = isset($data['unassigned']) ? $data['unassigned'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getObjectTypeAllowableValues();
        if (!is_null($this->container['object_type']) && !in_array($this->container['object_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'object_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assigned_to_group_id
     *
     * @return int
     */
    public function getAssignedToGroupId()
    {
        return $this->container['assigned_to_group_id'];
    }

    /**
     * Sets assigned_to_group_id
     *
     * @param int $assigned_to_group_id Assigned to group ID
     *
     * @return $this
     */
    public function setAssignedToGroupId($assigned_to_group_id)
    {
        $this->container['assigned_to_group_id'] = $assigned_to_group_id;

        return $this;
    }

    /**
     * Gets assigned_to_me
     *
     * @return bool
     */
    public function getAssignedToMe()
    {
        return $this->container['assigned_to_me'];
    }

    /**
     * Sets assigned_to_me
     *
     * @param bool $assigned_to_me Tasks are assigned to me either by direct user id or a group that the user is a member of
     *
     * @return $this
     */
    public function setAssignedToMe($assigned_to_me)
    {
        $this->container['assigned_to_me'] = $assigned_to_me;

        return $this;
    }

    /**
     * Gets assigned_to_user_id
     *
     * @return int
     */
    public function getAssignedToUserId()
    {
        return $this->container['assigned_to_user_id'];
    }

    /**
     * Sets assigned_to_user_id
     *
     * @param int $assigned_to_user_id Assigned to user ID
     *
     * @return $this
     */
    public function setAssignedToUserId($assigned_to_user_id)
    {
        $this->container['assigned_to_user_id'] = $assigned_to_user_id;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \ultracart\v2\models\WorkflowUser
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \ultracart\v2\models\WorkflowUser $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_dts_begin
     *
     * @return string
     */
    public function getCreatedDtsBegin()
    {
        return $this->container['created_dts_begin'];
    }

    /**
     * Sets created_dts_begin
     *
     * @param string $created_dts_begin Date/time that the workflow task was created
     *
     * @return $this
     */
    public function setCreatedDtsBegin($created_dts_begin)
    {
        $this->container['created_dts_begin'] = $created_dts_begin;

        return $this;
    }

    /**
     * Gets created_dts_end
     *
     * @return string
     */
    public function getCreatedDtsEnd()
    {
        return $this->container['created_dts_end'];
    }

    /**
     * Sets created_dts_end
     *
     * @param string $created_dts_end Date/time that the workflow task was created
     *
     * @return $this
     */
    public function setCreatedDtsEnd($created_dts_end)
    {
        $this->container['created_dts_end'] = $created_dts_end;

        return $this;
    }

    /**
     * Gets delay_until_dts_begin
     *
     * @return string
     */
    public function getDelayUntilDtsBegin()
    {
        return $this->container['delay_until_dts_begin'];
    }

    /**
     * Sets delay_until_dts_begin
     *
     * @param string $delay_until_dts_begin Date/time that the workflow task should delay until
     *
     * @return $this
     */
    public function setDelayUntilDtsBegin($delay_until_dts_begin)
    {
        $this->container['delay_until_dts_begin'] = $delay_until_dts_begin;

        return $this;
    }

    /**
     * Gets delay_until_dts_end
     *
     * @return string
     */
    public function getDelayUntilDtsEnd()
    {
        return $this->container['delay_until_dts_end'];
    }

    /**
     * Sets delay_until_dts_end
     *
     * @param string $delay_until_dts_end Date/time that the workflow task should delay until
     *
     * @return $this
     */
    public function setDelayUntilDtsEnd($delay_until_dts_end)
    {
        $this->container['delay_until_dts_end'] = $delay_until_dts_end;

        return $this;
    }

    /**
     * Gets due_dts_begin
     *
     * @return string
     */
    public function getDueDtsBegin()
    {
        return $this->container['due_dts_begin'];
    }

    /**
     * Sets due_dts_begin
     *
     * @param string $due_dts_begin Date/time that the workflow task is due
     *
     * @return $this
     */
    public function setDueDtsBegin($due_dts_begin)
    {
        $this->container['due_dts_begin'] = $due_dts_begin;

        return $this;
    }

    /**
     * Gets due_dts_end
     *
     * @return string
     */
    public function getDueDtsEnd()
    {
        return $this->container['due_dts_end'];
    }

    /**
     * Sets due_dts_end
     *
     * @param string $due_dts_end Date/time that the workflow task is due
     *
     * @return $this
     */
    public function setDueDtsEnd($due_dts_end)
    {
        $this->container['due_dts_end'] = $due_dts_end;

        return $this;
    }

    /**
     * Gets last_update_dts_begin
     *
     * @return string
     */
    public function getLastUpdateDtsBegin()
    {
        return $this->container['last_update_dts_begin'];
    }

    /**
     * Sets last_update_dts_begin
     *
     * @param string $last_update_dts_begin Date/time that the workflow task was last updated
     *
     * @return $this
     */
    public function setLastUpdateDtsBegin($last_update_dts_begin)
    {
        $this->container['last_update_dts_begin'] = $last_update_dts_begin;

        return $this;
    }

    /**
     * Gets last_update_dts_end
     *
     * @return string
     */
    public function getLastUpdateDtsEnd()
    {
        return $this->container['last_update_dts_end'];
    }

    /**
     * Sets last_update_dts_end
     *
     * @param string $last_update_dts_end Date/time that the workflow task was last updated
     *
     * @return $this
     */
    public function setLastUpdateDtsEnd($last_update_dts_end)
    {
        $this->container['last_update_dts_end'] = $last_update_dts_end;

        return $this;
    }

    /**
     * Gets object_email
     *
     * @return string
     */
    public function getObjectEmail()
    {
        return $this->container['object_email'];
    }

    /**
     * Sets object_email
     *
     * @param string $object_email Object is associated with customer email
     *
     * @return $this
     */
    public function setObjectEmail($object_email)
    {
        $this->container['object_email'] = $object_email;

        return $this;
    }

    /**
     * Gets object_type
     *
     * @return string
     */
    public function getObjectType()
    {
        return $this->container['object_type'];
    }

    /**
     * Sets object_type
     *
     * @param string $object_type Object Type
     *
     * @return $this
     */
    public function setObjectType($object_type)
    {
        $allowedValues = $this->getObjectTypeAllowableValues();
        if (!is_null($object_type) && !in_array($object_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'object_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object_type'] = $object_type;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority Priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the workflow task
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets unassigned
     *
     * @return bool
     */
    public function getUnassigned()
    {
        return $this->container['unassigned'];
    }

    /**
     * Sets unassigned
     *
     * @param bool $unassigned Tasks that are unassigned to a user or group
     *
     * @return $this
     */
    public function setUnassigned($unassigned)
    {
        $this->container['unassigned'] = $unassigned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


