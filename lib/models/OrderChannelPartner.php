<?php
/**
 * OrderChannelPartner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderChannelPartner Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderChannelPartner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderChannelPartner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto_approve_purchase_order' => 'bool',
        'channel_partner_code' => 'string',
        'channel_partner_data' => 'string',
        'channel_partner_oid' => 'int',
        'channel_partner_order_id' => 'string',
        'ignore_invalid_shipping_method' => 'bool',
        'no_realtime_payment_processing' => 'bool',
        'skip_payment_processing' => 'bool',
        'store_completed' => 'bool',
        'store_if_payment_declines' => 'bool',
        'treat_warnings_as_errors' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auto_approve_purchase_order' => null,
        'channel_partner_code' => null,
        'channel_partner_data' => null,
        'channel_partner_oid' => 'int32',
        'channel_partner_order_id' => null,
        'ignore_invalid_shipping_method' => null,
        'no_realtime_payment_processing' => null,
        'skip_payment_processing' => null,
        'store_completed' => null,
        'store_if_payment_declines' => null,
        'treat_warnings_as_errors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_approve_purchase_order' => 'auto_approve_purchase_order',
        'channel_partner_code' => 'channel_partner_code',
        'channel_partner_data' => 'channel_partner_data',
        'channel_partner_oid' => 'channel_partner_oid',
        'channel_partner_order_id' => 'channel_partner_order_id',
        'ignore_invalid_shipping_method' => 'ignore_invalid_shipping_method',
        'no_realtime_payment_processing' => 'no_realtime_payment_processing',
        'skip_payment_processing' => 'skip_payment_processing',
        'store_completed' => 'store_completed',
        'store_if_payment_declines' => 'store_if_payment_declines',
        'treat_warnings_as_errors' => 'treat_warnings_as_errors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_approve_purchase_order' => 'setAutoApprovePurchaseOrder',
        'channel_partner_code' => 'setChannelPartnerCode',
        'channel_partner_data' => 'setChannelPartnerData',
        'channel_partner_oid' => 'setChannelPartnerOid',
        'channel_partner_order_id' => 'setChannelPartnerOrderId',
        'ignore_invalid_shipping_method' => 'setIgnoreInvalidShippingMethod',
        'no_realtime_payment_processing' => 'setNoRealtimePaymentProcessing',
        'skip_payment_processing' => 'setSkipPaymentProcessing',
        'store_completed' => 'setStoreCompleted',
        'store_if_payment_declines' => 'setStoreIfPaymentDeclines',
        'treat_warnings_as_errors' => 'setTreatWarningsAsErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_approve_purchase_order' => 'getAutoApprovePurchaseOrder',
        'channel_partner_code' => 'getChannelPartnerCode',
        'channel_partner_data' => 'getChannelPartnerData',
        'channel_partner_oid' => 'getChannelPartnerOid',
        'channel_partner_order_id' => 'getChannelPartnerOrderId',
        'ignore_invalid_shipping_method' => 'getIgnoreInvalidShippingMethod',
        'no_realtime_payment_processing' => 'getNoRealtimePaymentProcessing',
        'skip_payment_processing' => 'getSkipPaymentProcessing',
        'store_completed' => 'getStoreCompleted',
        'store_if_payment_declines' => 'getStoreIfPaymentDeclines',
        'treat_warnings_as_errors' => 'getTreatWarningsAsErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_approve_purchase_order'] = $data['auto_approve_purchase_order'] ?? null;
        $this->container['channel_partner_code'] = $data['channel_partner_code'] ?? null;
        $this->container['channel_partner_data'] = $data['channel_partner_data'] ?? null;
        $this->container['channel_partner_oid'] = $data['channel_partner_oid'] ?? null;
        $this->container['channel_partner_order_id'] = $data['channel_partner_order_id'] ?? null;
        $this->container['ignore_invalid_shipping_method'] = $data['ignore_invalid_shipping_method'] ?? null;
        $this->container['no_realtime_payment_processing'] = $data['no_realtime_payment_processing'] ?? null;
        $this->container['skip_payment_processing'] = $data['skip_payment_processing'] ?? null;
        $this->container['store_completed'] = $data['store_completed'] ?? null;
        $this->container['store_if_payment_declines'] = $data['store_if_payment_declines'] ?? null;
        $this->container['treat_warnings_as_errors'] = $data['treat_warnings_as_errors'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['channel_partner_order_id']) && (mb_strlen($this->container['channel_partner_order_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'channel_partner_order_id', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_approve_purchase_order
     *
     * @return bool|null
     */
    public function getAutoApprovePurchaseOrder()
    {
        return $this->container['auto_approve_purchase_order'];
    }

    /**
     * Sets auto_approve_purchase_order
     *
     * @param bool|null $auto_approve_purchase_order If true, any purchase order submitted is automatically approved
     *
     * @return self
     */
    public function setAutoApprovePurchaseOrder($auto_approve_purchase_order)
    {
        $this->container['auto_approve_purchase_order'] = $auto_approve_purchase_order;

        return $this;
    }

    /**
     * Gets channel_partner_code
     *
     * @return string|null
     */
    public function getChannelPartnerCode()
    {
        return $this->container['channel_partner_code'];
    }

    /**
     * Sets channel_partner_code
     *
     * @param string|null $channel_partner_code The code of the channel partner
     *
     * @return self
     */
    public function setChannelPartnerCode($channel_partner_code)
    {
        $this->container['channel_partner_code'] = $channel_partner_code;

        return $this;
    }

    /**
     * Gets channel_partner_data
     *
     * @return string|null
     */
    public function getChannelPartnerData()
    {
        return $this->container['channel_partner_data'];
    }

    /**
     * Sets channel_partner_data
     *
     * @param string|null $channel_partner_data Additional data provided by the channel partner, read-only
     *
     * @return self
     */
    public function setChannelPartnerData($channel_partner_data)
    {
        $this->container['channel_partner_data'] = $channel_partner_data;

        return $this;
    }

    /**
     * Gets channel_partner_oid
     *
     * @return int|null
     */
    public function getChannelPartnerOid()
    {
        return $this->container['channel_partner_oid'];
    }

    /**
     * Sets channel_partner_oid
     *
     * @param int|null $channel_partner_oid Channel partner object identifier, read-only and available on existing channel orders only.
     *
     * @return self
     */
    public function setChannelPartnerOid($channel_partner_oid)
    {
        $this->container['channel_partner_oid'] = $channel_partner_oid;

        return $this;
    }

    /**
     * Gets channel_partner_order_id
     *
     * @return string|null
     */
    public function getChannelPartnerOrderId()
    {
        return $this->container['channel_partner_order_id'];
    }

    /**
     * Sets channel_partner_order_id
     *
     * @param string|null $channel_partner_order_id The order ID assigned by the channel partner for this order.
     *
     * @return self
     */
    public function setChannelPartnerOrderId($channel_partner_order_id)
    {
        if (!is_null($channel_partner_order_id) && (mb_strlen($channel_partner_order_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $channel_partner_order_id when calling OrderChannelPartner., must be smaller than or equal to 50.');
        }

        $this->container['channel_partner_order_id'] = $channel_partner_order_id;

        return $this;
    }

    /**
     * Gets ignore_invalid_shipping_method
     *
     * @return bool|null
     */
    public function getIgnoreInvalidShippingMethod()
    {
        return $this->container['ignore_invalid_shipping_method'];
    }

    /**
     * Sets ignore_invalid_shipping_method
     *
     * @param bool|null $ignore_invalid_shipping_method Set to true to ignore invalid shipping method being specified.  Only applicable on inserting orders.
     *
     * @return self
     */
    public function setIgnoreInvalidShippingMethod($ignore_invalid_shipping_method)
    {
        $this->container['ignore_invalid_shipping_method'] = $ignore_invalid_shipping_method;

        return $this;
    }

    /**
     * Gets no_realtime_payment_processing
     *
     * @return bool|null
     */
    public function getNoRealtimePaymentProcessing()
    {
        return $this->container['no_realtime_payment_processing'];
    }

    /**
     * Sets no_realtime_payment_processing
     *
     * @param bool|null $no_realtime_payment_processing Indicates this order should be placed in Account Receivable for later payment processing
     *
     * @return self
     */
    public function setNoRealtimePaymentProcessing($no_realtime_payment_processing)
    {
        $this->container['no_realtime_payment_processing'] = $no_realtime_payment_processing;

        return $this;
    }

    /**
     * Gets skip_payment_processing
     *
     * @return bool|null
     */
    public function getSkipPaymentProcessing()
    {
        return $this->container['skip_payment_processing'];
    }

    /**
     * Sets skip_payment_processing
     *
     * @param bool|null $skip_payment_processing Indicates this order was already paid for via a channel purchase and no payment collection should be attempted
     *
     * @return self
     */
    public function setSkipPaymentProcessing($skip_payment_processing)
    {
        $this->container['skip_payment_processing'] = $skip_payment_processing;

        return $this;
    }

    /**
     * Gets store_completed
     *
     * @return bool|null
     */
    public function getStoreCompleted()
    {
        return $this->container['store_completed'];
    }

    /**
     * Sets store_completed
     *
     * @param bool|null $store_completed Instructs UltraCart to skip shipping department and mark this order as fully complete.  This flag defaults to true.  Set this flag to false to shipped product for this order.
     *
     * @return self
     */
    public function setStoreCompleted($store_completed)
    {
        $this->container['store_completed'] = $store_completed;

        return $this;
    }

    /**
     * Gets store_if_payment_declines
     *
     * @return bool|null
     */
    public function getStoreIfPaymentDeclines()
    {
        return $this->container['store_if_payment_declines'];
    }

    /**
     * Sets store_if_payment_declines
     *
     * @param bool|null $store_if_payment_declines If true, any failed payment will place the order in Accounts Receivable rather than rejecting it.
     *
     * @return self
     */
    public function setStoreIfPaymentDeclines($store_if_payment_declines)
    {
        $this->container['store_if_payment_declines'] = $store_if_payment_declines;

        return $this;
    }

    /**
     * Gets treat_warnings_as_errors
     *
     * @return bool|null
     */
    public function getTreatWarningsAsErrors()
    {
        return $this->container['treat_warnings_as_errors'];
    }

    /**
     * Sets treat_warnings_as_errors
     *
     * @param bool|null $treat_warnings_as_errors Any warnings are raised as errors and halt the import of the order
     *
     * @return self
     */
    public function setTreatWarningsAsErrors($treat_warnings_as_errors)
    {
        $this->container['treat_warnings_as_errors'] = $treat_warnings_as_errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


