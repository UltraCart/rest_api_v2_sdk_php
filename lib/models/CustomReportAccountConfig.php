<?php
/**
 * CustomReportAccountConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomReportAccountConfig Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomReportAccountConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomReportAccountConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ai_budget' => 'float',
        'ai_usage' => 'float',
        'merchant_id' => 'string',
        'novice_sql_comments' => 'bool',
        'opt_in' => 'bool',
        'opt_in_by_user' => 'string',
        'opt_in_date' => 'string',
        'sql_budget' => 'float',
        'sql_usage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ai_budget' => null,
        'ai_usage' => null,
        'merchant_id' => null,
        'novice_sql_comments' => null,
        'opt_in' => null,
        'opt_in_by_user' => null,
        'opt_in_date' => 'dateTime',
        'sql_budget' => null,
        'sql_usage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ai_budget' => 'ai_budget',
        'ai_usage' => 'ai_usage',
        'merchant_id' => 'merchant_id',
        'novice_sql_comments' => 'novice_sql_comments',
        'opt_in' => 'opt_in',
        'opt_in_by_user' => 'opt_in_by_user',
        'opt_in_date' => 'opt_in_date',
        'sql_budget' => 'sql_budget',
        'sql_usage' => 'sql_usage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ai_budget' => 'setAiBudget',
        'ai_usage' => 'setAiUsage',
        'merchant_id' => 'setMerchantId',
        'novice_sql_comments' => 'setNoviceSqlComments',
        'opt_in' => 'setOptIn',
        'opt_in_by_user' => 'setOptInByUser',
        'opt_in_date' => 'setOptInDate',
        'sql_budget' => 'setSqlBudget',
        'sql_usage' => 'setSqlUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ai_budget' => 'getAiBudget',
        'ai_usage' => 'getAiUsage',
        'merchant_id' => 'getMerchantId',
        'novice_sql_comments' => 'getNoviceSqlComments',
        'opt_in' => 'getOptIn',
        'opt_in_by_user' => 'getOptInByUser',
        'opt_in_date' => 'getOptInDate',
        'sql_budget' => 'getSqlBudget',
        'sql_usage' => 'getSqlUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ai_budget'] = isset($data['ai_budget']) ? $data['ai_budget'] : null;
        $this->container['ai_usage'] = isset($data['ai_usage']) ? $data['ai_usage'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['novice_sql_comments'] = isset($data['novice_sql_comments']) ? $data['novice_sql_comments'] : null;
        $this->container['opt_in'] = isset($data['opt_in']) ? $data['opt_in'] : null;
        $this->container['opt_in_by_user'] = isset($data['opt_in_by_user']) ? $data['opt_in_by_user'] : null;
        $this->container['opt_in_date'] = isset($data['opt_in_date']) ? $data['opt_in_date'] : null;
        $this->container['sql_budget'] = isset($data['sql_budget']) ? $data['sql_budget'] : null;
        $this->container['sql_usage'] = isset($data['sql_usage']) ? $data['sql_usage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ai_budget
     *
     * @return float
     */
    public function getAiBudget()
    {
        return $this->container['ai_budget'];
    }

    /**
     * Sets ai_budget
     *
     * @param float $ai_budget ai_budget
     *
     * @return $this
     */
    public function setAiBudget($ai_budget)
    {
        $this->container['ai_budget'] = $ai_budget;

        return $this;
    }

    /**
     * Gets ai_usage
     *
     * @return float
     */
    public function getAiUsage()
    {
        return $this->container['ai_usage'];
    }

    /**
     * Sets ai_usage
     *
     * @param float $ai_usage Current AI usage creating reports
     *
     * @return $this
     */
    public function setAiUsage($ai_usage)
    {
        $this->container['ai_usage'] = $ai_usage;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id Current BigQuery SQL usage running reports
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets novice_sql_comments
     *
     * @return bool
     */
    public function getNoviceSqlComments()
    {
        return $this->container['novice_sql_comments'];
    }

    /**
     * Sets novice_sql_comments
     *
     * @param bool $novice_sql_comments novice_sql_comments
     *
     * @return $this
     */
    public function setNoviceSqlComments($novice_sql_comments)
    {
        $this->container['novice_sql_comments'] = $novice_sql_comments;

        return $this;
    }

    /**
     * Gets opt_in
     *
     * @return bool
     */
    public function getOptIn()
    {
        return $this->container['opt_in'];
    }

    /**
     * Sets opt_in
     *
     * @param bool $opt_in True if they have opted into custom reports
     *
     * @return $this
     */
    public function setOptIn($opt_in)
    {
        $this->container['opt_in'] = $opt_in;

        return $this;
    }

    /**
     * Gets opt_in_by_user
     *
     * @return string
     */
    public function getOptInByUser()
    {
        return $this->container['opt_in_by_user'];
    }

    /**
     * Sets opt_in_by_user
     *
     * @param string $opt_in_by_user User that opted into custom reporting
     *
     * @return $this
     */
    public function setOptInByUser($opt_in_by_user)
    {
        $this->container['opt_in_by_user'] = $opt_in_by_user;

        return $this;
    }

    /**
     * Gets opt_in_date
     *
     * @return string
     */
    public function getOptInDate()
    {
        return $this->container['opt_in_date'];
    }

    /**
     * Sets opt_in_date
     *
     * @param string $opt_in_date Date/time that custom reporting was opted in to
     *
     * @return $this
     */
    public function setOptInDate($opt_in_date)
    {
        $this->container['opt_in_date'] = $opt_in_date;

        return $this;
    }

    /**
     * Gets sql_budget
     *
     * @return float
     */
    public function getSqlBudget()
    {
        return $this->container['sql_budget'];
    }

    /**
     * Sets sql_budget
     *
     * @param float $sql_budget sql_budget
     *
     * @return $this
     */
    public function setSqlBudget($sql_budget)
    {
        $this->container['sql_budget'] = $sql_budget;

        return $this;
    }

    /**
     * Gets sql_usage
     *
     * @return float
     */
    public function getSqlUsage()
    {
        return $this->container['sql_usage'];
    }

    /**
     * Sets sql_usage
     *
     * @param float $sql_usage sql_usage
     *
     * @return $this
     */
    public function setSqlUsage($sql_usage)
    {
        $this->container['sql_usage'] = $sql_usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


