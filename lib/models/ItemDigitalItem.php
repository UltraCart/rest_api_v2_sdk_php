<?php
/**
 * ItemDigitalItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemDigitalItem Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemDigitalItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemDigitalItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'click_wrap_agreement' => 'string',
        'creation_dts' => 'string',
        'description' => 'string',
        'digital_item_oid' => 'int',
        'file_size' => 'int',
        'import_from_url' => 'string',
        'mime_type' => 'string',
        'original_filename' => 'string',
        'pdf_meta' => '\ultracart\v2\models\ItemDigitalItemPdfMeta'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'click_wrap_agreement' => null,
        'creation_dts' => 'dateTime',
        'description' => null,
        'digital_item_oid' => 'int32',
        'file_size' => 'int64',
        'import_from_url' => null,
        'mime_type' => null,
        'original_filename' => null,
        'pdf_meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'click_wrap_agreement' => 'click_wrap_agreement',
        'creation_dts' => 'creation_dts',
        'description' => 'description',
        'digital_item_oid' => 'digital_item_oid',
        'file_size' => 'file_size',
        'import_from_url' => 'import_from_url',
        'mime_type' => 'mime_type',
        'original_filename' => 'original_filename',
        'pdf_meta' => 'pdf_meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'click_wrap_agreement' => 'setClickWrapAgreement',
        'creation_dts' => 'setCreationDts',
        'description' => 'setDescription',
        'digital_item_oid' => 'setDigitalItemOid',
        'file_size' => 'setFileSize',
        'import_from_url' => 'setImportFromUrl',
        'mime_type' => 'setMimeType',
        'original_filename' => 'setOriginalFilename',
        'pdf_meta' => 'setPdfMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'click_wrap_agreement' => 'getClickWrapAgreement',
        'creation_dts' => 'getCreationDts',
        'description' => 'getDescription',
        'digital_item_oid' => 'getDigitalItemOid',
        'file_size' => 'getFileSize',
        'import_from_url' => 'getImportFromUrl',
        'mime_type' => 'getMimeType',
        'original_filename' => 'getOriginalFilename',
        'pdf_meta' => 'getPdfMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['click_wrap_agreement'] = $data['click_wrap_agreement'] ?? null;
        $this->container['creation_dts'] = $data['creation_dts'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['digital_item_oid'] = $data['digital_item_oid'] ?? null;
        $this->container['file_size'] = $data['file_size'] ?? null;
        $this->container['import_from_url'] = $data['import_from_url'] ?? null;
        $this->container['mime_type'] = $data['mime_type'] ?? null;
        $this->container['original_filename'] = $data['original_filename'] ?? null;
        $this->container['pdf_meta'] = $data['pdf_meta'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 200)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['mime_type']) && (mb_strlen($this->container['mime_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'mime_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['original_filename']) && (mb_strlen($this->container['original_filename']) > 250)) {
            $invalidProperties[] = "invalid value for 'original_filename', the character length must be smaller than or equal to 250.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets click_wrap_agreement
     *
     * @return string|null
     */
    public function getClickWrapAgreement()
    {
        return $this->container['click_wrap_agreement'];
    }

    /**
     * Sets click_wrap_agreement
     *
     * @param string|null $click_wrap_agreement Click wrap agreement is presented to the customer before they can purchase your product.
     *
     * @return self
     */
    public function setClickWrapAgreement($click_wrap_agreement)
    {
        $this->container['click_wrap_agreement'] = $click_wrap_agreement;

        return $this;
    }

    /**
     * Gets creation_dts
     *
     * @return string|null
     */
    public function getCreationDts()
    {
        return $this->container['creation_dts'];
    }

    /**
     * Sets creation_dts
     *
     * @param string|null $creation_dts File creation date
     *
     * @return self
     */
    public function setCreationDts($creation_dts)
    {
        $this->container['creation_dts'] = $creation_dts;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the digital item
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ItemDigitalItem., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets digital_item_oid
     *
     * @return int|null
     */
    public function getDigitalItemOid()
    {
        return $this->container['digital_item_oid'];
    }

    /**
     * Sets digital_item_oid
     *
     * @param int|null $digital_item_oid The Digital item oid is a primary key used internally by UltraCart.  You should not set or change this value.  Doing so will have no effect.
     *
     * @return self
     */
    public function setDigitalItemOid($digital_item_oid)
    {
        $this->container['digital_item_oid'] = $digital_item_oid;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return int|null
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param int|null $file_size File size
     *
     * @return self
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets import_from_url
     *
     * @return string|null
     */
    public function getImportFromUrl()
    {
        return $this->container['import_from_url'];
    }

    /**
     * Sets import_from_url
     *
     * @param string|null $import_from_url This url is sourced to create or update a digital file in your digital library.  It is only considered during an insert or update operation.
     *
     * @return self
     */
    public function setImportFromUrl($import_from_url)
    {
        $this->container['import_from_url'] = $import_from_url;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string|null
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string|null $mime_type Mime type associated with the file
     *
     * @return self
     */
    public function setMimeType($mime_type)
    {
        if (!is_null($mime_type) && (mb_strlen($mime_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $mime_type when calling ItemDigitalItem., must be smaller than or equal to 100.');
        }

        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets original_filename
     *
     * @return string|null
     */
    public function getOriginalFilename()
    {
        return $this->container['original_filename'];
    }

    /**
     * Sets original_filename
     *
     * @param string|null $original_filename Original filename
     *
     * @return self
     */
    public function setOriginalFilename($original_filename)
    {
        if (!is_null($original_filename) && (mb_strlen($original_filename) > 250)) {
            throw new \InvalidArgumentException('invalid length for $original_filename when calling ItemDigitalItem., must be smaller than or equal to 250.');
        }

        $this->container['original_filename'] = $original_filename;

        return $this;
    }

    /**
     * Gets pdf_meta
     *
     * @return \ultracart\v2\models\ItemDigitalItemPdfMeta|null
     */
    public function getPdfMeta()
    {
        return $this->container['pdf_meta'];
    }

    /**
     * Sets pdf_meta
     *
     * @param \ultracart\v2\models\ItemDigitalItemPdfMeta|null $pdf_meta pdf_meta
     *
     * @return self
     */
    public function setPdfMeta($pdf_meta)
    {
        $this->container['pdf_meta'] = $pdf_meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


