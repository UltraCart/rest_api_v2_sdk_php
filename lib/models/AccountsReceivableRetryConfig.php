<?php
/**
 * AccountsReceivableRetryConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * AccountsReceivableRetryConfig Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountsReceivableRetryConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountsReceivableRetryConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'allow_process_linked_accounts' => 'bool',
        'cancel_auto_order' => 'bool',
        'current_service_plan' => 'string',
        'daily_activity_list' => '\ultracart\v2\models\AccountsReceivableRetryDayActivity[]',
        'managed_by_linked_account_merchant_id' => 'bool',
        'merchant_id' => 'string',
        'notify_emails' => 'string[]',
        'notify_rejections' => 'bool',
        'notify_successes' => 'bool',
        'process_linked_accounts' => 'bool',
        'processing_percentage' => 'string',
        'reject_at_end' => 'bool',
        'trial_mode' => 'bool',
        'trial_mode_expiration_dts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'allow_process_linked_accounts' => null,
        'cancel_auto_order' => null,
        'current_service_plan' => null,
        'daily_activity_list' => null,
        'managed_by_linked_account_merchant_id' => null,
        'merchant_id' => null,
        'notify_emails' => null,
        'notify_rejections' => null,
        'notify_successes' => null,
        'process_linked_accounts' => null,
        'processing_percentage' => null,
        'reject_at_end' => null,
        'trial_mode' => null,
        'trial_mode_expiration_dts' => 'dateTime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'allow_process_linked_accounts' => 'allow_process_linked_accounts',
        'cancel_auto_order' => 'cancel_auto_order',
        'current_service_plan' => 'current_service_plan',
        'daily_activity_list' => 'daily_activity_list',
        'managed_by_linked_account_merchant_id' => 'managed_by_linked_account_merchant_id',
        'merchant_id' => 'merchant_id',
        'notify_emails' => 'notify_emails',
        'notify_rejections' => 'notify_rejections',
        'notify_successes' => 'notify_successes',
        'process_linked_accounts' => 'process_linked_accounts',
        'processing_percentage' => 'processing_percentage',
        'reject_at_end' => 'reject_at_end',
        'trial_mode' => 'trial_mode',
        'trial_mode_expiration_dts' => 'trial_mode_expiration_dts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'allow_process_linked_accounts' => 'setAllowProcessLinkedAccounts',
        'cancel_auto_order' => 'setCancelAutoOrder',
        'current_service_plan' => 'setCurrentServicePlan',
        'daily_activity_list' => 'setDailyActivityList',
        'managed_by_linked_account_merchant_id' => 'setManagedByLinkedAccountMerchantId',
        'merchant_id' => 'setMerchantId',
        'notify_emails' => 'setNotifyEmails',
        'notify_rejections' => 'setNotifyRejections',
        'notify_successes' => 'setNotifySuccesses',
        'process_linked_accounts' => 'setProcessLinkedAccounts',
        'processing_percentage' => 'setProcessingPercentage',
        'reject_at_end' => 'setRejectAtEnd',
        'trial_mode' => 'setTrialMode',
        'trial_mode_expiration_dts' => 'setTrialModeExpirationDts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'allow_process_linked_accounts' => 'getAllowProcessLinkedAccounts',
        'cancel_auto_order' => 'getCancelAutoOrder',
        'current_service_plan' => 'getCurrentServicePlan',
        'daily_activity_list' => 'getDailyActivityList',
        'managed_by_linked_account_merchant_id' => 'getManagedByLinkedAccountMerchantId',
        'merchant_id' => 'getMerchantId',
        'notify_emails' => 'getNotifyEmails',
        'notify_rejections' => 'getNotifyRejections',
        'notify_successes' => 'getNotifySuccesses',
        'process_linked_accounts' => 'getProcessLinkedAccounts',
        'processing_percentage' => 'getProcessingPercentage',
        'reject_at_end' => 'getRejectAtEnd',
        'trial_mode' => 'getTrialMode',
        'trial_mode_expiration_dts' => 'getTrialModeExpirationDts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? null;
        $this->container['allow_process_linked_accounts'] = $data['allow_process_linked_accounts'] ?? null;
        $this->container['cancel_auto_order'] = $data['cancel_auto_order'] ?? null;
        $this->container['current_service_plan'] = $data['current_service_plan'] ?? null;
        $this->container['daily_activity_list'] = $data['daily_activity_list'] ?? null;
        $this->container['managed_by_linked_account_merchant_id'] = $data['managed_by_linked_account_merchant_id'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['notify_emails'] = $data['notify_emails'] ?? null;
        $this->container['notify_rejections'] = $data['notify_rejections'] ?? null;
        $this->container['notify_successes'] = $data['notify_successes'] ?? null;
        $this->container['process_linked_accounts'] = $data['process_linked_accounts'] ?? null;
        $this->container['processing_percentage'] = $data['processing_percentage'] ?? null;
        $this->container['reject_at_end'] = $data['reject_at_end'] ?? null;
        $this->container['trial_mode'] = $data['trial_mode'] ?? null;
        $this->container['trial_mode_expiration_dts'] = $data['trial_mode_expiration_dts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active True if the retry should run daily.  False puts the retry service into an inactive state for this merchant.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets allow_process_linked_accounts
     *
     * @return bool|null
     */
    public function getAllowProcessLinkedAccounts()
    {
        return $this->container['allow_process_linked_accounts'];
    }

    /**
     * Sets allow_process_linked_accounts
     *
     * @param bool|null $allow_process_linked_accounts True if this account has linked accounts that it can process.
     *
     * @return self
     */
    public function setAllowProcessLinkedAccounts($allow_process_linked_accounts)
    {
        $this->container['allow_process_linked_accounts'] = $allow_process_linked_accounts;

        return $this;
    }

    /**
     * Gets cancel_auto_order
     *
     * @return bool|null
     */
    public function getCancelAutoOrder()
    {
        return $this->container['cancel_auto_order'];
    }

    /**
     * Sets cancel_auto_order
     *
     * @param bool|null $cancel_auto_order If true also cancel the auto order if the order is rejected at the end
     *
     * @return self
     */
    public function setCancelAutoOrder($cancel_auto_order)
    {
        $this->container['cancel_auto_order'] = $cancel_auto_order;

        return $this;
    }

    /**
     * Gets current_service_plan
     *
     * @return string|null
     */
    public function getCurrentServicePlan()
    {
        return $this->container['current_service_plan'];
    }

    /**
     * Sets current_service_plan
     *
     * @param string|null $current_service_plan The current service plan that the account is on.
     *
     * @return self
     */
    public function setCurrentServicePlan($current_service_plan)
    {
        $this->container['current_service_plan'] = $current_service_plan;

        return $this;
    }

    /**
     * Gets daily_activity_list
     *
     * @return \ultracart\v2\models\AccountsReceivableRetryDayActivity[]|null
     */
    public function getDailyActivityList()
    {
        return $this->container['daily_activity_list'];
    }

    /**
     * Sets daily_activity_list
     *
     * @param \ultracart\v2\models\AccountsReceivableRetryDayActivity[]|null $daily_activity_list A list of days and what actions should take place on those days after an order reaches accounts receivable
     *
     * @return self
     */
    public function setDailyActivityList($daily_activity_list)
    {
        $this->container['daily_activity_list'] = $daily_activity_list;

        return $this;
    }

    /**
     * Gets managed_by_linked_account_merchant_id
     *
     * @return bool|null
     */
    public function getManagedByLinkedAccountMerchantId()
    {
        return $this->container['managed_by_linked_account_merchant_id'];
    }

    /**
     * Sets managed_by_linked_account_merchant_id
     *
     * @param bool|null $managed_by_linked_account_merchant_id If not null, this account is managed by the specified parent merchant id.
     *
     * @return self
     */
    public function setManagedByLinkedAccountMerchantId($managed_by_linked_account_merchant_id)
    {
        $this->container['managed_by_linked_account_merchant_id'] = $managed_by_linked_account_merchant_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id UltraCart merchant ID
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets notify_emails
     *
     * @return string[]|null
     */
    public function getNotifyEmails()
    {
        return $this->container['notify_emails'];
    }

    /**
     * Sets notify_emails
     *
     * @param string[]|null $notify_emails A list of email addresses to receive summary notifications from the retry service.
     *
     * @return self
     */
    public function setNotifyEmails($notify_emails)
    {
        $this->container['notify_emails'] = $notify_emails;

        return $this;
    }

    /**
     * Gets notify_rejections
     *
     * @return bool|null
     */
    public function getNotifyRejections()
    {
        return $this->container['notify_rejections'];
    }

    /**
     * Sets notify_rejections
     *
     * @param bool|null $notify_rejections If true, email addresses are notified of rejections.
     *
     * @return self
     */
    public function setNotifyRejections($notify_rejections)
    {
        $this->container['notify_rejections'] = $notify_rejections;

        return $this;
    }

    /**
     * Gets notify_successes
     *
     * @return bool|null
     */
    public function getNotifySuccesses()
    {
        return $this->container['notify_successes'];
    }

    /**
     * Sets notify_successes
     *
     * @param bool|null $notify_successes If true, email addresses are notified of successful charges.
     *
     * @return self
     */
    public function setNotifySuccesses($notify_successes)
    {
        $this->container['notify_successes'] = $notify_successes;

        return $this;
    }

    /**
     * Gets process_linked_accounts
     *
     * @return bool|null
     */
    public function getProcessLinkedAccounts()
    {
        return $this->container['process_linked_accounts'];
    }

    /**
     * Sets process_linked_accounts
     *
     * @param bool|null $process_linked_accounts If true, all linked accounts are also processed using the same rules.
     *
     * @return self
     */
    public function setProcessLinkedAccounts($process_linked_accounts)
    {
        $this->container['process_linked_accounts'] = $process_linked_accounts;

        return $this;
    }

    /**
     * Gets processing_percentage
     *
     * @return string|null
     */
    public function getProcessingPercentage()
    {
        return $this->container['processing_percentage'];
    }

    /**
     * Sets processing_percentage
     *
     * @param string|null $processing_percentage The percentage rate charged for the service.
     *
     * @return self
     */
    public function setProcessingPercentage($processing_percentage)
    {
        $this->container['processing_percentage'] = $processing_percentage;

        return $this;
    }

    /**
     * Gets reject_at_end
     *
     * @return bool|null
     */
    public function getRejectAtEnd()
    {
        return $this->container['reject_at_end'];
    }

    /**
     * Sets reject_at_end
     *
     * @param bool|null $reject_at_end If true, the order is rejected the day after the last configured activity day
     *
     * @return self
     */
    public function setRejectAtEnd($reject_at_end)
    {
        $this->container['reject_at_end'] = $reject_at_end;

        return $this;
    }

    /**
     * Gets trial_mode
     *
     * @return bool|null
     */
    public function getTrialMode()
    {
        return $this->container['trial_mode'];
    }

    /**
     * Sets trial_mode
     *
     * @param bool|null $trial_mode True if the account is currently in trial mode.  Set to false to exit trial mode.
     *
     * @return self
     */
    public function setTrialMode($trial_mode)
    {
        $this->container['trial_mode'] = $trial_mode;

        return $this;
    }

    /**
     * Gets trial_mode_expiration_dts
     *
     * @return string|null
     */
    public function getTrialModeExpirationDts()
    {
        return $this->container['trial_mode_expiration_dts'];
    }

    /**
     * Sets trial_mode_expiration_dts
     *
     * @param string|null $trial_mode_expiration_dts The date when trial mode expires.  If this date is reached without exiting trial mode, the service will de-activate.
     *
     * @return self
     */
    public function setTrialModeExpirationDts($trial_mode_expiration_dts)
    {
        $this->container['trial_mode_expiration_dts'] = $trial_mode_expiration_dts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


