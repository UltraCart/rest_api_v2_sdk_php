<?php
/**
 * PaymentsConfigurationTestMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsConfigurationTestMethod Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsConfigurationTestMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsConfigurationTestMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bank_account_number' => 'string',
        'bank_routing_number' => 'string',
        'credit_card_number' => 'string',
        'credit_card_number_existing' => 'string',
        'description' => 'string',
        'payment_action' => 'string',
        'payment_method' => 'string',
        'payment_method_test_oid' => 'int',
        'skip_affiliate_transaction' => 'bool',
        'skip_conversion_pixels' => 'bool',
        'skip_fraud_filter' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bank_account_number' => null,
        'bank_routing_number' => null,
        'credit_card_number' => null,
        'credit_card_number_existing' => null,
        'description' => null,
        'payment_action' => null,
        'payment_method' => null,
        'payment_method_test_oid' => 'int32',
        'skip_affiliate_transaction' => null,
        'skip_conversion_pixels' => null,
        'skip_fraud_filter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_account_number' => 'bank_account_number',
        'bank_routing_number' => 'bank_routing_number',
        'credit_card_number' => 'credit_card_number',
        'credit_card_number_existing' => 'credit_card_number_existing',
        'description' => 'description',
        'payment_action' => 'payment_action',
        'payment_method' => 'payment_method',
        'payment_method_test_oid' => 'payment_method_test_oid',
        'skip_affiliate_transaction' => 'skip_affiliate_transaction',
        'skip_conversion_pixels' => 'skip_conversion_pixels',
        'skip_fraud_filter' => 'skip_fraud_filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bank_account_number' => 'setBankAccountNumber',
        'bank_routing_number' => 'setBankRoutingNumber',
        'credit_card_number' => 'setCreditCardNumber',
        'credit_card_number_existing' => 'setCreditCardNumberExisting',
        'description' => 'setDescription',
        'payment_action' => 'setPaymentAction',
        'payment_method' => 'setPaymentMethod',
        'payment_method_test_oid' => 'setPaymentMethodTestOid',
        'skip_affiliate_transaction' => 'setSkipAffiliateTransaction',
        'skip_conversion_pixels' => 'setSkipConversionPixels',
        'skip_fraud_filter' => 'setSkipFraudFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bank_account_number' => 'getBankAccountNumber',
        'bank_routing_number' => 'getBankRoutingNumber',
        'credit_card_number' => 'getCreditCardNumber',
        'credit_card_number_existing' => 'getCreditCardNumberExisting',
        'description' => 'getDescription',
        'payment_action' => 'getPaymentAction',
        'payment_method' => 'getPaymentMethod',
        'payment_method_test_oid' => 'getPaymentMethodTestOid',
        'skip_affiliate_transaction' => 'getSkipAffiliateTransaction',
        'skip_conversion_pixels' => 'getSkipConversionPixels',
        'skip_fraud_filter' => 'getSkipFraudFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_ACTION_SKIP_PAYMENT = 'skip payment';
    const PAYMENT_ACTION_SKIP_PMT_REJ = 'skip pmt rej';
    const PAYMENT_ACTION_SKIP_PMT_CO = 'skip pmt co';
    const PAYMENT_ACTION_HOLD_IN_AR = 'hold in ar';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentActionAllowableValues()
    {
        return [
            self::PAYMENT_ACTION_SKIP_PAYMENT,
            self::PAYMENT_ACTION_SKIP_PMT_REJ,
            self::PAYMENT_ACTION_SKIP_PMT_CO,
            self::PAYMENT_ACTION_HOLD_IN_AR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bank_account_number'] = isset($data['bank_account_number']) ? $data['bank_account_number'] : null;
        $this->container['bank_routing_number'] = isset($data['bank_routing_number']) ? $data['bank_routing_number'] : null;
        $this->container['credit_card_number'] = isset($data['credit_card_number']) ? $data['credit_card_number'] : null;
        $this->container['credit_card_number_existing'] = isset($data['credit_card_number_existing']) ? $data['credit_card_number_existing'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['payment_action'] = isset($data['payment_action']) ? $data['payment_action'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['payment_method_test_oid'] = isset($data['payment_method_test_oid']) ? $data['payment_method_test_oid'] : null;
        $this->container['skip_affiliate_transaction'] = isset($data['skip_affiliate_transaction']) ? $data['skip_affiliate_transaction'] : null;
        $this->container['skip_conversion_pixels'] = isset($data['skip_conversion_pixels']) ? $data['skip_conversion_pixels'] : null;
        $this->container['skip_fraud_filter'] = isset($data['skip_fraud_filter']) ? $data['skip_fraud_filter'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentActionAllowableValues();
        if (!is_null($this->container['payment_action']) && !in_array($this->container['payment_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bank_account_number
     *
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string $bank_account_number Bank account number
     *
     * @return $this
     */
    public function setBankAccountNumber($bank_account_number)
    {
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets bank_routing_number
     *
     * @return string
     */
    public function getBankRoutingNumber()
    {
        return $this->container['bank_routing_number'];
    }

    /**
     * Sets bank_routing_number
     *
     * @param string $bank_routing_number Bank routing number
     *
     * @return $this
     */
    public function setBankRoutingNumber($bank_routing_number)
    {
        $this->container['bank_routing_number'] = $bank_routing_number;

        return $this;
    }

    /**
     * Gets credit_card_number
     *
     * @return string
     */
    public function getCreditCardNumber()
    {
        return $this->container['credit_card_number'];
    }

    /**
     * Sets credit_card_number
     *
     * @param string $credit_card_number Credit card number
     *
     * @return $this
     */
    public function setCreditCardNumber($credit_card_number)
    {
        $this->container['credit_card_number'] = $credit_card_number;

        return $this;
    }

    /**
     * Gets credit_card_number_existing
     *
     * @return string
     */
    public function getCreditCardNumberExisting()
    {
        return $this->container['credit_card_number_existing'];
    }

    /**
     * Sets credit_card_number_existing
     *
     * @param string $credit_card_number_existing The existing credit card number
     *
     * @return $this
     */
    public function setCreditCardNumberExisting($credit_card_number_existing)
    {
        $this->container['credit_card_number_existing'] = $credit_card_number_existing;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets payment_action
     *
     * @return string
     */
    public function getPaymentAction()
    {
        return $this->container['payment_action'];
    }

    /**
     * Sets payment_action
     *
     * @param string $payment_action Payment action
     *
     * @return $this
     */
    public function setPaymentAction($payment_action)
    {
        $allowedValues = $this->getPaymentActionAllowableValues();
        if (!is_null($payment_action) && !in_array($payment_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_action'] = $payment_action;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method Payment method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_method_test_oid
     *
     * @return int
     */
    public function getPaymentMethodTestOid()
    {
        return $this->container['payment_method_test_oid'];
    }

    /**
     * Sets payment_method_test_oid
     *
     * @param int $payment_method_test_oid Payment method test oid
     *
     * @return $this
     */
    public function setPaymentMethodTestOid($payment_method_test_oid)
    {
        $this->container['payment_method_test_oid'] = $payment_method_test_oid;

        return $this;
    }

    /**
     * Gets skip_affiliate_transaction
     *
     * @return bool
     */
    public function getSkipAffiliateTransaction()
    {
        return $this->container['skip_affiliate_transaction'];
    }

    /**
     * Sets skip_affiliate_transaction
     *
     * @param bool $skip_affiliate_transaction Skip affiliate transaction
     *
     * @return $this
     */
    public function setSkipAffiliateTransaction($skip_affiliate_transaction)
    {
        $this->container['skip_affiliate_transaction'] = $skip_affiliate_transaction;

        return $this;
    }

    /**
     * Gets skip_conversion_pixels
     *
     * @return bool
     */
    public function getSkipConversionPixels()
    {
        return $this->container['skip_conversion_pixels'];
    }

    /**
     * Sets skip_conversion_pixels
     *
     * @param bool $skip_conversion_pixels If true, skips recording any conversion pixels to avoid sending test orders to your analysis sites
     *
     * @return $this
     */
    public function setSkipConversionPixels($skip_conversion_pixels)
    {
        $this->container['skip_conversion_pixels'] = $skip_conversion_pixels;

        return $this;
    }

    /**
     * Gets skip_fraud_filter
     *
     * @return bool
     */
    public function getSkipFraudFilter()
    {
        return $this->container['skip_fraud_filter'];
    }

    /**
     * Sets skip_fraud_filter
     *
     * @param bool $skip_fraud_filter Skip fraud filter
     *
     * @return $this
     */
    public function setSkipFraudFilter($skip_fraud_filter)
    {
        $this->container['skip_fraud_filter'] = $skip_fraud_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


