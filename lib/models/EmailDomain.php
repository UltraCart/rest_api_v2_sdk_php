<?php
/**
 * EmailDomain
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * EmailDomain Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailDomain implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailDomain';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'comment' => 'string',
        'dkim' => '\ultracart\v2\models\VerificationRecord[]',
        'dkim_status' => 'string',
        'domain' => 'string',
        'esp_domain_uuid' => 'string',
        'identity_status' => 'string',
        'mailgun' => '\ultracart\v2\models\Mailgun',
        'merchant_id' => 'string',
        'provider' => 'string',
        'spf' => '\ultracart\v2\models\VerificationRecord',
        'start_dkim_dts' => 'string',
        'start_identity_dts' => 'string',
        'verification' => '\ultracart\v2\models\VerificationRecord'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'comment' => null,
        'dkim' => null,
        'dkim_status' => null,
        'domain' => null,
        'esp_domain_uuid' => null,
        'identity_status' => null,
        'mailgun' => null,
        'merchant_id' => null,
        'provider' => null,
        'spf' => null,
        'start_dkim_dts' => null,
        'start_identity_dts' => null,
        'verification' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comment' => 'comment',
        'dkim' => 'dkim',
        'dkim_status' => 'dkim_status',
        'domain' => 'domain',
        'esp_domain_uuid' => 'esp_domain_uuid',
        'identity_status' => 'identity_status',
        'mailgun' => 'mailgun',
        'merchant_id' => 'merchant_id',
        'provider' => 'provider',
        'spf' => 'spf',
        'start_dkim_dts' => 'start_dkim_dts',
        'start_identity_dts' => 'start_identity_dts',
        'verification' => 'verification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comment' => 'setComment',
        'dkim' => 'setDkim',
        'dkim_status' => 'setDkimStatus',
        'domain' => 'setDomain',
        'esp_domain_uuid' => 'setEspDomainUuid',
        'identity_status' => 'setIdentityStatus',
        'mailgun' => 'setMailgun',
        'merchant_id' => 'setMerchantId',
        'provider' => 'setProvider',
        'spf' => 'setSpf',
        'start_dkim_dts' => 'setStartDkimDts',
        'start_identity_dts' => 'setStartIdentityDts',
        'verification' => 'setVerification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comment' => 'getComment',
        'dkim' => 'getDkim',
        'dkim_status' => 'getDkimStatus',
        'domain' => 'getDomain',
        'esp_domain_uuid' => 'getEspDomainUuid',
        'identity_status' => 'getIdentityStatus',
        'mailgun' => 'getMailgun',
        'merchant_id' => 'getMerchantId',
        'provider' => 'getProvider',
        'spf' => 'getSpf',
        'start_dkim_dts' => 'getStartDkimDts',
        'start_identity_dts' => 'getStartIdentityDts',
        'verification' => 'getVerification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['dkim'] = $data['dkim'] ?? null;
        $this->container['dkim_status'] = $data['dkim_status'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['esp_domain_uuid'] = $data['esp_domain_uuid'] ?? null;
        $this->container['identity_status'] = $data['identity_status'] ?? null;
        $this->container['mailgun'] = $data['mailgun'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['provider'] = $data['provider'] ?? null;
        $this->container['spf'] = $data['spf'] ?? null;
        $this->container['start_dkim_dts'] = $data['start_dkim_dts'] ?? null;
        $this->container['start_identity_dts'] = $data['start_identity_dts'] ?? null;
        $this->container['verification'] = $data['verification'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets dkim
     *
     * @return \ultracart\v2\models\VerificationRecord[]|null
     */
    public function getDkim()
    {
        return $this->container['dkim'];
    }

    /**
     * Sets dkim
     *
     * @param \ultracart\v2\models\VerificationRecord[]|null $dkim dkim
     *
     * @return self
     */
    public function setDkim($dkim)
    {
        $this->container['dkim'] = $dkim;

        return $this;
    }

    /**
     * Gets dkim_status
     *
     * @return string|null
     */
    public function getDkimStatus()
    {
        return $this->container['dkim_status'];
    }

    /**
     * Sets dkim_status
     *
     * @param string|null $dkim_status dkim_status
     *
     * @return self
     */
    public function setDkimStatus($dkim_status)
    {
        $this->container['dkim_status'] = $dkim_status;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets esp_domain_uuid
     *
     * @return string|null
     */
    public function getEspDomainUuid()
    {
        return $this->container['esp_domain_uuid'];
    }

    /**
     * Sets esp_domain_uuid
     *
     * @param string|null $esp_domain_uuid esp_domain_uuid
     *
     * @return self
     */
    public function setEspDomainUuid($esp_domain_uuid)
    {
        $this->container['esp_domain_uuid'] = $esp_domain_uuid;

        return $this;
    }

    /**
     * Gets identity_status
     *
     * @return string|null
     */
    public function getIdentityStatus()
    {
        return $this->container['identity_status'];
    }

    /**
     * Sets identity_status
     *
     * @param string|null $identity_status identity_status
     *
     * @return self
     */
    public function setIdentityStatus($identity_status)
    {
        $this->container['identity_status'] = $identity_status;

        return $this;
    }

    /**
     * Gets mailgun
     *
     * @return \ultracart\v2\models\Mailgun|null
     */
    public function getMailgun()
    {
        return $this->container['mailgun'];
    }

    /**
     * Sets mailgun
     *
     * @param \ultracart\v2\models\Mailgun|null $mailgun mailgun
     *
     * @return self
     */
    public function setMailgun($mailgun)
    {
        $this->container['mailgun'] = $mailgun;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider provider
     *
     * @return self
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets spf
     *
     * @return \ultracart\v2\models\VerificationRecord|null
     */
    public function getSpf()
    {
        return $this->container['spf'];
    }

    /**
     * Sets spf
     *
     * @param \ultracart\v2\models\VerificationRecord|null $spf spf
     *
     * @return self
     */
    public function setSpf($spf)
    {
        $this->container['spf'] = $spf;

        return $this;
    }

    /**
     * Gets start_dkim_dts
     *
     * @return string|null
     */
    public function getStartDkimDts()
    {
        return $this->container['start_dkim_dts'];
    }

    /**
     * Sets start_dkim_dts
     *
     * @param string|null $start_dkim_dts start_dkim_dts
     *
     * @return self
     */
    public function setStartDkimDts($start_dkim_dts)
    {
        $this->container['start_dkim_dts'] = $start_dkim_dts;

        return $this;
    }

    /**
     * Gets start_identity_dts
     *
     * @return string|null
     */
    public function getStartIdentityDts()
    {
        return $this->container['start_identity_dts'];
    }

    /**
     * Sets start_identity_dts
     *
     * @param string|null $start_identity_dts start_identity_dts
     *
     * @return self
     */
    public function setStartIdentityDts($start_identity_dts)
    {
        $this->container['start_identity_dts'] = $start_identity_dts;

        return $this;
    }

    /**
     * Gets verification
     *
     * @return \ultracart\v2\models\VerificationRecord|null
     */
    public function getVerification()
    {
        return $this->container['verification'];
    }

    /**
     * Sets verification
     *
     * @param \ultracart\v2\models\VerificationRecord|null $verification verification
     *
     * @return self
     */
    public function setVerification($verification)
    {
        $this->container['verification'] = $verification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


