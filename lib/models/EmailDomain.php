<?php
/**
 * EmailDomain
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * EmailDomain Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailDomain implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailDomain';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dkim_headers' => 'string',
        'dkim_public' => 'string',
        'dkim_selector' => 'string',
        'dkim_signing_domain' => 'string',
        'dkim_status' => 'string',
        'domain' => 'string',
        'esp_domain_uuid' => 'string',
        'hostname' => 'string',
        'merchant_id' => 'string',
        'tracking_domain' => 'string',
        'type' => 'string',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dkim_headers' => null,
        'dkim_public' => null,
        'dkim_selector' => null,
        'dkim_signing_domain' => null,
        'dkim_status' => null,
        'domain' => null,
        'esp_domain_uuid' => null,
        'hostname' => null,
        'merchant_id' => null,
        'tracking_domain' => null,
        'type' => null,
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dkim_headers' => 'dkim_headers',
        'dkim_public' => 'dkim_public',
        'dkim_selector' => 'dkim_selector',
        'dkim_signing_domain' => 'dkim_signing_domain',
        'dkim_status' => 'dkim_status',
        'domain' => 'domain',
        'esp_domain_uuid' => 'esp_domain_uuid',
        'hostname' => 'hostname',
        'merchant_id' => 'merchant_id',
        'tracking_domain' => 'tracking_domain',
        'type' => 'type',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dkim_headers' => 'setDkimHeaders',
        'dkim_public' => 'setDkimPublic',
        'dkim_selector' => 'setDkimSelector',
        'dkim_signing_domain' => 'setDkimSigningDomain',
        'dkim_status' => 'setDkimStatus',
        'domain' => 'setDomain',
        'esp_domain_uuid' => 'setEspDomainUuid',
        'hostname' => 'setHostname',
        'merchant_id' => 'setMerchantId',
        'tracking_domain' => 'setTrackingDomain',
        'type' => 'setType',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dkim_headers' => 'getDkimHeaders',
        'dkim_public' => 'getDkimPublic',
        'dkim_selector' => 'getDkimSelector',
        'dkim_signing_domain' => 'getDkimSigningDomain',
        'dkim_status' => 'getDkimStatus',
        'domain' => 'getDomain',
        'esp_domain_uuid' => 'getEspDomainUuid',
        'hostname' => 'getHostname',
        'merchant_id' => 'getMerchantId',
        'tracking_domain' => 'getTrackingDomain',
        'type' => 'getType',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dkim_headers'] = isset($data['dkim_headers']) ? $data['dkim_headers'] : null;
        $this->container['dkim_public'] = isset($data['dkim_public']) ? $data['dkim_public'] : null;
        $this->container['dkim_selector'] = isset($data['dkim_selector']) ? $data['dkim_selector'] : null;
        $this->container['dkim_signing_domain'] = isset($data['dkim_signing_domain']) ? $data['dkim_signing_domain'] : null;
        $this->container['dkim_status'] = isset($data['dkim_status']) ? $data['dkim_status'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['esp_domain_uuid'] = isset($data['esp_domain_uuid']) ? $data['esp_domain_uuid'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['tracking_domain'] = isset($data['tracking_domain']) ? $data['tracking_domain'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets dkim_headers
     *
     * @return string
     */
    public function getDkimHeaders()
    {
        return $this->container['dkim_headers'];
    }

    /**
     * Sets dkim_headers
     *
     * @param string $dkim_headers dkim_headers
     *
     * @return $this
     */
    public function setDkimHeaders($dkim_headers)
    {
        $this->container['dkim_headers'] = $dkim_headers;

        return $this;
    }

    /**
     * Gets dkim_public
     *
     * @return string
     */
    public function getDkimPublic()
    {
        return $this->container['dkim_public'];
    }

    /**
     * Sets dkim_public
     *
     * @param string $dkim_public dkim_public
     *
     * @return $this
     */
    public function setDkimPublic($dkim_public)
    {
        $this->container['dkim_public'] = $dkim_public;

        return $this;
    }

    /**
     * Gets dkim_selector
     *
     * @return string
     */
    public function getDkimSelector()
    {
        return $this->container['dkim_selector'];
    }

    /**
     * Sets dkim_selector
     *
     * @param string $dkim_selector dkim_selector
     *
     * @return $this
     */
    public function setDkimSelector($dkim_selector)
    {
        $this->container['dkim_selector'] = $dkim_selector;

        return $this;
    }

    /**
     * Gets dkim_signing_domain
     *
     * @return string
     */
    public function getDkimSigningDomain()
    {
        return $this->container['dkim_signing_domain'];
    }

    /**
     * Sets dkim_signing_domain
     *
     * @param string $dkim_signing_domain dkim_signing_domain
     *
     * @return $this
     */
    public function setDkimSigningDomain($dkim_signing_domain)
    {
        $this->container['dkim_signing_domain'] = $dkim_signing_domain;

        return $this;
    }

    /**
     * Gets dkim_status
     *
     * @return string
     */
    public function getDkimStatus()
    {
        return $this->container['dkim_status'];
    }

    /**
     * Sets dkim_status
     *
     * @param string $dkim_status dkim_status
     *
     * @return $this
     */
    public function setDkimStatus($dkim_status)
    {
        $this->container['dkim_status'] = $dkim_status;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets esp_domain_uuid
     *
     * @return string
     */
    public function getEspDomainUuid()
    {
        return $this->container['esp_domain_uuid'];
    }

    /**
     * Sets esp_domain_uuid
     *
     * @param string $esp_domain_uuid esp_domain_uuid
     *
     * @return $this
     */
    public function setEspDomainUuid($esp_domain_uuid)
    {
        $this->container['esp_domain_uuid'] = $esp_domain_uuid;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets tracking_domain
     *
     * @return string
     */
    public function getTrackingDomain()
    {
        return $this->container['tracking_domain'];
    }

    /**
     * Sets tracking_domain
     *
     * @param string $tracking_domain tracking_domain
     *
     * @return $this
     */
    public function setTrackingDomain($tracking_domain)
    {
        $this->container['tracking_domain'] = $tracking_domain;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


