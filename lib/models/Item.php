<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * Item Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Item implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'accounting' => '\ultracart\v2\models\ItemAccounting',
        'amember' => '\ultracart\v2\models\ItemAmember',
        'auto_order' => '\ultracart\v2\models\ItemAutoOrder',
        'ccbill' => '\ultracart\v2\models\ItemCCBill',
        'channel_partner_mappings' => '\ultracart\v2\models\ItemChannelPartnerMapping[]',
        'chargeback' => '\ultracart\v2\models\ItemChargeback',
        'checkout' => '\ultracart\v2\models\ItemCheckout',
        'content' => '\ultracart\v2\models\ItemContent',
        'creation_dts' => 'string',
        'description' => 'string',
        'description_translated_text_instance_oid' => 'int',
        'digital_delivery' => '\ultracart\v2\models\ItemDigitalDelivery',
        'ebay' => '\ultracart\v2\models\ItemEbay',
        'email_notifications' => '\ultracart\v2\models\ItemEmailNotifications',
        'enrollment123' => '\ultracart\v2\models\ItemEnrollment123',
        'gift_certificate' => '\ultracart\v2\models\ItemGiftCertificate',
        'google_product_search' => '\ultracart\v2\models\ItemGoogleProductSearch',
        'identifiers' => '\ultracart\v2\models\ItemIdentifiers',
        'inactive' => 'bool',
        'instant_payment_notifications' => '\ultracart\v2\models\ItemInstantPaymentNotifications',
        'internal' => '\ultracart\v2\models\ItemInternal',
        'kit' => 'bool',
        'kit_definition' => '\ultracart\v2\models\ItemKitDefinition',
        'last_modified_dts' => 'string',
        'merchant_id' => 'string',
        'merchant_item_id' => 'string',
        'merchant_item_oid' => 'int',
        'options' => '\ultracart\v2\models\ItemOption[]',
        'parent_category_id' => 'int',
        'payment_processing' => '\ultracart\v2\models\ItemPaymentProcessing',
        'physical' => '\ultracart\v2\models\ItemPhysical',
        'pricing' => '\ultracart\v2\models\ItemPricing',
        'realtime_pricing' => '\ultracart\v2\models\ItemRealtimePricing',
        'related' => '\ultracart\v2\models\ItemRelated',
        'reporting' => '\ultracart\v2\models\ItemReporting',
        'restriction' => '\ultracart\v2\models\ItemRestriction',
        'revguard' => '\ultracart\v2\models\ItemRevguard',
        'reviews' => '\ultracart\v2\models\ItemReviews',
        'salesforce' => '\ultracart\v2\models\ItemSalesforce',
        'shipping' => '\ultracart\v2\models\ItemShipping',
        'tax' => '\ultracart\v2\models\ItemTax',
        'third_party_email_marketing' => '\ultracart\v2\models\ItemThirdPartyEmailMarketing[]',
        'variant_items' => '\ultracart\v2\models\ItemVariantItem[]',
        'variations' => '\ultracart\v2\models\ItemVariation[]',
        'wishlist_member' => '\ultracart\v2\models\ItemWishlistMember'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'accounting' => 'accounting',
        'amember' => 'amember',
        'auto_order' => 'auto_order',
        'ccbill' => 'ccbill',
        'channel_partner_mappings' => 'channelPartnerMappings',
        'chargeback' => 'chargeback',
        'checkout' => 'checkout',
        'content' => 'content',
        'creation_dts' => 'creation_dts',
        'description' => 'description',
        'description_translated_text_instance_oid' => 'description_translated_text_instance_oid',
        'digital_delivery' => 'digital_delivery',
        'ebay' => 'ebay',
        'email_notifications' => 'email_notifications',
        'enrollment123' => 'enrollment123',
        'gift_certificate' => 'gift_certificate',
        'google_product_search' => 'google_product_search',
        'identifiers' => 'identifiers',
        'inactive' => 'inactive',
        'instant_payment_notifications' => 'instant_payment_notifications',
        'internal' => 'internal',
        'kit' => 'kit',
        'kit_definition' => 'kit_definition',
        'last_modified_dts' => 'last_modified_dts',
        'merchant_id' => 'merchant_id',
        'merchant_item_id' => 'merchant_item_id',
        'merchant_item_oid' => 'merchant_item_oid',
        'options' => 'options',
        'parent_category_id' => 'parent_category_id',
        'payment_processing' => 'payment_processing',
        'physical' => 'physical',
        'pricing' => 'pricing',
        'realtime_pricing' => 'realtime_pricing',
        'related' => 'related',
        'reporting' => 'reporting',
        'restriction' => 'restriction',
        'revguard' => 'revguard',
        'reviews' => 'reviews',
        'salesforce' => 'salesforce',
        'shipping' => 'shipping',
        'tax' => 'tax',
        'third_party_email_marketing' => 'third_party_email_marketing',
        'variant_items' => 'variant_items',
        'variations' => 'variations',
        'wishlist_member' => 'wishlist_member'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'accounting' => 'setAccounting',
        'amember' => 'setAmember',
        'auto_order' => 'setAutoOrder',
        'ccbill' => 'setCcbill',
        'channel_partner_mappings' => 'setChannelPartnerMappings',
        'chargeback' => 'setChargeback',
        'checkout' => 'setCheckout',
        'content' => 'setContent',
        'creation_dts' => 'setCreationDts',
        'description' => 'setDescription',
        'description_translated_text_instance_oid' => 'setDescriptionTranslatedTextInstanceOid',
        'digital_delivery' => 'setDigitalDelivery',
        'ebay' => 'setEbay',
        'email_notifications' => 'setEmailNotifications',
        'enrollment123' => 'setEnrollment123',
        'gift_certificate' => 'setGiftCertificate',
        'google_product_search' => 'setGoogleProductSearch',
        'identifiers' => 'setIdentifiers',
        'inactive' => 'setInactive',
        'instant_payment_notifications' => 'setInstantPaymentNotifications',
        'internal' => 'setInternal',
        'kit' => 'setKit',
        'kit_definition' => 'setKitDefinition',
        'last_modified_dts' => 'setLastModifiedDts',
        'merchant_id' => 'setMerchantId',
        'merchant_item_id' => 'setMerchantItemId',
        'merchant_item_oid' => 'setMerchantItemOid',
        'options' => 'setOptions',
        'parent_category_id' => 'setParentCategoryId',
        'payment_processing' => 'setPaymentProcessing',
        'physical' => 'setPhysical',
        'pricing' => 'setPricing',
        'realtime_pricing' => 'setRealtimePricing',
        'related' => 'setRelated',
        'reporting' => 'setReporting',
        'restriction' => 'setRestriction',
        'revguard' => 'setRevguard',
        'reviews' => 'setReviews',
        'salesforce' => 'setSalesforce',
        'shipping' => 'setShipping',
        'tax' => 'setTax',
        'third_party_email_marketing' => 'setThirdPartyEmailMarketing',
        'variant_items' => 'setVariantItems',
        'variations' => 'setVariations',
        'wishlist_member' => 'setWishlistMember'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'accounting' => 'getAccounting',
        'amember' => 'getAmember',
        'auto_order' => 'getAutoOrder',
        'ccbill' => 'getCcbill',
        'channel_partner_mappings' => 'getChannelPartnerMappings',
        'chargeback' => 'getChargeback',
        'checkout' => 'getCheckout',
        'content' => 'getContent',
        'creation_dts' => 'getCreationDts',
        'description' => 'getDescription',
        'description_translated_text_instance_oid' => 'getDescriptionTranslatedTextInstanceOid',
        'digital_delivery' => 'getDigitalDelivery',
        'ebay' => 'getEbay',
        'email_notifications' => 'getEmailNotifications',
        'enrollment123' => 'getEnrollment123',
        'gift_certificate' => 'getGiftCertificate',
        'google_product_search' => 'getGoogleProductSearch',
        'identifiers' => 'getIdentifiers',
        'inactive' => 'getInactive',
        'instant_payment_notifications' => 'getInstantPaymentNotifications',
        'internal' => 'getInternal',
        'kit' => 'getKit',
        'kit_definition' => 'getKitDefinition',
        'last_modified_dts' => 'getLastModifiedDts',
        'merchant_id' => 'getMerchantId',
        'merchant_item_id' => 'getMerchantItemId',
        'merchant_item_oid' => 'getMerchantItemOid',
        'options' => 'getOptions',
        'parent_category_id' => 'getParentCategoryId',
        'payment_processing' => 'getPaymentProcessing',
        'physical' => 'getPhysical',
        'pricing' => 'getPricing',
        'realtime_pricing' => 'getRealtimePricing',
        'related' => 'getRelated',
        'reporting' => 'getReporting',
        'restriction' => 'getRestriction',
        'revguard' => 'getRevguard',
        'reviews' => 'getReviews',
        'salesforce' => 'getSalesforce',
        'shipping' => 'getShipping',
        'tax' => 'getTax',
        'third_party_email_marketing' => 'getThirdPartyEmailMarketing',
        'variant_items' => 'getVariantItems',
        'variations' => 'getVariations',
        'wishlist_member' => 'getWishlistMember'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounting'] = isset($data['accounting']) ? $data['accounting'] : null;
        $this->container['amember'] = isset($data['amember']) ? $data['amember'] : null;
        $this->container['auto_order'] = isset($data['auto_order']) ? $data['auto_order'] : null;
        $this->container['ccbill'] = isset($data['ccbill']) ? $data['ccbill'] : null;
        $this->container['channel_partner_mappings'] = isset($data['channel_partner_mappings']) ? $data['channel_partner_mappings'] : null;
        $this->container['chargeback'] = isset($data['chargeback']) ? $data['chargeback'] : null;
        $this->container['checkout'] = isset($data['checkout']) ? $data['checkout'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['creation_dts'] = isset($data['creation_dts']) ? $data['creation_dts'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_translated_text_instance_oid'] = isset($data['description_translated_text_instance_oid']) ? $data['description_translated_text_instance_oid'] : null;
        $this->container['digital_delivery'] = isset($data['digital_delivery']) ? $data['digital_delivery'] : null;
        $this->container['ebay'] = isset($data['ebay']) ? $data['ebay'] : null;
        $this->container['email_notifications'] = isset($data['email_notifications']) ? $data['email_notifications'] : null;
        $this->container['enrollment123'] = isset($data['enrollment123']) ? $data['enrollment123'] : null;
        $this->container['gift_certificate'] = isset($data['gift_certificate']) ? $data['gift_certificate'] : null;
        $this->container['google_product_search'] = isset($data['google_product_search']) ? $data['google_product_search'] : null;
        $this->container['identifiers'] = isset($data['identifiers']) ? $data['identifiers'] : null;
        $this->container['inactive'] = isset($data['inactive']) ? $data['inactive'] : null;
        $this->container['instant_payment_notifications'] = isset($data['instant_payment_notifications']) ? $data['instant_payment_notifications'] : null;
        $this->container['internal'] = isset($data['internal']) ? $data['internal'] : null;
        $this->container['kit'] = isset($data['kit']) ? $data['kit'] : null;
        $this->container['kit_definition'] = isset($data['kit_definition']) ? $data['kit_definition'] : null;
        $this->container['last_modified_dts'] = isset($data['last_modified_dts']) ? $data['last_modified_dts'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['merchant_item_id'] = isset($data['merchant_item_id']) ? $data['merchant_item_id'] : null;
        $this->container['merchant_item_oid'] = isset($data['merchant_item_oid']) ? $data['merchant_item_oid'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['parent_category_id'] = isset($data['parent_category_id']) ? $data['parent_category_id'] : null;
        $this->container['payment_processing'] = isset($data['payment_processing']) ? $data['payment_processing'] : null;
        $this->container['physical'] = isset($data['physical']) ? $data['physical'] : null;
        $this->container['pricing'] = isset($data['pricing']) ? $data['pricing'] : null;
        $this->container['realtime_pricing'] = isset($data['realtime_pricing']) ? $data['realtime_pricing'] : null;
        $this->container['related'] = isset($data['related']) ? $data['related'] : null;
        $this->container['reporting'] = isset($data['reporting']) ? $data['reporting'] : null;
        $this->container['restriction'] = isset($data['restriction']) ? $data['restriction'] : null;
        $this->container['revguard'] = isset($data['revguard']) ? $data['revguard'] : null;
        $this->container['reviews'] = isset($data['reviews']) ? $data['reviews'] : null;
        $this->container['salesforce'] = isset($data['salesforce']) ? $data['salesforce'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['third_party_email_marketing'] = isset($data['third_party_email_marketing']) ? $data['third_party_email_marketing'] : null;
        $this->container['variant_items'] = isset($data['variant_items']) ? $data['variant_items'] : null;
        $this->container['variations'] = isset($data['variations']) ? $data['variations'] : null;
        $this->container['wishlist_member'] = isset($data['wishlist_member']) ? $data['wishlist_member'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if (!is_null($this->container['description']) && (strlen($this->container['description']) > 512)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['merchant_id']) && (strlen($this->container['merchant_id']) > 5)) {
            $invalid_properties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['merchant_item_id']) && (strlen($this->container['merchant_item_id']) > 20)) {
            $invalid_properties[] = "invalid value for 'merchant_item_id', the character length must be smaller than or equal to 20.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['description']) > 512) {
            return false;
        }
        if (strlen($this->container['merchant_id']) > 5) {
            return false;
        }
        if (strlen($this->container['merchant_item_id']) > 20) {
            return false;
        }
        return true;
    }


    /**
     * Gets accounting
     * @return \ultracart\v2\models\ItemAccounting
     */
    public function getAccounting()
    {
        return $this->container['accounting'];
    }

    /**
     * Sets accounting
     * @param \ultracart\v2\models\ItemAccounting $accounting
     * @return $this
     */
    public function setAccounting($accounting)
    {
        $this->container['accounting'] = $accounting;

        return $this;
    }

    /**
     * Gets amember
     * @return \ultracart\v2\models\ItemAmember
     */
    public function getAmember()
    {
        return $this->container['amember'];
    }

    /**
     * Sets amember
     * @param \ultracart\v2\models\ItemAmember $amember
     * @return $this
     */
    public function setAmember($amember)
    {
        $this->container['amember'] = $amember;

        return $this;
    }

    /**
     * Gets auto_order
     * @return \ultracart\v2\models\ItemAutoOrder
     */
    public function getAutoOrder()
    {
        return $this->container['auto_order'];
    }

    /**
     * Sets auto_order
     * @param \ultracart\v2\models\ItemAutoOrder $auto_order
     * @return $this
     */
    public function setAutoOrder($auto_order)
    {
        $this->container['auto_order'] = $auto_order;

        return $this;
    }

    /**
     * Gets ccbill
     * @return \ultracart\v2\models\ItemCCBill
     */
    public function getCcbill()
    {
        return $this->container['ccbill'];
    }

    /**
     * Sets ccbill
     * @param \ultracart\v2\models\ItemCCBill $ccbill
     * @return $this
     */
    public function setCcbill($ccbill)
    {
        $this->container['ccbill'] = $ccbill;

        return $this;
    }

    /**
     * Gets channel_partner_mappings
     * @return \ultracart\v2\models\ItemChannelPartnerMapping[]
     */
    public function getChannelPartnerMappings()
    {
        return $this->container['channel_partner_mappings'];
    }

    /**
     * Sets channel_partner_mappings
     * @param \ultracart\v2\models\ItemChannelPartnerMapping[] $channel_partner_mappings Channel Partner Item Mapping
     * @return $this
     */
    public function setChannelPartnerMappings($channel_partner_mappings)
    {
        $this->container['channel_partner_mappings'] = $channel_partner_mappings;

        return $this;
    }

    /**
     * Gets chargeback
     * @return \ultracart\v2\models\ItemChargeback
     */
    public function getChargeback()
    {
        return $this->container['chargeback'];
    }

    /**
     * Sets chargeback
     * @param \ultracart\v2\models\ItemChargeback $chargeback
     * @return $this
     */
    public function setChargeback($chargeback)
    {
        $this->container['chargeback'] = $chargeback;

        return $this;
    }

    /**
     * Gets checkout
     * @return \ultracart\v2\models\ItemCheckout
     */
    public function getCheckout()
    {
        return $this->container['checkout'];
    }

    /**
     * Sets checkout
     * @param \ultracart\v2\models\ItemCheckout $checkout
     * @return $this
     */
    public function setCheckout($checkout)
    {
        $this->container['checkout'] = $checkout;

        return $this;
    }

    /**
     * Gets content
     * @return \ultracart\v2\models\ItemContent
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param \ultracart\v2\models\ItemContent $content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets creation_dts
     * @return string
     */
    public function getCreationDts()
    {
        return $this->container['creation_dts'];
    }

    /**
     * Sets creation_dts
     * @param string $creation_dts Date/time of creation
     * @return $this
     */
    public function setCreationDts($creation_dts)
    {
        $this->container['creation_dts'] = $creation_dts;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description of the item up to 500 characters.
     * @return $this
     */
    public function setDescription($description)
    {
        if (strlen($description) > 512) {
            throw new \InvalidArgumentException('invalid length for $description when calling Item., must be smaller than or equal to 512.');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_translated_text_instance_oid
     * @return int
     */
    public function getDescriptionTranslatedTextInstanceOid()
    {
        return $this->container['description_translated_text_instance_oid'];
    }

    /**
     * Sets description_translated_text_instance_oid
     * @param int $description_translated_text_instance_oid Description translated text instance id
     * @return $this
     */
    public function setDescriptionTranslatedTextInstanceOid($description_translated_text_instance_oid)
    {
        $this->container['description_translated_text_instance_oid'] = $description_translated_text_instance_oid;

        return $this;
    }

    /**
     * Gets digital_delivery
     * @return \ultracart\v2\models\ItemDigitalDelivery
     */
    public function getDigitalDelivery()
    {
        return $this->container['digital_delivery'];
    }

    /**
     * Sets digital_delivery
     * @param \ultracart\v2\models\ItemDigitalDelivery $digital_delivery
     * @return $this
     */
    public function setDigitalDelivery($digital_delivery)
    {
        $this->container['digital_delivery'] = $digital_delivery;

        return $this;
    }

    /**
     * Gets ebay
     * @return \ultracart\v2\models\ItemEbay
     */
    public function getEbay()
    {
        return $this->container['ebay'];
    }

    /**
     * Sets ebay
     * @param \ultracart\v2\models\ItemEbay $ebay
     * @return $this
     */
    public function setEbay($ebay)
    {
        $this->container['ebay'] = $ebay;

        return $this;
    }

    /**
     * Gets email_notifications
     * @return \ultracart\v2\models\ItemEmailNotifications
     */
    public function getEmailNotifications()
    {
        return $this->container['email_notifications'];
    }

    /**
     * Sets email_notifications
     * @param \ultracart\v2\models\ItemEmailNotifications $email_notifications
     * @return $this
     */
    public function setEmailNotifications($email_notifications)
    {
        $this->container['email_notifications'] = $email_notifications;

        return $this;
    }

    /**
     * Gets enrollment123
     * @return \ultracart\v2\models\ItemEnrollment123
     */
    public function getEnrollment123()
    {
        return $this->container['enrollment123'];
    }

    /**
     * Sets enrollment123
     * @param \ultracart\v2\models\ItemEnrollment123 $enrollment123
     * @return $this
     */
    public function setEnrollment123($enrollment123)
    {
        $this->container['enrollment123'] = $enrollment123;

        return $this;
    }

    /**
     * Gets gift_certificate
     * @return \ultracart\v2\models\ItemGiftCertificate
     */
    public function getGiftCertificate()
    {
        return $this->container['gift_certificate'];
    }

    /**
     * Sets gift_certificate
     * @param \ultracart\v2\models\ItemGiftCertificate $gift_certificate
     * @return $this
     */
    public function setGiftCertificate($gift_certificate)
    {
        $this->container['gift_certificate'] = $gift_certificate;

        return $this;
    }

    /**
     * Gets google_product_search
     * @return \ultracart\v2\models\ItemGoogleProductSearch
     */
    public function getGoogleProductSearch()
    {
        return $this->container['google_product_search'];
    }

    /**
     * Sets google_product_search
     * @param \ultracart\v2\models\ItemGoogleProductSearch $google_product_search
     * @return $this
     */
    public function setGoogleProductSearch($google_product_search)
    {
        $this->container['google_product_search'] = $google_product_search;

        return $this;
    }

    /**
     * Gets identifiers
     * @return \ultracart\v2\models\ItemIdentifiers
     */
    public function getIdentifiers()
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     * @param \ultracart\v2\models\ItemIdentifiers $identifiers
     * @return $this
     */
    public function setIdentifiers($identifiers)
    {
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets inactive
     * @return bool
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     * @param bool $inactive True if this item is inactive and can not be purchased
     * @return $this
     */
    public function setInactive($inactive)
    {
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets instant_payment_notifications
     * @return \ultracart\v2\models\ItemInstantPaymentNotifications
     */
    public function getInstantPaymentNotifications()
    {
        return $this->container['instant_payment_notifications'];
    }

    /**
     * Sets instant_payment_notifications
     * @param \ultracart\v2\models\ItemInstantPaymentNotifications $instant_payment_notifications
     * @return $this
     */
    public function setInstantPaymentNotifications($instant_payment_notifications)
    {
        $this->container['instant_payment_notifications'] = $instant_payment_notifications;

        return $this;
    }

    /**
     * Gets internal
     * @return \ultracart\v2\models\ItemInternal
     */
    public function getInternal()
    {
        return $this->container['internal'];
    }

    /**
     * Sets internal
     * @param \ultracart\v2\models\ItemInternal $internal
     * @return $this
     */
    public function setInternal($internal)
    {
        $this->container['internal'] = $internal;

        return $this;
    }

    /**
     * Gets kit
     * @return bool
     */
    public function getKit()
    {
        return $this->container['kit'];
    }

    /**
     * Sets kit
     * @param bool $kit True if this item is a kit
     * @return $this
     */
    public function setKit($kit)
    {
        $this->container['kit'] = $kit;

        return $this;
    }

    /**
     * Gets kit_definition
     * @return \ultracart\v2\models\ItemKitDefinition
     */
    public function getKitDefinition()
    {
        return $this->container['kit_definition'];
    }

    /**
     * Sets kit_definition
     * @param \ultracart\v2\models\ItemKitDefinition $kit_definition
     * @return $this
     */
    public function setKitDefinition($kit_definition)
    {
        $this->container['kit_definition'] = $kit_definition;

        return $this;
    }

    /**
     * Gets last_modified_dts
     * @return string
     */
    public function getLastModifiedDts()
    {
        return $this->container['last_modified_dts'];
    }

    /**
     * Sets last_modified_dts
     * @param string $last_modified_dts Date/time of last modification
     * @return $this
     */
    public function setLastModifiedDts($last_modified_dts)
    {
        $this->container['last_modified_dts'] = $last_modified_dts;

        return $this;
    }

    /**
     * Gets merchant_id
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     * @param string $merchant_id UltraCart merchant ID owning item
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        if (strlen($merchant_id) > 5) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling Item., must be smaller than or equal to 5.');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets merchant_item_id
     * @return string
     */
    public function getMerchantItemId()
    {
        return $this->container['merchant_item_id'];
    }

    /**
     * Sets merchant_item_id
     * @param string $merchant_item_id Unique item id assigned to this item
     * @return $this
     */
    public function setMerchantItemId($merchant_item_id)
    {
        if (strlen($merchant_item_id) > 20) {
            throw new \InvalidArgumentException('invalid length for $merchant_item_id when calling Item., must be smaller than or equal to 20.');
        }
        $this->container['merchant_item_id'] = $merchant_item_id;

        return $this;
    }

    /**
     * Gets merchant_item_oid
     * @return int
     */
    public function getMerchantItemOid()
    {
        return $this->container['merchant_item_oid'];
    }

    /**
     * Sets merchant_item_oid
     * @param int $merchant_item_oid Unique object identifier for this item
     * @return $this
     */
    public function setMerchantItemOid($merchant_item_oid)
    {
        $this->container['merchant_item_oid'] = $merchant_item_oid;

        return $this;
    }

    /**
     * Gets options
     * @return \ultracart\v2\models\ItemOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \ultracart\v2\models\ItemOption[] $options Options
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets parent_category_id
     * @return int
     */
    public function getParentCategoryId()
    {
        return $this->container['parent_category_id'];
    }

    /**
     * Sets parent_category_id
     * @param int $parent_category_id Parent category of the item.  Zero indicates the root folder.
     * @return $this
     */
    public function setParentCategoryId($parent_category_id)
    {
        $this->container['parent_category_id'] = $parent_category_id;

        return $this;
    }

    /**
     * Gets payment_processing
     * @return \ultracart\v2\models\ItemPaymentProcessing
     */
    public function getPaymentProcessing()
    {
        return $this->container['payment_processing'];
    }

    /**
     * Sets payment_processing
     * @param \ultracart\v2\models\ItemPaymentProcessing $payment_processing
     * @return $this
     */
    public function setPaymentProcessing($payment_processing)
    {
        $this->container['payment_processing'] = $payment_processing;

        return $this;
    }

    /**
     * Gets physical
     * @return \ultracart\v2\models\ItemPhysical
     */
    public function getPhysical()
    {
        return $this->container['physical'];
    }

    /**
     * Sets physical
     * @param \ultracart\v2\models\ItemPhysical $physical
     * @return $this
     */
    public function setPhysical($physical)
    {
        $this->container['physical'] = $physical;

        return $this;
    }

    /**
     * Gets pricing
     * @return \ultracart\v2\models\ItemPricing
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     * @param \ultracart\v2\models\ItemPricing $pricing
     * @return $this
     */
    public function setPricing($pricing)
    {
        $this->container['pricing'] = $pricing;

        return $this;
    }

    /**
     * Gets realtime_pricing
     * @return \ultracart\v2\models\ItemRealtimePricing
     */
    public function getRealtimePricing()
    {
        return $this->container['realtime_pricing'];
    }

    /**
     * Sets realtime_pricing
     * @param \ultracart\v2\models\ItemRealtimePricing $realtime_pricing
     * @return $this
     */
    public function setRealtimePricing($realtime_pricing)
    {
        $this->container['realtime_pricing'] = $realtime_pricing;

        return $this;
    }

    /**
     * Gets related
     * @return \ultracart\v2\models\ItemRelated
     */
    public function getRelated()
    {
        return $this->container['related'];
    }

    /**
     * Sets related
     * @param \ultracart\v2\models\ItemRelated $related
     * @return $this
     */
    public function setRelated($related)
    {
        $this->container['related'] = $related;

        return $this;
    }

    /**
     * Gets reporting
     * @return \ultracart\v2\models\ItemReporting
     */
    public function getReporting()
    {
        return $this->container['reporting'];
    }

    /**
     * Sets reporting
     * @param \ultracart\v2\models\ItemReporting $reporting
     * @return $this
     */
    public function setReporting($reporting)
    {
        $this->container['reporting'] = $reporting;

        return $this;
    }

    /**
     * Gets restriction
     * @return \ultracart\v2\models\ItemRestriction
     */
    public function getRestriction()
    {
        return $this->container['restriction'];
    }

    /**
     * Sets restriction
     * @param \ultracart\v2\models\ItemRestriction $restriction
     * @return $this
     */
    public function setRestriction($restriction)
    {
        $this->container['restriction'] = $restriction;

        return $this;
    }

    /**
     * Gets revguard
     * @return \ultracart\v2\models\ItemRevguard
     */
    public function getRevguard()
    {
        return $this->container['revguard'];
    }

    /**
     * Sets revguard
     * @param \ultracart\v2\models\ItemRevguard $revguard
     * @return $this
     */
    public function setRevguard($revguard)
    {
        $this->container['revguard'] = $revguard;

        return $this;
    }

    /**
     * Gets reviews
     * @return \ultracart\v2\models\ItemReviews
     */
    public function getReviews()
    {
        return $this->container['reviews'];
    }

    /**
     * Sets reviews
     * @param \ultracart\v2\models\ItemReviews $reviews
     * @return $this
     */
    public function setReviews($reviews)
    {
        $this->container['reviews'] = $reviews;

        return $this;
    }

    /**
     * Gets salesforce
     * @return \ultracart\v2\models\ItemSalesforce
     */
    public function getSalesforce()
    {
        return $this->container['salesforce'];
    }

    /**
     * Sets salesforce
     * @param \ultracart\v2\models\ItemSalesforce $salesforce
     * @return $this
     */
    public function setSalesforce($salesforce)
    {
        $this->container['salesforce'] = $salesforce;

        return $this;
    }

    /**
     * Gets shipping
     * @return \ultracart\v2\models\ItemShipping
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     * @param \ultracart\v2\models\ItemShipping $shipping
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets tax
     * @return \ultracart\v2\models\ItemTax
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     * @param \ultracart\v2\models\ItemTax $tax
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets third_party_email_marketing
     * @return \ultracart\v2\models\ItemThirdPartyEmailMarketing[]
     */
    public function getThirdPartyEmailMarketing()
    {
        return $this->container['third_party_email_marketing'];
    }

    /**
     * Sets third_party_email_marketing
     * @param \ultracart\v2\models\ItemThirdPartyEmailMarketing[] $third_party_email_marketing 3rd Party Email Marketing
     * @return $this
     */
    public function setThirdPartyEmailMarketing($third_party_email_marketing)
    {
        $this->container['third_party_email_marketing'] = $third_party_email_marketing;

        return $this;
    }

    /**
     * Gets variant_items
     * @return \ultracart\v2\models\ItemVariantItem[]
     */
    public function getVariantItems()
    {
        return $this->container['variant_items'];
    }

    /**
     * Sets variant_items
     * @param \ultracart\v2\models\ItemVariantItem[] $variant_items Variant Items
     * @return $this
     */
    public function setVariantItems($variant_items)
    {
        $this->container['variant_items'] = $variant_items;

        return $this;
    }

    /**
     * Gets variations
     * @return \ultracart\v2\models\ItemVariation[]
     */
    public function getVariations()
    {
        return $this->container['variations'];
    }

    /**
     * Sets variations
     * @param \ultracart\v2\models\ItemVariation[] $variations Variations
     * @return $this
     */
    public function setVariations($variations)
    {
        $this->container['variations'] = $variations;

        return $this;
    }

    /**
     * Gets wishlist_member
     * @return \ultracart\v2\models\ItemWishlistMember
     */
    public function getWishlistMember()
    {
        return $this->container['wishlist_member'];
    }

    /**
     * Sets wishlist_member
     * @param \ultracart\v2\models\ItemWishlistMember $wishlist_member
     * @return $this
     */
    public function setWishlistMember($wishlist_member)
    {
        $this->container['wishlist_member'] = $wishlist_member;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


