<?php
/**
 * ConversationPbxVoicemailMailbox
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationPbxVoicemailMailbox Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationPbxVoicemailMailbox implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationPbxVoicemailMailbox';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conversation_pbx_voicemail_mailbox_uuid' => 'string',
        'merchant_id' => 'string',
        'send_notices_to_email' => 'string',
        'user_id' => 'int',
        'voicemail_followup_play_audio_uuid' => 'string',
        'voicemail_followup_say' => 'string',
        'voicemail_followup_say_voice' => 'string',
        'voicemail_mailbox_id' => 'string',
        'voicemail_mailbox_type' => 'string',
        'voicemail_prompt_play_audio_uuid' => 'string',
        'voicemail_prompt_say' => 'string',
        'voicemail_prompt_say_voice' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conversation_pbx_voicemail_mailbox_uuid' => null,
        'merchant_id' => null,
        'send_notices_to_email' => null,
        'user_id' => 'int32',
        'voicemail_followup_play_audio_uuid' => null,
        'voicemail_followup_say' => null,
        'voicemail_followup_say_voice' => null,
        'voicemail_mailbox_id' => null,
        'voicemail_mailbox_type' => null,
        'voicemail_prompt_play_audio_uuid' => null,
        'voicemail_prompt_say' => null,
        'voicemail_prompt_say_voice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversation_pbx_voicemail_mailbox_uuid' => 'conversation_pbx_voicemail_mailbox_uuid',
        'merchant_id' => 'merchant_id',
        'send_notices_to_email' => 'send_notices_to_email',
        'user_id' => 'user_id',
        'voicemail_followup_play_audio_uuid' => 'voicemail_followup_play_audio_uuid',
        'voicemail_followup_say' => 'voicemail_followup_say',
        'voicemail_followup_say_voice' => 'voicemail_followup_say_voice',
        'voicemail_mailbox_id' => 'voicemail_mailbox_id',
        'voicemail_mailbox_type' => 'voicemail_mailbox_type',
        'voicemail_prompt_play_audio_uuid' => 'voicemail_prompt_play_audio_uuid',
        'voicemail_prompt_say' => 'voicemail_prompt_say',
        'voicemail_prompt_say_voice' => 'voicemail_prompt_say_voice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversation_pbx_voicemail_mailbox_uuid' => 'setConversationPbxVoicemailMailboxUuid',
        'merchant_id' => 'setMerchantId',
        'send_notices_to_email' => 'setSendNoticesToEmail',
        'user_id' => 'setUserId',
        'voicemail_followup_play_audio_uuid' => 'setVoicemailFollowupPlayAudioUuid',
        'voicemail_followup_say' => 'setVoicemailFollowupSay',
        'voicemail_followup_say_voice' => 'setVoicemailFollowupSayVoice',
        'voicemail_mailbox_id' => 'setVoicemailMailboxId',
        'voicemail_mailbox_type' => 'setVoicemailMailboxType',
        'voicemail_prompt_play_audio_uuid' => 'setVoicemailPromptPlayAudioUuid',
        'voicemail_prompt_say' => 'setVoicemailPromptSay',
        'voicemail_prompt_say_voice' => 'setVoicemailPromptSayVoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversation_pbx_voicemail_mailbox_uuid' => 'getConversationPbxVoicemailMailboxUuid',
        'merchant_id' => 'getMerchantId',
        'send_notices_to_email' => 'getSendNoticesToEmail',
        'user_id' => 'getUserId',
        'voicemail_followup_play_audio_uuid' => 'getVoicemailFollowupPlayAudioUuid',
        'voicemail_followup_say' => 'getVoicemailFollowupSay',
        'voicemail_followup_say_voice' => 'getVoicemailFollowupSayVoice',
        'voicemail_mailbox_id' => 'getVoicemailMailboxId',
        'voicemail_mailbox_type' => 'getVoicemailMailboxType',
        'voicemail_prompt_play_audio_uuid' => 'getVoicemailPromptPlayAudioUuid',
        'voicemail_prompt_say' => 'getVoicemailPromptSay',
        'voicemail_prompt_say_voice' => 'getVoicemailPromptSayVoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VOICEMAIL_MAILBOX_TYPE_AGENT = 'agent';
    const VOICEMAIL_MAILBOX_TYPE_SHARED = 'shared';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoicemailMailboxTypeAllowableValues()
    {
        return [
            self::VOICEMAIL_MAILBOX_TYPE_AGENT,
            self::VOICEMAIL_MAILBOX_TYPE_SHARED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conversation_pbx_voicemail_mailbox_uuid'] = isset($data['conversation_pbx_voicemail_mailbox_uuid']) ? $data['conversation_pbx_voicemail_mailbox_uuid'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['send_notices_to_email'] = isset($data['send_notices_to_email']) ? $data['send_notices_to_email'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['voicemail_followup_play_audio_uuid'] = isset($data['voicemail_followup_play_audio_uuid']) ? $data['voicemail_followup_play_audio_uuid'] : null;
        $this->container['voicemail_followup_say'] = isset($data['voicemail_followup_say']) ? $data['voicemail_followup_say'] : null;
        $this->container['voicemail_followup_say_voice'] = isset($data['voicemail_followup_say_voice']) ? $data['voicemail_followup_say_voice'] : null;
        $this->container['voicemail_mailbox_id'] = isset($data['voicemail_mailbox_id']) ? $data['voicemail_mailbox_id'] : null;
        $this->container['voicemail_mailbox_type'] = isset($data['voicemail_mailbox_type']) ? $data['voicemail_mailbox_type'] : null;
        $this->container['voicemail_prompt_play_audio_uuid'] = isset($data['voicemail_prompt_play_audio_uuid']) ? $data['voicemail_prompt_play_audio_uuid'] : null;
        $this->container['voicemail_prompt_say'] = isset($data['voicemail_prompt_say']) ? $data['voicemail_prompt_say'] : null;
        $this->container['voicemail_prompt_say_voice'] = isset($data['voicemail_prompt_say_voice']) ? $data['voicemail_prompt_say_voice'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['conversation_pbx_voicemail_mailbox_uuid']) && (mb_strlen($this->container['conversation_pbx_voicemail_mailbox_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'conversation_pbx_voicemail_mailbox_uuid', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['merchant_id']) && (mb_strlen($this->container['merchant_id']) > 5)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['send_notices_to_email']) && (mb_strlen($this->container['send_notices_to_email']) > 250)) {
            $invalidProperties[] = "invalid value for 'send_notices_to_email', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['voicemail_followup_play_audio_uuid']) && (mb_strlen($this->container['voicemail_followup_play_audio_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'voicemail_followup_play_audio_uuid', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['voicemail_followup_say_voice']) && (mb_strlen($this->container['voicemail_followup_say_voice']) > 50)) {
            $invalidProperties[] = "invalid value for 'voicemail_followup_say_voice', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['voicemail_mailbox_id']) && (mb_strlen($this->container['voicemail_mailbox_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'voicemail_mailbox_id', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getVoicemailMailboxTypeAllowableValues();
        if (!is_null($this->container['voicemail_mailbox_type']) && !in_array($this->container['voicemail_mailbox_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voicemail_mailbox_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['voicemail_mailbox_type']) && (mb_strlen($this->container['voicemail_mailbox_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'voicemail_mailbox_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['voicemail_prompt_play_audio_uuid']) && (mb_strlen($this->container['voicemail_prompt_play_audio_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'voicemail_prompt_play_audio_uuid', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['voicemail_prompt_say_voice']) && (mb_strlen($this->container['voicemail_prompt_say_voice']) > 50)) {
            $invalidProperties[] = "invalid value for 'voicemail_prompt_say_voice', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversation_pbx_voicemail_mailbox_uuid
     *
     * @return string
     */
    public function getConversationPbxVoicemailMailboxUuid()
    {
        return $this->container['conversation_pbx_voicemail_mailbox_uuid'];
    }

    /**
     * Sets conversation_pbx_voicemail_mailbox_uuid
     *
     * @param string $conversation_pbx_voicemail_mailbox_uuid Conversation Pbx Voicemail Mailbox UUID
     *
     * @return $this
     */
    public function setConversationPbxVoicemailMailboxUuid($conversation_pbx_voicemail_mailbox_uuid)
    {
        if (!is_null($conversation_pbx_voicemail_mailbox_uuid) && (mb_strlen($conversation_pbx_voicemail_mailbox_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $conversation_pbx_voicemail_mailbox_uuid when calling ConversationPbxVoicemailMailbox., must be smaller than or equal to 50.');
        }

        $this->container['conversation_pbx_voicemail_mailbox_uuid'] = $conversation_pbx_voicemail_mailbox_uuid;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id Merchant Id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        if (!is_null($merchant_id) && (mb_strlen($merchant_id) > 5)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling ConversationPbxVoicemailMailbox., must be smaller than or equal to 5.');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets send_notices_to_email
     *
     * @return string
     */
    public function getSendNoticesToEmail()
    {
        return $this->container['send_notices_to_email'];
    }

    /**
     * Sets send_notices_to_email
     *
     * @param string $send_notices_to_email Send notices to email
     *
     * @return $this
     */
    public function setSendNoticesToEmail($send_notices_to_email)
    {
        if (!is_null($send_notices_to_email) && (mb_strlen($send_notices_to_email) > 250)) {
            throw new \InvalidArgumentException('invalid length for $send_notices_to_email when calling ConversationPbxVoicemailMailbox., must be smaller than or equal to 250.');
        }

        $this->container['send_notices_to_email'] = $send_notices_to_email;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id User Id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets voicemail_followup_play_audio_uuid
     *
     * @return string
     */
    public function getVoicemailFollowupPlayAudioUuid()
    {
        return $this->container['voicemail_followup_play_audio_uuid'];
    }

    /**
     * Sets voicemail_followup_play_audio_uuid
     *
     * @param string $voicemail_followup_play_audio_uuid Voicemail follow play audio UUID
     *
     * @return $this
     */
    public function setVoicemailFollowupPlayAudioUuid($voicemail_followup_play_audio_uuid)
    {
        if (!is_null($voicemail_followup_play_audio_uuid) && (mb_strlen($voicemail_followup_play_audio_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $voicemail_followup_play_audio_uuid when calling ConversationPbxVoicemailMailbox., must be smaller than or equal to 50.');
        }

        $this->container['voicemail_followup_play_audio_uuid'] = $voicemail_followup_play_audio_uuid;

        return $this;
    }

    /**
     * Gets voicemail_followup_say
     *
     * @return string
     */
    public function getVoicemailFollowupSay()
    {
        return $this->container['voicemail_followup_say'];
    }

    /**
     * Sets voicemail_followup_say
     *
     * @param string $voicemail_followup_say Voicemail followup say
     *
     * @return $this
     */
    public function setVoicemailFollowupSay($voicemail_followup_say)
    {
        $this->container['voicemail_followup_say'] = $voicemail_followup_say;

        return $this;
    }

    /**
     * Gets voicemail_followup_say_voice
     *
     * @return string
     */
    public function getVoicemailFollowupSayVoice()
    {
        return $this->container['voicemail_followup_say_voice'];
    }

    /**
     * Sets voicemail_followup_say_voice
     *
     * @param string $voicemail_followup_say_voice Voicemail followup say voice
     *
     * @return $this
     */
    public function setVoicemailFollowupSayVoice($voicemail_followup_say_voice)
    {
        if (!is_null($voicemail_followup_say_voice) && (mb_strlen($voicemail_followup_say_voice) > 50)) {
            throw new \InvalidArgumentException('invalid length for $voicemail_followup_say_voice when calling ConversationPbxVoicemailMailbox., must be smaller than or equal to 50.');
        }

        $this->container['voicemail_followup_say_voice'] = $voicemail_followup_say_voice;

        return $this;
    }

    /**
     * Gets voicemail_mailbox_id
     *
     * @return string
     */
    public function getVoicemailMailboxId()
    {
        return $this->container['voicemail_mailbox_id'];
    }

    /**
     * Sets voicemail_mailbox_id
     *
     * @param string $voicemail_mailbox_id Voicemail mailbox id
     *
     * @return $this
     */
    public function setVoicemailMailboxId($voicemail_mailbox_id)
    {
        if (!is_null($voicemail_mailbox_id) && (mb_strlen($voicemail_mailbox_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $voicemail_mailbox_id when calling ConversationPbxVoicemailMailbox., must be smaller than or equal to 50.');
        }

        $this->container['voicemail_mailbox_id'] = $voicemail_mailbox_id;

        return $this;
    }

    /**
     * Gets voicemail_mailbox_type
     *
     * @return string
     */
    public function getVoicemailMailboxType()
    {
        return $this->container['voicemail_mailbox_type'];
    }

    /**
     * Sets voicemail_mailbox_type
     *
     * @param string $voicemail_mailbox_type Voicemail mailbox type
     *
     * @return $this
     */
    public function setVoicemailMailboxType($voicemail_mailbox_type)
    {
        $allowedValues = $this->getVoicemailMailboxTypeAllowableValues();
        if (!is_null($voicemail_mailbox_type) && !in_array($voicemail_mailbox_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voicemail_mailbox_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($voicemail_mailbox_type) && (mb_strlen($voicemail_mailbox_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $voicemail_mailbox_type when calling ConversationPbxVoicemailMailbox., must be smaller than or equal to 50.');
        }

        $this->container['voicemail_mailbox_type'] = $voicemail_mailbox_type;

        return $this;
    }

    /**
     * Gets voicemail_prompt_play_audio_uuid
     *
     * @return string
     */
    public function getVoicemailPromptPlayAudioUuid()
    {
        return $this->container['voicemail_prompt_play_audio_uuid'];
    }

    /**
     * Sets voicemail_prompt_play_audio_uuid
     *
     * @param string $voicemail_prompt_play_audio_uuid Voicemail prompt play audio UUID
     *
     * @return $this
     */
    public function setVoicemailPromptPlayAudioUuid($voicemail_prompt_play_audio_uuid)
    {
        if (!is_null($voicemail_prompt_play_audio_uuid) && (mb_strlen($voicemail_prompt_play_audio_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $voicemail_prompt_play_audio_uuid when calling ConversationPbxVoicemailMailbox., must be smaller than or equal to 50.');
        }

        $this->container['voicemail_prompt_play_audio_uuid'] = $voicemail_prompt_play_audio_uuid;

        return $this;
    }

    /**
     * Gets voicemail_prompt_say
     *
     * @return string
     */
    public function getVoicemailPromptSay()
    {
        return $this->container['voicemail_prompt_say'];
    }

    /**
     * Sets voicemail_prompt_say
     *
     * @param string $voicemail_prompt_say Voicemail prompt say
     *
     * @return $this
     */
    public function setVoicemailPromptSay($voicemail_prompt_say)
    {
        $this->container['voicemail_prompt_say'] = $voicemail_prompt_say;

        return $this;
    }

    /**
     * Gets voicemail_prompt_say_voice
     *
     * @return string
     */
    public function getVoicemailPromptSayVoice()
    {
        return $this->container['voicemail_prompt_say_voice'];
    }

    /**
     * Sets voicemail_prompt_say_voice
     *
     * @param string $voicemail_prompt_say_voice Voicemail prompt say voice
     *
     * @return $this
     */
    public function setVoicemailPromptSayVoice($voicemail_prompt_say_voice)
    {
        if (!is_null($voicemail_prompt_say_voice) && (mb_strlen($voicemail_prompt_say_voice) > 50)) {
            throw new \InvalidArgumentException('invalid length for $voicemail_prompt_say_voice when calling ConversationPbxVoicemailMailbox., must be smaller than or equal to 50.');
        }

        $this->container['voicemail_prompt_say_voice'] = $voicemail_prompt_say_voice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


