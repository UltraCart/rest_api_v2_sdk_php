<?php
/**
 * CustomerStoreCredit
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomerStoreCredit Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerStoreCredit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerStoreCredit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'available' => 'float',
        'expiring' => 'float',
        'future_ledgers' => '\ultracart\v2\models\CustomerStoreCreditLedgerEntry[]',
        'past_ledgers' => '\ultracart\v2\models\CustomerStoreCreditLedgerEntry[]',
        'total' => 'float',
        'vesting' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'available' => null,
        'expiring' => null,
        'future_ledgers' => null,
        'past_ledgers' => null,
        'total' => null,
        'vesting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'available' => 'available',
        'expiring' => 'expiring',
        'future_ledgers' => 'futureLedgers',
        'past_ledgers' => 'pastLedgers',
        'total' => 'total',
        'vesting' => 'vesting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'available' => 'setAvailable',
        'expiring' => 'setExpiring',
        'future_ledgers' => 'setFutureLedgers',
        'past_ledgers' => 'setPastLedgers',
        'total' => 'setTotal',
        'vesting' => 'setVesting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'available' => 'getAvailable',
        'expiring' => 'getExpiring',
        'future_ledgers' => 'getFutureLedgers',
        'past_ledgers' => 'getPastLedgers',
        'total' => 'getTotal',
        'vesting' => 'getVesting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['expiring'] = isset($data['expiring']) ? $data['expiring'] : null;
        $this->container['future_ledgers'] = isset($data['future_ledgers']) ? $data['future_ledgers'] : null;
        $this->container['past_ledgers'] = isset($data['past_ledgers']) ? $data['past_ledgers'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['vesting'] = isset($data['vesting']) ? $data['vesting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets available
     *
     * @return float
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param float $available available
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets expiring
     *
     * @return float
     */
    public function getExpiring()
    {
        return $this->container['expiring'];
    }

    /**
     * Sets expiring
     *
     * @param float $expiring expiring
     *
     * @return $this
     */
    public function setExpiring($expiring)
    {
        $this->container['expiring'] = $expiring;

        return $this;
    }

    /**
     * Gets future_ledgers
     *
     * @return \ultracart\v2\models\CustomerStoreCreditLedgerEntry[]
     */
    public function getFutureLedgers()
    {
        return $this->container['future_ledgers'];
    }

    /**
     * Sets future_ledgers
     *
     * @param \ultracart\v2\models\CustomerStoreCreditLedgerEntry[] $future_ledgers future_ledgers
     *
     * @return $this
     */
    public function setFutureLedgers($future_ledgers)
    {
        $this->container['future_ledgers'] = $future_ledgers;

        return $this;
    }

    /**
     * Gets past_ledgers
     *
     * @return \ultracart\v2\models\CustomerStoreCreditLedgerEntry[]
     */
    public function getPastLedgers()
    {
        return $this->container['past_ledgers'];
    }

    /**
     * Sets past_ledgers
     *
     * @param \ultracart\v2\models\CustomerStoreCreditLedgerEntry[] $past_ledgers past_ledgers
     *
     * @return $this
     */
    public function setPastLedgers($past_ledgers)
    {
        $this->container['past_ledgers'] = $past_ledgers;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets vesting
     *
     * @return float
     */
    public function getVesting()
    {
        return $this->container['vesting'];
    }

    /**
     * Sets vesting
     *
     * @param float $vesting vesting
     *
     * @return $this
     */
    public function setVesting($vesting)
    {
        $this->container['vesting'] = $vesting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


