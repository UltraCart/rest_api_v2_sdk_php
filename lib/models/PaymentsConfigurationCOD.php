<?php
/**
 * PaymentsConfigurationCOD
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsConfigurationCOD Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsConfigurationCOD implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsConfigurationCOD';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accept_cod' => 'bool',
        'cod_approved_customers_only' => 'bool',
        'cod_surcharge_accounting_code' => 'string',
        'cod_surcharge_fee' => 'string',
        'cod_surcharge_perc' => 'string',
        'restrictions' => '\ultracart\v2\models\PaymentsConfigurationRestrictions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accept_cod' => null,
        'cod_approved_customers_only' => null,
        'cod_surcharge_accounting_code' => null,
        'cod_surcharge_fee' => null,
        'cod_surcharge_perc' => null,
        'restrictions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accept_cod' => 'acceptCod',
        'cod_approved_customers_only' => 'codApprovedCustomersOnly',
        'cod_surcharge_accounting_code' => 'codSurchargeAccountingCode',
        'cod_surcharge_fee' => 'codSurchargeFee',
        'cod_surcharge_perc' => 'codSurchargePerc',
        'restrictions' => 'restrictions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accept_cod' => 'setAcceptCod',
        'cod_approved_customers_only' => 'setCodApprovedCustomersOnly',
        'cod_surcharge_accounting_code' => 'setCodSurchargeAccountingCode',
        'cod_surcharge_fee' => 'setCodSurchargeFee',
        'cod_surcharge_perc' => 'setCodSurchargePerc',
        'restrictions' => 'setRestrictions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accept_cod' => 'getAcceptCod',
        'cod_approved_customers_only' => 'getCodApprovedCustomersOnly',
        'cod_surcharge_accounting_code' => 'getCodSurchargeAccountingCode',
        'cod_surcharge_fee' => 'getCodSurchargeFee',
        'cod_surcharge_perc' => 'getCodSurchargePerc',
        'restrictions' => 'getRestrictions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accept_cod'] = isset($data['accept_cod']) ? $data['accept_cod'] : null;
        $this->container['cod_approved_customers_only'] = isset($data['cod_approved_customers_only']) ? $data['cod_approved_customers_only'] : null;
        $this->container['cod_surcharge_accounting_code'] = isset($data['cod_surcharge_accounting_code']) ? $data['cod_surcharge_accounting_code'] : null;
        $this->container['cod_surcharge_fee'] = isset($data['cod_surcharge_fee']) ? $data['cod_surcharge_fee'] : null;
        $this->container['cod_surcharge_perc'] = isset($data['cod_surcharge_perc']) ? $data['cod_surcharge_perc'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accept_cod
     *
     * @return bool
     */
    public function getAcceptCod()
    {
        return $this->container['accept_cod'];
    }

    /**
     * Sets accept_cod
     *
     * @param bool $accept_cod accept_cod
     *
     * @return $this
     */
    public function setAcceptCod($accept_cod)
    {
        $this->container['accept_cod'] = $accept_cod;

        return $this;
    }

    /**
     * Gets cod_approved_customers_only
     *
     * @return bool
     */
    public function getCodApprovedCustomersOnly()
    {
        return $this->container['cod_approved_customers_only'];
    }

    /**
     * Sets cod_approved_customers_only
     *
     * @param bool $cod_approved_customers_only cod_approved_customers_only
     *
     * @return $this
     */
    public function setCodApprovedCustomersOnly($cod_approved_customers_only)
    {
        $this->container['cod_approved_customers_only'] = $cod_approved_customers_only;

        return $this;
    }

    /**
     * Gets cod_surcharge_accounting_code
     *
     * @return string
     */
    public function getCodSurchargeAccountingCode()
    {
        return $this->container['cod_surcharge_accounting_code'];
    }

    /**
     * Sets cod_surcharge_accounting_code
     *
     * @param string $cod_surcharge_accounting_code cod_surcharge_accounting_code
     *
     * @return $this
     */
    public function setCodSurchargeAccountingCode($cod_surcharge_accounting_code)
    {
        $this->container['cod_surcharge_accounting_code'] = $cod_surcharge_accounting_code;

        return $this;
    }

    /**
     * Gets cod_surcharge_fee
     *
     * @return string
     */
    public function getCodSurchargeFee()
    {
        return $this->container['cod_surcharge_fee'];
    }

    /**
     * Sets cod_surcharge_fee
     *
     * @param string $cod_surcharge_fee cod_surcharge_fee
     *
     * @return $this
     */
    public function setCodSurchargeFee($cod_surcharge_fee)
    {
        $this->container['cod_surcharge_fee'] = $cod_surcharge_fee;

        return $this;
    }

    /**
     * Gets cod_surcharge_perc
     *
     * @return string
     */
    public function getCodSurchargePerc()
    {
        return $this->container['cod_surcharge_perc'];
    }

    /**
     * Sets cod_surcharge_perc
     *
     * @param string $cod_surcharge_perc cod_surcharge_perc
     *
     * @return $this
     */
    public function setCodSurchargePerc($cod_surcharge_perc)
    {
        $this->container['cod_surcharge_perc'] = $cod_surcharge_perc;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \ultracart\v2\models\PaymentsConfigurationRestrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \ultracart\v2\models\PaymentsConfigurationRestrictions $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


