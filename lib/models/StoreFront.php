<?php
/**
 * StoreFront
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * StoreFront Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StoreFront implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StoreFront';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'host_alias1' => 'string',
        'host_alias2' => 'string',
        'host_alias3' => 'string',
        'host_alias4' => 'string',
        'host_alias5' => 'string',
        'host_name' => 'string',
        'locked' => 'bool',
        'merchant_id' => 'string',
        'redirect_aliases' => 'bool',
        'storefront_oid' => 'int',
        'unlock_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'host_alias1' => null,
        'host_alias2' => null,
        'host_alias3' => null,
        'host_alias4' => null,
        'host_alias5' => null,
        'host_name' => null,
        'locked' => null,
        'merchant_id' => null,
        'redirect_aliases' => null,
        'storefront_oid' => 'int32',
        'unlock_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host_alias1' => 'host_alias1',
        'host_alias2' => 'host_alias2',
        'host_alias3' => 'host_alias3',
        'host_alias4' => 'host_alias4',
        'host_alias5' => 'host_alias5',
        'host_name' => 'host_name',
        'locked' => 'locked',
        'merchant_id' => 'merchant_id',
        'redirect_aliases' => 'redirect_aliases',
        'storefront_oid' => 'storefront_oid',
        'unlock_password' => 'unlock_password'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host_alias1' => 'setHostAlias1',
        'host_alias2' => 'setHostAlias2',
        'host_alias3' => 'setHostAlias3',
        'host_alias4' => 'setHostAlias4',
        'host_alias5' => 'setHostAlias5',
        'host_name' => 'setHostName',
        'locked' => 'setLocked',
        'merchant_id' => 'setMerchantId',
        'redirect_aliases' => 'setRedirectAliases',
        'storefront_oid' => 'setStorefrontOid',
        'unlock_password' => 'setUnlockPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host_alias1' => 'getHostAlias1',
        'host_alias2' => 'getHostAlias2',
        'host_alias3' => 'getHostAlias3',
        'host_alias4' => 'getHostAlias4',
        'host_alias5' => 'getHostAlias5',
        'host_name' => 'getHostName',
        'locked' => 'getLocked',
        'merchant_id' => 'getMerchantId',
        'redirect_aliases' => 'getRedirectAliases',
        'storefront_oid' => 'getStorefrontOid',
        'unlock_password' => 'getUnlockPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['host_alias1'] = $data['host_alias1'] ?? null;
        $this->container['host_alias2'] = $data['host_alias2'] ?? null;
        $this->container['host_alias3'] = $data['host_alias3'] ?? null;
        $this->container['host_alias4'] = $data['host_alias4'] ?? null;
        $this->container['host_alias5'] = $data['host_alias5'] ?? null;
        $this->container['host_name'] = $data['host_name'] ?? null;
        $this->container['locked'] = $data['locked'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['redirect_aliases'] = $data['redirect_aliases'] ?? null;
        $this->container['storefront_oid'] = $data['storefront_oid'] ?? null;
        $this->container['unlock_password'] = $data['unlock_password'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host_alias1
     *
     * @return string|null
     */
    public function getHostAlias1()
    {
        return $this->container['host_alias1'];
    }

    /**
     * Sets host_alias1
     *
     * @param string|null $host_alias1 host_alias1
     *
     * @return self
     */
    public function setHostAlias1($host_alias1)
    {
        $this->container['host_alias1'] = $host_alias1;

        return $this;
    }

    /**
     * Gets host_alias2
     *
     * @return string|null
     */
    public function getHostAlias2()
    {
        return $this->container['host_alias2'];
    }

    /**
     * Sets host_alias2
     *
     * @param string|null $host_alias2 host_alias2
     *
     * @return self
     */
    public function setHostAlias2($host_alias2)
    {
        $this->container['host_alias2'] = $host_alias2;

        return $this;
    }

    /**
     * Gets host_alias3
     *
     * @return string|null
     */
    public function getHostAlias3()
    {
        return $this->container['host_alias3'];
    }

    /**
     * Sets host_alias3
     *
     * @param string|null $host_alias3 host_alias3
     *
     * @return self
     */
    public function setHostAlias3($host_alias3)
    {
        $this->container['host_alias3'] = $host_alias3;

        return $this;
    }

    /**
     * Gets host_alias4
     *
     * @return string|null
     */
    public function getHostAlias4()
    {
        return $this->container['host_alias4'];
    }

    /**
     * Sets host_alias4
     *
     * @param string|null $host_alias4 host_alias4
     *
     * @return self
     */
    public function setHostAlias4($host_alias4)
    {
        $this->container['host_alias4'] = $host_alias4;

        return $this;
    }

    /**
     * Gets host_alias5
     *
     * @return string|null
     */
    public function getHostAlias5()
    {
        return $this->container['host_alias5'];
    }

    /**
     * Sets host_alias5
     *
     * @param string|null $host_alias5 host_alias5
     *
     * @return self
     */
    public function setHostAlias5($host_alias5)
    {
        $this->container['host_alias5'] = $host_alias5;

        return $this;
    }

    /**
     * Gets host_name
     *
     * @return string|null
     */
    public function getHostName()
    {
        return $this->container['host_name'];
    }

    /**
     * Sets host_name
     *
     * @param string|null $host_name host_name
     *
     * @return self
     */
    public function setHostName($host_name)
    {
        $this->container['host_name'] = $host_name;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool|null $locked locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets redirect_aliases
     *
     * @return bool|null
     */
    public function getRedirectAliases()
    {
        return $this->container['redirect_aliases'];
    }

    /**
     * Sets redirect_aliases
     *
     * @param bool|null $redirect_aliases redirect_aliases
     *
     * @return self
     */
    public function setRedirectAliases($redirect_aliases)
    {
        $this->container['redirect_aliases'] = $redirect_aliases;

        return $this;
    }

    /**
     * Gets storefront_oid
     *
     * @return int|null
     */
    public function getStorefrontOid()
    {
        return $this->container['storefront_oid'];
    }

    /**
     * Sets storefront_oid
     *
     * @param int|null $storefront_oid storefront_oid
     *
     * @return self
     */
    public function setStorefrontOid($storefront_oid)
    {
        $this->container['storefront_oid'] = $storefront_oid;

        return $this;
    }

    /**
     * Gets unlock_password
     *
     * @return string|null
     */
    public function getUnlockPassword()
    {
        return $this->container['unlock_password'];
    }

    /**
     * Sets unlock_password
     *
     * @param string|null $unlock_password unlock_password
     *
     * @return self
     */
    public function setUnlockPassword($unlock_password)
    {
        $this->container['unlock_password'] = $unlock_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


