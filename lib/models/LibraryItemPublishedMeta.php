<?php
/**
 * LibraryItemPublishedMeta
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * LibraryItemPublishedMeta Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LibraryItemPublishedMeta implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LibraryItemPublishedMeta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'count_of_versions' => 'int',
        'library_item_published_oid' => 'int',
        'library_item_review_oid' => 'int',
        'rejected' => 'bool',
        'rejected_reason' => 'string',
        'release_version' => 'int',
        'review_version' => 'int',
        'under_review' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'count_of_versions' => 'int32',
        'library_item_published_oid' => 'int32',
        'library_item_review_oid' => 'int32',
        'rejected' => null,
        'rejected_reason' => null,
        'release_version' => 'int32',
        'review_version' => 'int32',
        'under_review' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count_of_versions' => 'count_of_versions',
        'library_item_published_oid' => 'library_item_published_oid',
        'library_item_review_oid' => 'library_item_review_oid',
        'rejected' => 'rejected',
        'rejected_reason' => 'rejected_reason',
        'release_version' => 'release_version',
        'review_version' => 'review_version',
        'under_review' => 'under_review'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count_of_versions' => 'setCountOfVersions',
        'library_item_published_oid' => 'setLibraryItemPublishedOid',
        'library_item_review_oid' => 'setLibraryItemReviewOid',
        'rejected' => 'setRejected',
        'rejected_reason' => 'setRejectedReason',
        'release_version' => 'setReleaseVersion',
        'review_version' => 'setReviewVersion',
        'under_review' => 'setUnderReview'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count_of_versions' => 'getCountOfVersions',
        'library_item_published_oid' => 'getLibraryItemPublishedOid',
        'library_item_review_oid' => 'getLibraryItemReviewOid',
        'rejected' => 'getRejected',
        'rejected_reason' => 'getRejectedReason',
        'release_version' => 'getReleaseVersion',
        'review_version' => 'getReviewVersion',
        'under_review' => 'getUnderReview'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['count_of_versions'] = isset($data['count_of_versions']) ? $data['count_of_versions'] : null;
        $this->container['library_item_published_oid'] = isset($data['library_item_published_oid']) ? $data['library_item_published_oid'] : null;
        $this->container['library_item_review_oid'] = isset($data['library_item_review_oid']) ? $data['library_item_review_oid'] : null;
        $this->container['rejected'] = isset($data['rejected']) ? $data['rejected'] : null;
        $this->container['rejected_reason'] = isset($data['rejected_reason']) ? $data['rejected_reason'] : null;
        $this->container['release_version'] = isset($data['release_version']) ? $data['release_version'] : null;
        $this->container['review_version'] = isset($data['review_version']) ? $data['review_version'] : null;
        $this->container['under_review'] = isset($data['under_review']) ? $data['under_review'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count_of_versions
     *
     * @return int
     */
    public function getCountOfVersions()
    {
        return $this->container['count_of_versions'];
    }

    /**
     * Sets count_of_versions
     *
     * @param int $count_of_versions The number of published versions a source item has, or zero if this item is not a source or is private
     *
     * @return $this
     */
    public function setCountOfVersions($count_of_versions)
    {
        $this->container['count_of_versions'] = $count_of_versions;

        return $this;
    }

    /**
     * Gets library_item_published_oid
     *
     * @return int
     */
    public function getLibraryItemPublishedOid()
    {
        return $this->container['library_item_published_oid'];
    }

    /**
     * Sets library_item_published_oid
     *
     * @param int $library_item_published_oid The oid pointing to the most recent published version, or zero if this is not a published source item.
     *
     * @return $this
     */
    public function setLibraryItemPublishedOid($library_item_published_oid)
    {
        $this->container['library_item_published_oid'] = $library_item_published_oid;

        return $this;
    }

    /**
     * Gets library_item_review_oid
     *
     * @return int
     */
    public function getLibraryItemReviewOid()
    {
        return $this->container['library_item_review_oid'];
    }

    /**
     * Sets library_item_review_oid
     *
     * @param int $library_item_review_oid The oid pointing to the review data if this is a source library item and currently under review
     *
     * @return $this
     */
    public function setLibraryItemReviewOid($library_item_review_oid)
    {
        $this->container['library_item_review_oid'] = $library_item_review_oid;

        return $this;
    }

    /**
     * Gets rejected
     *
     * @return bool
     */
    public function getRejected()
    {
        return $this->container['rejected'];
    }

    /**
     * Sets rejected
     *
     * @param bool $rejected True if this is a source item and is under review and was rejected.
     *
     * @return $this
     */
    public function setRejected($rejected)
    {
        $this->container['rejected'] = $rejected;

        return $this;
    }

    /**
     * Gets rejected_reason
     *
     * @return string
     */
    public function getRejectedReason()
    {
        return $this->container['rejected_reason'];
    }

    /**
     * Sets rejected_reason
     *
     * @param string $rejected_reason The reason for rejection if this item is a source item, is under review, and was rejected.  For all other cases, this value will be null or missing.
     *
     * @return $this
     */
    public function setRejectedReason($rejected_reason)
    {
        $this->container['rejected_reason'] = $rejected_reason;

        return $this;
    }

    /**
     * Gets release_version
     *
     * @return int
     */
    public function getReleaseVersion()
    {
        return $this->container['release_version'];
    }

    /**
     * Sets release_version
     *
     * @param int $release_version If this library item is a source item and it is published, this is the most recent release version number
     *
     * @return $this
     */
    public function setReleaseVersion($release_version)
    {
        $this->container['release_version'] = $release_version;

        return $this;
    }

    /**
     * Gets review_version
     *
     * @return int
     */
    public function getReviewVersion()
    {
        return $this->container['review_version'];
    }

    /**
     * Sets review_version
     *
     * @param int $review_version If this library item is a source item and has a published item currently under review, this is that version number
     *
     * @return $this
     */
    public function setReviewVersion($review_version)
    {
        $this->container['review_version'] = $review_version;

        return $this;
    }

    /**
     * Gets under_review
     *
     * @return bool
     */
    public function getUnderReview()
    {
        return $this->container['under_review'];
    }

    /**
     * Sets under_review
     *
     * @param bool $under_review True if this library item is a source item and is currently under review
     *
     * @return $this
     */
    public function setUnderReview($under_review)
    {
        $this->container['under_review'] = $under_review;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


