<?php
/**
 * OrderBilling
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderBilling Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderBilling implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderBilling';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address1' => 'string',
        'address2' => 'string',
        'cc_emails' => 'string[]',
        'cell_phone' => 'string',
        'cell_phone_e164' => 'string',
        'city' => 'string',
        'company' => 'string',
        'country_code' => 'string',
        'day_phone' => 'string',
        'day_phone_e164' => 'string',
        'email' => 'string',
        'evening_phone' => 'string',
        'evening_phone_e164' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'postal_code' => 'string',
        'state_region' => 'string',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address1' => null,
        'address2' => null,
        'cc_emails' => null,
        'cell_phone' => null,
        'cell_phone_e164' => null,
        'city' => null,
        'company' => null,
        'country_code' => null,
        'day_phone' => null,
        'day_phone_e164' => null,
        'email' => null,
        'evening_phone' => null,
        'evening_phone_e164' => null,
        'first_name' => null,
        'last_name' => null,
        'postal_code' => null,
        'state_region' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address1' => 'address1',
        'address2' => 'address2',
        'cc_emails' => 'cc_emails',
        'cell_phone' => 'cell_phone',
        'cell_phone_e164' => 'cell_phone_e164',
        'city' => 'city',
        'company' => 'company',
        'country_code' => 'country_code',
        'day_phone' => 'day_phone',
        'day_phone_e164' => 'day_phone_e164',
        'email' => 'email',
        'evening_phone' => 'evening_phone',
        'evening_phone_e164' => 'evening_phone_e164',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'postal_code' => 'postal_code',
        'state_region' => 'state_region',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'cc_emails' => 'setCcEmails',
        'cell_phone' => 'setCellPhone',
        'cell_phone_e164' => 'setCellPhoneE164',
        'city' => 'setCity',
        'company' => 'setCompany',
        'country_code' => 'setCountryCode',
        'day_phone' => 'setDayPhone',
        'day_phone_e164' => 'setDayPhoneE164',
        'email' => 'setEmail',
        'evening_phone' => 'setEveningPhone',
        'evening_phone_e164' => 'setEveningPhoneE164',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'postal_code' => 'setPostalCode',
        'state_region' => 'setStateRegion',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'cc_emails' => 'getCcEmails',
        'cell_phone' => 'getCellPhone',
        'cell_phone_e164' => 'getCellPhoneE164',
        'city' => 'getCity',
        'company' => 'getCompany',
        'country_code' => 'getCountryCode',
        'day_phone' => 'getDayPhone',
        'day_phone_e164' => 'getDayPhoneE164',
        'email' => 'getEmail',
        'evening_phone' => 'getEveningPhone',
        'evening_phone_e164' => 'getEveningPhoneE164',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'postal_code' => 'getPostalCode',
        'state_region' => 'getStateRegion',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address1'] = $data['address1'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['cc_emails'] = $data['cc_emails'] ?? null;
        $this->container['cell_phone'] = $data['cell_phone'] ?? null;
        $this->container['cell_phone_e164'] = $data['cell_phone_e164'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['day_phone'] = $data['day_phone'] ?? null;
        $this->container['day_phone_e164'] = $data['day_phone_e164'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['evening_phone'] = $data['evening_phone'] ?? null;
        $this->container['evening_phone_e164'] = $data['evening_phone_e164'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['state_region'] = $data['state_region'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['cell_phone']) && (mb_strlen($this->container['cell_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'cell_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['cell_phone_e164']) && (mb_strlen($this->container['cell_phone_e164']) > 25)) {
            $invalidProperties[] = "invalid value for 'cell_phone_e164', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 32)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 50)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['day_phone']) && (mb_strlen($this->container['day_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'day_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['day_phone_e164']) && (mb_strlen($this->container['day_phone_e164']) > 25)) {
            $invalidProperties[] = "invalid value for 'day_phone_e164', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['evening_phone']) && (mb_strlen($this->container['evening_phone']) > 25)) {
            $invalidProperties[] = "invalid value for 'evening_phone', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['evening_phone_e164']) && (mb_strlen($this->container['evening_phone_e164']) > 25)) {
            $invalidProperties[] = "invalid value for 'evening_phone_e164', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['state_region']) && (mb_strlen($this->container['state_region']) > 32)) {
            $invalidProperties[] = "invalid value for 'state_region', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 50)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 Address line 1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (!is_null($address1) && (mb_strlen($address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling OrderBilling., must be smaller than or equal to 50.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (mb_strlen($address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling OrderBilling., must be smaller than or equal to 50.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets cc_emails
     *
     * @return string[]|null
     */
    public function getCcEmails()
    {
        return $this->container['cc_emails'];
    }

    /**
     * Sets cc_emails
     *
     * @param string[]|null $cc_emails CC emails.  Multiple allowed, but total length of all emails can not exceed 100 characters.
     *
     * @return self
     */
    public function setCcEmails($cc_emails)
    {
        $this->container['cc_emails'] = $cc_emails;

        return $this;
    }

    /**
     * Gets cell_phone
     *
     * @return string|null
     */
    public function getCellPhone()
    {
        return $this->container['cell_phone'];
    }

    /**
     * Sets cell_phone
     *
     * @param string|null $cell_phone Cell phone
     *
     * @return self
     */
    public function setCellPhone($cell_phone)
    {
        if (!is_null($cell_phone) && (mb_strlen($cell_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $cell_phone when calling OrderBilling., must be smaller than or equal to 25.');
        }

        $this->container['cell_phone'] = $cell_phone;

        return $this;
    }

    /**
     * Gets cell_phone_e164
     *
     * @return string|null
     */
    public function getCellPhoneE164()
    {
        return $this->container['cell_phone_e164'];
    }

    /**
     * Sets cell_phone_e164
     *
     * @param string|null $cell_phone_e164 Cell phone (E164 format)
     *
     * @return self
     */
    public function setCellPhoneE164($cell_phone_e164)
    {
        if (!is_null($cell_phone_e164) && (mb_strlen($cell_phone_e164) > 25)) {
            throw new \InvalidArgumentException('invalid length for $cell_phone_e164 when calling OrderBilling., must be smaller than or equal to 25.');
        }

        $this->container['cell_phone_e164'] = $cell_phone_e164;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 32)) {
            throw new \InvalidArgumentException('invalid length for $city when calling OrderBilling., must be smaller than or equal to 32.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (!is_null($company) && (mb_strlen($company) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company when calling OrderBilling., must be smaller than or equal to 50.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code ISO-3166 two letter country code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling OrderBilling., must be smaller than or equal to 2.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets day_phone
     *
     * @return string|null
     */
    public function getDayPhone()
    {
        return $this->container['day_phone'];
    }

    /**
     * Sets day_phone
     *
     * @param string|null $day_phone Day time phone
     *
     * @return self
     */
    public function setDayPhone($day_phone)
    {
        if (!is_null($day_phone) && (mb_strlen($day_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $day_phone when calling OrderBilling., must be smaller than or equal to 25.');
        }

        $this->container['day_phone'] = $day_phone;

        return $this;
    }

    /**
     * Gets day_phone_e164
     *
     * @return string|null
     */
    public function getDayPhoneE164()
    {
        return $this->container['day_phone_e164'];
    }

    /**
     * Sets day_phone_e164
     *
     * @param string|null $day_phone_e164 Day time phone (E164 format)
     *
     * @return self
     */
    public function setDayPhoneE164($day_phone_e164)
    {
        if (!is_null($day_phone_e164) && (mb_strlen($day_phone_e164) > 25)) {
            throw new \InvalidArgumentException('invalid length for $day_phone_e164 when calling OrderBilling., must be smaller than or equal to 25.');
        }

        $this->container['day_phone_e164'] = $day_phone_e164;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling OrderBilling., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets evening_phone
     *
     * @return string|null
     */
    public function getEveningPhone()
    {
        return $this->container['evening_phone'];
    }

    /**
     * Sets evening_phone
     *
     * @param string|null $evening_phone Evening phone
     *
     * @return self
     */
    public function setEveningPhone($evening_phone)
    {
        if (!is_null($evening_phone) && (mb_strlen($evening_phone) > 25)) {
            throw new \InvalidArgumentException('invalid length for $evening_phone when calling OrderBilling., must be smaller than or equal to 25.');
        }

        $this->container['evening_phone'] = $evening_phone;

        return $this;
    }

    /**
     * Gets evening_phone_e164
     *
     * @return string|null
     */
    public function getEveningPhoneE164()
    {
        return $this->container['evening_phone_e164'];
    }

    /**
     * Sets evening_phone_e164
     *
     * @param string|null $evening_phone_e164 Evening phone (E164 format)
     *
     * @return self
     */
    public function setEveningPhoneE164($evening_phone_e164)
    {
        if (!is_null($evening_phone_e164) && (mb_strlen($evening_phone_e164) > 25)) {
            throw new \InvalidArgumentException('invalid length for $evening_phone_e164 when calling OrderBilling., must be smaller than or equal to 25.');
        }

        $this->container['evening_phone_e164'] = $evening_phone_e164;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling OrderBilling., must be smaller than or equal to 30.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling OrderBilling., must be smaller than or equal to 30.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling OrderBilling., must be smaller than or equal to 20.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets state_region
     *
     * @return string|null
     */
    public function getStateRegion()
    {
        return $this->container['state_region'];
    }

    /**
     * Sets state_region
     *
     * @param string|null $state_region State for United States otherwise region or province for other countries
     *
     * @return self
     */
    public function setStateRegion($state_region)
    {
        if (!is_null($state_region) && (mb_strlen($state_region) > 32)) {
            throw new \InvalidArgumentException('invalid length for $state_region when calling OrderBilling., must be smaller than or equal to 32.');
        }

        $this->container['state_region'] = $state_region;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $title when calling OrderBilling., must be smaller than or equal to 50.');
        }

        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


