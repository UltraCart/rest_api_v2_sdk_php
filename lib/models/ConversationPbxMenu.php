<?php
/**
 * ConversationPbxMenu
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationPbxMenu Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationPbxMenu implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationPbxMenu';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_direct_extensions' => 'bool',
        'conversation_pbx_menu_uuid' => 'string',
        'default_action' => 'string',
        'default_action_target' => 'string',
        'mappings' => '\ultracart\v2\models\ConversationPbxMenuMapping[]',
        'merchant_id' => 'string',
        'name' => 'string',
        'play_audio_uuid' => 'string',
        'say' => 'string',
        'timeout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_direct_extensions' => null,
        'conversation_pbx_menu_uuid' => null,
        'default_action' => null,
        'default_action_target' => null,
        'mappings' => null,
        'merchant_id' => null,
        'name' => null,
        'play_audio_uuid' => null,
        'say' => null,
        'timeout' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_direct_extensions' => 'allow_direct_extensions',
        'conversation_pbx_menu_uuid' => 'conversation_pbx_menu_uuid',
        'default_action' => 'default_action',
        'default_action_target' => 'default_action_target',
        'mappings' => 'mappings',
        'merchant_id' => 'merchant_id',
        'name' => 'name',
        'play_audio_uuid' => 'play_audio_uuid',
        'say' => 'say',
        'timeout' => 'timeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_direct_extensions' => 'setAllowDirectExtensions',
        'conversation_pbx_menu_uuid' => 'setConversationPbxMenuUuid',
        'default_action' => 'setDefaultAction',
        'default_action_target' => 'setDefaultActionTarget',
        'mappings' => 'setMappings',
        'merchant_id' => 'setMerchantId',
        'name' => 'setName',
        'play_audio_uuid' => 'setPlayAudioUuid',
        'say' => 'setSay',
        'timeout' => 'setTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_direct_extensions' => 'getAllowDirectExtensions',
        'conversation_pbx_menu_uuid' => 'getConversationPbxMenuUuid',
        'default_action' => 'getDefaultAction',
        'default_action_target' => 'getDefaultActionTarget',
        'mappings' => 'getMappings',
        'merchant_id' => 'getMerchantId',
        'name' => 'getName',
        'play_audio_uuid' => 'getPlayAudioUuid',
        'say' => 'getSay',
        'timeout' => 'getTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_direct_extensions'] = isset($data['allow_direct_extensions']) ? $data['allow_direct_extensions'] : null;
        $this->container['conversation_pbx_menu_uuid'] = isset($data['conversation_pbx_menu_uuid']) ? $data['conversation_pbx_menu_uuid'] : null;
        $this->container['default_action'] = isset($data['default_action']) ? $data['default_action'] : null;
        $this->container['default_action_target'] = isset($data['default_action_target']) ? $data['default_action_target'] : null;
        $this->container['mappings'] = isset($data['mappings']) ? $data['mappings'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['play_audio_uuid'] = isset($data['play_audio_uuid']) ? $data['play_audio_uuid'] : null;
        $this->container['say'] = isset($data['say']) ? $data['say'] : null;
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['conversation_pbx_menu_uuid']) && (mb_strlen($this->container['conversation_pbx_menu_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'conversation_pbx_menu_uuid', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['default_action']) && (mb_strlen($this->container['default_action']) > 30)) {
            $invalidProperties[] = "invalid value for 'default_action', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['default_action_target']) && (mb_strlen($this->container['default_action_target']) > 50)) {
            $invalidProperties[] = "invalid value for 'default_action_target', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['merchant_id']) && (mb_strlen($this->container['merchant_id']) > 5)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['play_audio_uuid']) && (mb_strlen($this->container['play_audio_uuid']) > 50)) {
            $invalidProperties[] = "invalid value for 'play_audio_uuid', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_direct_extensions
     *
     * @return bool
     */
    public function getAllowDirectExtensions()
    {
        return $this->container['allow_direct_extensions'];
    }

    /**
     * Sets allow_direct_extensions
     *
     * @param bool $allow_direct_extensions If true, the customer is allowed to input direct extensions within this menu
     *
     * @return $this
     */
    public function setAllowDirectExtensions($allow_direct_extensions)
    {
        $this->container['allow_direct_extensions'] = $allow_direct_extensions;

        return $this;
    }

    /**
     * Gets conversation_pbx_menu_uuid
     *
     * @return string
     */
    public function getConversationPbxMenuUuid()
    {
        return $this->container['conversation_pbx_menu_uuid'];
    }

    /**
     * Sets conversation_pbx_menu_uuid
     *
     * @param string $conversation_pbx_menu_uuid Conversation Pbx Menu UUID
     *
     * @return $this
     */
    public function setConversationPbxMenuUuid($conversation_pbx_menu_uuid)
    {
        if (!is_null($conversation_pbx_menu_uuid) && (mb_strlen($conversation_pbx_menu_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $conversation_pbx_menu_uuid when calling ConversationPbxMenu., must be smaller than or equal to 50.');
        }

        $this->container['conversation_pbx_menu_uuid'] = $conversation_pbx_menu_uuid;

        return $this;
    }

    /**
     * Gets default_action
     *
     * @return string
     */
    public function getDefaultAction()
    {
        return $this->container['default_action'];
    }

    /**
     * Sets default_action
     *
     * @param string $default_action The default action for this menu
     *
     * @return $this
     */
    public function setDefaultAction($default_action)
    {
        if (!is_null($default_action) && (mb_strlen($default_action) > 30)) {
            throw new \InvalidArgumentException('invalid length for $default_action when calling ConversationPbxMenu., must be smaller than or equal to 30.');
        }

        $this->container['default_action'] = $default_action;

        return $this;
    }

    /**
     * Gets default_action_target
     *
     * @return string
     */
    public function getDefaultActionTarget()
    {
        return $this->container['default_action_target'];
    }

    /**
     * Sets default_action_target
     *
     * @param string $default_action_target The default action target for this menu
     *
     * @return $this
     */
    public function setDefaultActionTarget($default_action_target)
    {
        if (!is_null($default_action_target) && (mb_strlen($default_action_target) > 50)) {
            throw new \InvalidArgumentException('invalid length for $default_action_target when calling ConversationPbxMenu., must be smaller than or equal to 50.');
        }

        $this->container['default_action_target'] = $default_action_target;

        return $this;
    }

    /**
     * Gets mappings
     *
     * @return \ultracart\v2\models\ConversationPbxMenuMapping[]
     */
    public function getMappings()
    {
        return $this->container['mappings'];
    }

    /**
     * Sets mappings
     *
     * @param \ultracart\v2\models\ConversationPbxMenuMapping[] $mappings Action mappings for this menu
     *
     * @return $this
     */
    public function setMappings($mappings)
    {
        $this->container['mappings'] = $mappings;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id Merchant Id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        if (!is_null($merchant_id) && (mb_strlen($merchant_id) > 5)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling ConversationPbxMenu., must be smaller than or equal to 5.');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Menu name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ConversationPbxMenu., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets play_audio_uuid
     *
     * @return string
     */
    public function getPlayAudioUuid()
    {
        return $this->container['play_audio_uuid'];
    }

    /**
     * Sets play_audio_uuid
     *
     * @param string $play_audio_uuid An optional audio clip that plays when a customer enters this menu
     *
     * @return $this
     */
    public function setPlayAudioUuid($play_audio_uuid)
    {
        if (!is_null($play_audio_uuid) && (mb_strlen($play_audio_uuid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $play_audio_uuid when calling ConversationPbxMenu., must be smaller than or equal to 50.');
        }

        $this->container['play_audio_uuid'] = $play_audio_uuid;

        return $this;
    }

    /**
     * Gets say
     *
     * @return string
     */
    public function getSay()
    {
        return $this->container['say'];
    }

    /**
     * Sets say
     *
     * @param string $say An optional saying that plays when a customer enters this menu
     *
     * @return $this
     */
    public function setSay($say)
    {
        $this->container['say'] = $say;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int $timeout The idle seconds before this menu times out
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


