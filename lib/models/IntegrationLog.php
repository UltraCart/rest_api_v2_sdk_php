<?php
/**
 * IntegrationLog
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * IntegrationLog Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IntegrationLog implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IntegrationLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action' => 'string',
        'auto_order_oids' => 'int[]',
        'direction' => 'string',
        'email' => 'string',
        'files' => '\ultracart\v2\models\IntegrationLogFile[]',
        'integration_log_oid' => 'int',
        'item_id' => 'string',
        'item_ipn_oid' => 'int',
        'log_dts' => 'string',
        'log_type' => 'string',
        'logger_id' => 'string',
        'logger_name' => 'string',
        'logs' => '\ultracart\v2\models\IntegrationLogLog[]',
        'omit_log_map' => 'bool',
        'order_ids' => 'string[]',
        'pk' => 'string',
        'sk' => 'string',
        'status' => 'string',
        'status_code' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action' => null,
        'auto_order_oids' => null,
        'direction' => null,
        'email' => null,
        'files' => null,
        'integration_log_oid' => 'int32',
        'item_id' => null,
        'item_ipn_oid' => 'int32',
        'log_dts' => 'dateTime',
        'log_type' => null,
        'logger_id' => null,
        'logger_name' => null,
        'logs' => null,
        'omit_log_map' => null,
        'order_ids' => null,
        'pk' => null,
        'sk' => null,
        'status' => null,
        'status_code' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'auto_order_oids' => 'auto_order_oids',
        'direction' => 'direction',
        'email' => 'email',
        'files' => 'files',
        'integration_log_oid' => 'integration_log_oid',
        'item_id' => 'item_id',
        'item_ipn_oid' => 'item_ipn_oid',
        'log_dts' => 'log_dts',
        'log_type' => 'log_type',
        'logger_id' => 'logger_id',
        'logger_name' => 'logger_name',
        'logs' => 'logs',
        'omit_log_map' => 'omit_log_map',
        'order_ids' => 'order_ids',
        'pk' => 'pk',
        'sk' => 'sk',
        'status' => 'status',
        'status_code' => 'status_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'auto_order_oids' => 'setAutoOrderOids',
        'direction' => 'setDirection',
        'email' => 'setEmail',
        'files' => 'setFiles',
        'integration_log_oid' => 'setIntegrationLogOid',
        'item_id' => 'setItemId',
        'item_ipn_oid' => 'setItemIpnOid',
        'log_dts' => 'setLogDts',
        'log_type' => 'setLogType',
        'logger_id' => 'setLoggerId',
        'logger_name' => 'setLoggerName',
        'logs' => 'setLogs',
        'omit_log_map' => 'setOmitLogMap',
        'order_ids' => 'setOrderIds',
        'pk' => 'setPk',
        'sk' => 'setSk',
        'status' => 'setStatus',
        'status_code' => 'setStatusCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'auto_order_oids' => 'getAutoOrderOids',
        'direction' => 'getDirection',
        'email' => 'getEmail',
        'files' => 'getFiles',
        'integration_log_oid' => 'getIntegrationLogOid',
        'item_id' => 'getItemId',
        'item_ipn_oid' => 'getItemIpnOid',
        'log_dts' => 'getLogDts',
        'log_type' => 'getLogType',
        'logger_id' => 'getLoggerId',
        'logger_name' => 'getLoggerName',
        'logs' => 'getLogs',
        'omit_log_map' => 'getOmitLogMap',
        'order_ids' => 'getOrderIds',
        'pk' => 'getPk',
        'sk' => 'getSk',
        'status' => 'getStatus',
        'status_code' => 'getStatusCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = $data['action'] ?? null;
        $this->container['auto_order_oids'] = $data['auto_order_oids'] ?? null;
        $this->container['direction'] = $data['direction'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['files'] = $data['files'] ?? null;
        $this->container['integration_log_oid'] = $data['integration_log_oid'] ?? null;
        $this->container['item_id'] = $data['item_id'] ?? null;
        $this->container['item_ipn_oid'] = $data['item_ipn_oid'] ?? null;
        $this->container['log_dts'] = $data['log_dts'] ?? null;
        $this->container['log_type'] = $data['log_type'] ?? null;
        $this->container['logger_id'] = $data['logger_id'] ?? null;
        $this->container['logger_name'] = $data['logger_name'] ?? null;
        $this->container['logs'] = $data['logs'] ?? null;
        $this->container['omit_log_map'] = $data['omit_log_map'] ?? null;
        $this->container['order_ids'] = $data['order_ids'] ?? null;
        $this->container['pk'] = $data['pk'] ?? null;
        $this->container['sk'] = $data['sk'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_code'] = $data['status_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets auto_order_oids
     *
     * @return int[]|null
     */
    public function getAutoOrderOids()
    {
        return $this->container['auto_order_oids'];
    }

    /**
     * Sets auto_order_oids
     *
     * @param int[]|null $auto_order_oids auto_order_oids
     *
     * @return self
     */
    public function setAutoOrderOids($auto_order_oids)
    {
        $this->container['auto_order_oids'] = $auto_order_oids;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \ultracart\v2\models\IntegrationLogFile[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \ultracart\v2\models\IntegrationLogFile[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets integration_log_oid
     *
     * @return int|null
     */
    public function getIntegrationLogOid()
    {
        return $this->container['integration_log_oid'];
    }

    /**
     * Sets integration_log_oid
     *
     * @param int|null $integration_log_oid integration_log_oid
     *
     * @return self
     */
    public function setIntegrationLogOid($integration_log_oid)
    {
        $this->container['integration_log_oid'] = $integration_log_oid;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string|null $item_id item_id
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_ipn_oid
     *
     * @return int|null
     */
    public function getItemIpnOid()
    {
        return $this->container['item_ipn_oid'];
    }

    /**
     * Sets item_ipn_oid
     *
     * @param int|null $item_ipn_oid item_ipn_oid
     *
     * @return self
     */
    public function setItemIpnOid($item_ipn_oid)
    {
        $this->container['item_ipn_oid'] = $item_ipn_oid;

        return $this;
    }

    /**
     * Gets log_dts
     *
     * @return string|null
     */
    public function getLogDts()
    {
        return $this->container['log_dts'];
    }

    /**
     * Sets log_dts
     *
     * @param string|null $log_dts Date/time the integration log was created
     *
     * @return self
     */
    public function setLogDts($log_dts)
    {
        $this->container['log_dts'] = $log_dts;

        return $this;
    }

    /**
     * Gets log_type
     *
     * @return string|null
     */
    public function getLogType()
    {
        return $this->container['log_type'];
    }

    /**
     * Sets log_type
     *
     * @param string|null $log_type log_type
     *
     * @return self
     */
    public function setLogType($log_type)
    {
        $this->container['log_type'] = $log_type;

        return $this;
    }

    /**
     * Gets logger_id
     *
     * @return string|null
     */
    public function getLoggerId()
    {
        return $this->container['logger_id'];
    }

    /**
     * Sets logger_id
     *
     * @param string|null $logger_id logger_id
     *
     * @return self
     */
    public function setLoggerId($logger_id)
    {
        $this->container['logger_id'] = $logger_id;

        return $this;
    }

    /**
     * Gets logger_name
     *
     * @return string|null
     */
    public function getLoggerName()
    {
        return $this->container['logger_name'];
    }

    /**
     * Sets logger_name
     *
     * @param string|null $logger_name logger_name
     *
     * @return self
     */
    public function setLoggerName($logger_name)
    {
        $this->container['logger_name'] = $logger_name;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return \ultracart\v2\models\IntegrationLogLog[]|null
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param \ultracart\v2\models\IntegrationLogLog[]|null $logs logs
     *
     * @return self
     */
    public function setLogs($logs)
    {
        $this->container['logs'] = $logs;

        return $this;
    }

    /**
     * Gets omit_log_map
     *
     * @return bool|null
     */
    public function getOmitLogMap()
    {
        return $this->container['omit_log_map'];
    }

    /**
     * Sets omit_log_map
     *
     * @param bool|null $omit_log_map omit_log_map
     *
     * @return self
     */
    public function setOmitLogMap($omit_log_map)
    {
        $this->container['omit_log_map'] = $omit_log_map;

        return $this;
    }

    /**
     * Gets order_ids
     *
     * @return string[]|null
     */
    public function getOrderIds()
    {
        return $this->container['order_ids'];
    }

    /**
     * Sets order_ids
     *
     * @param string[]|null $order_ids order_ids
     *
     * @return self
     */
    public function setOrderIds($order_ids)
    {
        $this->container['order_ids'] = $order_ids;

        return $this;
    }

    /**
     * Gets pk
     *
     * @return string|null
     */
    public function getPk()
    {
        return $this->container['pk'];
    }

    /**
     * Sets pk
     *
     * @param string|null $pk pk
     *
     * @return self
     */
    public function setPk($pk)
    {
        $this->container['pk'] = $pk;

        return $this;
    }

    /**
     * Gets sk
     *
     * @return string|null
     */
    public function getSk()
    {
        return $this->container['sk'];
    }

    /**
     * Sets sk
     *
     * @param string|null $sk sk
     *
     * @return self
     */
    public function setSk($sk)
    {
        $this->container['sk'] = $sk;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return int|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int|null $status_code status_code
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


