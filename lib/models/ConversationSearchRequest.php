<?php
/**
 * ConversationSearchRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConversationSearchRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConversationSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_end' => 'string',
        'date_start' => 'string',
        'email_filter' => 'string',
        'language_filter' => 'string',
        'medium_filter' => 'string',
        'order_by_newest' => 'bool',
        'order_by_oldest' => 'bool',
        'range_begin' => 'int',
        'range_end' => 'int',
        'sms_phone_number_filter' => 'string',
        'text_search' => 'string',
        'visible_filter' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_end' => 'dateTime',
        'date_start' => 'dateTime',
        'email_filter' => null,
        'language_filter' => null,
        'medium_filter' => null,
        'order_by_newest' => null,
        'order_by_oldest' => null,
        'range_begin' => 'int32',
        'range_end' => 'int32',
        'sms_phone_number_filter' => null,
        'text_search' => null,
        'visible_filter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_end' => 'date_end',
        'date_start' => 'date_start',
        'email_filter' => 'email_filter',
        'language_filter' => 'language_filter',
        'medium_filter' => 'medium_filter',
        'order_by_newest' => 'order_by_newest',
        'order_by_oldest' => 'order_by_oldest',
        'range_begin' => 'range_begin',
        'range_end' => 'range_end',
        'sms_phone_number_filter' => 'sms_phone_number_filter',
        'text_search' => 'text_search',
        'visible_filter' => 'visible_filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_end' => 'setDateEnd',
        'date_start' => 'setDateStart',
        'email_filter' => 'setEmailFilter',
        'language_filter' => 'setLanguageFilter',
        'medium_filter' => 'setMediumFilter',
        'order_by_newest' => 'setOrderByNewest',
        'order_by_oldest' => 'setOrderByOldest',
        'range_begin' => 'setRangeBegin',
        'range_end' => 'setRangeEnd',
        'sms_phone_number_filter' => 'setSmsPhoneNumberFilter',
        'text_search' => 'setTextSearch',
        'visible_filter' => 'setVisibleFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_end' => 'getDateEnd',
        'date_start' => 'getDateStart',
        'email_filter' => 'getEmailFilter',
        'language_filter' => 'getLanguageFilter',
        'medium_filter' => 'getMediumFilter',
        'order_by_newest' => 'getOrderByNewest',
        'order_by_oldest' => 'getOrderByOldest',
        'range_begin' => 'getRangeBegin',
        'range_end' => 'getRangeEnd',
        'sms_phone_number_filter' => 'getSmsPhoneNumberFilter',
        'text_search' => 'getTextSearch',
        'visible_filter' => 'getVisibleFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_end'] = $data['date_end'] ?? null;
        $this->container['date_start'] = $data['date_start'] ?? null;
        $this->container['email_filter'] = $data['email_filter'] ?? null;
        $this->container['language_filter'] = $data['language_filter'] ?? null;
        $this->container['medium_filter'] = $data['medium_filter'] ?? null;
        $this->container['order_by_newest'] = $data['order_by_newest'] ?? null;
        $this->container['order_by_oldest'] = $data['order_by_oldest'] ?? null;
        $this->container['range_begin'] = $data['range_begin'] ?? null;
        $this->container['range_end'] = $data['range_end'] ?? null;
        $this->container['sms_phone_number_filter'] = $data['sms_phone_number_filter'] ?? null;
        $this->container['text_search'] = $data['text_search'] ?? null;
        $this->container['visible_filter'] = $data['visible_filter'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_end
     *
     * @return string|null
     */
    public function getDateEnd()
    {
        return $this->container['date_end'];
    }

    /**
     * Sets date_end
     *
     * @param string|null $date_end End of the range
     *
     * @return self
     */
    public function setDateEnd($date_end)
    {
        $this->container['date_end'] = $date_end;

        return $this;
    }

    /**
     * Gets date_start
     *
     * @return string|null
     */
    public function getDateStart()
    {
        return $this->container['date_start'];
    }

    /**
     * Sets date_start
     *
     * @param string|null $date_start Start of the range
     *
     * @return self
     */
    public function setDateStart($date_start)
    {
        $this->container['date_start'] = $date_start;

        return $this;
    }

    /**
     * Gets email_filter
     *
     * @return string|null
     */
    public function getEmailFilter()
    {
        return $this->container['email_filter'];
    }

    /**
     * Sets email_filter
     *
     * @param string|null $email_filter email_filter
     *
     * @return self
     */
    public function setEmailFilter($email_filter)
    {
        $this->container['email_filter'] = $email_filter;

        return $this;
    }

    /**
     * Gets language_filter
     *
     * @return string|null
     */
    public function getLanguageFilter()
    {
        return $this->container['language_filter'];
    }

    /**
     * Sets language_filter
     *
     * @param string|null $language_filter language_filter
     *
     * @return self
     */
    public function setLanguageFilter($language_filter)
    {
        $this->container['language_filter'] = $language_filter;

        return $this;
    }

    /**
     * Gets medium_filter
     *
     * @return string|null
     */
    public function getMediumFilter()
    {
        return $this->container['medium_filter'];
    }

    /**
     * Sets medium_filter
     *
     * @param string|null $medium_filter medium_filter
     *
     * @return self
     */
    public function setMediumFilter($medium_filter)
    {
        $this->container['medium_filter'] = $medium_filter;

        return $this;
    }

    /**
     * Gets order_by_newest
     *
     * @return bool|null
     */
    public function getOrderByNewest()
    {
        return $this->container['order_by_newest'];
    }

    /**
     * Sets order_by_newest
     *
     * @param bool|null $order_by_newest order_by_newest
     *
     * @return self
     */
    public function setOrderByNewest($order_by_newest)
    {
        $this->container['order_by_newest'] = $order_by_newest;

        return $this;
    }

    /**
     * Gets order_by_oldest
     *
     * @return bool|null
     */
    public function getOrderByOldest()
    {
        return $this->container['order_by_oldest'];
    }

    /**
     * Sets order_by_oldest
     *
     * @param bool|null $order_by_oldest order_by_oldest
     *
     * @return self
     */
    public function setOrderByOldest($order_by_oldest)
    {
        $this->container['order_by_oldest'] = $order_by_oldest;

        return $this;
    }

    /**
     * Gets range_begin
     *
     * @return int|null
     */
    public function getRangeBegin()
    {
        return $this->container['range_begin'];
    }

    /**
     * Sets range_begin
     *
     * @param int|null $range_begin range_begin
     *
     * @return self
     */
    public function setRangeBegin($range_begin)
    {
        $this->container['range_begin'] = $range_begin;

        return $this;
    }

    /**
     * Gets range_end
     *
     * @return int|null
     */
    public function getRangeEnd()
    {
        return $this->container['range_end'];
    }

    /**
     * Sets range_end
     *
     * @param int|null $range_end range_end
     *
     * @return self
     */
    public function setRangeEnd($range_end)
    {
        $this->container['range_end'] = $range_end;

        return $this;
    }

    /**
     * Gets sms_phone_number_filter
     *
     * @return string|null
     */
    public function getSmsPhoneNumberFilter()
    {
        return $this->container['sms_phone_number_filter'];
    }

    /**
     * Sets sms_phone_number_filter
     *
     * @param string|null $sms_phone_number_filter sms_phone_number_filter
     *
     * @return self
     */
    public function setSmsPhoneNumberFilter($sms_phone_number_filter)
    {
        $this->container['sms_phone_number_filter'] = $sms_phone_number_filter;

        return $this;
    }

    /**
     * Gets text_search
     *
     * @return string|null
     */
    public function getTextSearch()
    {
        return $this->container['text_search'];
    }

    /**
     * Sets text_search
     *
     * @param string|null $text_search text_search
     *
     * @return self
     */
    public function setTextSearch($text_search)
    {
        $this->container['text_search'] = $text_search;

        return $this;
    }

    /**
     * Gets visible_filter
     *
     * @return bool|null
     */
    public function getVisibleFilter()
    {
        return $this->container['visible_filter'];
    }

    /**
     * Sets visible_filter
     *
     * @param bool|null $visible_filter visible_filter
     *
     * @return self
     */
    public function setVisibleFilter($visible_filter)
    {
        $this->container['visible_filter'] = $visible_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


