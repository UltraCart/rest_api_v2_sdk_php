<?php
/**
 * HitSessionUtm
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * HitSessionUtm Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HitSessionUtm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HitSessionUtm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fb_ad_id' => 'string',
        'fbclid' => 'string',
        'gbraid' => 'string',
        'gclid' => 'string',
        'msclkid' => 'string',
        'ttclid' => 'string',
        'uc_message_id' => 'string',
        'utm_campaign' => 'string',
        'utm_content' => 'string',
        'utm_id' => 'string',
        'utm_medium' => 'string',
        'utm_source' => 'string',
        'utm_term' => 'string',
        'vmcid' => 'string',
        'wbraid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fb_ad_id' => null,
        'fbclid' => null,
        'gbraid' => null,
        'gclid' => null,
        'msclkid' => null,
        'ttclid' => null,
        'uc_message_id' => null,
        'utm_campaign' => null,
        'utm_content' => null,
        'utm_id' => null,
        'utm_medium' => null,
        'utm_source' => null,
        'utm_term' => null,
        'vmcid' => null,
        'wbraid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fb_ad_id' => 'fb_ad_id',
        'fbclid' => 'fbclid',
        'gbraid' => 'gbraid',
        'gclid' => 'gclid',
        'msclkid' => 'msclkid',
        'ttclid' => 'ttclid',
        'uc_message_id' => 'uc_message_id',
        'utm_campaign' => 'utm_campaign',
        'utm_content' => 'utm_content',
        'utm_id' => 'utm_id',
        'utm_medium' => 'utm_medium',
        'utm_source' => 'utm_source',
        'utm_term' => 'utm_term',
        'vmcid' => 'vmcid',
        'wbraid' => 'wbraid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fb_ad_id' => 'setFbAdId',
        'fbclid' => 'setFbclid',
        'gbraid' => 'setGbraid',
        'gclid' => 'setGclid',
        'msclkid' => 'setMsclkid',
        'ttclid' => 'setTtclid',
        'uc_message_id' => 'setUcMessageId',
        'utm_campaign' => 'setUtmCampaign',
        'utm_content' => 'setUtmContent',
        'utm_id' => 'setUtmId',
        'utm_medium' => 'setUtmMedium',
        'utm_source' => 'setUtmSource',
        'utm_term' => 'setUtmTerm',
        'vmcid' => 'setVmcid',
        'wbraid' => 'setWbraid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fb_ad_id' => 'getFbAdId',
        'fbclid' => 'getFbclid',
        'gbraid' => 'getGbraid',
        'gclid' => 'getGclid',
        'msclkid' => 'getMsclkid',
        'ttclid' => 'getTtclid',
        'uc_message_id' => 'getUcMessageId',
        'utm_campaign' => 'getUtmCampaign',
        'utm_content' => 'getUtmContent',
        'utm_id' => 'getUtmId',
        'utm_medium' => 'getUtmMedium',
        'utm_source' => 'getUtmSource',
        'utm_term' => 'getUtmTerm',
        'vmcid' => 'getVmcid',
        'wbraid' => 'getWbraid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fb_ad_id'] = $data['fb_ad_id'] ?? null;
        $this->container['fbclid'] = $data['fbclid'] ?? null;
        $this->container['gbraid'] = $data['gbraid'] ?? null;
        $this->container['gclid'] = $data['gclid'] ?? null;
        $this->container['msclkid'] = $data['msclkid'] ?? null;
        $this->container['ttclid'] = $data['ttclid'] ?? null;
        $this->container['uc_message_id'] = $data['uc_message_id'] ?? null;
        $this->container['utm_campaign'] = $data['utm_campaign'] ?? null;
        $this->container['utm_content'] = $data['utm_content'] ?? null;
        $this->container['utm_id'] = $data['utm_id'] ?? null;
        $this->container['utm_medium'] = $data['utm_medium'] ?? null;
        $this->container['utm_source'] = $data['utm_source'] ?? null;
        $this->container['utm_term'] = $data['utm_term'] ?? null;
        $this->container['vmcid'] = $data['vmcid'] ?? null;
        $this->container['wbraid'] = $data['wbraid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fb_ad_id
     *
     * @return string|null
     */
    public function getFbAdId()
    {
        return $this->container['fb_ad_id'];
    }

    /**
     * Sets fb_ad_id
     *
     * @param string|null $fb_ad_id fb_ad_id
     *
     * @return self
     */
    public function setFbAdId($fb_ad_id)
    {
        $this->container['fb_ad_id'] = $fb_ad_id;

        return $this;
    }

    /**
     * Gets fbclid
     *
     * @return string|null
     */
    public function getFbclid()
    {
        return $this->container['fbclid'];
    }

    /**
     * Sets fbclid
     *
     * @param string|null $fbclid fbclid
     *
     * @return self
     */
    public function setFbclid($fbclid)
    {
        $this->container['fbclid'] = $fbclid;

        return $this;
    }

    /**
     * Gets gbraid
     *
     * @return string|null
     */
    public function getGbraid()
    {
        return $this->container['gbraid'];
    }

    /**
     * Sets gbraid
     *
     * @param string|null $gbraid gbraid
     *
     * @return self
     */
    public function setGbraid($gbraid)
    {
        $this->container['gbraid'] = $gbraid;

        return $this;
    }

    /**
     * Gets gclid
     *
     * @return string|null
     */
    public function getGclid()
    {
        return $this->container['gclid'];
    }

    /**
     * Sets gclid
     *
     * @param string|null $gclid gclid
     *
     * @return self
     */
    public function setGclid($gclid)
    {
        $this->container['gclid'] = $gclid;

        return $this;
    }

    /**
     * Gets msclkid
     *
     * @return string|null
     */
    public function getMsclkid()
    {
        return $this->container['msclkid'];
    }

    /**
     * Sets msclkid
     *
     * @param string|null $msclkid msclkid
     *
     * @return self
     */
    public function setMsclkid($msclkid)
    {
        $this->container['msclkid'] = $msclkid;

        return $this;
    }

    /**
     * Gets ttclid
     *
     * @return string|null
     */
    public function getTtclid()
    {
        return $this->container['ttclid'];
    }

    /**
     * Sets ttclid
     *
     * @param string|null $ttclid ttclid
     *
     * @return self
     */
    public function setTtclid($ttclid)
    {
        $this->container['ttclid'] = $ttclid;

        return $this;
    }

    /**
     * Gets uc_message_id
     *
     * @return string|null
     */
    public function getUcMessageId()
    {
        return $this->container['uc_message_id'];
    }

    /**
     * Sets uc_message_id
     *
     * @param string|null $uc_message_id uc_message_id
     *
     * @return self
     */
    public function setUcMessageId($uc_message_id)
    {
        $this->container['uc_message_id'] = $uc_message_id;

        return $this;
    }

    /**
     * Gets utm_campaign
     *
     * @return string|null
     */
    public function getUtmCampaign()
    {
        return $this->container['utm_campaign'];
    }

    /**
     * Sets utm_campaign
     *
     * @param string|null $utm_campaign utm_campaign
     *
     * @return self
     */
    public function setUtmCampaign($utm_campaign)
    {
        $this->container['utm_campaign'] = $utm_campaign;

        return $this;
    }

    /**
     * Gets utm_content
     *
     * @return string|null
     */
    public function getUtmContent()
    {
        return $this->container['utm_content'];
    }

    /**
     * Sets utm_content
     *
     * @param string|null $utm_content utm_content
     *
     * @return self
     */
    public function setUtmContent($utm_content)
    {
        $this->container['utm_content'] = $utm_content;

        return $this;
    }

    /**
     * Gets utm_id
     *
     * @return string|null
     */
    public function getUtmId()
    {
        return $this->container['utm_id'];
    }

    /**
     * Sets utm_id
     *
     * @param string|null $utm_id utm_id
     *
     * @return self
     */
    public function setUtmId($utm_id)
    {
        $this->container['utm_id'] = $utm_id;

        return $this;
    }

    /**
     * Gets utm_medium
     *
     * @return string|null
     */
    public function getUtmMedium()
    {
        return $this->container['utm_medium'];
    }

    /**
     * Sets utm_medium
     *
     * @param string|null $utm_medium utm_medium
     *
     * @return self
     */
    public function setUtmMedium($utm_medium)
    {
        $this->container['utm_medium'] = $utm_medium;

        return $this;
    }

    /**
     * Gets utm_source
     *
     * @return string|null
     */
    public function getUtmSource()
    {
        return $this->container['utm_source'];
    }

    /**
     * Sets utm_source
     *
     * @param string|null $utm_source utm_source
     *
     * @return self
     */
    public function setUtmSource($utm_source)
    {
        $this->container['utm_source'] = $utm_source;

        return $this;
    }

    /**
     * Gets utm_term
     *
     * @return string|null
     */
    public function getUtmTerm()
    {
        return $this->container['utm_term'];
    }

    /**
     * Sets utm_term
     *
     * @param string|null $utm_term utm_term
     *
     * @return self
     */
    public function setUtmTerm($utm_term)
    {
        $this->container['utm_term'] = $utm_term;

        return $this;
    }

    /**
     * Gets vmcid
     *
     * @return string|null
     */
    public function getVmcid()
    {
        return $this->container['vmcid'];
    }

    /**
     * Sets vmcid
     *
     * @param string|null $vmcid vmcid
     *
     * @return self
     */
    public function setVmcid($vmcid)
    {
        $this->container['vmcid'] = $vmcid;

        return $this;
    }

    /**
     * Gets wbraid
     *
     * @return string|null
     */
    public function getWbraid()
    {
        return $this->container['wbraid'];
    }

    /**
     * Sets wbraid
     *
     * @param string|null $wbraid wbraid
     *
     * @return self
     */
    public function setWbraid($wbraid)
    {
        $this->container['wbraid'] = $wbraid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


