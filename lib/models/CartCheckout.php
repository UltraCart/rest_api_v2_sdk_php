<?php
/**
 * CartCheckout
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CartCheckout Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CartCheckout implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CartCheckout';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comments' => 'string',
        'current_step' => 'string',
        'custom_field1' => 'string',
        'custom_field10' => 'string',
        'custom_field2' => 'string',
        'custom_field3' => 'string',
        'custom_field4' => 'string',
        'custom_field5' => 'string',
        'custom_field6' => 'string',
        'custom_field7' => 'string',
        'custom_field8' => 'string',
        'custom_field9' => 'string',
        'ip_address' => 'string',
        'return_code' => 'string',
        'return_url' => 'string',
        'screen_branding_theme_code' => 'string',
        'storefront_host_name' => 'string',
        'user_agent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comments' => null,
        'current_step' => null,
        'custom_field1' => null,
        'custom_field10' => null,
        'custom_field2' => null,
        'custom_field3' => null,
        'custom_field4' => null,
        'custom_field5' => null,
        'custom_field6' => null,
        'custom_field7' => null,
        'custom_field8' => null,
        'custom_field9' => null,
        'ip_address' => null,
        'return_code' => null,
        'return_url' => null,
        'screen_branding_theme_code' => null,
        'storefront_host_name' => null,
        'user_agent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comments' => 'comments',
        'current_step' => 'current_step',
        'custom_field1' => 'custom_field1',
        'custom_field10' => 'custom_field10',
        'custom_field2' => 'custom_field2',
        'custom_field3' => 'custom_field3',
        'custom_field4' => 'custom_field4',
        'custom_field5' => 'custom_field5',
        'custom_field6' => 'custom_field6',
        'custom_field7' => 'custom_field7',
        'custom_field8' => 'custom_field8',
        'custom_field9' => 'custom_field9',
        'ip_address' => 'ip_address',
        'return_code' => 'return_code',
        'return_url' => 'return_url',
        'screen_branding_theme_code' => 'screen_branding_theme_code',
        'storefront_host_name' => 'storefront_host_name',
        'user_agent' => 'user_agent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comments' => 'setComments',
        'current_step' => 'setCurrentStep',
        'custom_field1' => 'setCustomField1',
        'custom_field10' => 'setCustomField10',
        'custom_field2' => 'setCustomField2',
        'custom_field3' => 'setCustomField3',
        'custom_field4' => 'setCustomField4',
        'custom_field5' => 'setCustomField5',
        'custom_field6' => 'setCustomField6',
        'custom_field7' => 'setCustomField7',
        'custom_field8' => 'setCustomField8',
        'custom_field9' => 'setCustomField9',
        'ip_address' => 'setIpAddress',
        'return_code' => 'setReturnCode',
        'return_url' => 'setReturnUrl',
        'screen_branding_theme_code' => 'setScreenBrandingThemeCode',
        'storefront_host_name' => 'setStorefrontHostName',
        'user_agent' => 'setUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comments' => 'getComments',
        'current_step' => 'getCurrentStep',
        'custom_field1' => 'getCustomField1',
        'custom_field10' => 'getCustomField10',
        'custom_field2' => 'getCustomField2',
        'custom_field3' => 'getCustomField3',
        'custom_field4' => 'getCustomField4',
        'custom_field5' => 'getCustomField5',
        'custom_field6' => 'getCustomField6',
        'custom_field7' => 'getCustomField7',
        'custom_field8' => 'getCustomField8',
        'custom_field9' => 'getCustomField9',
        'ip_address' => 'getIpAddress',
        'return_code' => 'getReturnCode',
        'return_url' => 'getReturnUrl',
        'screen_branding_theme_code' => 'getScreenBrandingThemeCode',
        'storefront_host_name' => 'getStorefrontHostName',
        'user_agent' => 'getUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['current_step'] = isset($data['current_step']) ? $data['current_step'] : null;
        $this->container['custom_field1'] = isset($data['custom_field1']) ? $data['custom_field1'] : null;
        $this->container['custom_field10'] = isset($data['custom_field10']) ? $data['custom_field10'] : null;
        $this->container['custom_field2'] = isset($data['custom_field2']) ? $data['custom_field2'] : null;
        $this->container['custom_field3'] = isset($data['custom_field3']) ? $data['custom_field3'] : null;
        $this->container['custom_field4'] = isset($data['custom_field4']) ? $data['custom_field4'] : null;
        $this->container['custom_field5'] = isset($data['custom_field5']) ? $data['custom_field5'] : null;
        $this->container['custom_field6'] = isset($data['custom_field6']) ? $data['custom_field6'] : null;
        $this->container['custom_field7'] = isset($data['custom_field7']) ? $data['custom_field7'] : null;
        $this->container['custom_field8'] = isset($data['custom_field8']) ? $data['custom_field8'] : null;
        $this->container['custom_field9'] = isset($data['custom_field9']) ? $data['custom_field9'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['return_code'] = isset($data['return_code']) ? $data['return_code'] : null;
        $this->container['return_url'] = isset($data['return_url']) ? $data['return_url'] : null;
        $this->container['screen_branding_theme_code'] = isset($data['screen_branding_theme_code']) ? $data['screen_branding_theme_code'] : null;
        $this->container['storefront_host_name'] = isset($data['storefront_host_name']) ? $data['storefront_host_name'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 2000)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['custom_field1']) && (mb_strlen($this->container['custom_field1']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field10']) && (mb_strlen($this->container['custom_field10']) > 200)) {
            $invalidProperties[] = "invalid value for 'custom_field10', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['custom_field2']) && (mb_strlen($this->container['custom_field2']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field3']) && (mb_strlen($this->container['custom_field3']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field4']) && (mb_strlen($this->container['custom_field4']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field4', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field5']) && (mb_strlen($this->container['custom_field5']) > 75)) {
            $invalidProperties[] = "invalid value for 'custom_field5', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['custom_field6']) && (mb_strlen($this->container['custom_field6']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field6', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field7']) && (mb_strlen($this->container['custom_field7']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field7', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field8']) && (mb_strlen($this->container['custom_field8']) > 200)) {
            $invalidProperties[] = "invalid value for 'custom_field8', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['custom_field9']) && (mb_strlen($this->container['custom_field9']) > 200)) {
            $invalidProperties[] = "invalid value for 'custom_field9', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['return_url']) && (mb_strlen($this->container['return_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'return_url', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['screen_branding_theme_code']) && (mb_strlen($this->container['screen_branding_theme_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'screen_branding_theme_code', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments Comments from the customer.  Rarely used on the single page checkout.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling CartCheckout., must be smaller than or equal to 2000.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets current_step
     *
     * @return string
     */
    public function getCurrentStep()
    {
        return $this->container['current_step'];
    }

    /**
     * Sets current_step
     *
     * @param string $current_step Current step of the checkout (read only)
     *
     * @return $this
     */
    public function setCurrentStep($current_step)
    {
        $this->container['current_step'] = $current_step;

        return $this;
    }

    /**
     * Gets custom_field1
     *
     * @return string
     */
    public function getCustomField1()
    {
        return $this->container['custom_field1'];
    }

    /**
     * Sets custom_field1
     *
     * @param string $custom_field1 Custom field 1
     *
     * @return $this
     */
    public function setCustomField1($custom_field1)
    {
        if (!is_null($custom_field1) && (mb_strlen($custom_field1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field1 when calling CartCheckout., must be smaller than or equal to 50.');
        }

        $this->container['custom_field1'] = $custom_field1;

        return $this;
    }

    /**
     * Gets custom_field10
     *
     * @return string
     */
    public function getCustomField10()
    {
        return $this->container['custom_field10'];
    }

    /**
     * Sets custom_field10
     *
     * @param string $custom_field10 Custom field 10
     *
     * @return $this
     */
    public function setCustomField10($custom_field10)
    {
        if (!is_null($custom_field10) && (mb_strlen($custom_field10) > 200)) {
            throw new \InvalidArgumentException('invalid length for $custom_field10 when calling CartCheckout., must be smaller than or equal to 200.');
        }

        $this->container['custom_field10'] = $custom_field10;

        return $this;
    }

    /**
     * Gets custom_field2
     *
     * @return string
     */
    public function getCustomField2()
    {
        return $this->container['custom_field2'];
    }

    /**
     * Sets custom_field2
     *
     * @param string $custom_field2 Custom field 2
     *
     * @return $this
     */
    public function setCustomField2($custom_field2)
    {
        if (!is_null($custom_field2) && (mb_strlen($custom_field2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field2 when calling CartCheckout., must be smaller than or equal to 50.');
        }

        $this->container['custom_field2'] = $custom_field2;

        return $this;
    }

    /**
     * Gets custom_field3
     *
     * @return string
     */
    public function getCustomField3()
    {
        return $this->container['custom_field3'];
    }

    /**
     * Sets custom_field3
     *
     * @param string $custom_field3 Custom field 3
     *
     * @return $this
     */
    public function setCustomField3($custom_field3)
    {
        if (!is_null($custom_field3) && (mb_strlen($custom_field3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field3 when calling CartCheckout., must be smaller than or equal to 50.');
        }

        $this->container['custom_field3'] = $custom_field3;

        return $this;
    }

    /**
     * Gets custom_field4
     *
     * @return string
     */
    public function getCustomField4()
    {
        return $this->container['custom_field4'];
    }

    /**
     * Sets custom_field4
     *
     * @param string $custom_field4 Custom field 4
     *
     * @return $this
     */
    public function setCustomField4($custom_field4)
    {
        if (!is_null($custom_field4) && (mb_strlen($custom_field4) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field4 when calling CartCheckout., must be smaller than or equal to 50.');
        }

        $this->container['custom_field4'] = $custom_field4;

        return $this;
    }

    /**
     * Gets custom_field5
     *
     * @return string
     */
    public function getCustomField5()
    {
        return $this->container['custom_field5'];
    }

    /**
     * Sets custom_field5
     *
     * @param string $custom_field5 Custom field 5
     *
     * @return $this
     */
    public function setCustomField5($custom_field5)
    {
        if (!is_null($custom_field5) && (mb_strlen($custom_field5) > 75)) {
            throw new \InvalidArgumentException('invalid length for $custom_field5 when calling CartCheckout., must be smaller than or equal to 75.');
        }

        $this->container['custom_field5'] = $custom_field5;

        return $this;
    }

    /**
     * Gets custom_field6
     *
     * @return string
     */
    public function getCustomField6()
    {
        return $this->container['custom_field6'];
    }

    /**
     * Sets custom_field6
     *
     * @param string $custom_field6 Custom field 6
     *
     * @return $this
     */
    public function setCustomField6($custom_field6)
    {
        if (!is_null($custom_field6) && (mb_strlen($custom_field6) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field6 when calling CartCheckout., must be smaller than or equal to 50.');
        }

        $this->container['custom_field6'] = $custom_field6;

        return $this;
    }

    /**
     * Gets custom_field7
     *
     * @return string
     */
    public function getCustomField7()
    {
        return $this->container['custom_field7'];
    }

    /**
     * Sets custom_field7
     *
     * @param string $custom_field7 Custom field 7
     *
     * @return $this
     */
    public function setCustomField7($custom_field7)
    {
        if (!is_null($custom_field7) && (mb_strlen($custom_field7) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field7 when calling CartCheckout., must be smaller than or equal to 50.');
        }

        $this->container['custom_field7'] = $custom_field7;

        return $this;
    }

    /**
     * Gets custom_field8
     *
     * @return string
     */
    public function getCustomField8()
    {
        return $this->container['custom_field8'];
    }

    /**
     * Sets custom_field8
     *
     * @param string $custom_field8 Custom field 8
     *
     * @return $this
     */
    public function setCustomField8($custom_field8)
    {
        if (!is_null($custom_field8) && (mb_strlen($custom_field8) > 200)) {
            throw new \InvalidArgumentException('invalid length for $custom_field8 when calling CartCheckout., must be smaller than or equal to 200.');
        }

        $this->container['custom_field8'] = $custom_field8;

        return $this;
    }

    /**
     * Gets custom_field9
     *
     * @return string
     */
    public function getCustomField9()
    {
        return $this->container['custom_field9'];
    }

    /**
     * Sets custom_field9
     *
     * @param string $custom_field9 Custom field 9
     *
     * @return $this
     */
    public function setCustomField9($custom_field9)
    {
        if (!is_null($custom_field9) && (mb_strlen($custom_field9) > 200)) {
            throw new \InvalidArgumentException('invalid length for $custom_field9 when calling CartCheckout., must be smaller than or equal to 200.');
        }

        $this->container['custom_field9'] = $custom_field9;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address IP Address (read only unless non-browser key authenticated)
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets return_code
     *
     * @return string
     */
    public function getReturnCode()
    {
        return $this->container['return_code'];
    }

    /**
     * Sets return_code
     *
     * @param string $return_code Return code assigned for send return email operation
     *
     * @return $this
     */
    public function setReturnCode($return_code)
    {
        $this->container['return_code'] = $return_code;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string $return_url The URL to redirect the customer to when they return from an abandon cart email.  Must be https protocol.
     *
     * @return $this
     */
    public function setReturnUrl($return_url)
    {
        if (!is_null($return_url) && (mb_strlen($return_url) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $return_url when calling CartCheckout., must be smaller than or equal to 2048.');
        }

        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets screen_branding_theme_code
     *
     * @return string
     */
    public function getScreenBrandingThemeCode()
    {
        return $this->container['screen_branding_theme_code'];
    }

    /**
     * Sets screen_branding_theme_code
     *
     * @param string $screen_branding_theme_code Screen branding theme code
     *
     * @return $this
     */
    public function setScreenBrandingThemeCode($screen_branding_theme_code)
    {
        if (!is_null($screen_branding_theme_code) && (mb_strlen($screen_branding_theme_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $screen_branding_theme_code when calling CartCheckout., must be smaller than or equal to 10.');
        }

        $this->container['screen_branding_theme_code'] = $screen_branding_theme_code;

        return $this;
    }

    /**
     * Gets storefront_host_name
     *
     * @return string
     */
    public function getStorefrontHostName()
    {
        return $this->container['storefront_host_name'];
    }

    /**
     * Sets storefront_host_name
     *
     * @param string $storefront_host_name StoreFront Host Name
     *
     * @return $this
     */
    public function setStorefrontHostName($storefront_host_name)
    {
        $this->container['storefront_host_name'] = $storefront_host_name;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string $user_agent User agent of the browser
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


