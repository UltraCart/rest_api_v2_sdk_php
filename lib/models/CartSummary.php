<?php
/**
 * CartSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CartSummary Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CartSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CartSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'arbitrary_shipping_handling_total' => '\ultracart\v2\models\Currency',
        'arbitrary_tax' => '\ultracart\v2\models\Currency',
        'arbitrary_tax_rate' => '\ultracart\v2\models\Currency',
        'arbitrary_taxable_subtotal' => '\ultracart\v2\models\Currency',
        'health_benefit_card_amount' => '\ultracart\v2\models\Currency',
        'health_benefit_card_balance' => '\ultracart\v2\models\Currency',
        'health_benefit_card_requirements' => 'string',
        'internal_gift_certificate_amount' => '\ultracart\v2\models\Currency',
        'shipping_handling' => '\ultracart\v2\models\Currency',
        'shipping_handling_discount' => '\ultracart\v2\models\Currency',
        'shipping_handling_with_discount' => '\ultracart\v2\models\Currency',
        'subtotal' => '\ultracart\v2\models\Currency',
        'subtotal_discount' => '\ultracart\v2\models\Currency',
        'subtotal_with_discount' => '\ultracart\v2\models\Currency',
        'surcharge' => '\ultracart\v2\models\Currency',
        'tax' => '\ultracart\v2\models\Currency',
        'taxable_subtotal' => '\ultracart\v2\models\Currency',
        'taxable_subtotal_discount' => '\ultracart\v2\models\Currency',
        'taxable_subtotal_with_discount' => '\ultracart\v2\models\Currency',
        'total' => '\ultracart\v2\models\Currency'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'arbitrary_shipping_handling_total' => null,
        'arbitrary_tax' => null,
        'arbitrary_tax_rate' => null,
        'arbitrary_taxable_subtotal' => null,
        'health_benefit_card_amount' => null,
        'health_benefit_card_balance' => null,
        'health_benefit_card_requirements' => null,
        'internal_gift_certificate_amount' => null,
        'shipping_handling' => null,
        'shipping_handling_discount' => null,
        'shipping_handling_with_discount' => null,
        'subtotal' => null,
        'subtotal_discount' => null,
        'subtotal_with_discount' => null,
        'surcharge' => null,
        'tax' => null,
        'taxable_subtotal' => null,
        'taxable_subtotal_discount' => null,
        'taxable_subtotal_with_discount' => null,
        'total' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arbitrary_shipping_handling_total' => 'arbitrary_shipping_handling_total',
        'arbitrary_tax' => 'arbitrary_tax',
        'arbitrary_tax_rate' => 'arbitrary_tax_rate',
        'arbitrary_taxable_subtotal' => 'arbitrary_taxable_subtotal',
        'health_benefit_card_amount' => 'health_benefit_card_amount',
        'health_benefit_card_balance' => 'health_benefit_card_balance',
        'health_benefit_card_requirements' => 'health_benefit_card_requirements',
        'internal_gift_certificate_amount' => 'internal_gift_certificate_amount',
        'shipping_handling' => 'shipping_handling',
        'shipping_handling_discount' => 'shipping_handling_discount',
        'shipping_handling_with_discount' => 'shipping_handling_with_discount',
        'subtotal' => 'subtotal',
        'subtotal_discount' => 'subtotal_discount',
        'subtotal_with_discount' => 'subtotal_with_discount',
        'surcharge' => 'surcharge',
        'tax' => 'tax',
        'taxable_subtotal' => 'taxable_subtotal',
        'taxable_subtotal_discount' => 'taxable_subtotal_discount',
        'taxable_subtotal_with_discount' => 'taxable_subtotal_with_discount',
        'total' => 'total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arbitrary_shipping_handling_total' => 'setArbitraryShippingHandlingTotal',
        'arbitrary_tax' => 'setArbitraryTax',
        'arbitrary_tax_rate' => 'setArbitraryTaxRate',
        'arbitrary_taxable_subtotal' => 'setArbitraryTaxableSubtotal',
        'health_benefit_card_amount' => 'setHealthBenefitCardAmount',
        'health_benefit_card_balance' => 'setHealthBenefitCardBalance',
        'health_benefit_card_requirements' => 'setHealthBenefitCardRequirements',
        'internal_gift_certificate_amount' => 'setInternalGiftCertificateAmount',
        'shipping_handling' => 'setShippingHandling',
        'shipping_handling_discount' => 'setShippingHandlingDiscount',
        'shipping_handling_with_discount' => 'setShippingHandlingWithDiscount',
        'subtotal' => 'setSubtotal',
        'subtotal_discount' => 'setSubtotalDiscount',
        'subtotal_with_discount' => 'setSubtotalWithDiscount',
        'surcharge' => 'setSurcharge',
        'tax' => 'setTax',
        'taxable_subtotal' => 'setTaxableSubtotal',
        'taxable_subtotal_discount' => 'setTaxableSubtotalDiscount',
        'taxable_subtotal_with_discount' => 'setTaxableSubtotalWithDiscount',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arbitrary_shipping_handling_total' => 'getArbitraryShippingHandlingTotal',
        'arbitrary_tax' => 'getArbitraryTax',
        'arbitrary_tax_rate' => 'getArbitraryTaxRate',
        'arbitrary_taxable_subtotal' => 'getArbitraryTaxableSubtotal',
        'health_benefit_card_amount' => 'getHealthBenefitCardAmount',
        'health_benefit_card_balance' => 'getHealthBenefitCardBalance',
        'health_benefit_card_requirements' => 'getHealthBenefitCardRequirements',
        'internal_gift_certificate_amount' => 'getInternalGiftCertificateAmount',
        'shipping_handling' => 'getShippingHandling',
        'shipping_handling_discount' => 'getShippingHandlingDiscount',
        'shipping_handling_with_discount' => 'getShippingHandlingWithDiscount',
        'subtotal' => 'getSubtotal',
        'subtotal_discount' => 'getSubtotalDiscount',
        'subtotal_with_discount' => 'getSubtotalWithDiscount',
        'surcharge' => 'getSurcharge',
        'tax' => 'getTax',
        'taxable_subtotal' => 'getTaxableSubtotal',
        'taxable_subtotal_discount' => 'getTaxableSubtotalDiscount',
        'taxable_subtotal_with_discount' => 'getTaxableSubtotalWithDiscount',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arbitrary_shipping_handling_total'] = isset($data['arbitrary_shipping_handling_total']) ? $data['arbitrary_shipping_handling_total'] : null;
        $this->container['arbitrary_tax'] = isset($data['arbitrary_tax']) ? $data['arbitrary_tax'] : null;
        $this->container['arbitrary_tax_rate'] = isset($data['arbitrary_tax_rate']) ? $data['arbitrary_tax_rate'] : null;
        $this->container['arbitrary_taxable_subtotal'] = isset($data['arbitrary_taxable_subtotal']) ? $data['arbitrary_taxable_subtotal'] : null;
        $this->container['health_benefit_card_amount'] = isset($data['health_benefit_card_amount']) ? $data['health_benefit_card_amount'] : null;
        $this->container['health_benefit_card_balance'] = isset($data['health_benefit_card_balance']) ? $data['health_benefit_card_balance'] : null;
        $this->container['health_benefit_card_requirements'] = isset($data['health_benefit_card_requirements']) ? $data['health_benefit_card_requirements'] : null;
        $this->container['internal_gift_certificate_amount'] = isset($data['internal_gift_certificate_amount']) ? $data['internal_gift_certificate_amount'] : null;
        $this->container['shipping_handling'] = isset($data['shipping_handling']) ? $data['shipping_handling'] : null;
        $this->container['shipping_handling_discount'] = isset($data['shipping_handling_discount']) ? $data['shipping_handling_discount'] : null;
        $this->container['shipping_handling_with_discount'] = isset($data['shipping_handling_with_discount']) ? $data['shipping_handling_with_discount'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['subtotal_discount'] = isset($data['subtotal_discount']) ? $data['subtotal_discount'] : null;
        $this->container['subtotal_with_discount'] = isset($data['subtotal_with_discount']) ? $data['subtotal_with_discount'] : null;
        $this->container['surcharge'] = isset($data['surcharge']) ? $data['surcharge'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['taxable_subtotal'] = isset($data['taxable_subtotal']) ? $data['taxable_subtotal'] : null;
        $this->container['taxable_subtotal_discount'] = isset($data['taxable_subtotal_discount']) ? $data['taxable_subtotal_discount'] : null;
        $this->container['taxable_subtotal_with_discount'] = isset($data['taxable_subtotal_with_discount']) ? $data['taxable_subtotal_with_discount'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arbitrary_shipping_handling_total
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getArbitraryShippingHandlingTotal()
    {
        return $this->container['arbitrary_shipping_handling_total'];
    }

    /**
     * Sets arbitrary_shipping_handling_total
     *
     * @param \ultracart\v2\models\Currency $arbitrary_shipping_handling_total arbitrary_shipping_handling_total
     *
     * @return $this
     */
    public function setArbitraryShippingHandlingTotal($arbitrary_shipping_handling_total)
    {
        $this->container['arbitrary_shipping_handling_total'] = $arbitrary_shipping_handling_total;

        return $this;
    }

    /**
     * Gets arbitrary_tax
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getArbitraryTax()
    {
        return $this->container['arbitrary_tax'];
    }

    /**
     * Sets arbitrary_tax
     *
     * @param \ultracart\v2\models\Currency $arbitrary_tax arbitrary_tax
     *
     * @return $this
     */
    public function setArbitraryTax($arbitrary_tax)
    {
        $this->container['arbitrary_tax'] = $arbitrary_tax;

        return $this;
    }

    /**
     * Gets arbitrary_tax_rate
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getArbitraryTaxRate()
    {
        return $this->container['arbitrary_tax_rate'];
    }

    /**
     * Sets arbitrary_tax_rate
     *
     * @param \ultracart\v2\models\Currency $arbitrary_tax_rate arbitrary_tax_rate
     *
     * @return $this
     */
    public function setArbitraryTaxRate($arbitrary_tax_rate)
    {
        $this->container['arbitrary_tax_rate'] = $arbitrary_tax_rate;

        return $this;
    }

    /**
     * Gets arbitrary_taxable_subtotal
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getArbitraryTaxableSubtotal()
    {
        return $this->container['arbitrary_taxable_subtotal'];
    }

    /**
     * Sets arbitrary_taxable_subtotal
     *
     * @param \ultracart\v2\models\Currency $arbitrary_taxable_subtotal arbitrary_taxable_subtotal
     *
     * @return $this
     */
    public function setArbitraryTaxableSubtotal($arbitrary_taxable_subtotal)
    {
        $this->container['arbitrary_taxable_subtotal'] = $arbitrary_taxable_subtotal;

        return $this;
    }

    /**
     * Gets health_benefit_card_amount
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getHealthBenefitCardAmount()
    {
        return $this->container['health_benefit_card_amount'];
    }

    /**
     * Sets health_benefit_card_amount
     *
     * @param \ultracart\v2\models\Currency $health_benefit_card_amount health_benefit_card_amount
     *
     * @return $this
     */
    public function setHealthBenefitCardAmount($health_benefit_card_amount)
    {
        $this->container['health_benefit_card_amount'] = $health_benefit_card_amount;

        return $this;
    }

    /**
     * Gets health_benefit_card_balance
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getHealthBenefitCardBalance()
    {
        return $this->container['health_benefit_card_balance'];
    }

    /**
     * Sets health_benefit_card_balance
     *
     * @param \ultracart\v2\models\Currency $health_benefit_card_balance health_benefit_card_balance
     *
     * @return $this
     */
    public function setHealthBenefitCardBalance($health_benefit_card_balance)
    {
        $this->container['health_benefit_card_balance'] = $health_benefit_card_balance;

        return $this;
    }

    /**
     * Gets health_benefit_card_requirements
     *
     * @return string
     */
    public function getHealthBenefitCardRequirements()
    {
        return $this->container['health_benefit_card_requirements'];
    }

    /**
     * Sets health_benefit_card_requirements
     *
     * @param string $health_benefit_card_requirements Health benefit card requirements
     *
     * @return $this
     */
    public function setHealthBenefitCardRequirements($health_benefit_card_requirements)
    {
        $this->container['health_benefit_card_requirements'] = $health_benefit_card_requirements;

        return $this;
    }

    /**
     * Gets internal_gift_certificate_amount
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getInternalGiftCertificateAmount()
    {
        return $this->container['internal_gift_certificate_amount'];
    }

    /**
     * Sets internal_gift_certificate_amount
     *
     * @param \ultracart\v2\models\Currency $internal_gift_certificate_amount internal_gift_certificate_amount
     *
     * @return $this
     */
    public function setInternalGiftCertificateAmount($internal_gift_certificate_amount)
    {
        $this->container['internal_gift_certificate_amount'] = $internal_gift_certificate_amount;

        return $this;
    }

    /**
     * Gets shipping_handling
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getShippingHandling()
    {
        return $this->container['shipping_handling'];
    }

    /**
     * Sets shipping_handling
     *
     * @param \ultracart\v2\models\Currency $shipping_handling shipping_handling
     *
     * @return $this
     */
    public function setShippingHandling($shipping_handling)
    {
        $this->container['shipping_handling'] = $shipping_handling;

        return $this;
    }

    /**
     * Gets shipping_handling_discount
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getShippingHandlingDiscount()
    {
        return $this->container['shipping_handling_discount'];
    }

    /**
     * Sets shipping_handling_discount
     *
     * @param \ultracart\v2\models\Currency $shipping_handling_discount shipping_handling_discount
     *
     * @return $this
     */
    public function setShippingHandlingDiscount($shipping_handling_discount)
    {
        $this->container['shipping_handling_discount'] = $shipping_handling_discount;

        return $this;
    }

    /**
     * Gets shipping_handling_with_discount
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getShippingHandlingWithDiscount()
    {
        return $this->container['shipping_handling_with_discount'];
    }

    /**
     * Sets shipping_handling_with_discount
     *
     * @param \ultracart\v2\models\Currency $shipping_handling_with_discount shipping_handling_with_discount
     *
     * @return $this
     */
    public function setShippingHandlingWithDiscount($shipping_handling_with_discount)
    {
        $this->container['shipping_handling_with_discount'] = $shipping_handling_with_discount;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param \ultracart\v2\models\Currency $subtotal subtotal
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets subtotal_discount
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getSubtotalDiscount()
    {
        return $this->container['subtotal_discount'];
    }

    /**
     * Sets subtotal_discount
     *
     * @param \ultracart\v2\models\Currency $subtotal_discount subtotal_discount
     *
     * @return $this
     */
    public function setSubtotalDiscount($subtotal_discount)
    {
        $this->container['subtotal_discount'] = $subtotal_discount;

        return $this;
    }

    /**
     * Gets subtotal_with_discount
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getSubtotalWithDiscount()
    {
        return $this->container['subtotal_with_discount'];
    }

    /**
     * Sets subtotal_with_discount
     *
     * @param \ultracart\v2\models\Currency $subtotal_with_discount subtotal_with_discount
     *
     * @return $this
     */
    public function setSubtotalWithDiscount($subtotal_with_discount)
    {
        $this->container['subtotal_with_discount'] = $subtotal_with_discount;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param \ultracart\v2\models\Currency $surcharge surcharge
     *
     * @return $this
     */
    public function setSurcharge($surcharge)
    {
        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param \ultracart\v2\models\Currency $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets taxable_subtotal
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getTaxableSubtotal()
    {
        return $this->container['taxable_subtotal'];
    }

    /**
     * Sets taxable_subtotal
     *
     * @param \ultracart\v2\models\Currency $taxable_subtotal taxable_subtotal
     *
     * @return $this
     */
    public function setTaxableSubtotal($taxable_subtotal)
    {
        $this->container['taxable_subtotal'] = $taxable_subtotal;

        return $this;
    }

    /**
     * Gets taxable_subtotal_discount
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getTaxableSubtotalDiscount()
    {
        return $this->container['taxable_subtotal_discount'];
    }

    /**
     * Sets taxable_subtotal_discount
     *
     * @param \ultracart\v2\models\Currency $taxable_subtotal_discount taxable_subtotal_discount
     *
     * @return $this
     */
    public function setTaxableSubtotalDiscount($taxable_subtotal_discount)
    {
        $this->container['taxable_subtotal_discount'] = $taxable_subtotal_discount;

        return $this;
    }

    /**
     * Gets taxable_subtotal_with_discount
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getTaxableSubtotalWithDiscount()
    {
        return $this->container['taxable_subtotal_with_discount'];
    }

    /**
     * Sets taxable_subtotal_with_discount
     *
     * @param \ultracart\v2\models\Currency $taxable_subtotal_with_discount taxable_subtotal_with_discount
     *
     * @return $this
     */
    public function setTaxableSubtotalWithDiscount($taxable_subtotal_with_discount)
    {
        $this->container['taxable_subtotal_with_discount'] = $taxable_subtotal_with_discount;

        return $this;
    }

    /**
     * Gets total
     *
     * @return \ultracart\v2\models\Currency
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \ultracart\v2\models\Currency $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


