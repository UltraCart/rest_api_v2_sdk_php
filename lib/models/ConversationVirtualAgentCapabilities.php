<?php
/**
 * ConversationVirtualAgentCapabilities
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationVirtualAgentCapabilities Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationVirtualAgentCapabilities implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationVirtualAgentCapabilities';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cancel_subscription' => 'bool',
        'delay_subscription' => 'bool',
        'lookup_order_information' => 'bool',
        'lookup_subscription_information' => 'bool',
        'open_support_ticket' => 'bool',
        'open_support_ticket_channel' => 'string',
        'open_support_ticket_channel_email' => 'string',
        'open_support_ticket_zoho_desk_department_id' => 'string',
        'pause_subscription' => 'bool',
        'resume_subscription' => 'bool',
        'transfer_chat_to_live_agent' => 'bool',
        'update_subscription_credit_card' => 'bool',
        'zoho_desk_available' => 'bool',
        'zoho_desk_departments' => '\ultracart\v2\models\ConversationVirtualAgentCapabilityZohoDeskDepartment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cancel_subscription' => null,
        'delay_subscription' => null,
        'lookup_order_information' => null,
        'lookup_subscription_information' => null,
        'open_support_ticket' => null,
        'open_support_ticket_channel' => null,
        'open_support_ticket_channel_email' => null,
        'open_support_ticket_zoho_desk_department_id' => null,
        'pause_subscription' => null,
        'resume_subscription' => null,
        'transfer_chat_to_live_agent' => null,
        'update_subscription_credit_card' => null,
        'zoho_desk_available' => null,
        'zoho_desk_departments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cancel_subscription' => 'cancel_subscription',
        'delay_subscription' => 'delay_subscription',
        'lookup_order_information' => 'lookup_order_information',
        'lookup_subscription_information' => 'lookup_subscription_information',
        'open_support_ticket' => 'open_support_ticket',
        'open_support_ticket_channel' => 'open_support_ticket_channel',
        'open_support_ticket_channel_email' => 'open_support_ticket_channel_email',
        'open_support_ticket_zoho_desk_department_id' => 'open_support_ticket_zoho_desk_department_id',
        'pause_subscription' => 'pause_subscription',
        'resume_subscription' => 'resume_subscription',
        'transfer_chat_to_live_agent' => 'transfer_chat_to_live_agent',
        'update_subscription_credit_card' => 'update_subscription_credit_card',
        'zoho_desk_available' => 'zoho_desk_available',
        'zoho_desk_departments' => 'zoho_desk_departments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cancel_subscription' => 'setCancelSubscription',
        'delay_subscription' => 'setDelaySubscription',
        'lookup_order_information' => 'setLookupOrderInformation',
        'lookup_subscription_information' => 'setLookupSubscriptionInformation',
        'open_support_ticket' => 'setOpenSupportTicket',
        'open_support_ticket_channel' => 'setOpenSupportTicketChannel',
        'open_support_ticket_channel_email' => 'setOpenSupportTicketChannelEmail',
        'open_support_ticket_zoho_desk_department_id' => 'setOpenSupportTicketZohoDeskDepartmentId',
        'pause_subscription' => 'setPauseSubscription',
        'resume_subscription' => 'setResumeSubscription',
        'transfer_chat_to_live_agent' => 'setTransferChatToLiveAgent',
        'update_subscription_credit_card' => 'setUpdateSubscriptionCreditCard',
        'zoho_desk_available' => 'setZohoDeskAvailable',
        'zoho_desk_departments' => 'setZohoDeskDepartments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cancel_subscription' => 'getCancelSubscription',
        'delay_subscription' => 'getDelaySubscription',
        'lookup_order_information' => 'getLookupOrderInformation',
        'lookup_subscription_information' => 'getLookupSubscriptionInformation',
        'open_support_ticket' => 'getOpenSupportTicket',
        'open_support_ticket_channel' => 'getOpenSupportTicketChannel',
        'open_support_ticket_channel_email' => 'getOpenSupportTicketChannelEmail',
        'open_support_ticket_zoho_desk_department_id' => 'getOpenSupportTicketZohoDeskDepartmentId',
        'pause_subscription' => 'getPauseSubscription',
        'resume_subscription' => 'getResumeSubscription',
        'transfer_chat_to_live_agent' => 'getTransferChatToLiveAgent',
        'update_subscription_credit_card' => 'getUpdateSubscriptionCreditCard',
        'zoho_desk_available' => 'getZohoDeskAvailable',
        'zoho_desk_departments' => 'getZohoDeskDepartments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPEN_SUPPORT_TICKET_CHANNEL_NONE = 'none';
    const OPEN_SUPPORT_TICKET_CHANNEL_EMAIL = 'email';
    const OPEN_SUPPORT_TICKET_CHANNEL_ULTRACART_TASK = 'ultracart_task';
    const OPEN_SUPPORT_TICKET_CHANNEL_ZOHO_DESK_TICKET = 'zoho_desk_ticket';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpenSupportTicketChannelAllowableValues()
    {
        return [
            self::OPEN_SUPPORT_TICKET_CHANNEL_NONE,
            self::OPEN_SUPPORT_TICKET_CHANNEL_EMAIL,
            self::OPEN_SUPPORT_TICKET_CHANNEL_ULTRACART_TASK,
            self::OPEN_SUPPORT_TICKET_CHANNEL_ZOHO_DESK_TICKET,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cancel_subscription'] = isset($data['cancel_subscription']) ? $data['cancel_subscription'] : null;
        $this->container['delay_subscription'] = isset($data['delay_subscription']) ? $data['delay_subscription'] : null;
        $this->container['lookup_order_information'] = isset($data['lookup_order_information']) ? $data['lookup_order_information'] : null;
        $this->container['lookup_subscription_information'] = isset($data['lookup_subscription_information']) ? $data['lookup_subscription_information'] : null;
        $this->container['open_support_ticket'] = isset($data['open_support_ticket']) ? $data['open_support_ticket'] : null;
        $this->container['open_support_ticket_channel'] = isset($data['open_support_ticket_channel']) ? $data['open_support_ticket_channel'] : null;
        $this->container['open_support_ticket_channel_email'] = isset($data['open_support_ticket_channel_email']) ? $data['open_support_ticket_channel_email'] : null;
        $this->container['open_support_ticket_zoho_desk_department_id'] = isset($data['open_support_ticket_zoho_desk_department_id']) ? $data['open_support_ticket_zoho_desk_department_id'] : null;
        $this->container['pause_subscription'] = isset($data['pause_subscription']) ? $data['pause_subscription'] : null;
        $this->container['resume_subscription'] = isset($data['resume_subscription']) ? $data['resume_subscription'] : null;
        $this->container['transfer_chat_to_live_agent'] = isset($data['transfer_chat_to_live_agent']) ? $data['transfer_chat_to_live_agent'] : null;
        $this->container['update_subscription_credit_card'] = isset($data['update_subscription_credit_card']) ? $data['update_subscription_credit_card'] : null;
        $this->container['zoho_desk_available'] = isset($data['zoho_desk_available']) ? $data['zoho_desk_available'] : null;
        $this->container['zoho_desk_departments'] = isset($data['zoho_desk_departments']) ? $data['zoho_desk_departments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOpenSupportTicketChannelAllowableValues();
        if (!is_null($this->container['open_support_ticket_channel']) && !in_array($this->container['open_support_ticket_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'open_support_ticket_channel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cancel_subscription
     *
     * @return bool
     */
    public function getCancelSubscription()
    {
        return $this->container['cancel_subscription'];
    }

    /**
     * Sets cancel_subscription
     *
     * @param bool $cancel_subscription cancel_subscription
     *
     * @return $this
     */
    public function setCancelSubscription($cancel_subscription)
    {
        $this->container['cancel_subscription'] = $cancel_subscription;

        return $this;
    }

    /**
     * Gets delay_subscription
     *
     * @return bool
     */
    public function getDelaySubscription()
    {
        return $this->container['delay_subscription'];
    }

    /**
     * Sets delay_subscription
     *
     * @param bool $delay_subscription delay_subscription
     *
     * @return $this
     */
    public function setDelaySubscription($delay_subscription)
    {
        $this->container['delay_subscription'] = $delay_subscription;

        return $this;
    }

    /**
     * Gets lookup_order_information
     *
     * @return bool
     */
    public function getLookupOrderInformation()
    {
        return $this->container['lookup_order_information'];
    }

    /**
     * Sets lookup_order_information
     *
     * @param bool $lookup_order_information lookup_order_information
     *
     * @return $this
     */
    public function setLookupOrderInformation($lookup_order_information)
    {
        $this->container['lookup_order_information'] = $lookup_order_information;

        return $this;
    }

    /**
     * Gets lookup_subscription_information
     *
     * @return bool
     */
    public function getLookupSubscriptionInformation()
    {
        return $this->container['lookup_subscription_information'];
    }

    /**
     * Sets lookup_subscription_information
     *
     * @param bool $lookup_subscription_information lookup_subscription_information
     *
     * @return $this
     */
    public function setLookupSubscriptionInformation($lookup_subscription_information)
    {
        $this->container['lookup_subscription_information'] = $lookup_subscription_information;

        return $this;
    }

    /**
     * Gets open_support_ticket
     *
     * @return bool
     */
    public function getOpenSupportTicket()
    {
        return $this->container['open_support_ticket'];
    }

    /**
     * Sets open_support_ticket
     *
     * @param bool $open_support_ticket open_support_ticket
     *
     * @return $this
     */
    public function setOpenSupportTicket($open_support_ticket)
    {
        $this->container['open_support_ticket'] = $open_support_ticket;

        return $this;
    }

    /**
     * Gets open_support_ticket_channel
     *
     * @return string
     */
    public function getOpenSupportTicketChannel()
    {
        return $this->container['open_support_ticket_channel'];
    }

    /**
     * Sets open_support_ticket_channel
     *
     * @param string $open_support_ticket_channel Channel to use to open the support ticket
     *
     * @return $this
     */
    public function setOpenSupportTicketChannel($open_support_ticket_channel)
    {
        $allowedValues = $this->getOpenSupportTicketChannelAllowableValues();
        if (!is_null($open_support_ticket_channel) && !in_array($open_support_ticket_channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'open_support_ticket_channel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['open_support_ticket_channel'] = $open_support_ticket_channel;

        return $this;
    }

    /**
     * Gets open_support_ticket_channel_email
     *
     * @return string
     */
    public function getOpenSupportTicketChannelEmail()
    {
        return $this->container['open_support_ticket_channel_email'];
    }

    /**
     * Sets open_support_ticket_channel_email
     *
     * @param string $open_support_ticket_channel_email Email to send support ticket to
     *
     * @return $this
     */
    public function setOpenSupportTicketChannelEmail($open_support_ticket_channel_email)
    {
        $this->container['open_support_ticket_channel_email'] = $open_support_ticket_channel_email;

        return $this;
    }

    /**
     * Gets open_support_ticket_zoho_desk_department_id
     *
     * @return string
     */
    public function getOpenSupportTicketZohoDeskDepartmentId()
    {
        return $this->container['open_support_ticket_zoho_desk_department_id'];
    }

    /**
     * Sets open_support_ticket_zoho_desk_department_id
     *
     * @param string $open_support_ticket_zoho_desk_department_id Department ID to open a Zoho Desk ticket for
     *
     * @return $this
     */
    public function setOpenSupportTicketZohoDeskDepartmentId($open_support_ticket_zoho_desk_department_id)
    {
        $this->container['open_support_ticket_zoho_desk_department_id'] = $open_support_ticket_zoho_desk_department_id;

        return $this;
    }

    /**
     * Gets pause_subscription
     *
     * @return bool
     */
    public function getPauseSubscription()
    {
        return $this->container['pause_subscription'];
    }

    /**
     * Sets pause_subscription
     *
     * @param bool $pause_subscription pause_subscription
     *
     * @return $this
     */
    public function setPauseSubscription($pause_subscription)
    {
        $this->container['pause_subscription'] = $pause_subscription;

        return $this;
    }

    /**
     * Gets resume_subscription
     *
     * @return bool
     */
    public function getResumeSubscription()
    {
        return $this->container['resume_subscription'];
    }

    /**
     * Sets resume_subscription
     *
     * @param bool $resume_subscription resume_subscription
     *
     * @return $this
     */
    public function setResumeSubscription($resume_subscription)
    {
        $this->container['resume_subscription'] = $resume_subscription;

        return $this;
    }

    /**
     * Gets transfer_chat_to_live_agent
     *
     * @return bool
     */
    public function getTransferChatToLiveAgent()
    {
        return $this->container['transfer_chat_to_live_agent'];
    }

    /**
     * Sets transfer_chat_to_live_agent
     *
     * @param bool $transfer_chat_to_live_agent transfer_chat_to_live_agent
     *
     * @return $this
     */
    public function setTransferChatToLiveAgent($transfer_chat_to_live_agent)
    {
        $this->container['transfer_chat_to_live_agent'] = $transfer_chat_to_live_agent;

        return $this;
    }

    /**
     * Gets update_subscription_credit_card
     *
     * @return bool
     */
    public function getUpdateSubscriptionCreditCard()
    {
        return $this->container['update_subscription_credit_card'];
    }

    /**
     * Sets update_subscription_credit_card
     *
     * @param bool $update_subscription_credit_card update_subscription_credit_card
     *
     * @return $this
     */
    public function setUpdateSubscriptionCreditCard($update_subscription_credit_card)
    {
        $this->container['update_subscription_credit_card'] = $update_subscription_credit_card;

        return $this;
    }

    /**
     * Gets zoho_desk_available
     *
     * @return bool
     */
    public function getZohoDeskAvailable()
    {
        return $this->container['zoho_desk_available'];
    }

    /**
     * Sets zoho_desk_available
     *
     * @param bool $zoho_desk_available True if Zoho Desk is connected to UltraCart
     *
     * @return $this
     */
    public function setZohoDeskAvailable($zoho_desk_available)
    {
        $this->container['zoho_desk_available'] = $zoho_desk_available;

        return $this;
    }

    /**
     * Gets zoho_desk_departments
     *
     * @return \ultracart\v2\models\ConversationVirtualAgentCapabilityZohoDeskDepartment[]
     */
    public function getZohoDeskDepartments()
    {
        return $this->container['zoho_desk_departments'];
    }

    /**
     * Sets zoho_desk_departments
     *
     * @param \ultracart\v2\models\ConversationVirtualAgentCapabilityZohoDeskDepartment[] $zoho_desk_departments Array of Zoho Desk Department if zoho desk is connected to UltraCart
     *
     * @return $this
     */
    public function setZohoDeskDepartments($zoho_desk_departments)
    {
        $this->container['zoho_desk_departments'] = $zoho_desk_departments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


