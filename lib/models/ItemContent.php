<?php
/**
 * ItemContent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemContent Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemContent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assignments' => '\ultracart\v2\models\ItemContentAssignment[]',
        'attributes' => '\ultracart\v2\models\ItemContentAttribute[]',
        'custom_thank_you_url' => 'string',
        'exclude_from_search' => 'bool',
        'exclude_from_sitemap' => 'bool',
        'exclude_from_top_sellers' => 'bool',
        'extended_description' => 'string',
        'extended_description_translated_text_instance_oid' => 'int',
        'multimedia' => '\ultracart\v2\models\ItemContentMultimedia[]',
        'new_item' => 'bool',
        'new_item_end' => 'string',
        'new_item_start' => 'string',
        'view_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assignments' => null,
        'attributes' => null,
        'custom_thank_you_url' => null,
        'exclude_from_search' => null,
        'exclude_from_sitemap' => null,
        'exclude_from_top_sellers' => null,
        'extended_description' => null,
        'extended_description_translated_text_instance_oid' => 'int32',
        'multimedia' => null,
        'new_item' => null,
        'new_item_end' => 'dateTime',
        'new_item_start' => 'dateTime',
        'view_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignments' => 'assignments',
        'attributes' => 'attributes',
        'custom_thank_you_url' => 'custom_thank_you_url',
        'exclude_from_search' => 'exclude_from_search',
        'exclude_from_sitemap' => 'exclude_from_sitemap',
        'exclude_from_top_sellers' => 'exclude_from_top_sellers',
        'extended_description' => 'extended_description',
        'extended_description_translated_text_instance_oid' => 'extended_description_translated_text_instance_oid',
        'multimedia' => 'multimedia',
        'new_item' => 'new_item',
        'new_item_end' => 'new_item_end',
        'new_item_start' => 'new_item_start',
        'view_url' => 'view_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignments' => 'setAssignments',
        'attributes' => 'setAttributes',
        'custom_thank_you_url' => 'setCustomThankYouUrl',
        'exclude_from_search' => 'setExcludeFromSearch',
        'exclude_from_sitemap' => 'setExcludeFromSitemap',
        'exclude_from_top_sellers' => 'setExcludeFromTopSellers',
        'extended_description' => 'setExtendedDescription',
        'extended_description_translated_text_instance_oid' => 'setExtendedDescriptionTranslatedTextInstanceOid',
        'multimedia' => 'setMultimedia',
        'new_item' => 'setNewItem',
        'new_item_end' => 'setNewItemEnd',
        'new_item_start' => 'setNewItemStart',
        'view_url' => 'setViewUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignments' => 'getAssignments',
        'attributes' => 'getAttributes',
        'custom_thank_you_url' => 'getCustomThankYouUrl',
        'exclude_from_search' => 'getExcludeFromSearch',
        'exclude_from_sitemap' => 'getExcludeFromSitemap',
        'exclude_from_top_sellers' => 'getExcludeFromTopSellers',
        'extended_description' => 'getExtendedDescription',
        'extended_description_translated_text_instance_oid' => 'getExtendedDescriptionTranslatedTextInstanceOid',
        'multimedia' => 'getMultimedia',
        'new_item' => 'getNewItem',
        'new_item_end' => 'getNewItemEnd',
        'new_item_start' => 'getNewItemStart',
        'view_url' => 'getViewUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assignments'] = $data['assignments'] ?? null;
        $this->container['attributes'] = $data['attributes'] ?? null;
        $this->container['custom_thank_you_url'] = $data['custom_thank_you_url'] ?? null;
        $this->container['exclude_from_search'] = $data['exclude_from_search'] ?? null;
        $this->container['exclude_from_sitemap'] = $data['exclude_from_sitemap'] ?? null;
        $this->container['exclude_from_top_sellers'] = $data['exclude_from_top_sellers'] ?? null;
        $this->container['extended_description'] = $data['extended_description'] ?? null;
        $this->container['extended_description_translated_text_instance_oid'] = $data['extended_description_translated_text_instance_oid'] ?? null;
        $this->container['multimedia'] = $data['multimedia'] ?? null;
        $this->container['new_item'] = $data['new_item'] ?? null;
        $this->container['new_item_end'] = $data['new_item_end'] ?? null;
        $this->container['new_item_start'] = $data['new_item_start'] ?? null;
        $this->container['view_url'] = $data['view_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['extended_description']) && (mb_strlen($this->container['extended_description']) > 10000)) {
            $invalidProperties[] = "invalid value for 'extended_description', the character length must be smaller than or equal to 10000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignments
     *
     * @return \ultracart\v2\models\ItemContentAssignment[]|null
     */
    public function getAssignments()
    {
        return $this->container['assignments'];
    }

    /**
     * Sets assignments
     *
     * @param \ultracart\v2\models\ItemContentAssignment[]|null $assignments StoreFront assignments
     *
     * @return self
     */
    public function setAssignments($assignments)
    {
        $this->container['assignments'] = $assignments;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \ultracart\v2\models\ItemContentAttribute[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \ultracart\v2\models\ItemContentAttribute[]|null $attributes StoreFront attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets custom_thank_you_url
     *
     * @return string|null
     */
    public function getCustomThankYouUrl()
    {
        return $this->container['custom_thank_you_url'];
    }

    /**
     * Sets custom_thank_you_url
     *
     * @param string|null $custom_thank_you_url Custom Thank You URL
     *
     * @return self
     */
    public function setCustomThankYouUrl($custom_thank_you_url)
    {
        $this->container['custom_thank_you_url'] = $custom_thank_you_url;

        return $this;
    }

    /**
     * Gets exclude_from_search
     *
     * @return bool|null
     */
    public function getExcludeFromSearch()
    {
        return $this->container['exclude_from_search'];
    }

    /**
     * Sets exclude_from_search
     *
     * @param bool|null $exclude_from_search Exclude from search
     *
     * @return self
     */
    public function setExcludeFromSearch($exclude_from_search)
    {
        $this->container['exclude_from_search'] = $exclude_from_search;

        return $this;
    }

    /**
     * Gets exclude_from_sitemap
     *
     * @return bool|null
     */
    public function getExcludeFromSitemap()
    {
        return $this->container['exclude_from_sitemap'];
    }

    /**
     * Sets exclude_from_sitemap
     *
     * @param bool|null $exclude_from_sitemap Exclude from the sitemap for the StoreFront
     *
     * @return self
     */
    public function setExcludeFromSitemap($exclude_from_sitemap)
    {
        $this->container['exclude_from_sitemap'] = $exclude_from_sitemap;

        return $this;
    }

    /**
     * Gets exclude_from_top_sellers
     *
     * @return bool|null
     */
    public function getExcludeFromTopSellers()
    {
        return $this->container['exclude_from_top_sellers'];
    }

    /**
     * Sets exclude_from_top_sellers
     *
     * @param bool|null $exclude_from_top_sellers Exclude from the top sellers list in the StoreFront
     *
     * @return self
     */
    public function setExcludeFromTopSellers($exclude_from_top_sellers)
    {
        $this->container['exclude_from_top_sellers'] = $exclude_from_top_sellers;

        return $this;
    }

    /**
     * Gets extended_description
     *
     * @return string|null
     */
    public function getExtendedDescription()
    {
        return $this->container['extended_description'];
    }

    /**
     * Sets extended_description
     *
     * @param string|null $extended_description Extended description (max 10000 characters)
     *
     * @return self
     */
    public function setExtendedDescription($extended_description)
    {
        if (!is_null($extended_description) && (mb_strlen($extended_description) > 10000)) {
            throw new \InvalidArgumentException('invalid length for $extended_description when calling ItemContent., must be smaller than or equal to 10000.');
        }

        $this->container['extended_description'] = $extended_description;

        return $this;
    }

    /**
     * Gets extended_description_translated_text_instance_oid
     *
     * @return int|null
     */
    public function getExtendedDescriptionTranslatedTextInstanceOid()
    {
        return $this->container['extended_description_translated_text_instance_oid'];
    }

    /**
     * Sets extended_description_translated_text_instance_oid
     *
     * @param int|null $extended_description_translated_text_instance_oid Extneded description text translation instance identifier
     *
     * @return self
     */
    public function setExtendedDescriptionTranslatedTextInstanceOid($extended_description_translated_text_instance_oid)
    {
        $this->container['extended_description_translated_text_instance_oid'] = $extended_description_translated_text_instance_oid;

        return $this;
    }

    /**
     * Gets multimedia
     *
     * @return \ultracart\v2\models\ItemContentMultimedia[]|null
     */
    public function getMultimedia()
    {
        return $this->container['multimedia'];
    }

    /**
     * Sets multimedia
     *
     * @param \ultracart\v2\models\ItemContentMultimedia[]|null $multimedia Multimedia
     *
     * @return self
     */
    public function setMultimedia($multimedia)
    {
        $this->container['multimedia'] = $multimedia;

        return $this;
    }

    /**
     * Gets new_item
     *
     * @return bool|null
     */
    public function getNewItem()
    {
        return $this->container['new_item'];
    }

    /**
     * Sets new_item
     *
     * @param bool|null $new_item True if the item is new
     *
     * @return self
     */
    public function setNewItem($new_item)
    {
        $this->container['new_item'] = $new_item;

        return $this;
    }

    /**
     * Gets new_item_end
     *
     * @return string|null
     */
    public function getNewItemEnd()
    {
        return $this->container['new_item_end'];
    }

    /**
     * Sets new_item_end
     *
     * @param string|null $new_item_end The date the item should no longer be considered new
     *
     * @return self
     */
    public function setNewItemEnd($new_item_end)
    {
        $this->container['new_item_end'] = $new_item_end;

        return $this;
    }

    /**
     * Gets new_item_start
     *
     * @return string|null
     */
    public function getNewItemStart()
    {
        return $this->container['new_item_start'];
    }

    /**
     * Sets new_item_start
     *
     * @param string|null $new_item_start The date the item should start being considered new
     *
     * @return self
     */
    public function setNewItemStart($new_item_start)
    {
        $this->container['new_item_start'] = $new_item_start;

        return $this;
    }

    /**
     * Gets view_url
     *
     * @return string|null
     */
    public function getViewUrl()
    {
        return $this->container['view_url'];
    }

    /**
     * Sets view_url
     *
     * @param string|null $view_url Legacy view URL (not used by StoreFronts)
     *
     * @return self
     */
    public function setViewUrl($view_url)
    {
        $this->container['view_url'] = $view_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


