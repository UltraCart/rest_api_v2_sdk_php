<?php
/**
 * Notification
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * Notification Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Notification implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Notification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can_filter_by_distribution_centers' => 'bool',
        'can_include_affiliate' => 'bool',
        'can_include_order' => 'bool',
        'can_include_order_plain_text' => 'bool',
        'distribution_center_filters' => 'string[]',
        'include_affiliate' => 'bool',
        'include_order' => 'bool',
        'include_order_plain_text' => 'bool',
        'name' => 'string',
        'notification_group' => 'string',
        'selected' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can_filter_by_distribution_centers' => null,
        'can_include_affiliate' => null,
        'can_include_order' => null,
        'can_include_order_plain_text' => null,
        'distribution_center_filters' => null,
        'include_affiliate' => null,
        'include_order' => null,
        'include_order_plain_text' => null,
        'name' => null,
        'notification_group' => null,
        'selected' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_filter_by_distribution_centers' => 'can_filter_by_distribution_centers',
        'can_include_affiliate' => 'can_include_affiliate',
        'can_include_order' => 'can_include_order',
        'can_include_order_plain_text' => 'can_include_order_plain_text',
        'distribution_center_filters' => 'distribution_center_filters',
        'include_affiliate' => 'include_affiliate',
        'include_order' => 'include_order',
        'include_order_plain_text' => 'include_order_plain_text',
        'name' => 'name',
        'notification_group' => 'notification_group',
        'selected' => 'selected'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_filter_by_distribution_centers' => 'setCanFilterByDistributionCenters',
        'can_include_affiliate' => 'setCanIncludeAffiliate',
        'can_include_order' => 'setCanIncludeOrder',
        'can_include_order_plain_text' => 'setCanIncludeOrderPlainText',
        'distribution_center_filters' => 'setDistributionCenterFilters',
        'include_affiliate' => 'setIncludeAffiliate',
        'include_order' => 'setIncludeOrder',
        'include_order_plain_text' => 'setIncludeOrderPlainText',
        'name' => 'setName',
        'notification_group' => 'setNotificationGroup',
        'selected' => 'setSelected'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_filter_by_distribution_centers' => 'getCanFilterByDistributionCenters',
        'can_include_affiliate' => 'getCanIncludeAffiliate',
        'can_include_order' => 'getCanIncludeOrder',
        'can_include_order_plain_text' => 'getCanIncludeOrderPlainText',
        'distribution_center_filters' => 'getDistributionCenterFilters',
        'include_affiliate' => 'getIncludeAffiliate',
        'include_order' => 'getIncludeOrder',
        'include_order_plain_text' => 'getIncludeOrderPlainText',
        'name' => 'getName',
        'notification_group' => 'getNotificationGroup',
        'selected' => 'getSelected'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_filter_by_distribution_centers'] = $data['can_filter_by_distribution_centers'] ?? null;
        $this->container['can_include_affiliate'] = $data['can_include_affiliate'] ?? null;
        $this->container['can_include_order'] = $data['can_include_order'] ?? null;
        $this->container['can_include_order_plain_text'] = $data['can_include_order_plain_text'] ?? null;
        $this->container['distribution_center_filters'] = $data['distribution_center_filters'] ?? null;
        $this->container['include_affiliate'] = $data['include_affiliate'] ?? null;
        $this->container['include_order'] = $data['include_order'] ?? null;
        $this->container['include_order_plain_text'] = $data['include_order_plain_text'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['notification_group'] = $data['notification_group'] ?? null;
        $this->container['selected'] = $data['selected'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_filter_by_distribution_centers
     *
     * @return bool|null
     */
    public function getCanFilterByDistributionCenters()
    {
        return $this->container['can_filter_by_distribution_centers'];
    }

    /**
     * Sets can_filter_by_distribution_centers
     *
     * @param bool|null $can_filter_by_distribution_centers True if this notification can be filtered to only send for one or more distribution centers.
     *
     * @return self
     */
    public function setCanFilterByDistributionCenters($can_filter_by_distribution_centers)
    {
        $this->container['can_filter_by_distribution_centers'] = $can_filter_by_distribution_centers;

        return $this;
    }

    /**
     * Gets can_include_affiliate
     *
     * @return bool|null
     */
    public function getCanIncludeAffiliate()
    {
        return $this->container['can_include_affiliate'];
    }

    /**
     * Sets can_include_affiliate
     *
     * @param bool|null $can_include_affiliate True if this notification can include an affiliate information.
     *
     * @return self
     */
    public function setCanIncludeAffiliate($can_include_affiliate)
    {
        $this->container['can_include_affiliate'] = $can_include_affiliate;

        return $this;
    }

    /**
     * Gets can_include_order
     *
     * @return bool|null
     */
    public function getCanIncludeOrder()
    {
        return $this->container['can_include_order'];
    }

    /**
     * Sets can_include_order
     *
     * @param bool|null $can_include_order True if this notification can include an order attachment.
     *
     * @return self
     */
    public function setCanIncludeOrder($can_include_order)
    {
        $this->container['can_include_order'] = $can_include_order;

        return $this;
    }

    /**
     * Gets can_include_order_plain_text
     *
     * @return bool|null
     */
    public function getCanIncludeOrderPlainText()
    {
        return $this->container['can_include_order_plain_text'];
    }

    /**
     * Sets can_include_order_plain_text
     *
     * @param bool|null $can_include_order_plain_text True if this notification can include a plain text rendering of an order directly within an email.  Some desire this over an attachment
     *
     * @return self
     */
    public function setCanIncludeOrderPlainText($can_include_order_plain_text)
    {
        $this->container['can_include_order_plain_text'] = $can_include_order_plain_text;

        return $this;
    }

    /**
     * Gets distribution_center_filters
     *
     * @return string[]|null
     */
    public function getDistributionCenterFilters()
    {
        return $this->container['distribution_center_filters'];
    }

    /**
     * Sets distribution_center_filters
     *
     * @param string[]|null $distribution_center_filters If this notification supports it, this list of distribution center CODES will filter the notification to just those distribution centers.
     *
     * @return self
     */
    public function setDistributionCenterFilters($distribution_center_filters)
    {
        $this->container['distribution_center_filters'] = $distribution_center_filters;

        return $this;
    }

    /**
     * Gets include_affiliate
     *
     * @return bool|null
     */
    public function getIncludeAffiliate()
    {
        return $this->container['include_affiliate'];
    }

    /**
     * Sets include_affiliate
     *
     * @param bool|null $include_affiliate If true, and this notification supports it, affiliate information will be attached to all notifications of this type
     *
     * @return self
     */
    public function setIncludeAffiliate($include_affiliate)
    {
        $this->container['include_affiliate'] = $include_affiliate;

        return $this;
    }

    /**
     * Gets include_order
     *
     * @return bool|null
     */
    public function getIncludeOrder()
    {
        return $this->container['include_order'];
    }

    /**
     * Sets include_order
     *
     * @param bool|null $include_order If true, and this notification supports it, the order will be attached to all notifications of this type
     *
     * @return self
     */
    public function setIncludeOrder($include_order)
    {
        $this->container['include_order'] = $include_order;

        return $this;
    }

    /**
     * Gets include_order_plain_text
     *
     * @return bool|null
     */
    public function getIncludeOrderPlainText()
    {
        return $this->container['include_order_plain_text'];
    }

    /**
     * Sets include_order_plain_text
     *
     * @param bool|null $include_order_plain_text If true, and this notification supports it, a plain text order will be directly inserted into all notifications of this type
     *
     * @return self
     */
    public function setIncludeOrderPlainText($include_order_plain_text)
    {
        $this->container['include_order_plain_text'] = $include_order_plain_text;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of this notification.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notification_group
     *
     * @return string|null
     */
    public function getNotificationGroup()
    {
        return $this->container['notification_group'];
    }

    /**
     * Sets notification_group
     *
     * @param string|null $notification_group A group for this notification.  This name is only used for visual grouping within interfaces.
     *
     * @return self
     */
    public function setNotificationGroup($notification_group)
    {
        $this->container['notification_group'] = $notification_group;

        return $this;
    }

    /**
     * Gets selected
     *
     * @return bool|null
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * Sets selected
     *
     * @param bool|null $selected True if this user wishes to receive this email notification.
     *
     * @return self
     */
    public function setSelected($selected)
    {
        $this->container['selected'] = $selected;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


