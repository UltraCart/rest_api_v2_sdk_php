<?php
/**
 * PaymentsConfigurationCheck
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsConfigurationCheck Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsConfigurationCheck implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsConfigurationCheck';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accept_check_orders' => 'bool',
        'accept_e_check' => 'bool',
        'accept_money_orders' => 'bool',
        'check_accounting_code' => 'string',
        'check_deposit_to_account' => 'string',
        'checks_payable_to' => 'string',
        'e_check_accounting_code' => 'string',
        'e_check_deposit_to_account' => 'string',
        'mail_to_address1' => 'string',
        'mail_to_address2' => 'string',
        'mail_to_city' => 'string',
        'mail_to_country' => 'string',
        'mail_to_name' => 'string',
        'mail_to_state' => 'string',
        'mail_to_zip' => 'string',
        'money_order_accounting_code' => 'string',
        'money_order_deposit_to_account' => 'string',
        'restrictions' => '\ultracart\v2\models\PaymentsConfigurationRestrictions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accept_check_orders' => null,
        'accept_e_check' => null,
        'accept_money_orders' => null,
        'check_accounting_code' => null,
        'check_deposit_to_account' => null,
        'checks_payable_to' => null,
        'e_check_accounting_code' => null,
        'e_check_deposit_to_account' => null,
        'mail_to_address1' => null,
        'mail_to_address2' => null,
        'mail_to_city' => null,
        'mail_to_country' => null,
        'mail_to_name' => null,
        'mail_to_state' => null,
        'mail_to_zip' => null,
        'money_order_accounting_code' => null,
        'money_order_deposit_to_account' => null,
        'restrictions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accept_check_orders' => 'acceptCheckOrders',
        'accept_e_check' => 'acceptECheck',
        'accept_money_orders' => 'acceptMoneyOrders',
        'check_accounting_code' => 'checkAccountingCode',
        'check_deposit_to_account' => 'checkDepositToAccount',
        'checks_payable_to' => 'checksPayableTo',
        'e_check_accounting_code' => 'eCheckAccountingCode',
        'e_check_deposit_to_account' => 'eCheckDepositToAccount',
        'mail_to_address1' => 'mailToAddress1',
        'mail_to_address2' => 'mailToAddress2',
        'mail_to_city' => 'mailToCity',
        'mail_to_country' => 'mailToCountry',
        'mail_to_name' => 'mailToName',
        'mail_to_state' => 'mailToState',
        'mail_to_zip' => 'mailToZip',
        'money_order_accounting_code' => 'moneyOrderAccountingCode',
        'money_order_deposit_to_account' => 'moneyOrderDepositToAccount',
        'restrictions' => 'restrictions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accept_check_orders' => 'setAcceptCheckOrders',
        'accept_e_check' => 'setAcceptECheck',
        'accept_money_orders' => 'setAcceptMoneyOrders',
        'check_accounting_code' => 'setCheckAccountingCode',
        'check_deposit_to_account' => 'setCheckDepositToAccount',
        'checks_payable_to' => 'setChecksPayableTo',
        'e_check_accounting_code' => 'setECheckAccountingCode',
        'e_check_deposit_to_account' => 'setECheckDepositToAccount',
        'mail_to_address1' => 'setMailToAddress1',
        'mail_to_address2' => 'setMailToAddress2',
        'mail_to_city' => 'setMailToCity',
        'mail_to_country' => 'setMailToCountry',
        'mail_to_name' => 'setMailToName',
        'mail_to_state' => 'setMailToState',
        'mail_to_zip' => 'setMailToZip',
        'money_order_accounting_code' => 'setMoneyOrderAccountingCode',
        'money_order_deposit_to_account' => 'setMoneyOrderDepositToAccount',
        'restrictions' => 'setRestrictions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accept_check_orders' => 'getAcceptCheckOrders',
        'accept_e_check' => 'getAcceptECheck',
        'accept_money_orders' => 'getAcceptMoneyOrders',
        'check_accounting_code' => 'getCheckAccountingCode',
        'check_deposit_to_account' => 'getCheckDepositToAccount',
        'checks_payable_to' => 'getChecksPayableTo',
        'e_check_accounting_code' => 'getECheckAccountingCode',
        'e_check_deposit_to_account' => 'getECheckDepositToAccount',
        'mail_to_address1' => 'getMailToAddress1',
        'mail_to_address2' => 'getMailToAddress2',
        'mail_to_city' => 'getMailToCity',
        'mail_to_country' => 'getMailToCountry',
        'mail_to_name' => 'getMailToName',
        'mail_to_state' => 'getMailToState',
        'mail_to_zip' => 'getMailToZip',
        'money_order_accounting_code' => 'getMoneyOrderAccountingCode',
        'money_order_deposit_to_account' => 'getMoneyOrderDepositToAccount',
        'restrictions' => 'getRestrictions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accept_check_orders'] = isset($data['accept_check_orders']) ? $data['accept_check_orders'] : null;
        $this->container['accept_e_check'] = isset($data['accept_e_check']) ? $data['accept_e_check'] : null;
        $this->container['accept_money_orders'] = isset($data['accept_money_orders']) ? $data['accept_money_orders'] : null;
        $this->container['check_accounting_code'] = isset($data['check_accounting_code']) ? $data['check_accounting_code'] : null;
        $this->container['check_deposit_to_account'] = isset($data['check_deposit_to_account']) ? $data['check_deposit_to_account'] : null;
        $this->container['checks_payable_to'] = isset($data['checks_payable_to']) ? $data['checks_payable_to'] : null;
        $this->container['e_check_accounting_code'] = isset($data['e_check_accounting_code']) ? $data['e_check_accounting_code'] : null;
        $this->container['e_check_deposit_to_account'] = isset($data['e_check_deposit_to_account']) ? $data['e_check_deposit_to_account'] : null;
        $this->container['mail_to_address1'] = isset($data['mail_to_address1']) ? $data['mail_to_address1'] : null;
        $this->container['mail_to_address2'] = isset($data['mail_to_address2']) ? $data['mail_to_address2'] : null;
        $this->container['mail_to_city'] = isset($data['mail_to_city']) ? $data['mail_to_city'] : null;
        $this->container['mail_to_country'] = isset($data['mail_to_country']) ? $data['mail_to_country'] : null;
        $this->container['mail_to_name'] = isset($data['mail_to_name']) ? $data['mail_to_name'] : null;
        $this->container['mail_to_state'] = isset($data['mail_to_state']) ? $data['mail_to_state'] : null;
        $this->container['mail_to_zip'] = isset($data['mail_to_zip']) ? $data['mail_to_zip'] : null;
        $this->container['money_order_accounting_code'] = isset($data['money_order_accounting_code']) ? $data['money_order_accounting_code'] : null;
        $this->container['money_order_deposit_to_account'] = isset($data['money_order_deposit_to_account']) ? $data['money_order_deposit_to_account'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accept_check_orders
     *
     * @return bool
     */
    public function getAcceptCheckOrders()
    {
        return $this->container['accept_check_orders'];
    }

    /**
     * Sets accept_check_orders
     *
     * @param bool $accept_check_orders accept_check_orders
     *
     * @return $this
     */
    public function setAcceptCheckOrders($accept_check_orders)
    {
        $this->container['accept_check_orders'] = $accept_check_orders;

        return $this;
    }

    /**
     * Gets accept_e_check
     *
     * @return bool
     */
    public function getAcceptECheck()
    {
        return $this->container['accept_e_check'];
    }

    /**
     * Sets accept_e_check
     *
     * @param bool $accept_e_check accept_e_check
     *
     * @return $this
     */
    public function setAcceptECheck($accept_e_check)
    {
        $this->container['accept_e_check'] = $accept_e_check;

        return $this;
    }

    /**
     * Gets accept_money_orders
     *
     * @return bool
     */
    public function getAcceptMoneyOrders()
    {
        return $this->container['accept_money_orders'];
    }

    /**
     * Sets accept_money_orders
     *
     * @param bool $accept_money_orders accept_money_orders
     *
     * @return $this
     */
    public function setAcceptMoneyOrders($accept_money_orders)
    {
        $this->container['accept_money_orders'] = $accept_money_orders;

        return $this;
    }

    /**
     * Gets check_accounting_code
     *
     * @return string
     */
    public function getCheckAccountingCode()
    {
        return $this->container['check_accounting_code'];
    }

    /**
     * Sets check_accounting_code
     *
     * @param string $check_accounting_code check_accounting_code
     *
     * @return $this
     */
    public function setCheckAccountingCode($check_accounting_code)
    {
        $this->container['check_accounting_code'] = $check_accounting_code;

        return $this;
    }

    /**
     * Gets check_deposit_to_account
     *
     * @return string
     */
    public function getCheckDepositToAccount()
    {
        return $this->container['check_deposit_to_account'];
    }

    /**
     * Sets check_deposit_to_account
     *
     * @param string $check_deposit_to_account check_deposit_to_account
     *
     * @return $this
     */
    public function setCheckDepositToAccount($check_deposit_to_account)
    {
        $this->container['check_deposit_to_account'] = $check_deposit_to_account;

        return $this;
    }

    /**
     * Gets checks_payable_to
     *
     * @return string
     */
    public function getChecksPayableTo()
    {
        return $this->container['checks_payable_to'];
    }

    /**
     * Sets checks_payable_to
     *
     * @param string $checks_payable_to checks_payable_to
     *
     * @return $this
     */
    public function setChecksPayableTo($checks_payable_to)
    {
        $this->container['checks_payable_to'] = $checks_payable_to;

        return $this;
    }

    /**
     * Gets e_check_accounting_code
     *
     * @return string
     */
    public function getECheckAccountingCode()
    {
        return $this->container['e_check_accounting_code'];
    }

    /**
     * Sets e_check_accounting_code
     *
     * @param string $e_check_accounting_code e_check_accounting_code
     *
     * @return $this
     */
    public function setECheckAccountingCode($e_check_accounting_code)
    {
        $this->container['e_check_accounting_code'] = $e_check_accounting_code;

        return $this;
    }

    /**
     * Gets e_check_deposit_to_account
     *
     * @return string
     */
    public function getECheckDepositToAccount()
    {
        return $this->container['e_check_deposit_to_account'];
    }

    /**
     * Sets e_check_deposit_to_account
     *
     * @param string $e_check_deposit_to_account e_check_deposit_to_account
     *
     * @return $this
     */
    public function setECheckDepositToAccount($e_check_deposit_to_account)
    {
        $this->container['e_check_deposit_to_account'] = $e_check_deposit_to_account;

        return $this;
    }

    /**
     * Gets mail_to_address1
     *
     * @return string
     */
    public function getMailToAddress1()
    {
        return $this->container['mail_to_address1'];
    }

    /**
     * Sets mail_to_address1
     *
     * @param string $mail_to_address1 mail_to_address1
     *
     * @return $this
     */
    public function setMailToAddress1($mail_to_address1)
    {
        $this->container['mail_to_address1'] = $mail_to_address1;

        return $this;
    }

    /**
     * Gets mail_to_address2
     *
     * @return string
     */
    public function getMailToAddress2()
    {
        return $this->container['mail_to_address2'];
    }

    /**
     * Sets mail_to_address2
     *
     * @param string $mail_to_address2 mail_to_address2
     *
     * @return $this
     */
    public function setMailToAddress2($mail_to_address2)
    {
        $this->container['mail_to_address2'] = $mail_to_address2;

        return $this;
    }

    /**
     * Gets mail_to_city
     *
     * @return string
     */
    public function getMailToCity()
    {
        return $this->container['mail_to_city'];
    }

    /**
     * Sets mail_to_city
     *
     * @param string $mail_to_city mail_to_city
     *
     * @return $this
     */
    public function setMailToCity($mail_to_city)
    {
        $this->container['mail_to_city'] = $mail_to_city;

        return $this;
    }

    /**
     * Gets mail_to_country
     *
     * @return string
     */
    public function getMailToCountry()
    {
        return $this->container['mail_to_country'];
    }

    /**
     * Sets mail_to_country
     *
     * @param string $mail_to_country mail_to_country
     *
     * @return $this
     */
    public function setMailToCountry($mail_to_country)
    {
        $this->container['mail_to_country'] = $mail_to_country;

        return $this;
    }

    /**
     * Gets mail_to_name
     *
     * @return string
     */
    public function getMailToName()
    {
        return $this->container['mail_to_name'];
    }

    /**
     * Sets mail_to_name
     *
     * @param string $mail_to_name mail_to_name
     *
     * @return $this
     */
    public function setMailToName($mail_to_name)
    {
        $this->container['mail_to_name'] = $mail_to_name;

        return $this;
    }

    /**
     * Gets mail_to_state
     *
     * @return string
     */
    public function getMailToState()
    {
        return $this->container['mail_to_state'];
    }

    /**
     * Sets mail_to_state
     *
     * @param string $mail_to_state mail_to_state
     *
     * @return $this
     */
    public function setMailToState($mail_to_state)
    {
        $this->container['mail_to_state'] = $mail_to_state;

        return $this;
    }

    /**
     * Gets mail_to_zip
     *
     * @return string
     */
    public function getMailToZip()
    {
        return $this->container['mail_to_zip'];
    }

    /**
     * Sets mail_to_zip
     *
     * @param string $mail_to_zip mail_to_zip
     *
     * @return $this
     */
    public function setMailToZip($mail_to_zip)
    {
        $this->container['mail_to_zip'] = $mail_to_zip;

        return $this;
    }

    /**
     * Gets money_order_accounting_code
     *
     * @return string
     */
    public function getMoneyOrderAccountingCode()
    {
        return $this->container['money_order_accounting_code'];
    }

    /**
     * Sets money_order_accounting_code
     *
     * @param string $money_order_accounting_code money_order_accounting_code
     *
     * @return $this
     */
    public function setMoneyOrderAccountingCode($money_order_accounting_code)
    {
        $this->container['money_order_accounting_code'] = $money_order_accounting_code;

        return $this;
    }

    /**
     * Gets money_order_deposit_to_account
     *
     * @return string
     */
    public function getMoneyOrderDepositToAccount()
    {
        return $this->container['money_order_deposit_to_account'];
    }

    /**
     * Sets money_order_deposit_to_account
     *
     * @param string $money_order_deposit_to_account money_order_deposit_to_account
     *
     * @return $this
     */
    public function setMoneyOrderDepositToAccount($money_order_deposit_to_account)
    {
        $this->container['money_order_deposit_to_account'] = $money_order_deposit_to_account;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \ultracart\v2\models\PaymentsConfigurationRestrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \ultracart\v2\models\PaymentsConfigurationRestrictions $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


