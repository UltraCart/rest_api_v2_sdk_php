<?php
/**
 * ReportDataSetQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ReportDataSetQuery Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportDataSetQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportDataSetQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comparison_results' => 'bool',
        'data_set_query_uuid' => 'string',
        'data_source' => '\ultracart\v2\models\ReportDataSource',
        'dimensions' => '\ultracart\v2\models\ReportPageVisualizationDimension[]',
        'filter' => '\ultracart\v2\models\ReportFilter',
        'for_object_id' => 'string',
        'for_object_type' => 'string',
        'metrics' => '\ultracart\v2\models\ReportPageVisualizationMetric[]',
        'page_size' => 'int',
        'selected_filters' => '\ultracart\v2\models\ReportFilter[]',
        'skip_cache' => 'bool',
        'user_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comparison_results' => null,
        'data_set_query_uuid' => null,
        'data_source' => null,
        'dimensions' => null,
        'filter' => null,
        'for_object_id' => null,
        'for_object_type' => null,
        'metrics' => null,
        'page_size' => 'int32',
        'selected_filters' => null,
        'skip_cache' => null,
        'user_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comparison_results' => 'comparison_results',
        'data_set_query_uuid' => 'data_set_query_uuid',
        'data_source' => 'data_source',
        'dimensions' => 'dimensions',
        'filter' => 'filter',
        'for_object_id' => 'for_object_id',
        'for_object_type' => 'for_object_type',
        'metrics' => 'metrics',
        'page_size' => 'page_size',
        'selected_filters' => 'selected_filters',
        'skip_cache' => 'skip_cache',
        'user_data' => 'user_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comparison_results' => 'setComparisonResults',
        'data_set_query_uuid' => 'setDataSetQueryUuid',
        'data_source' => 'setDataSource',
        'dimensions' => 'setDimensions',
        'filter' => 'setFilter',
        'for_object_id' => 'setForObjectId',
        'for_object_type' => 'setForObjectType',
        'metrics' => 'setMetrics',
        'page_size' => 'setPageSize',
        'selected_filters' => 'setSelectedFilters',
        'skip_cache' => 'setSkipCache',
        'user_data' => 'setUserData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comparison_results' => 'getComparisonResults',
        'data_set_query_uuid' => 'getDataSetQueryUuid',
        'data_source' => 'getDataSource',
        'dimensions' => 'getDimensions',
        'filter' => 'getFilter',
        'for_object_id' => 'getForObjectId',
        'for_object_type' => 'getForObjectType',
        'metrics' => 'getMetrics',
        'page_size' => 'getPageSize',
        'selected_filters' => 'getSelectedFilters',
        'skip_cache' => 'getSkipCache',
        'user_data' => 'getUserData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FOR_OBJECT_TYPE_SCHEMA = 'schema';
    const FOR_OBJECT_TYPE_FILTER = 'filter';
    const FOR_OBJECT_TYPE_VISUALIZATION = 'visualization';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getForObjectTypeAllowableValues()
    {
        return [
            self::FOR_OBJECT_TYPE_SCHEMA,
            self::FOR_OBJECT_TYPE_FILTER,
            self::FOR_OBJECT_TYPE_VISUALIZATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comparison_results'] = isset($data['comparison_results']) ? $data['comparison_results'] : null;
        $this->container['data_set_query_uuid'] = isset($data['data_set_query_uuid']) ? $data['data_set_query_uuid'] : null;
        $this->container['data_source'] = isset($data['data_source']) ? $data['data_source'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['for_object_id'] = isset($data['for_object_id']) ? $data['for_object_id'] : null;
        $this->container['for_object_type'] = isset($data['for_object_type']) ? $data['for_object_type'] : null;
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['selected_filters'] = isset($data['selected_filters']) ? $data['selected_filters'] : null;
        $this->container['skip_cache'] = isset($data['skip_cache']) ? $data['skip_cache'] : null;
        $this->container['user_data'] = isset($data['user_data']) ? $data['user_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getForObjectTypeAllowableValues();
        if (!is_null($this->container['for_object_type']) && !in_array($this->container['for_object_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'for_object_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comparison_results
     *
     * @return bool
     */
    public function getComparisonResults()
    {
        return $this->container['comparison_results'];
    }

    /**
     * Sets comparison_results
     *
     * @param bool $comparison_results True if a date range filter is provided with comparison date ranges and two results should be returned for the query.
     *
     * @return $this
     */
    public function setComparisonResults($comparison_results)
    {
        $this->container['comparison_results'] = $comparison_results;

        return $this;
    }

    /**
     * Gets data_set_query_uuid
     *
     * @return string
     */
    public function getDataSetQueryUuid()
    {
        return $this->container['data_set_query_uuid'];
    }

    /**
     * Sets data_set_query_uuid
     *
     * @param string $data_set_query_uuid A unique identifier assigned to the data set query that is returned.
     *
     * @return $this
     */
    public function setDataSetQueryUuid($data_set_query_uuid)
    {
        $this->container['data_set_query_uuid'] = $data_set_query_uuid;

        return $this;
    }

    /**
     * Gets data_source
     *
     * @return \ultracart\v2\models\ReportDataSource
     */
    public function getDataSource()
    {
        return $this->container['data_source'];
    }

    /**
     * Sets data_source
     *
     * @param \ultracart\v2\models\ReportDataSource $data_source data_source
     *
     * @return $this
     */
    public function setDataSource($data_source)
    {
        $this->container['data_source'] = $data_source;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \ultracart\v2\models\ReportPageVisualizationDimension[]
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \ultracart\v2\models\ReportPageVisualizationDimension[] $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return \ultracart\v2\models\ReportFilter
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param \ultracart\v2\models\ReportFilter $filter filter
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets for_object_id
     *
     * @return string
     */
    public function getForObjectId()
    {
        return $this->container['for_object_id'];
    }

    /**
     * Sets for_object_id
     *
     * @param string $for_object_id An identifier that can be used to help match up the returned data set
     *
     * @return $this
     */
    public function setForObjectId($for_object_id)
    {
        $this->container['for_object_id'] = $for_object_id;

        return $this;
    }

    /**
     * Gets for_object_type
     *
     * @return string
     */
    public function getForObjectType()
    {
        return $this->container['for_object_type'];
    }

    /**
     * Sets for_object_type
     *
     * @param string $for_object_type The type of object this data set is for
     *
     * @return $this
     */
    public function setForObjectType($for_object_type)
    {
        $allowedValues = $this->getForObjectTypeAllowableValues();
        if (!is_null($for_object_type) && !in_array($for_object_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'for_object_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['for_object_type'] = $for_object_type;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \ultracart\v2\models\ReportPageVisualizationMetric[]
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \ultracart\v2\models\ReportPageVisualizationMetric[] $metrics metrics
     *
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size Result set page size.  The default value is 200 records.  Max is 10000.
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets selected_filters
     *
     * @return \ultracart\v2\models\ReportFilter[]
     */
    public function getSelectedFilters()
    {
        return $this->container['selected_filters'];
    }

    /**
     * Sets selected_filters
     *
     * @param \ultracart\v2\models\ReportFilter[] $selected_filters selected_filters
     *
     * @return $this
     */
    public function setSelectedFilters($selected_filters)
    {
        $this->container['selected_filters'] = $selected_filters;

        return $this;
    }

    /**
     * Gets skip_cache
     *
     * @return bool
     */
    public function getSkipCache()
    {
        return $this->container['skip_cache'];
    }

    /**
     * Sets skip_cache
     *
     * @param bool $skip_cache True if the 15 minute cache should be skipped.
     *
     * @return $this
     */
    public function setSkipCache($skip_cache)
    {
        $this->container['skip_cache'] = $skip_cache;

        return $this;
    }

    /**
     * Gets user_data
     *
     * @return string
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     *
     * @param string $user_data Any other data that needs to be returned with the response to help the UI
     *
     * @return $this
     */
    public function setUserData($user_data)
    {
        $this->container['user_data'] = $user_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


