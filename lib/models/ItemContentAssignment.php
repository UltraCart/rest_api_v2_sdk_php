<?php
/**
 * ItemContentAssignment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemContentAssignment Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemContentAssignment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemContentAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_assignment' => 'bool',
        'group_oid' => 'int',
        'group_path' => 'string',
        'host' => 'string',
        'sort_order' => 'int',
        'url_part' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_assignment' => null,
        'group_oid' => 'int32',
        'group_path' => null,
        'host' => null,
        'sort_order' => 'int32',
        'url_part' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_assignment' => 'default_assignment',
        'group_oid' => 'group_oid',
        'group_path' => 'group_path',
        'host' => 'host',
        'sort_order' => 'sort_order',
        'url_part' => 'url_part'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_assignment' => 'setDefaultAssignment',
        'group_oid' => 'setGroupOid',
        'group_path' => 'setGroupPath',
        'host' => 'setHost',
        'sort_order' => 'setSortOrder',
        'url_part' => 'setUrlPart'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_assignment' => 'getDefaultAssignment',
        'group_oid' => 'getGroupOid',
        'group_path' => 'getGroupPath',
        'host' => 'getHost',
        'sort_order' => 'getSortOrder',
        'url_part' => 'getUrlPart'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_assignment'] = $data['default_assignment'] ?? null;
        $this->container['group_oid'] = $data['group_oid'] ?? null;
        $this->container['group_path'] = $data['group_path'] ?? null;
        $this->container['host'] = $data['host'] ?? null;
        $this->container['sort_order'] = $data['sort_order'] ?? null;
        $this->container['url_part'] = $data['url_part'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['url_part']) && (mb_strlen($this->container['url_part']) > 150)) {
            $invalidProperties[] = "invalid value for 'url_part', the character length must be smaller than or equal to 150.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_assignment
     *
     * @return bool|null
     */
    public function getDefaultAssignment()
    {
        return $this->container['default_assignment'];
    }

    /**
     * Sets default_assignment
     *
     * @param bool|null $default_assignment True if this group is the default assignment for this item
     *
     * @return self
     */
    public function setDefaultAssignment($default_assignment)
    {
        $this->container['default_assignment'] = $default_assignment;

        return $this;
    }

    /**
     * Gets group_oid
     *
     * @return int|null
     */
    public function getGroupOid()
    {
        return $this->container['group_oid'];
    }

    /**
     * Sets group_oid
     *
     * @param int|null $group_oid Page (group) object identifier
     *
     * @return self
     */
    public function setGroupOid($group_oid)
    {
        $this->container['group_oid'] = $group_oid;

        return $this;
    }

    /**
     * Gets group_path
     *
     * @return string|null
     */
    public function getGroupPath()
    {
        return $this->container['group_path'];
    }

    /**
     * Sets group_path
     *
     * @param string|null $group_path Page (group) path
     *
     * @return self
     */
    public function setGroupPath($group_path)
    {
        $this->container['group_path'] = $group_path;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host StoreFront host name
     *
     * @return self
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order Sort order (optional)
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets url_part
     *
     * @return string|null
     */
    public function getUrlPart()
    {
        return $this->container['url_part'];
    }

    /**
     * Sets url_part
     *
     * @param string|null $url_part URL part if the item id is not used
     *
     * @return self
     */
    public function setUrlPart($url_part)
    {
        if (!is_null($url_part) && (mb_strlen($url_part) > 150)) {
            throw new \InvalidArgumentException('invalid length for $url_part when calling ItemContentAssignment., must be smaller than or equal to 150.');
        }

        $this->container['url_part'] = $url_part;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


