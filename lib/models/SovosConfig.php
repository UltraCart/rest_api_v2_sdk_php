<?php
/**
 * SovosConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * SovosConfig Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SovosConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SovosConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_key' => 'string',
        'estimate_only' => 'bool',
        'last_test_dts' => 'string',
        'secret_key' => 'string',
        'send_test_orders' => 'bool',
        'test_results' => 'string',
        'uat' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_key' => null,
        'estimate_only' => null,
        'last_test_dts' => 'dateTime',
        'secret_key' => null,
        'send_test_orders' => null,
        'test_results' => null,
        'uat' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_key' => 'access_key',
        'estimate_only' => 'estimate_only',
        'last_test_dts' => 'last_test_dts',
        'secret_key' => 'secret_key',
        'send_test_orders' => 'send_test_orders',
        'test_results' => 'test_results',
        'uat' => 'uat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_key' => 'setAccessKey',
        'estimate_only' => 'setEstimateOnly',
        'last_test_dts' => 'setLastTestDts',
        'secret_key' => 'setSecretKey',
        'send_test_orders' => 'setSendTestOrders',
        'test_results' => 'setTestResults',
        'uat' => 'setUat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_key' => 'getAccessKey',
        'estimate_only' => 'getEstimateOnly',
        'last_test_dts' => 'getLastTestDts',
        'secret_key' => 'getSecretKey',
        'send_test_orders' => 'getSendTestOrders',
        'test_results' => 'getTestResults',
        'uat' => 'getUat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_key'] = isset($data['access_key']) ? $data['access_key'] : null;
        $this->container['estimate_only'] = isset($data['estimate_only']) ? $data['estimate_only'] : null;
        $this->container['last_test_dts'] = isset($data['last_test_dts']) ? $data['last_test_dts'] : null;
        $this->container['secret_key'] = isset($data['secret_key']) ? $data['secret_key'] : null;
        $this->container['send_test_orders'] = isset($data['send_test_orders']) ? $data['send_test_orders'] : null;
        $this->container['test_results'] = isset($data['test_results']) ? $data['test_results'] : null;
        $this->container['uat'] = isset($data['uat']) ? $data['uat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_key
     *
     * @return string
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string $access_key Sovos access key
     *
     * @return $this
     */
    public function setAccessKey($access_key)
    {
        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets estimate_only
     *
     * @return bool
     */
    public function getEstimateOnly()
    {
        return $this->container['estimate_only'];
    }

    /**
     * Sets estimate_only
     *
     * @param bool $estimate_only True if this Sovos configuration is to estimate taxes only and not report placed orders to Sovos
     *
     * @return $this
     */
    public function setEstimateOnly($estimate_only)
    {
        $this->container['estimate_only'] = $estimate_only;

        return $this;
    }

    /**
     * Gets last_test_dts
     *
     * @return string
     */
    public function getLastTestDts()
    {
        return $this->container['last_test_dts'];
    }

    /**
     * Sets last_test_dts
     *
     * @param string $last_test_dts Date/time of the connection test to Sovos
     *
     * @return $this
     */
    public function setLastTestDts($last_test_dts)
    {
        $this->container['last_test_dts'] = $last_test_dts;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string $secret_key Sovos secret key
     *
     * @return $this
     */
    public function setSecretKey($secret_key)
    {
        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets send_test_orders
     *
     * @return bool
     */
    public function getSendTestOrders()
    {
        return $this->container['send_test_orders'];
    }

    /**
     * Sets send_test_orders
     *
     * @param bool $send_test_orders Send test orders through to Sovos.  The default is to not transmit test orders to Sovos.
     *
     * @return $this
     */
    public function setSendTestOrders($send_test_orders)
    {
        $this->container['send_test_orders'] = $send_test_orders;

        return $this;
    }

    /**
     * Gets test_results
     *
     * @return string
     */
    public function getTestResults()
    {
        return $this->container['test_results'];
    }

    /**
     * Sets test_results
     *
     * @param string $test_results Test results of the last connection test to Sovos
     *
     * @return $this
     */
    public function setTestResults($test_results)
    {
        $this->container['test_results'] = $test_results;

        return $this;
    }

    /**
     * Gets uat
     *
     * @return bool
     */
    public function getUat()
    {
        return $this->container['uat'];
    }

    /**
     * Sets uat
     *
     * @param bool $uat True if this Sovos configuration is currently undergoing user acceptance testing
     *
     * @return $this
     */
    public function setUat($uat)
    {
        $this->container['uat'] = $uat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


