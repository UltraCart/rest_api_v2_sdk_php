<?php
/**
 * TempMultimedia
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * TempMultimedia Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TempMultimedia implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TempMultimedia';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'filename' => 'string',
        'height' => 'int',
        'multimedia_type' => 'string',
        'size' => 'int',
        'temp_multimedia_oid' => 'int',
        'url' => 'string',
        'width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'filename' => null,
        'height' => 'int32',
        'multimedia_type' => null,
        'size' => 'int64',
        'temp_multimedia_oid' => 'int32',
        'url' => null,
        'width' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filename' => 'filename',
        'height' => 'height',
        'multimedia_type' => 'multimedia_type',
        'size' => 'size',
        'temp_multimedia_oid' => 'temp_multimedia_oid',
        'url' => 'url',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filename' => 'setFilename',
        'height' => 'setHeight',
        'multimedia_type' => 'setMultimediaType',
        'size' => 'setSize',
        'temp_multimedia_oid' => 'setTempMultimediaOid',
        'url' => 'setUrl',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filename' => 'getFilename',
        'height' => 'getHeight',
        'multimedia_type' => 'getMultimediaType',
        'size' => 'getSize',
        'temp_multimedia_oid' => 'getTempMultimediaOid',
        'url' => 'getUrl',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MULTIMEDIA_TYPE_IMAGE = 'Image';
    public const MULTIMEDIA_TYPE_PDF = 'PDF';
    public const MULTIMEDIA_TYPE_TEXT = 'Text';
    public const MULTIMEDIA_TYPE_VIDEO = 'Video';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMultimediaTypeAllowableValues()
    {
        return [
            self::MULTIMEDIA_TYPE_IMAGE,
            self::MULTIMEDIA_TYPE_PDF,
            self::MULTIMEDIA_TYPE_TEXT,
            self::MULTIMEDIA_TYPE_VIDEO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['filename'] = $data['filename'] ?? null;
        $this->container['height'] = $data['height'] ?? null;
        $this->container['multimedia_type'] = $data['multimedia_type'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['temp_multimedia_oid'] = $data['temp_multimedia_oid'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['width'] = $data['width'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['filename']) && (mb_strlen($this->container['filename']) > 75)) {
            $invalidProperties[] = "invalid value for 'filename', the character length must be smaller than or equal to 75.";
        }

        $allowedValues = $this->getMultimediaTypeAllowableValues();
        if (!is_null($this->container['multimedia_type']) && !in_array($this->container['multimedia_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multimedia_type', must be one of '%s'",
                $this->container['multimedia_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filename
     *
     * @return string|null
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string|null $filename Filename
     *
     * @return self
     */
    public function setFilename($filename)
    {
        if (!is_null($filename) && (mb_strlen($filename) > 75)) {
            throw new \InvalidArgumentException('invalid length for $filename when calling TempMultimedia., must be smaller than or equal to 75.');
        }

        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Height
     *
     * @return self
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets multimedia_type
     *
     * @return string|null
     */
    public function getMultimediaType()
    {
        return $this->container['multimedia_type'];
    }

    /**
     * Sets multimedia_type
     *
     * @param string|null $multimedia_type Multimedia type
     *
     * @return self
     */
    public function setMultimediaType($multimedia_type)
    {
        $allowedValues = $this->getMultimediaTypeAllowableValues();
        if (!is_null($multimedia_type) && !in_array($multimedia_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multimedia_type', must be one of '%s'",
                    $multimedia_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multimedia_type'] = $multimedia_type;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size Size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets temp_multimedia_oid
     *
     * @return int|null
     */
    public function getTempMultimediaOid()
    {
        return $this->container['temp_multimedia_oid'];
    }

    /**
     * Sets temp_multimedia_oid
     *
     * @param int|null $temp_multimedia_oid Temporary multimedia object identifier
     *
     * @return self
     */
    public function setTempMultimediaOid($temp_multimedia_oid)
    {
        $this->container['temp_multimedia_oid'] = $temp_multimedia_oid;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Width
     *
     * @return self
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


