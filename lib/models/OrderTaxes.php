<?php
/**
 * OrderTaxes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderTaxes Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderTaxes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderTaxes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'arbitrary_tax' => 'float',
        'arbitrary_tax_rate' => 'float',
        'arbitrary_taxable_subtotal' => 'float',
        'tax_city_accounting_code' => 'string',
        'tax_country_accounting_code' => 'string',
        'tax_county' => 'string',
        'tax_county_accounting_code' => 'string',
        'tax_gift_charge' => 'bool',
        'tax_postal_code_accounting_code' => 'string',
        'tax_rate' => 'float',
        'tax_rate_city' => 'float',
        'tax_rate_country' => 'float',
        'tax_rate_county' => 'float',
        'tax_rate_postal_code' => 'float',
        'tax_rate_state' => 'float',
        'tax_shipping' => 'bool',
        'tax_state_accounting_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'arbitrary_tax' => null,
        'arbitrary_tax_rate' => null,
        'arbitrary_taxable_subtotal' => null,
        'tax_city_accounting_code' => null,
        'tax_country_accounting_code' => null,
        'tax_county' => null,
        'tax_county_accounting_code' => null,
        'tax_gift_charge' => null,
        'tax_postal_code_accounting_code' => null,
        'tax_rate' => null,
        'tax_rate_city' => null,
        'tax_rate_country' => null,
        'tax_rate_county' => null,
        'tax_rate_postal_code' => null,
        'tax_rate_state' => null,
        'tax_shipping' => null,
        'tax_state_accounting_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arbitrary_tax' => 'arbitrary_tax',
        'arbitrary_tax_rate' => 'arbitrary_tax_rate',
        'arbitrary_taxable_subtotal' => 'arbitrary_taxable_subtotal',
        'tax_city_accounting_code' => 'tax_city_accounting_code',
        'tax_country_accounting_code' => 'tax_country_accounting_code',
        'tax_county' => 'tax_county',
        'tax_county_accounting_code' => 'tax_county_accounting_code',
        'tax_gift_charge' => 'tax_gift_charge',
        'tax_postal_code_accounting_code' => 'tax_postal_code_accounting_code',
        'tax_rate' => 'tax_rate',
        'tax_rate_city' => 'tax_rate_city',
        'tax_rate_country' => 'tax_rate_country',
        'tax_rate_county' => 'tax_rate_county',
        'tax_rate_postal_code' => 'tax_rate_postal_code',
        'tax_rate_state' => 'tax_rate_state',
        'tax_shipping' => 'tax_shipping',
        'tax_state_accounting_code' => 'tax_state_accounting_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arbitrary_tax' => 'setArbitraryTax',
        'arbitrary_tax_rate' => 'setArbitraryTaxRate',
        'arbitrary_taxable_subtotal' => 'setArbitraryTaxableSubtotal',
        'tax_city_accounting_code' => 'setTaxCityAccountingCode',
        'tax_country_accounting_code' => 'setTaxCountryAccountingCode',
        'tax_county' => 'setTaxCounty',
        'tax_county_accounting_code' => 'setTaxCountyAccountingCode',
        'tax_gift_charge' => 'setTaxGiftCharge',
        'tax_postal_code_accounting_code' => 'setTaxPostalCodeAccountingCode',
        'tax_rate' => 'setTaxRate',
        'tax_rate_city' => 'setTaxRateCity',
        'tax_rate_country' => 'setTaxRateCountry',
        'tax_rate_county' => 'setTaxRateCounty',
        'tax_rate_postal_code' => 'setTaxRatePostalCode',
        'tax_rate_state' => 'setTaxRateState',
        'tax_shipping' => 'setTaxShipping',
        'tax_state_accounting_code' => 'setTaxStateAccountingCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arbitrary_tax' => 'getArbitraryTax',
        'arbitrary_tax_rate' => 'getArbitraryTaxRate',
        'arbitrary_taxable_subtotal' => 'getArbitraryTaxableSubtotal',
        'tax_city_accounting_code' => 'getTaxCityAccountingCode',
        'tax_country_accounting_code' => 'getTaxCountryAccountingCode',
        'tax_county' => 'getTaxCounty',
        'tax_county_accounting_code' => 'getTaxCountyAccountingCode',
        'tax_gift_charge' => 'getTaxGiftCharge',
        'tax_postal_code_accounting_code' => 'getTaxPostalCodeAccountingCode',
        'tax_rate' => 'getTaxRate',
        'tax_rate_city' => 'getTaxRateCity',
        'tax_rate_country' => 'getTaxRateCountry',
        'tax_rate_county' => 'getTaxRateCounty',
        'tax_rate_postal_code' => 'getTaxRatePostalCode',
        'tax_rate_state' => 'getTaxRateState',
        'tax_shipping' => 'getTaxShipping',
        'tax_state_accounting_code' => 'getTaxStateAccountingCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arbitrary_tax'] = $data['arbitrary_tax'] ?? null;
        $this->container['arbitrary_tax_rate'] = $data['arbitrary_tax_rate'] ?? null;
        $this->container['arbitrary_taxable_subtotal'] = $data['arbitrary_taxable_subtotal'] ?? null;
        $this->container['tax_city_accounting_code'] = $data['tax_city_accounting_code'] ?? null;
        $this->container['tax_country_accounting_code'] = $data['tax_country_accounting_code'] ?? null;
        $this->container['tax_county'] = $data['tax_county'] ?? null;
        $this->container['tax_county_accounting_code'] = $data['tax_county_accounting_code'] ?? null;
        $this->container['tax_gift_charge'] = $data['tax_gift_charge'] ?? null;
        $this->container['tax_postal_code_accounting_code'] = $data['tax_postal_code_accounting_code'] ?? null;
        $this->container['tax_rate'] = $data['tax_rate'] ?? null;
        $this->container['tax_rate_city'] = $data['tax_rate_city'] ?? null;
        $this->container['tax_rate_country'] = $data['tax_rate_country'] ?? null;
        $this->container['tax_rate_county'] = $data['tax_rate_county'] ?? null;
        $this->container['tax_rate_postal_code'] = $data['tax_rate_postal_code'] ?? null;
        $this->container['tax_rate_state'] = $data['tax_rate_state'] ?? null;
        $this->container['tax_shipping'] = $data['tax_shipping'] ?? null;
        $this->container['tax_state_accounting_code'] = $data['tax_state_accounting_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['tax_county']) && (mb_strlen($this->container['tax_county']) > 32)) {
            $invalidProperties[] = "invalid value for 'tax_county', the character length must be smaller than or equal to 32.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arbitrary_tax
     *
     * @return float|null
     */
    public function getArbitraryTax()
    {
        return $this->container['arbitrary_tax'];
    }

    /**
     * Sets arbitrary_tax
     *
     * @param float|null $arbitrary_tax Arbitrary Tax, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
     *
     * @return self
     */
    public function setArbitraryTax($arbitrary_tax)
    {
        $this->container['arbitrary_tax'] = $arbitrary_tax;

        return $this;
    }

    /**
     * Gets arbitrary_tax_rate
     *
     * @return float|null
     */
    public function getArbitraryTaxRate()
    {
        return $this->container['arbitrary_tax_rate'];
    }

    /**
     * Sets arbitrary_tax_rate
     *
     * @param float|null $arbitrary_tax_rate Arbitrary tax rate, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
     *
     * @return self
     */
    public function setArbitraryTaxRate($arbitrary_tax_rate)
    {
        $this->container['arbitrary_tax_rate'] = $arbitrary_tax_rate;

        return $this;
    }

    /**
     * Gets arbitrary_taxable_subtotal
     *
     * @return float|null
     */
    public function getArbitraryTaxableSubtotal()
    {
        return $this->container['arbitrary_taxable_subtotal'];
    }

    /**
     * Sets arbitrary_taxable_subtotal
     *
     * @param float|null $arbitrary_taxable_subtotal Arbitrary taxable subtotal, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
     *
     * @return self
     */
    public function setArbitraryTaxableSubtotal($arbitrary_taxable_subtotal)
    {
        $this->container['arbitrary_taxable_subtotal'] = $arbitrary_taxable_subtotal;

        return $this;
    }

    /**
     * Gets tax_city_accounting_code
     *
     * @return string|null
     */
    public function getTaxCityAccountingCode()
    {
        return $this->container['tax_city_accounting_code'];
    }

    /**
     * Sets tax_city_accounting_code
     *
     * @param string|null $tax_city_accounting_code QuickBooks tax city code
     *
     * @return self
     */
    public function setTaxCityAccountingCode($tax_city_accounting_code)
    {
        $this->container['tax_city_accounting_code'] = $tax_city_accounting_code;

        return $this;
    }

    /**
     * Gets tax_country_accounting_code
     *
     * @return string|null
     */
    public function getTaxCountryAccountingCode()
    {
        return $this->container['tax_country_accounting_code'];
    }

    /**
     * Sets tax_country_accounting_code
     *
     * @param string|null $tax_country_accounting_code QuickBooks tax country code
     *
     * @return self
     */
    public function setTaxCountryAccountingCode($tax_country_accounting_code)
    {
        $this->container['tax_country_accounting_code'] = $tax_country_accounting_code;

        return $this;
    }

    /**
     * Gets tax_county
     *
     * @return string|null
     */
    public function getTaxCounty()
    {
        return $this->container['tax_county'];
    }

    /**
     * Sets tax_county
     *
     * @param string|null $tax_county County used for tax calculation purposes (only in the United States)
     *
     * @return self
     */
    public function setTaxCounty($tax_county)
    {
        if (!is_null($tax_county) && (mb_strlen($tax_county) > 32)) {
            throw new \InvalidArgumentException('invalid length for $tax_county when calling OrderTaxes., must be smaller than or equal to 32.');
        }

        $this->container['tax_county'] = $tax_county;

        return $this;
    }

    /**
     * Gets tax_county_accounting_code
     *
     * @return string|null
     */
    public function getTaxCountyAccountingCode()
    {
        return $this->container['tax_county_accounting_code'];
    }

    /**
     * Sets tax_county_accounting_code
     *
     * @param string|null $tax_county_accounting_code QuickBooks tax county code
     *
     * @return self
     */
    public function setTaxCountyAccountingCode($tax_county_accounting_code)
    {
        $this->container['tax_county_accounting_code'] = $tax_county_accounting_code;

        return $this;
    }

    /**
     * Gets tax_gift_charge
     *
     * @return bool|null
     */
    public function getTaxGiftCharge()
    {
        return $this->container['tax_gift_charge'];
    }

    /**
     * Sets tax_gift_charge
     *
     * @param bool|null $tax_gift_charge True if gift charge is taxed
     *
     * @return self
     */
    public function setTaxGiftCharge($tax_gift_charge)
    {
        $this->container['tax_gift_charge'] = $tax_gift_charge;

        return $this;
    }

    /**
     * Gets tax_postal_code_accounting_code
     *
     * @return string|null
     */
    public function getTaxPostalCodeAccountingCode()
    {
        return $this->container['tax_postal_code_accounting_code'];
    }

    /**
     * Sets tax_postal_code_accounting_code
     *
     * @param string|null $tax_postal_code_accounting_code QuickBooks tax postal code code
     *
     * @return self
     */
    public function setTaxPostalCodeAccountingCode($tax_postal_code_accounting_code)
    {
        $this->container['tax_postal_code_accounting_code'] = $tax_postal_code_accounting_code;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float|null $tax_rate Tax rate, this is meaningless for updating an order.  For inserting a new order, if you need to override internal tax calculations, use the arbitrary fields.
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_rate_city
     *
     * @return float|null
     */
    public function getTaxRateCity()
    {
        return $this->container['tax_rate_city'];
    }

    /**
     * Sets tax_rate_city
     *
     * @param float|null $tax_rate_city Tax rate at the city level
     *
     * @return self
     */
    public function setTaxRateCity($tax_rate_city)
    {
        $this->container['tax_rate_city'] = $tax_rate_city;

        return $this;
    }

    /**
     * Gets tax_rate_country
     *
     * @return float|null
     */
    public function getTaxRateCountry()
    {
        return $this->container['tax_rate_country'];
    }

    /**
     * Sets tax_rate_country
     *
     * @param float|null $tax_rate_country Tax rate at the country level
     *
     * @return self
     */
    public function setTaxRateCountry($tax_rate_country)
    {
        $this->container['tax_rate_country'] = $tax_rate_country;

        return $this;
    }

    /**
     * Gets tax_rate_county
     *
     * @return float|null
     */
    public function getTaxRateCounty()
    {
        return $this->container['tax_rate_county'];
    }

    /**
     * Sets tax_rate_county
     *
     * @param float|null $tax_rate_county Tax rate at the county level
     *
     * @return self
     */
    public function setTaxRateCounty($tax_rate_county)
    {
        $this->container['tax_rate_county'] = $tax_rate_county;

        return $this;
    }

    /**
     * Gets tax_rate_postal_code
     *
     * @return float|null
     */
    public function getTaxRatePostalCode()
    {
        return $this->container['tax_rate_postal_code'];
    }

    /**
     * Sets tax_rate_postal_code
     *
     * @param float|null $tax_rate_postal_code Tax rate at the postal code level
     *
     * @return self
     */
    public function setTaxRatePostalCode($tax_rate_postal_code)
    {
        $this->container['tax_rate_postal_code'] = $tax_rate_postal_code;

        return $this;
    }

    /**
     * Gets tax_rate_state
     *
     * @return float|null
     */
    public function getTaxRateState()
    {
        return $this->container['tax_rate_state'];
    }

    /**
     * Sets tax_rate_state
     *
     * @param float|null $tax_rate_state Tax rate at the state level
     *
     * @return self
     */
    public function setTaxRateState($tax_rate_state)
    {
        $this->container['tax_rate_state'] = $tax_rate_state;

        return $this;
    }

    /**
     * Gets tax_shipping
     *
     * @return bool|null
     */
    public function getTaxShipping()
    {
        return $this->container['tax_shipping'];
    }

    /**
     * Sets tax_shipping
     *
     * @param bool|null $tax_shipping True if shipping is taxed
     *
     * @return self
     */
    public function setTaxShipping($tax_shipping)
    {
        $this->container['tax_shipping'] = $tax_shipping;

        return $this;
    }

    /**
     * Gets tax_state_accounting_code
     *
     * @return string|null
     */
    public function getTaxStateAccountingCode()
    {
        return $this->container['tax_state_accounting_code'];
    }

    /**
     * Sets tax_state_accounting_code
     *
     * @param string|null $tax_state_accounting_code QuickBooks tax state code
     *
     * @return self
     */
    public function setTaxStateAccountingCode($tax_state_accounting_code)
    {
        $this->container['tax_state_accounting_code'] = $tax_state_accounting_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


