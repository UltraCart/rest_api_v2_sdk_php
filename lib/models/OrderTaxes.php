<?php
/**
 * OrderTaxes
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * OrderTaxes Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderTaxes implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderTaxes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'tax_city_accounting_code' => 'string',
        'tax_country_accounting_code' => 'string',
        'tax_county' => 'string',
        'tax_county_accounting_code' => 'string',
        'tax_postal_code_accounting_code' => 'string',
        'tax_rate' => 'float',
        'tax_rate_city' => 'float',
        'tax_rate_country' => 'float',
        'tax_rate_county' => 'float',
        'tax_rate_postal_code' => 'float',
        'tax_rate_state' => 'float',
        'tax_state_accounting_code' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'tax_city_accounting_code' => 'tax_city_accounting_code',
        'tax_country_accounting_code' => 'tax_country_accounting_code',
        'tax_county' => 'tax_county',
        'tax_county_accounting_code' => 'tax_county_accounting_code',
        'tax_postal_code_accounting_code' => 'tax_postal_code_accounting_code',
        'tax_rate' => 'tax_rate',
        'tax_rate_city' => 'tax_rate_city',
        'tax_rate_country' => 'tax_rate_country',
        'tax_rate_county' => 'tax_rate_county',
        'tax_rate_postal_code' => 'tax_rate_postal_code',
        'tax_rate_state' => 'tax_rate_state',
        'tax_state_accounting_code' => 'tax_state_accounting_code'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'tax_city_accounting_code' => 'setTaxCityAccountingCode',
        'tax_country_accounting_code' => 'setTaxCountryAccountingCode',
        'tax_county' => 'setTaxCounty',
        'tax_county_accounting_code' => 'setTaxCountyAccountingCode',
        'tax_postal_code_accounting_code' => 'setTaxPostalCodeAccountingCode',
        'tax_rate' => 'setTaxRate',
        'tax_rate_city' => 'setTaxRateCity',
        'tax_rate_country' => 'setTaxRateCountry',
        'tax_rate_county' => 'setTaxRateCounty',
        'tax_rate_postal_code' => 'setTaxRatePostalCode',
        'tax_rate_state' => 'setTaxRateState',
        'tax_state_accounting_code' => 'setTaxStateAccountingCode'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'tax_city_accounting_code' => 'getTaxCityAccountingCode',
        'tax_country_accounting_code' => 'getTaxCountryAccountingCode',
        'tax_county' => 'getTaxCounty',
        'tax_county_accounting_code' => 'getTaxCountyAccountingCode',
        'tax_postal_code_accounting_code' => 'getTaxPostalCodeAccountingCode',
        'tax_rate' => 'getTaxRate',
        'tax_rate_city' => 'getTaxRateCity',
        'tax_rate_country' => 'getTaxRateCountry',
        'tax_rate_county' => 'getTaxRateCounty',
        'tax_rate_postal_code' => 'getTaxRatePostalCode',
        'tax_rate_state' => 'getTaxRateState',
        'tax_state_accounting_code' => 'getTaxStateAccountingCode'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax_city_accounting_code'] = isset($data['tax_city_accounting_code']) ? $data['tax_city_accounting_code'] : null;
        $this->container['tax_country_accounting_code'] = isset($data['tax_country_accounting_code']) ? $data['tax_country_accounting_code'] : null;
        $this->container['tax_county'] = isset($data['tax_county']) ? $data['tax_county'] : null;
        $this->container['tax_county_accounting_code'] = isset($data['tax_county_accounting_code']) ? $data['tax_county_accounting_code'] : null;
        $this->container['tax_postal_code_accounting_code'] = isset($data['tax_postal_code_accounting_code']) ? $data['tax_postal_code_accounting_code'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['tax_rate_city'] = isset($data['tax_rate_city']) ? $data['tax_rate_city'] : null;
        $this->container['tax_rate_country'] = isset($data['tax_rate_country']) ? $data['tax_rate_country'] : null;
        $this->container['tax_rate_county'] = isset($data['tax_rate_county']) ? $data['tax_rate_county'] : null;
        $this->container['tax_rate_postal_code'] = isset($data['tax_rate_postal_code']) ? $data['tax_rate_postal_code'] : null;
        $this->container['tax_rate_state'] = isset($data['tax_rate_state']) ? $data['tax_rate_state'] : null;
        $this->container['tax_state_accounting_code'] = isset($data['tax_state_accounting_code']) ? $data['tax_state_accounting_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if (!is_null($this->container['tax_county']) && (strlen($this->container['tax_county']) > 32)) {
            $invalid_properties[] = "invalid value for 'tax_county', the character length must be smaller than or equal to 32.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['tax_county']) > 32) {
            return false;
        }
        return true;
    }


    /**
     * Gets tax_city_accounting_code
     * @return string
     */
    public function getTaxCityAccountingCode()
    {
        return $this->container['tax_city_accounting_code'];
    }

    /**
     * Sets tax_city_accounting_code
     * @param string $tax_city_accounting_code QuickBooks tax city code
     * @return $this
     */
    public function setTaxCityAccountingCode($tax_city_accounting_code)
    {
        $this->container['tax_city_accounting_code'] = $tax_city_accounting_code;

        return $this;
    }

    /**
     * Gets tax_country_accounting_code
     * @return string
     */
    public function getTaxCountryAccountingCode()
    {
        return $this->container['tax_country_accounting_code'];
    }

    /**
     * Sets tax_country_accounting_code
     * @param string $tax_country_accounting_code QuickBooks tax country code
     * @return $this
     */
    public function setTaxCountryAccountingCode($tax_country_accounting_code)
    {
        $this->container['tax_country_accounting_code'] = $tax_country_accounting_code;

        return $this;
    }

    /**
     * Gets tax_county
     * @return string
     */
    public function getTaxCounty()
    {
        return $this->container['tax_county'];
    }

    /**
     * Sets tax_county
     * @param string $tax_county County used for tax calculation purposes (only in the United States)
     * @return $this
     */
    public function setTaxCounty($tax_county)
    {
        if (strlen($tax_county) > 32) {
            throw new \InvalidArgumentException('invalid length for $tax_county when calling OrderTaxes., must be smaller than or equal to 32.');
        }
        $this->container['tax_county'] = $tax_county;

        return $this;
    }

    /**
     * Gets tax_county_accounting_code
     * @return string
     */
    public function getTaxCountyAccountingCode()
    {
        return $this->container['tax_county_accounting_code'];
    }

    /**
     * Sets tax_county_accounting_code
     * @param string $tax_county_accounting_code QuickBooks tax county code
     * @return $this
     */
    public function setTaxCountyAccountingCode($tax_county_accounting_code)
    {
        $this->container['tax_county_accounting_code'] = $tax_county_accounting_code;

        return $this;
    }

    /**
     * Gets tax_postal_code_accounting_code
     * @return string
     */
    public function getTaxPostalCodeAccountingCode()
    {
        return $this->container['tax_postal_code_accounting_code'];
    }

    /**
     * Sets tax_postal_code_accounting_code
     * @param string $tax_postal_code_accounting_code QuickBooks tax postal code code
     * @return $this
     */
    public function setTaxPostalCodeAccountingCode($tax_postal_code_accounting_code)
    {
        $this->container['tax_postal_code_accounting_code'] = $tax_postal_code_accounting_code;

        return $this;
    }

    /**
     * Gets tax_rate
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     * @param float $tax_rate Tax rate
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_rate_city
     * @return float
     */
    public function getTaxRateCity()
    {
        return $this->container['tax_rate_city'];
    }

    /**
     * Sets tax_rate_city
     * @param float $tax_rate_city Tax rate at the city level
     * @return $this
     */
    public function setTaxRateCity($tax_rate_city)
    {
        $this->container['tax_rate_city'] = $tax_rate_city;

        return $this;
    }

    /**
     * Gets tax_rate_country
     * @return float
     */
    public function getTaxRateCountry()
    {
        return $this->container['tax_rate_country'];
    }

    /**
     * Sets tax_rate_country
     * @param float $tax_rate_country Tax rate at the country level
     * @return $this
     */
    public function setTaxRateCountry($tax_rate_country)
    {
        $this->container['tax_rate_country'] = $tax_rate_country;

        return $this;
    }

    /**
     * Gets tax_rate_county
     * @return float
     */
    public function getTaxRateCounty()
    {
        return $this->container['tax_rate_county'];
    }

    /**
     * Sets tax_rate_county
     * @param float $tax_rate_county Tax rate at the county level
     * @return $this
     */
    public function setTaxRateCounty($tax_rate_county)
    {
        $this->container['tax_rate_county'] = $tax_rate_county;

        return $this;
    }

    /**
     * Gets tax_rate_postal_code
     * @return float
     */
    public function getTaxRatePostalCode()
    {
        return $this->container['tax_rate_postal_code'];
    }

    /**
     * Sets tax_rate_postal_code
     * @param float $tax_rate_postal_code Tax rate at the postal code level
     * @return $this
     */
    public function setTaxRatePostalCode($tax_rate_postal_code)
    {
        $this->container['tax_rate_postal_code'] = $tax_rate_postal_code;

        return $this;
    }

    /**
     * Gets tax_rate_state
     * @return float
     */
    public function getTaxRateState()
    {
        return $this->container['tax_rate_state'];
    }

    /**
     * Sets tax_rate_state
     * @param float $tax_rate_state Tax rate at the state level
     * @return $this
     */
    public function setTaxRateState($tax_rate_state)
    {
        $this->container['tax_rate_state'] = $tax_rate_state;

        return $this;
    }

    /**
     * Gets tax_state_accounting_code
     * @return string
     */
    public function getTaxStateAccountingCode()
    {
        return $this->container['tax_state_accounting_code'];
    }

    /**
     * Sets tax_state_accounting_code
     * @param string $tax_state_accounting_code QuickBOoks tax state code
     * @return $this
     */
    public function setTaxStateAccountingCode($tax_state_accounting_code)
    {
        $this->container['tax_state_accounting_code'] = $tax_state_accounting_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


