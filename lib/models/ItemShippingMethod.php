<?php
/**
 * ItemShippingMethod
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemShippingMethod Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemShippingMethod implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemShippingMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cost' => 'float',
        'each_additional_item_markup' => 'float',
        'filter_to_if_available' => 'bool',
        'first_item_markup' => 'float',
        'fixed_shipping_cost' => 'float',
        'flat_fee_markup' => 'float',
        'free_shipping' => 'bool',
        'per_item_fee_markup' => 'float',
        'percentage_markup' => 'float',
        'percentage_of_item_markup' => 'float',
        'relax_restrictions_on_upsell' => 'bool',
        'shipping_method' => 'string',
        'shipping_method_oid' => 'int',
        'shipping_method_validity' => 'string',
        'ships_separately' => 'bool',
        'signature_required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cost' => null,
        'each_additional_item_markup' => null,
        'filter_to_if_available' => null,
        'first_item_markup' => null,
        'fixed_shipping_cost' => null,
        'flat_fee_markup' => null,
        'free_shipping' => null,
        'per_item_fee_markup' => null,
        'percentage_markup' => null,
        'percentage_of_item_markup' => null,
        'relax_restrictions_on_upsell' => null,
        'shipping_method' => null,
        'shipping_method_oid' => 'int32',
        'shipping_method_validity' => null,
        'ships_separately' => null,
        'signature_required' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cost' => 'cost',
        'each_additional_item_markup' => 'each_additional_item_markup',
        'filter_to_if_available' => 'filter_to_if_available',
        'first_item_markup' => 'first_item_markup',
        'fixed_shipping_cost' => 'fixed_shipping_cost',
        'flat_fee_markup' => 'flat_fee_markup',
        'free_shipping' => 'free_shipping',
        'per_item_fee_markup' => 'per_item_fee_markup',
        'percentage_markup' => 'percentage_markup',
        'percentage_of_item_markup' => 'percentage_of_item_markup',
        'relax_restrictions_on_upsell' => 'relax_restrictions_on_upsell',
        'shipping_method' => 'shipping_method',
        'shipping_method_oid' => 'shipping_method_oid',
        'shipping_method_validity' => 'shipping_method_validity',
        'ships_separately' => 'ships_separately',
        'signature_required' => 'signature_required'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cost' => 'setCost',
        'each_additional_item_markup' => 'setEachAdditionalItemMarkup',
        'filter_to_if_available' => 'setFilterToIfAvailable',
        'first_item_markup' => 'setFirstItemMarkup',
        'fixed_shipping_cost' => 'setFixedShippingCost',
        'flat_fee_markup' => 'setFlatFeeMarkup',
        'free_shipping' => 'setFreeShipping',
        'per_item_fee_markup' => 'setPerItemFeeMarkup',
        'percentage_markup' => 'setPercentageMarkup',
        'percentage_of_item_markup' => 'setPercentageOfItemMarkup',
        'relax_restrictions_on_upsell' => 'setRelaxRestrictionsOnUpsell',
        'shipping_method' => 'setShippingMethod',
        'shipping_method_oid' => 'setShippingMethodOid',
        'shipping_method_validity' => 'setShippingMethodValidity',
        'ships_separately' => 'setShipsSeparately',
        'signature_required' => 'setSignatureRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cost' => 'getCost',
        'each_additional_item_markup' => 'getEachAdditionalItemMarkup',
        'filter_to_if_available' => 'getFilterToIfAvailable',
        'first_item_markup' => 'getFirstItemMarkup',
        'fixed_shipping_cost' => 'getFixedShippingCost',
        'flat_fee_markup' => 'getFlatFeeMarkup',
        'free_shipping' => 'getFreeShipping',
        'per_item_fee_markup' => 'getPerItemFeeMarkup',
        'percentage_markup' => 'getPercentageMarkup',
        'percentage_of_item_markup' => 'getPercentageOfItemMarkup',
        'relax_restrictions_on_upsell' => 'getRelaxRestrictionsOnUpsell',
        'shipping_method' => 'getShippingMethod',
        'shipping_method_oid' => 'getShippingMethodOid',
        'shipping_method_validity' => 'getShippingMethodValidity',
        'ships_separately' => 'getShipsSeparately',
        'signature_required' => 'getSignatureRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHIPPING_METHOD_VALIDITY_INVALID_FOR = 'invalid for';
    public const SHIPPING_METHOD_VALIDITY_VALID_FOR = 'valid for';
    public const SHIPPING_METHOD_VALIDITY_VALID_ONLY_FOR = 'valid only for';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingMethodValidityAllowableValues()
    {
        return [
            self::SHIPPING_METHOD_VALIDITY_INVALID_FOR,
            self::SHIPPING_METHOD_VALIDITY_VALID_FOR,
            self::SHIPPING_METHOD_VALIDITY_VALID_ONLY_FOR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cost'] = $data['cost'] ?? null;
        $this->container['each_additional_item_markup'] = $data['each_additional_item_markup'] ?? null;
        $this->container['filter_to_if_available'] = $data['filter_to_if_available'] ?? null;
        $this->container['first_item_markup'] = $data['first_item_markup'] ?? null;
        $this->container['fixed_shipping_cost'] = $data['fixed_shipping_cost'] ?? null;
        $this->container['flat_fee_markup'] = $data['flat_fee_markup'] ?? null;
        $this->container['free_shipping'] = $data['free_shipping'] ?? null;
        $this->container['per_item_fee_markup'] = $data['per_item_fee_markup'] ?? null;
        $this->container['percentage_markup'] = $data['percentage_markup'] ?? null;
        $this->container['percentage_of_item_markup'] = $data['percentage_of_item_markup'] ?? null;
        $this->container['relax_restrictions_on_upsell'] = $data['relax_restrictions_on_upsell'] ?? null;
        $this->container['shipping_method'] = $data['shipping_method'] ?? null;
        $this->container['shipping_method_oid'] = $data['shipping_method_oid'] ?? null;
        $this->container['shipping_method_validity'] = $data['shipping_method_validity'] ?? null;
        $this->container['ships_separately'] = $data['ships_separately'] ?? null;
        $this->container['signature_required'] = $data['signature_required'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShippingMethodValidityAllowableValues();
        if (!is_null($this->container['shipping_method_validity']) && !in_array($this->container['shipping_method_validity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipping_method_validity', must be one of '%s'",
                $this->container['shipping_method_validity'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost Cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets each_additional_item_markup
     *
     * @return float|null
     */
    public function getEachAdditionalItemMarkup()
    {
        return $this->container['each_additional_item_markup'];
    }

    /**
     * Sets each_additional_item_markup
     *
     * @param float|null $each_additional_item_markup Each additional item markup
     *
     * @return self
     */
    public function setEachAdditionalItemMarkup($each_additional_item_markup)
    {
        $this->container['each_additional_item_markup'] = $each_additional_item_markup;

        return $this;
    }

    /**
     * Gets filter_to_if_available
     *
     * @return bool|null
     */
    public function getFilterToIfAvailable()
    {
        return $this->container['filter_to_if_available'];
    }

    /**
     * Sets filter_to_if_available
     *
     * @param bool|null $filter_to_if_available Filter to this method if available
     *
     * @return self
     */
    public function setFilterToIfAvailable($filter_to_if_available)
    {
        $this->container['filter_to_if_available'] = $filter_to_if_available;

        return $this;
    }

    /**
     * Gets first_item_markup
     *
     * @return float|null
     */
    public function getFirstItemMarkup()
    {
        return $this->container['first_item_markup'];
    }

    /**
     * Sets first_item_markup
     *
     * @param float|null $first_item_markup First item markup
     *
     * @return self
     */
    public function setFirstItemMarkup($first_item_markup)
    {
        $this->container['first_item_markup'] = $first_item_markup;

        return $this;
    }

    /**
     * Gets fixed_shipping_cost
     *
     * @return float|null
     */
    public function getFixedShippingCost()
    {
        return $this->container['fixed_shipping_cost'];
    }

    /**
     * Sets fixed_shipping_cost
     *
     * @param float|null $fixed_shipping_cost Fixed shipping cost
     *
     * @return self
     */
    public function setFixedShippingCost($fixed_shipping_cost)
    {
        $this->container['fixed_shipping_cost'] = $fixed_shipping_cost;

        return $this;
    }

    /**
     * Gets flat_fee_markup
     *
     * @return float|null
     */
    public function getFlatFeeMarkup()
    {
        return $this->container['flat_fee_markup'];
    }

    /**
     * Sets flat_fee_markup
     *
     * @param float|null $flat_fee_markup Flat fee markup
     *
     * @return self
     */
    public function setFlatFeeMarkup($flat_fee_markup)
    {
        $this->container['flat_fee_markup'] = $flat_fee_markup;

        return $this;
    }

    /**
     * Gets free_shipping
     *
     * @return bool|null
     */
    public function getFreeShipping()
    {
        return $this->container['free_shipping'];
    }

    /**
     * Sets free_shipping
     *
     * @param bool|null $free_shipping Free shipping
     *
     * @return self
     */
    public function setFreeShipping($free_shipping)
    {
        $this->container['free_shipping'] = $free_shipping;

        return $this;
    }

    /**
     * Gets per_item_fee_markup
     *
     * @return float|null
     */
    public function getPerItemFeeMarkup()
    {
        return $this->container['per_item_fee_markup'];
    }

    /**
     * Sets per_item_fee_markup
     *
     * @param float|null $per_item_fee_markup Per item fee markup
     *
     * @return self
     */
    public function setPerItemFeeMarkup($per_item_fee_markup)
    {
        $this->container['per_item_fee_markup'] = $per_item_fee_markup;

        return $this;
    }

    /**
     * Gets percentage_markup
     *
     * @return float|null
     */
    public function getPercentageMarkup()
    {
        return $this->container['percentage_markup'];
    }

    /**
     * Sets percentage_markup
     *
     * @param float|null $percentage_markup Percentage markup
     *
     * @return self
     */
    public function setPercentageMarkup($percentage_markup)
    {
        $this->container['percentage_markup'] = $percentage_markup;

        return $this;
    }

    /**
     * Gets percentage_of_item_markup
     *
     * @return float|null
     */
    public function getPercentageOfItemMarkup()
    {
        return $this->container['percentage_of_item_markup'];
    }

    /**
     * Sets percentage_of_item_markup
     *
     * @param float|null $percentage_of_item_markup Percentage of item markup
     *
     * @return self
     */
    public function setPercentageOfItemMarkup($percentage_of_item_markup)
    {
        $this->container['percentage_of_item_markup'] = $percentage_of_item_markup;

        return $this;
    }

    /**
     * Gets relax_restrictions_on_upsell
     *
     * @return bool|null
     */
    public function getRelaxRestrictionsOnUpsell()
    {
        return $this->container['relax_restrictions_on_upsell'];
    }

    /**
     * Sets relax_restrictions_on_upsell
     *
     * @param bool|null $relax_restrictions_on_upsell Relax restrictions on upsell
     *
     * @return self
     */
    public function setRelaxRestrictionsOnUpsell($relax_restrictions_on_upsell)
    {
        $this->container['relax_restrictions_on_upsell'] = $relax_restrictions_on_upsell;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method Shipping method name
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets shipping_method_oid
     *
     * @return int|null
     */
    public function getShippingMethodOid()
    {
        return $this->container['shipping_method_oid'];
    }

    /**
     * Sets shipping_method_oid
     *
     * @param int|null $shipping_method_oid Shipping method object identifier
     *
     * @return self
     */
    public function setShippingMethodOid($shipping_method_oid)
    {
        $this->container['shipping_method_oid'] = $shipping_method_oid;

        return $this;
    }

    /**
     * Gets shipping_method_validity
     *
     * @return string|null
     */
    public function getShippingMethodValidity()
    {
        return $this->container['shipping_method_validity'];
    }

    /**
     * Sets shipping_method_validity
     *
     * @param string|null $shipping_method_validity Shipping method validity
     *
     * @return self
     */
    public function setShippingMethodValidity($shipping_method_validity)
    {
        $allowedValues = $this->getShippingMethodValidityAllowableValues();
        if (!is_null($shipping_method_validity) && !in_array($shipping_method_validity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipping_method_validity', must be one of '%s'",
                    $shipping_method_validity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_method_validity'] = $shipping_method_validity;

        return $this;
    }

    /**
     * Gets ships_separately
     *
     * @return bool|null
     */
    public function getShipsSeparately()
    {
        return $this->container['ships_separately'];
    }

    /**
     * Sets ships_separately
     *
     * @param bool|null $ships_separately Ships separately
     *
     * @return self
     */
    public function setShipsSeparately($ships_separately)
    {
        $this->container['ships_separately'] = $ships_separately;

        return $this;
    }

    /**
     * Gets signature_required
     *
     * @return bool|null
     */
    public function getSignatureRequired()
    {
        return $this->container['signature_required'];
    }

    /**
     * Sets signature_required
     *
     * @param bool|null $signature_required Signature required
     *
     * @return self
     */
    public function setSignatureRequired($signature_required)
    {
        $this->container['signature_required'] = $signature_required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


