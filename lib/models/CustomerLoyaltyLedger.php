<?php
/**
 * CustomerLoyaltyLedger
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomerLoyaltyLedger Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerLoyaltyLedger implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerLoyaltyLedger';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_by' => 'string',
        'created_dts' => 'string',
        'description' => 'string',
        'email' => 'string',
        'item_id' => 'string',
        'item_index' => 'int',
        'ledger_dts' => 'string',
        'loyalty_campaign_oid' => 'int',
        'loyalty_ledger_oid' => 'int',
        'loyalty_points' => 'int',
        'modified_by' => 'string',
        'modified_dts' => 'string',
        'order_id' => 'string',
        'quantity' => 'int',
        'vesting_dts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_by' => null,
        'created_dts' => 'dateTime',
        'description' => null,
        'email' => null,
        'item_id' => null,
        'item_index' => 'int32',
        'ledger_dts' => 'dateTime',
        'loyalty_campaign_oid' => 'int32',
        'loyalty_ledger_oid' => 'int32',
        'loyalty_points' => 'int32',
        'modified_by' => null,
        'modified_dts' => 'dateTime',
        'order_id' => null,
        'quantity' => 'int32',
        'vesting_dts' => 'dateTime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_by' => 'created_by',
        'created_dts' => 'created_dts',
        'description' => 'description',
        'email' => 'email',
        'item_id' => 'item_id',
        'item_index' => 'item_index',
        'ledger_dts' => 'ledger_dts',
        'loyalty_campaign_oid' => 'loyalty_campaign_oid',
        'loyalty_ledger_oid' => 'loyalty_ledger_oid',
        'loyalty_points' => 'loyalty_points',
        'modified_by' => 'modified_by',
        'modified_dts' => 'modified_dts',
        'order_id' => 'order_id',
        'quantity' => 'quantity',
        'vesting_dts' => 'vesting_dts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_by' => 'setCreatedBy',
        'created_dts' => 'setCreatedDts',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'item_id' => 'setItemId',
        'item_index' => 'setItemIndex',
        'ledger_dts' => 'setLedgerDts',
        'loyalty_campaign_oid' => 'setLoyaltyCampaignOid',
        'loyalty_ledger_oid' => 'setLoyaltyLedgerOid',
        'loyalty_points' => 'setLoyaltyPoints',
        'modified_by' => 'setModifiedBy',
        'modified_dts' => 'setModifiedDts',
        'order_id' => 'setOrderId',
        'quantity' => 'setQuantity',
        'vesting_dts' => 'setVestingDts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_by' => 'getCreatedBy',
        'created_dts' => 'getCreatedDts',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'item_id' => 'getItemId',
        'item_index' => 'getItemIndex',
        'ledger_dts' => 'getLedgerDts',
        'loyalty_campaign_oid' => 'getLoyaltyCampaignOid',
        'loyalty_ledger_oid' => 'getLoyaltyLedgerOid',
        'loyalty_points' => 'getLoyaltyPoints',
        'modified_by' => 'getModifiedBy',
        'modified_dts' => 'getModifiedDts',
        'order_id' => 'getOrderId',
        'quantity' => 'getQuantity',
        'vesting_dts' => 'getVestingDts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_dts'] = isset($data['created_dts']) ? $data['created_dts'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['item_index'] = isset($data['item_index']) ? $data['item_index'] : null;
        $this->container['ledger_dts'] = isset($data['ledger_dts']) ? $data['ledger_dts'] : null;
        $this->container['loyalty_campaign_oid'] = isset($data['loyalty_campaign_oid']) ? $data['loyalty_campaign_oid'] : null;
        $this->container['loyalty_ledger_oid'] = isset($data['loyalty_ledger_oid']) ? $data['loyalty_ledger_oid'] : null;
        $this->container['loyalty_points'] = isset($data['loyalty_points']) ? $data['loyalty_points'] : null;
        $this->container['modified_by'] = isset($data['modified_by']) ? $data['modified_by'] : null;
        $this->container['modified_dts'] = isset($data['modified_dts']) ? $data['modified_dts'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['vesting_dts'] = isset($data['vesting_dts']) ? $data['vesting_dts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by Created By
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_dts
     *
     * @return string
     */
    public function getCreatedDts()
    {
        return $this->container['created_dts'];
    }

    /**
     * Sets created_dts
     *
     * @param string $created_dts Created date
     *
     * @return $this
     */
    public function setCreatedDts($created_dts)
    {
        $this->container['created_dts'] = $created_dts;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id Item Id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_index
     *
     * @return int
     */
    public function getItemIndex()
    {
        return $this->container['item_index'];
    }

    /**
     * Sets item_index
     *
     * @param int $item_index Item Index
     *
     * @return $this
     */
    public function setItemIndex($item_index)
    {
        $this->container['item_index'] = $item_index;

        return $this;
    }

    /**
     * Gets ledger_dts
     *
     * @return string
     */
    public function getLedgerDts()
    {
        return $this->container['ledger_dts'];
    }

    /**
     * Sets ledger_dts
     *
     * @param string $ledger_dts Ledger date
     *
     * @return $this
     */
    public function setLedgerDts($ledger_dts)
    {
        $this->container['ledger_dts'] = $ledger_dts;

        return $this;
    }

    /**
     * Gets loyalty_campaign_oid
     *
     * @return int
     */
    public function getLoyaltyCampaignOid()
    {
        return $this->container['loyalty_campaign_oid'];
    }

    /**
     * Sets loyalty_campaign_oid
     *
     * @param int $loyalty_campaign_oid Loyalty campaign oid
     *
     * @return $this
     */
    public function setLoyaltyCampaignOid($loyalty_campaign_oid)
    {
        $this->container['loyalty_campaign_oid'] = $loyalty_campaign_oid;

        return $this;
    }

    /**
     * Gets loyalty_ledger_oid
     *
     * @return int
     */
    public function getLoyaltyLedgerOid()
    {
        return $this->container['loyalty_ledger_oid'];
    }

    /**
     * Sets loyalty_ledger_oid
     *
     * @param int $loyalty_ledger_oid Loyalty ledger oid
     *
     * @return $this
     */
    public function setLoyaltyLedgerOid($loyalty_ledger_oid)
    {
        $this->container['loyalty_ledger_oid'] = $loyalty_ledger_oid;

        return $this;
    }

    /**
     * Gets loyalty_points
     *
     * @return int
     */
    public function getLoyaltyPoints()
    {
        return $this->container['loyalty_points'];
    }

    /**
     * Sets loyalty_points
     *
     * @param int $loyalty_points Loyalty points
     *
     * @return $this
     */
    public function setLoyaltyPoints($loyalty_points)
    {
        $this->container['loyalty_points'] = $loyalty_points;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string $modified_by Modified By
     *
     * @return $this
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets modified_dts
     *
     * @return string
     */
    public function getModifiedDts()
    {
        return $this->container['modified_dts'];
    }

    /**
     * Sets modified_dts
     *
     * @param string $modified_dts Modified date
     *
     * @return $this
     */
    public function setModifiedDts($modified_dts)
    {
        $this->container['modified_dts'] = $modified_dts;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Order Id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets vesting_dts
     *
     * @return string
     */
    public function getVestingDts()
    {
        return $this->container['vesting_dts'];
    }

    /**
     * Sets vesting_dts
     *
     * @param string $vesting_dts Vesting date
     *
     * @return $this
     */
    public function setVestingDts($vesting_dts)
    {
        $this->container['vesting_dts'] = $vesting_dts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


