<?php
/**
 * ScreenRecordingSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ScreenRecordingSettings Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScreenRecordingSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScreenRecordingSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cost_per_thousand' => 'float',
        'enabled' => 'bool',
        'retention_interval' => 'string',
        'sessions_current_billing_period' => 'int',
        'sessions_last_billing_period' => 'int',
        'sessions_trial_billing_period' => 'int',
        'trial_expiration' => 'string',
        'trial_expired' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cost_per_thousand' => null,
        'enabled' => null,
        'retention_interval' => null,
        'sessions_current_billing_period' => 'int32',
        'sessions_last_billing_period' => 'int32',
        'sessions_trial_billing_period' => 'int32',
        'trial_expiration' => null,
        'trial_expired' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cost_per_thousand' => 'cost_per_thousand',
        'enabled' => 'enabled',
        'retention_interval' => 'retention_interval',
        'sessions_current_billing_period' => 'sessions_current_billing_period',
        'sessions_last_billing_period' => 'sessions_last_billing_period',
        'sessions_trial_billing_period' => 'sessions_trial_billing_period',
        'trial_expiration' => 'trial_expiration',
        'trial_expired' => 'trial_expired'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cost_per_thousand' => 'setCostPerThousand',
        'enabled' => 'setEnabled',
        'retention_interval' => 'setRetentionInterval',
        'sessions_current_billing_period' => 'setSessionsCurrentBillingPeriod',
        'sessions_last_billing_period' => 'setSessionsLastBillingPeriod',
        'sessions_trial_billing_period' => 'setSessionsTrialBillingPeriod',
        'trial_expiration' => 'setTrialExpiration',
        'trial_expired' => 'setTrialExpired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cost_per_thousand' => 'getCostPerThousand',
        'enabled' => 'getEnabled',
        'retention_interval' => 'getRetentionInterval',
        'sessions_current_billing_period' => 'getSessionsCurrentBillingPeriod',
        'sessions_last_billing_period' => 'getSessionsLastBillingPeriod',
        'sessions_trial_billing_period' => 'getSessionsTrialBillingPeriod',
        'trial_expiration' => 'getTrialExpiration',
        'trial_expired' => 'getTrialExpired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cost_per_thousand'] = $data['cost_per_thousand'] ?? null;
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['retention_interval'] = $data['retention_interval'] ?? null;
        $this->container['sessions_current_billing_period'] = $data['sessions_current_billing_period'] ?? null;
        $this->container['sessions_last_billing_period'] = $data['sessions_last_billing_period'] ?? null;
        $this->container['sessions_trial_billing_period'] = $data['sessions_trial_billing_period'] ?? null;
        $this->container['trial_expiration'] = $data['trial_expiration'] ?? null;
        $this->container['trial_expired'] = $data['trial_expired'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cost_per_thousand
     *
     * @return float|null
     */
    public function getCostPerThousand()
    {
        return $this->container['cost_per_thousand'];
    }

    /**
     * Sets cost_per_thousand
     *
     * @param float|null $cost_per_thousand Cost per one thousand sessions
     *
     * @return self
     */
    public function setCostPerThousand($cost_per_thousand)
    {
        $this->container['cost_per_thousand'] = $cost_per_thousand;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets retention_interval
     *
     * @return string|null
     */
    public function getRetentionInterval()
    {
        return $this->container['retention_interval'];
    }

    /**
     * Sets retention_interval
     *
     * @param string|null $retention_interval How long screen recording data is retained
     *
     * @return self
     */
    public function setRetentionInterval($retention_interval)
    {
        $this->container['retention_interval'] = $retention_interval;

        return $this;
    }

    /**
     * Gets sessions_current_billing_period
     *
     * @return int|null
     */
    public function getSessionsCurrentBillingPeriod()
    {
        return $this->container['sessions_current_billing_period'];
    }

    /**
     * Sets sessions_current_billing_period
     *
     * @param int|null $sessions_current_billing_period sessions_current_billing_period
     *
     * @return self
     */
    public function setSessionsCurrentBillingPeriod($sessions_current_billing_period)
    {
        $this->container['sessions_current_billing_period'] = $sessions_current_billing_period;

        return $this;
    }

    /**
     * Gets sessions_last_billing_period
     *
     * @return int|null
     */
    public function getSessionsLastBillingPeriod()
    {
        return $this->container['sessions_last_billing_period'];
    }

    /**
     * Sets sessions_last_billing_period
     *
     * @param int|null $sessions_last_billing_period sessions_last_billing_period
     *
     * @return self
     */
    public function setSessionsLastBillingPeriod($sessions_last_billing_period)
    {
        $this->container['sessions_last_billing_period'] = $sessions_last_billing_period;

        return $this;
    }

    /**
     * Gets sessions_trial_billing_period
     *
     * @return int|null
     */
    public function getSessionsTrialBillingPeriod()
    {
        return $this->container['sessions_trial_billing_period'];
    }

    /**
     * Sets sessions_trial_billing_period
     *
     * @param int|null $sessions_trial_billing_period sessions_trial_billing_period
     *
     * @return self
     */
    public function setSessionsTrialBillingPeriod($sessions_trial_billing_period)
    {
        $this->container['sessions_trial_billing_period'] = $sessions_trial_billing_period;

        return $this;
    }

    /**
     * Gets trial_expiration
     *
     * @return string|null
     */
    public function getTrialExpiration()
    {
        return $this->container['trial_expiration'];
    }

    /**
     * Sets trial_expiration
     *
     * @param string|null $trial_expiration trial_expiration
     *
     * @return self
     */
    public function setTrialExpiration($trial_expiration)
    {
        $this->container['trial_expiration'] = $trial_expiration;

        return $this;
    }

    /**
     * Gets trial_expired
     *
     * @return bool|null
     */
    public function getTrialExpired()
    {
        return $this->container['trial_expired'];
    }

    /**
     * Sets trial_expired
     *
     * @param bool|null $trial_expired trial_expired
     *
     * @return self
     */
    public function setTrialExpired($trial_expired)
    {
        $this->container['trial_expired'] = $trial_expired;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


