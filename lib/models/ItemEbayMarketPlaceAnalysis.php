<?php
/**
 * ItemEbayMarketPlaceAnalysis
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * ItemEbayMarketPlaceAnalysis Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemEbayMarketPlaceAnalysis implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ItemEbayMarketPlaceAnalysis';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'adjusted_price' => 'float',
        'adjusted_shipping' => 'float',
        'adjusted_total' => 'float',
        'cogs' => 'float',
        'final_value_fee' => 'float',
        'minimum_advertised_price' => 'float',
        'other_listings' => '\ultracart\v2\models\ItemEbayMarketListing[]',
        'our_listing' => '\ultracart\v2\models\ItemEbayMarketListing',
        'overhead' => 'float',
        'profit_potential' => 'float'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'adjusted_price' => 'adjusted_price',
        'adjusted_shipping' => 'adjusted_shipping',
        'adjusted_total' => 'adjusted_total',
        'cogs' => 'cogs',
        'final_value_fee' => 'final_value_fee',
        'minimum_advertised_price' => 'minimum_advertised_price',
        'other_listings' => 'other_listings',
        'our_listing' => 'our_listing',
        'overhead' => 'overhead',
        'profit_potential' => 'profit_potential'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'adjusted_price' => 'setAdjustedPrice',
        'adjusted_shipping' => 'setAdjustedShipping',
        'adjusted_total' => 'setAdjustedTotal',
        'cogs' => 'setCogs',
        'final_value_fee' => 'setFinalValueFee',
        'minimum_advertised_price' => 'setMinimumAdvertisedPrice',
        'other_listings' => 'setOtherListings',
        'our_listing' => 'setOurListing',
        'overhead' => 'setOverhead',
        'profit_potential' => 'setProfitPotential'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'adjusted_price' => 'getAdjustedPrice',
        'adjusted_shipping' => 'getAdjustedShipping',
        'adjusted_total' => 'getAdjustedTotal',
        'cogs' => 'getCogs',
        'final_value_fee' => 'getFinalValueFee',
        'minimum_advertised_price' => 'getMinimumAdvertisedPrice',
        'other_listings' => 'getOtherListings',
        'our_listing' => 'getOurListing',
        'overhead' => 'getOverhead',
        'profit_potential' => 'getProfitPotential'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adjusted_price'] = isset($data['adjusted_price']) ? $data['adjusted_price'] : null;
        $this->container['adjusted_shipping'] = isset($data['adjusted_shipping']) ? $data['adjusted_shipping'] : null;
        $this->container['adjusted_total'] = isset($data['adjusted_total']) ? $data['adjusted_total'] : null;
        $this->container['cogs'] = isset($data['cogs']) ? $data['cogs'] : null;
        $this->container['final_value_fee'] = isset($data['final_value_fee']) ? $data['final_value_fee'] : null;
        $this->container['minimum_advertised_price'] = isset($data['minimum_advertised_price']) ? $data['minimum_advertised_price'] : null;
        $this->container['other_listings'] = isset($data['other_listings']) ? $data['other_listings'] : null;
        $this->container['our_listing'] = isset($data['our_listing']) ? $data['our_listing'] : null;
        $this->container['overhead'] = isset($data['overhead']) ? $data['overhead'] : null;
        $this->container['profit_potential'] = isset($data['profit_potential']) ? $data['profit_potential'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets adjusted_price
     * @return float
     */
    public function getAdjustedPrice()
    {
        return $this->container['adjusted_price'];
    }

    /**
     * Sets adjusted_price
     * @param float $adjusted_price Adjusted price
     * @return $this
     */
    public function setAdjustedPrice($adjusted_price)
    {
        $this->container['adjusted_price'] = $adjusted_price;

        return $this;
    }

    /**
     * Gets adjusted_shipping
     * @return float
     */
    public function getAdjustedShipping()
    {
        return $this->container['adjusted_shipping'];
    }

    /**
     * Sets adjusted_shipping
     * @param float $adjusted_shipping Adjusted shipping
     * @return $this
     */
    public function setAdjustedShipping($adjusted_shipping)
    {
        $this->container['adjusted_shipping'] = $adjusted_shipping;

        return $this;
    }

    /**
     * Gets adjusted_total
     * @return float
     */
    public function getAdjustedTotal()
    {
        return $this->container['adjusted_total'];
    }

    /**
     * Sets adjusted_total
     * @param float $adjusted_total Adjusted total
     * @return $this
     */
    public function setAdjustedTotal($adjusted_total)
    {
        $this->container['adjusted_total'] = $adjusted_total;

        return $this;
    }

    /**
     * Gets cogs
     * @return float
     */
    public function getCogs()
    {
        return $this->container['cogs'];
    }

    /**
     * Sets cogs
     * @param float $cogs Cost of goods sold
     * @return $this
     */
    public function setCogs($cogs)
    {
        $this->container['cogs'] = $cogs;

        return $this;
    }

    /**
     * Gets final_value_fee
     * @return float
     */
    public function getFinalValueFee()
    {
        return $this->container['final_value_fee'];
    }

    /**
     * Sets final_value_fee
     * @param float $final_value_fee Final value fee
     * @return $this
     */
    public function setFinalValueFee($final_value_fee)
    {
        $this->container['final_value_fee'] = $final_value_fee;

        return $this;
    }

    /**
     * Gets minimum_advertised_price
     * @return float
     */
    public function getMinimumAdvertisedPrice()
    {
        return $this->container['minimum_advertised_price'];
    }

    /**
     * Sets minimum_advertised_price
     * @param float $minimum_advertised_price Minimum advertised price
     * @return $this
     */
    public function setMinimumAdvertisedPrice($minimum_advertised_price)
    {
        $this->container['minimum_advertised_price'] = $minimum_advertised_price;

        return $this;
    }

    /**
     * Gets other_listings
     * @return \ultracart\v2\models\ItemEbayMarketListing[]
     */
    public function getOtherListings()
    {
        return $this->container['other_listings'];
    }

    /**
     * Sets other_listings
     * @param \ultracart\v2\models\ItemEbayMarketListing[] $other_listings Other listings
     * @return $this
     */
    public function setOtherListings($other_listings)
    {
        $this->container['other_listings'] = $other_listings;

        return $this;
    }

    /**
     * Gets our_listing
     * @return \ultracart\v2\models\ItemEbayMarketListing
     */
    public function getOurListing()
    {
        return $this->container['our_listing'];
    }

    /**
     * Sets our_listing
     * @param \ultracart\v2\models\ItemEbayMarketListing $our_listing
     * @return $this
     */
    public function setOurListing($our_listing)
    {
        $this->container['our_listing'] = $our_listing;

        return $this;
    }

    /**
     * Gets overhead
     * @return float
     */
    public function getOverhead()
    {
        return $this->container['overhead'];
    }

    /**
     * Sets overhead
     * @param float $overhead Overhead
     * @return $this
     */
    public function setOverhead($overhead)
    {
        $this->container['overhead'] = $overhead;

        return $this;
    }

    /**
     * Gets profit_potential
     * @return float
     */
    public function getProfitPotential()
    {
        return $this->container['profit_potential'];
    }

    /**
     * Sets profit_potential
     * @param float $profit_potential Profit potential
     * @return $this
     */
    public function setProfitPotential($profit_potential)
    {
        $this->container['profit_potential'] = $profit_potential;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


