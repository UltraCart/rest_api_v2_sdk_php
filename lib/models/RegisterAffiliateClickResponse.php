<?php
/**
 * RegisterAffiliateClickResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * RegisterAffiliateClickResponse Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RegisterAffiliateClickResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RegisterAffiliateClickResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cookie_max_age' => 'int',
        'cookie_names' => 'string[]',
        'cookie_values' => 'string[]',
        'registered' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cookie_max_age' => 'int32',
        'cookie_names' => null,
        'cookie_values' => null,
        'registered' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cookie_max_age' => 'cookie_max_age',
        'cookie_names' => 'cookie_names',
        'cookie_values' => 'cookie_values',
        'registered' => 'registered'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cookie_max_age' => 'setCookieMaxAge',
        'cookie_names' => 'setCookieNames',
        'cookie_values' => 'setCookieValues',
        'registered' => 'setRegistered'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cookie_max_age' => 'getCookieMaxAge',
        'cookie_names' => 'getCookieNames',
        'cookie_values' => 'getCookieValues',
        'registered' => 'getRegistered'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cookie_max_age'] = isset($data['cookie_max_age']) ? $data['cookie_max_age'] : null;
        $this->container['cookie_names'] = isset($data['cookie_names']) ? $data['cookie_names'] : null;
        $this->container['cookie_values'] = isset($data['cookie_values']) ? $data['cookie_values'] : null;
        $this->container['registered'] = isset($data['registered']) ? $data['registered'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cookie_max_age
     *
     * @return int
     */
    public function getCookieMaxAge()
    {
        return $this->container['cookie_max_age'];
    }

    /**
     * Sets cookie_max_age
     *
     * @param int $cookie_max_age The cookie max age to use
     *
     * @return $this
     */
    public function setCookieMaxAge($cookie_max_age)
    {
        $this->container['cookie_max_age'] = $cookie_max_age;

        return $this;
    }

    /**
     * Gets cookie_names
     *
     * @return string[]
     */
    public function getCookieNames()
    {
        return $this->container['cookie_names'];
    }

    /**
     * Sets cookie_names
     *
     * @param string[] $cookie_names The names of all the cookies to set on the browser
     *
     * @return $this
     */
    public function setCookieNames($cookie_names)
    {
        $this->container['cookie_names'] = $cookie_names;

        return $this;
    }

    /**
     * Gets cookie_values
     *
     * @return string[]
     */
    public function getCookieValues()
    {
        return $this->container['cookie_values'];
    }

    /**
     * Sets cookie_values
     *
     * @param string[] $cookie_values The values of all the cookies to set on the browser
     *
     * @return $this
     */
    public function setCookieValues($cookie_values)
    {
        $this->container['cookie_values'] = $cookie_values;

        return $this;
    }

    /**
     * Gets registered
     *
     * @return bool
     */
    public function getRegistered()
    {
        return $this->container['registered'];
    }

    /**
     * Sets registered
     *
     * @param bool $registered True if a click was registered
     *
     * @return $this
     */
    public function setRegistered($registered)
    {
        $this->container['registered'] = $registered;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


