<?php
/**
 * EmailSegment
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * EmailSegment Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailSegment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailSegment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_csv_download' => 'bool',
        'allow_facebook_audiences' => 'bool',
        'created_dts' => 'string',
        'deleted' => 'bool',
        'email_segment_uuid' => 'string',
        'facebook_custom_audience' => 'bool',
        'filter_profile_equation_json' => 'string',
        'member_count' => 'int',
        'merchant_id' => 'string',
        'name' => 'string',
        'rank_json' => 'string',
        'rebuild_required' => 'bool',
        'storefront_oid' => 'int',
        'used_by' => '\ultracart\v2\models\EmailListSegmentUsedBy[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_csv_download' => null,
        'allow_facebook_audiences' => null,
        'created_dts' => 'dateTime',
        'deleted' => null,
        'email_segment_uuid' => null,
        'facebook_custom_audience' => null,
        'filter_profile_equation_json' => null,
        'member_count' => 'int32',
        'merchant_id' => null,
        'name' => null,
        'rank_json' => null,
        'rebuild_required' => null,
        'storefront_oid' => 'int32',
        'used_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_csv_download' => 'allow_csv_download',
        'allow_facebook_audiences' => 'allow_facebook_audiences',
        'created_dts' => 'created_dts',
        'deleted' => 'deleted',
        'email_segment_uuid' => 'email_segment_uuid',
        'facebook_custom_audience' => 'facebook_custom_audience',
        'filter_profile_equation_json' => 'filter_profile_equation_json',
        'member_count' => 'member_count',
        'merchant_id' => 'merchant_id',
        'name' => 'name',
        'rank_json' => 'rank_json',
        'rebuild_required' => 'rebuild_required',
        'storefront_oid' => 'storefront_oid',
        'used_by' => 'used_by'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_csv_download' => 'setAllowCsvDownload',
        'allow_facebook_audiences' => 'setAllowFacebookAudiences',
        'created_dts' => 'setCreatedDts',
        'deleted' => 'setDeleted',
        'email_segment_uuid' => 'setEmailSegmentUuid',
        'facebook_custom_audience' => 'setFacebookCustomAudience',
        'filter_profile_equation_json' => 'setFilterProfileEquationJson',
        'member_count' => 'setMemberCount',
        'merchant_id' => 'setMerchantId',
        'name' => 'setName',
        'rank_json' => 'setRankJson',
        'rebuild_required' => 'setRebuildRequired',
        'storefront_oid' => 'setStorefrontOid',
        'used_by' => 'setUsedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_csv_download' => 'getAllowCsvDownload',
        'allow_facebook_audiences' => 'getAllowFacebookAudiences',
        'created_dts' => 'getCreatedDts',
        'deleted' => 'getDeleted',
        'email_segment_uuid' => 'getEmailSegmentUuid',
        'facebook_custom_audience' => 'getFacebookCustomAudience',
        'filter_profile_equation_json' => 'getFilterProfileEquationJson',
        'member_count' => 'getMemberCount',
        'merchant_id' => 'getMerchantId',
        'name' => 'getName',
        'rank_json' => 'getRankJson',
        'rebuild_required' => 'getRebuildRequired',
        'storefront_oid' => 'getStorefrontOid',
        'used_by' => 'getUsedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_csv_download'] = isset($data['allow_csv_download']) ? $data['allow_csv_download'] : null;
        $this->container['allow_facebook_audiences'] = isset($data['allow_facebook_audiences']) ? $data['allow_facebook_audiences'] : null;
        $this->container['created_dts'] = isset($data['created_dts']) ? $data['created_dts'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['email_segment_uuid'] = isset($data['email_segment_uuid']) ? $data['email_segment_uuid'] : null;
        $this->container['facebook_custom_audience'] = isset($data['facebook_custom_audience']) ? $data['facebook_custom_audience'] : null;
        $this->container['filter_profile_equation_json'] = isset($data['filter_profile_equation_json']) ? $data['filter_profile_equation_json'] : null;
        $this->container['member_count'] = isset($data['member_count']) ? $data['member_count'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['rank_json'] = isset($data['rank_json']) ? $data['rank_json'] : null;
        $this->container['rebuild_required'] = isset($data['rebuild_required']) ? $data['rebuild_required'] : null;
        $this->container['storefront_oid'] = isset($data['storefront_oid']) ? $data['storefront_oid'] : null;
        $this->container['used_by'] = isset($data['used_by']) ? $data['used_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 250)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 250.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_csv_download
     *
     * @return bool
     */
    public function getAllowCsvDownload()
    {
        return $this->container['allow_csv_download'];
    }

    /**
     * Sets allow_csv_download
     *
     * @param bool $allow_csv_download True if the current user has the rights to download this segment.
     *
     * @return $this
     */
    public function setAllowCsvDownload($allow_csv_download)
    {
        $this->container['allow_csv_download'] = $allow_csv_download;

        return $this;
    }

    /**
     * Gets allow_facebook_audiences
     *
     * @return bool
     */
    public function getAllowFacebookAudiences()
    {
        return $this->container['allow_facebook_audiences'];
    }

    /**
     * Sets allow_facebook_audiences
     *
     * @param bool $allow_facebook_audiences True if this StoreFront has the Facebook Analytics app connected and supports them
     *
     * @return $this
     */
    public function setAllowFacebookAudiences($allow_facebook_audiences)
    {
        $this->container['allow_facebook_audiences'] = $allow_facebook_audiences;

        return $this;
    }

    /**
     * Gets created_dts
     *
     * @return string
     */
    public function getCreatedDts()
    {
        return $this->container['created_dts'];
    }

    /**
     * Sets created_dts
     *
     * @param string $created_dts Created date
     *
     * @return $this
     */
    public function setCreatedDts($created_dts)
    {
        $this->container['created_dts'] = $created_dts;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted True if this campaign was deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets email_segment_uuid
     *
     * @return string
     */
    public function getEmailSegmentUuid()
    {
        return $this->container['email_segment_uuid'];
    }

    /**
     * Sets email_segment_uuid
     *
     * @param string $email_segment_uuid Email segment UUID
     *
     * @return $this
     */
    public function setEmailSegmentUuid($email_segment_uuid)
    {
        $this->container['email_segment_uuid'] = $email_segment_uuid;

        return $this;
    }

    /**
     * Gets facebook_custom_audience
     *
     * @return bool
     */
    public function getFacebookCustomAudience()
    {
        return $this->container['facebook_custom_audience'];
    }

    /**
     * Sets facebook_custom_audience
     *
     * @param bool $facebook_custom_audience True if you want to sync to a facebook custom audience
     *
     * @return $this
     */
    public function setFacebookCustomAudience($facebook_custom_audience)
    {
        $this->container['facebook_custom_audience'] = $facebook_custom_audience;

        return $this;
    }

    /**
     * Gets filter_profile_equation_json
     *
     * @return string
     */
    public function getFilterProfileEquationJson()
    {
        return $this->container['filter_profile_equation_json'];
    }

    /**
     * Sets filter_profile_equation_json
     *
     * @param string $filter_profile_equation_json File profile equation json
     *
     * @return $this
     */
    public function setFilterProfileEquationJson($filter_profile_equation_json)
    {
        $this->container['filter_profile_equation_json'] = $filter_profile_equation_json;

        return $this;
    }

    /**
     * Gets member_count
     *
     * @return int
     */
    public function getMemberCount()
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     *
     * @param int $member_count Count of members in this segment
     *
     * @return $this
     */
    public function setMemberCount($member_count)
    {
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id Merchant ID
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of email segment
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 250)) {
            throw new \InvalidArgumentException('invalid length for $name when calling EmailSegment., must be smaller than or equal to 250.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rank_json
     *
     * @return string
     */
    public function getRankJson()
    {
        return $this->container['rank_json'];
    }

    /**
     * Sets rank_json
     *
     * @param string $rank_json Rank settings json
     *
     * @return $this
     */
    public function setRankJson($rank_json)
    {
        $this->container['rank_json'] = $rank_json;

        return $this;
    }

    /**
     * Gets rebuild_required
     *
     * @return bool
     */
    public function getRebuildRequired()
    {
        return $this->container['rebuild_required'];
    }

    /**
     * Sets rebuild_required
     *
     * @param bool $rebuild_required True if a rebuild is required because some part of the segment has changed
     *
     * @return $this
     */
    public function setRebuildRequired($rebuild_required)
    {
        $this->container['rebuild_required'] = $rebuild_required;

        return $this;
    }

    /**
     * Gets storefront_oid
     *
     * @return int
     */
    public function getStorefrontOid()
    {
        return $this->container['storefront_oid'];
    }

    /**
     * Sets storefront_oid
     *
     * @param int $storefront_oid Storefront oid
     *
     * @return $this
     */
    public function setStorefrontOid($storefront_oid)
    {
        $this->container['storefront_oid'] = $storefront_oid;

        return $this;
    }

    /**
     * Gets used_by
     *
     * @return \ultracart\v2\models\EmailListSegmentUsedBy[]
     */
    public function getUsedBy()
    {
        return $this->container['used_by'];
    }

    /**
     * Sets used_by
     *
     * @param \ultracart\v2\models\EmailListSegmentUsedBy[] $used_by Details on the flows or campaigns that use this list.
     *
     * @return $this
     */
    public function setUsedBy($used_by)
    {
        $this->container['used_by'] = $used_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


