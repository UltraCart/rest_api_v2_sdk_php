<?php
/**
 * ItemShippingDistributionCenter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemShippingDistributionCenter Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemShippingDistributionCenter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemShippingDistributionCenter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allocated_to_placed_orders' => 'float',
        'allocated_to_shopping_carts' => 'float',
        'available_to_allocate' => 'float',
        'cogs' => 'float',
        'desired_inventory_level' => 'float',
        'distribution_center_code' => 'string',
        'distribution_center_oid' => 'int',
        'eta' => 'string',
        'handles' => 'bool',
        'inventory_level' => 'float',
        'maximum_backorder' => 'int',
        'reorder_inventory_level' => 'float',
        'sku' => 'string',
        'stock_picking_location' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allocated_to_placed_orders' => null,
        'allocated_to_shopping_carts' => null,
        'available_to_allocate' => null,
        'cogs' => null,
        'desired_inventory_level' => null,
        'distribution_center_code' => null,
        'distribution_center_oid' => 'int32',
        'eta' => 'dateTime',
        'handles' => null,
        'inventory_level' => null,
        'maximum_backorder' => 'int32',
        'reorder_inventory_level' => null,
        'sku' => null,
        'stock_picking_location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allocated_to_placed_orders' => 'allocated_to_placed_orders',
        'allocated_to_shopping_carts' => 'allocated_to_shopping_carts',
        'available_to_allocate' => 'available_to_allocate',
        'cogs' => 'cogs',
        'desired_inventory_level' => 'desired_inventory_level',
        'distribution_center_code' => 'distribution_center_code',
        'distribution_center_oid' => 'distribution_center_oid',
        'eta' => 'eta',
        'handles' => 'handles',
        'inventory_level' => 'inventory_level',
        'maximum_backorder' => 'maximum_backorder',
        'reorder_inventory_level' => 'reorder_inventory_level',
        'sku' => 'sku',
        'stock_picking_location' => 'stock_picking_location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allocated_to_placed_orders' => 'setAllocatedToPlacedOrders',
        'allocated_to_shopping_carts' => 'setAllocatedToShoppingCarts',
        'available_to_allocate' => 'setAvailableToAllocate',
        'cogs' => 'setCogs',
        'desired_inventory_level' => 'setDesiredInventoryLevel',
        'distribution_center_code' => 'setDistributionCenterCode',
        'distribution_center_oid' => 'setDistributionCenterOid',
        'eta' => 'setEta',
        'handles' => 'setHandles',
        'inventory_level' => 'setInventoryLevel',
        'maximum_backorder' => 'setMaximumBackorder',
        'reorder_inventory_level' => 'setReorderInventoryLevel',
        'sku' => 'setSku',
        'stock_picking_location' => 'setStockPickingLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allocated_to_placed_orders' => 'getAllocatedToPlacedOrders',
        'allocated_to_shopping_carts' => 'getAllocatedToShoppingCarts',
        'available_to_allocate' => 'getAvailableToAllocate',
        'cogs' => 'getCogs',
        'desired_inventory_level' => 'getDesiredInventoryLevel',
        'distribution_center_code' => 'getDistributionCenterCode',
        'distribution_center_oid' => 'getDistributionCenterOid',
        'eta' => 'getEta',
        'handles' => 'getHandles',
        'inventory_level' => 'getInventoryLevel',
        'maximum_backorder' => 'getMaximumBackorder',
        'reorder_inventory_level' => 'getReorderInventoryLevel',
        'sku' => 'getSku',
        'stock_picking_location' => 'getStockPickingLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allocated_to_placed_orders'] = $data['allocated_to_placed_orders'] ?? null;
        $this->container['allocated_to_shopping_carts'] = $data['allocated_to_shopping_carts'] ?? null;
        $this->container['available_to_allocate'] = $data['available_to_allocate'] ?? null;
        $this->container['cogs'] = $data['cogs'] ?? null;
        $this->container['desired_inventory_level'] = $data['desired_inventory_level'] ?? null;
        $this->container['distribution_center_code'] = $data['distribution_center_code'] ?? null;
        $this->container['distribution_center_oid'] = $data['distribution_center_oid'] ?? null;
        $this->container['eta'] = $data['eta'] ?? null;
        $this->container['handles'] = $data['handles'] ?? null;
        $this->container['inventory_level'] = $data['inventory_level'] ?? null;
        $this->container['maximum_backorder'] = $data['maximum_backorder'] ?? null;
        $this->container['reorder_inventory_level'] = $data['reorder_inventory_level'] ?? null;
        $this->container['sku'] = $data['sku'] ?? null;
        $this->container['stock_picking_location'] = $data['stock_picking_location'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sku']) && (mb_strlen($this->container['sku']) > 50)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['stock_picking_location']) && (mb_strlen($this->container['stock_picking_location']) > 20)) {
            $invalidProperties[] = "invalid value for 'stock_picking_location', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allocated_to_placed_orders
     *
     * @return float|null
     */
    public function getAllocatedToPlacedOrders()
    {
        return $this->container['allocated_to_placed_orders'];
    }

    /**
     * Sets allocated_to_placed_orders
     *
     * @param float|null $allocated_to_placed_orders Allocated to placed orders
     *
     * @return self
     */
    public function setAllocatedToPlacedOrders($allocated_to_placed_orders)
    {
        $this->container['allocated_to_placed_orders'] = $allocated_to_placed_orders;

        return $this;
    }

    /**
     * Gets allocated_to_shopping_carts
     *
     * @return float|null
     */
    public function getAllocatedToShoppingCarts()
    {
        return $this->container['allocated_to_shopping_carts'];
    }

    /**
     * Sets allocated_to_shopping_carts
     *
     * @param float|null $allocated_to_shopping_carts Allocated to shopping carts
     *
     * @return self
     */
    public function setAllocatedToShoppingCarts($allocated_to_shopping_carts)
    {
        $this->container['allocated_to_shopping_carts'] = $allocated_to_shopping_carts;

        return $this;
    }

    /**
     * Gets available_to_allocate
     *
     * @return float|null
     */
    public function getAvailableToAllocate()
    {
        return $this->container['available_to_allocate'];
    }

    /**
     * Sets available_to_allocate
     *
     * @param float|null $available_to_allocate Available to allocate
     *
     * @return self
     */
    public function setAvailableToAllocate($available_to_allocate)
    {
        $this->container['available_to_allocate'] = $available_to_allocate;

        return $this;
    }

    /**
     * Gets cogs
     *
     * @return float|null
     */
    public function getCogs()
    {
        return $this->container['cogs'];
    }

    /**
     * Sets cogs
     *
     * @param float|null $cogs Cost of goods sold override at the distribution center level
     *
     * @return self
     */
    public function setCogs($cogs)
    {
        $this->container['cogs'] = $cogs;

        return $this;
    }

    /**
     * Gets desired_inventory_level
     *
     * @return float|null
     */
    public function getDesiredInventoryLevel()
    {
        return $this->container['desired_inventory_level'];
    }

    /**
     * Sets desired_inventory_level
     *
     * @param float|null $desired_inventory_level Desired inventory level
     *
     * @return self
     */
    public function setDesiredInventoryLevel($desired_inventory_level)
    {
        $this->container['desired_inventory_level'] = $desired_inventory_level;

        return $this;
    }

    /**
     * Gets distribution_center_code
     *
     * @return string|null
     */
    public function getDistributionCenterCode()
    {
        return $this->container['distribution_center_code'];
    }

    /**
     * Sets distribution_center_code
     *
     * @param string|null $distribution_center_code Distribution center code
     *
     * @return self
     */
    public function setDistributionCenterCode($distribution_center_code)
    {
        $this->container['distribution_center_code'] = $distribution_center_code;

        return $this;
    }

    /**
     * Gets distribution_center_oid
     *
     * @return int|null
     */
    public function getDistributionCenterOid()
    {
        return $this->container['distribution_center_oid'];
    }

    /**
     * Sets distribution_center_oid
     *
     * @param int|null $distribution_center_oid Distribution center object identifier
     *
     * @return self
     */
    public function setDistributionCenterOid($distribution_center_oid)
    {
        $this->container['distribution_center_oid'] = $distribution_center_oid;

        return $this;
    }

    /**
     * Gets eta
     *
     * @return string|null
     */
    public function getEta()
    {
        return $this->container['eta'];
    }

    /**
     * Sets eta
     *
     * @param string|null $eta Estimated time of arrival
     *
     * @return self
     */
    public function setEta($eta)
    {
        $this->container['eta'] = $eta;

        return $this;
    }

    /**
     * Gets handles
     *
     * @return bool|null
     */
    public function getHandles()
    {
        return $this->container['handles'];
    }

    /**
     * Sets handles
     *
     * @param bool|null $handles True if this distribution center handles this item
     *
     * @return self
     */
    public function setHandles($handles)
    {
        $this->container['handles'] = $handles;

        return $this;
    }

    /**
     * Gets inventory_level
     *
     * @return float|null
     */
    public function getInventoryLevel()
    {
        return $this->container['inventory_level'];
    }

    /**
     * Sets inventory_level
     *
     * @param float|null $inventory_level Inventory level
     *
     * @return self
     */
    public function setInventoryLevel($inventory_level)
    {
        $this->container['inventory_level'] = $inventory_level;

        return $this;
    }

    /**
     * Gets maximum_backorder
     *
     * @return int|null
     */
    public function getMaximumBackorder()
    {
        return $this->container['maximum_backorder'];
    }

    /**
     * Sets maximum_backorder
     *
     * @param int|null $maximum_backorder Maximum back-order
     *
     * @return self
     */
    public function setMaximumBackorder($maximum_backorder)
    {
        $this->container['maximum_backorder'] = $maximum_backorder;

        return $this;
    }

    /**
     * Gets reorder_inventory_level
     *
     * @return float|null
     */
    public function getReorderInventoryLevel()
    {
        return $this->container['reorder_inventory_level'];
    }

    /**
     * Sets reorder_inventory_level
     *
     * @param float|null $reorder_inventory_level Reorder inventory level (triggers notification)
     *
     * @return self
     */
    public function setReorderInventoryLevel($reorder_inventory_level)
    {
        $this->container['reorder_inventory_level'] = $reorder_inventory_level;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku SKU
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (!is_null($sku) && (mb_strlen($sku) > 50)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling ItemShippingDistributionCenter., must be smaller than or equal to 50.');
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets stock_picking_location
     *
     * @return string|null
     */
    public function getStockPickingLocation()
    {
        return $this->container['stock_picking_location'];
    }

    /**
     * Sets stock_picking_location
     *
     * @param string|null $stock_picking_location Stock picking location
     *
     * @return self
     */
    public function setStockPickingLocation($stock_picking_location)
    {
        if (!is_null($stock_picking_location) && (mb_strlen($stock_picking_location) > 20)) {
            throw new \InvalidArgumentException('invalid length for $stock_picking_location when calling ItemShippingDistributionCenter., must be smaller than or equal to 20.');
        }

        $this->container['stock_picking_location'] = $stock_picking_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


