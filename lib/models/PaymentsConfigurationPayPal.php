<?php
/**
 * PaymentsConfigurationPayPal
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsConfigurationPayPal Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsConfigurationPayPal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsConfigurationPayPal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accept_pay_pal' => 'bool',
        'paypal_accounting_code' => 'string',
        'paypal_api_password' => 'string',
        'paypal_api_user_name' => 'string',
        'paypal_certificate_on_file' => 'bool',
        'paypal_deposit_to_account' => 'string',
        'paypal_email' => 'string',
        'paypal_environment' => 'string',
        'paypal_header_image_url' => 'string',
        'paypal_hide_bill_me_later' => 'bool',
        'paypal_hide_express_checkout_on_view_cart' => 'bool',
        'paypal_hide_for_unshipped_orders' => 'bool',
        'paypal_hold_in_ar' => 'bool',
        'paypal_landing_page' => 'string',
        'paypal_mode' => 'string',
        'paypal_private_key_password' => 'string',
        'paypal_processing_fee' => 'string',
        'paypal_processing_perc' => 'string',
        'paypal_send_recurring' => 'string',
        'paypal_show_card_logos_not_directly_supported' => 'bool',
        'paypal_show_signature' => 'bool',
        'paypal_signature' => 'string',
        'paypal_solution_type' => 'string',
        'paypal_summary_email' => 'string',
        'paypal_summary_mode' => 'string',
        'paypal_zero_dollar_penny' => 'bool',
        'push_pay_pal' => 'bool',
        'restrictions' => '\ultracart\v2\models\PaymentsConfigurationRestrictions',
        'short_pay_pal_marketing_text' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accept_pay_pal' => null,
        'paypal_accounting_code' => null,
        'paypal_api_password' => null,
        'paypal_api_user_name' => null,
        'paypal_certificate_on_file' => null,
        'paypal_deposit_to_account' => null,
        'paypal_email' => null,
        'paypal_environment' => null,
        'paypal_header_image_url' => null,
        'paypal_hide_bill_me_later' => null,
        'paypal_hide_express_checkout_on_view_cart' => null,
        'paypal_hide_for_unshipped_orders' => null,
        'paypal_hold_in_ar' => null,
        'paypal_landing_page' => null,
        'paypal_mode' => null,
        'paypal_private_key_password' => null,
        'paypal_processing_fee' => null,
        'paypal_processing_perc' => null,
        'paypal_send_recurring' => null,
        'paypal_show_card_logos_not_directly_supported' => null,
        'paypal_show_signature' => null,
        'paypal_signature' => null,
        'paypal_solution_type' => null,
        'paypal_summary_email' => null,
        'paypal_summary_mode' => null,
        'paypal_zero_dollar_penny' => null,
        'push_pay_pal' => null,
        'restrictions' => null,
        'short_pay_pal_marketing_text' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accept_pay_pal' => 'acceptPayPal',
        'paypal_accounting_code' => 'paypalAccountingCode',
        'paypal_api_password' => 'paypalApiPassword',
        'paypal_api_user_name' => 'paypalApiUserName',
        'paypal_certificate_on_file' => 'paypalCertificateOnFile',
        'paypal_deposit_to_account' => 'paypalDepositToAccount',
        'paypal_email' => 'paypalEmail',
        'paypal_environment' => 'paypalEnvironment',
        'paypal_header_image_url' => 'paypalHeaderImageUrl',
        'paypal_hide_bill_me_later' => 'paypalHideBillMeLater',
        'paypal_hide_express_checkout_on_view_cart' => 'paypalHideExpressCheckoutOnViewCart',
        'paypal_hide_for_unshipped_orders' => 'paypalHideForUnshippedOrders',
        'paypal_hold_in_ar' => 'paypalHoldInAR',
        'paypal_landing_page' => 'paypalLandingPage',
        'paypal_mode' => 'paypalMode',
        'paypal_private_key_password' => 'paypalPrivateKeyPassword',
        'paypal_processing_fee' => 'paypalProcessingFee',
        'paypal_processing_perc' => 'paypalProcessingPerc',
        'paypal_send_recurring' => 'paypalSendRecurring',
        'paypal_show_card_logos_not_directly_supported' => 'paypalShowCardLogosNotDirectlySupported',
        'paypal_show_signature' => 'paypalShowSignature',
        'paypal_signature' => 'paypalSignature',
        'paypal_solution_type' => 'paypalSolutionType',
        'paypal_summary_email' => 'paypalSummaryEmail',
        'paypal_summary_mode' => 'paypalSummaryMode',
        'paypal_zero_dollar_penny' => 'paypalZeroDollarPenny',
        'push_pay_pal' => 'pushPayPal',
        'restrictions' => 'restrictions',
        'short_pay_pal_marketing_text' => 'shortPayPalMarketingText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accept_pay_pal' => 'setAcceptPayPal',
        'paypal_accounting_code' => 'setPaypalAccountingCode',
        'paypal_api_password' => 'setPaypalApiPassword',
        'paypal_api_user_name' => 'setPaypalApiUserName',
        'paypal_certificate_on_file' => 'setPaypalCertificateOnFile',
        'paypal_deposit_to_account' => 'setPaypalDepositToAccount',
        'paypal_email' => 'setPaypalEmail',
        'paypal_environment' => 'setPaypalEnvironment',
        'paypal_header_image_url' => 'setPaypalHeaderImageUrl',
        'paypal_hide_bill_me_later' => 'setPaypalHideBillMeLater',
        'paypal_hide_express_checkout_on_view_cart' => 'setPaypalHideExpressCheckoutOnViewCart',
        'paypal_hide_for_unshipped_orders' => 'setPaypalHideForUnshippedOrders',
        'paypal_hold_in_ar' => 'setPaypalHoldInAr',
        'paypal_landing_page' => 'setPaypalLandingPage',
        'paypal_mode' => 'setPaypalMode',
        'paypal_private_key_password' => 'setPaypalPrivateKeyPassword',
        'paypal_processing_fee' => 'setPaypalProcessingFee',
        'paypal_processing_perc' => 'setPaypalProcessingPerc',
        'paypal_send_recurring' => 'setPaypalSendRecurring',
        'paypal_show_card_logos_not_directly_supported' => 'setPaypalShowCardLogosNotDirectlySupported',
        'paypal_show_signature' => 'setPaypalShowSignature',
        'paypal_signature' => 'setPaypalSignature',
        'paypal_solution_type' => 'setPaypalSolutionType',
        'paypal_summary_email' => 'setPaypalSummaryEmail',
        'paypal_summary_mode' => 'setPaypalSummaryMode',
        'paypal_zero_dollar_penny' => 'setPaypalZeroDollarPenny',
        'push_pay_pal' => 'setPushPayPal',
        'restrictions' => 'setRestrictions',
        'short_pay_pal_marketing_text' => 'setShortPayPalMarketingText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accept_pay_pal' => 'getAcceptPayPal',
        'paypal_accounting_code' => 'getPaypalAccountingCode',
        'paypal_api_password' => 'getPaypalApiPassword',
        'paypal_api_user_name' => 'getPaypalApiUserName',
        'paypal_certificate_on_file' => 'getPaypalCertificateOnFile',
        'paypal_deposit_to_account' => 'getPaypalDepositToAccount',
        'paypal_email' => 'getPaypalEmail',
        'paypal_environment' => 'getPaypalEnvironment',
        'paypal_header_image_url' => 'getPaypalHeaderImageUrl',
        'paypal_hide_bill_me_later' => 'getPaypalHideBillMeLater',
        'paypal_hide_express_checkout_on_view_cart' => 'getPaypalHideExpressCheckoutOnViewCart',
        'paypal_hide_for_unshipped_orders' => 'getPaypalHideForUnshippedOrders',
        'paypal_hold_in_ar' => 'getPaypalHoldInAr',
        'paypal_landing_page' => 'getPaypalLandingPage',
        'paypal_mode' => 'getPaypalMode',
        'paypal_private_key_password' => 'getPaypalPrivateKeyPassword',
        'paypal_processing_fee' => 'getPaypalProcessingFee',
        'paypal_processing_perc' => 'getPaypalProcessingPerc',
        'paypal_send_recurring' => 'getPaypalSendRecurring',
        'paypal_show_card_logos_not_directly_supported' => 'getPaypalShowCardLogosNotDirectlySupported',
        'paypal_show_signature' => 'getPaypalShowSignature',
        'paypal_signature' => 'getPaypalSignature',
        'paypal_solution_type' => 'getPaypalSolutionType',
        'paypal_summary_email' => 'getPaypalSummaryEmail',
        'paypal_summary_mode' => 'getPaypalSummaryMode',
        'paypal_zero_dollar_penny' => 'getPaypalZeroDollarPenny',
        'push_pay_pal' => 'getPushPayPal',
        'restrictions' => 'getRestrictions',
        'short_pay_pal_marketing_text' => 'getShortPayPalMarketingText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accept_pay_pal'] = isset($data['accept_pay_pal']) ? $data['accept_pay_pal'] : null;
        $this->container['paypal_accounting_code'] = isset($data['paypal_accounting_code']) ? $data['paypal_accounting_code'] : null;
        $this->container['paypal_api_password'] = isset($data['paypal_api_password']) ? $data['paypal_api_password'] : null;
        $this->container['paypal_api_user_name'] = isset($data['paypal_api_user_name']) ? $data['paypal_api_user_name'] : null;
        $this->container['paypal_certificate_on_file'] = isset($data['paypal_certificate_on_file']) ? $data['paypal_certificate_on_file'] : null;
        $this->container['paypal_deposit_to_account'] = isset($data['paypal_deposit_to_account']) ? $data['paypal_deposit_to_account'] : null;
        $this->container['paypal_email'] = isset($data['paypal_email']) ? $data['paypal_email'] : null;
        $this->container['paypal_environment'] = isset($data['paypal_environment']) ? $data['paypal_environment'] : null;
        $this->container['paypal_header_image_url'] = isset($data['paypal_header_image_url']) ? $data['paypal_header_image_url'] : null;
        $this->container['paypal_hide_bill_me_later'] = isset($data['paypal_hide_bill_me_later']) ? $data['paypal_hide_bill_me_later'] : null;
        $this->container['paypal_hide_express_checkout_on_view_cart'] = isset($data['paypal_hide_express_checkout_on_view_cart']) ? $data['paypal_hide_express_checkout_on_view_cart'] : null;
        $this->container['paypal_hide_for_unshipped_orders'] = isset($data['paypal_hide_for_unshipped_orders']) ? $data['paypal_hide_for_unshipped_orders'] : null;
        $this->container['paypal_hold_in_ar'] = isset($data['paypal_hold_in_ar']) ? $data['paypal_hold_in_ar'] : null;
        $this->container['paypal_landing_page'] = isset($data['paypal_landing_page']) ? $data['paypal_landing_page'] : null;
        $this->container['paypal_mode'] = isset($data['paypal_mode']) ? $data['paypal_mode'] : null;
        $this->container['paypal_private_key_password'] = isset($data['paypal_private_key_password']) ? $data['paypal_private_key_password'] : null;
        $this->container['paypal_processing_fee'] = isset($data['paypal_processing_fee']) ? $data['paypal_processing_fee'] : null;
        $this->container['paypal_processing_perc'] = isset($data['paypal_processing_perc']) ? $data['paypal_processing_perc'] : null;
        $this->container['paypal_send_recurring'] = isset($data['paypal_send_recurring']) ? $data['paypal_send_recurring'] : null;
        $this->container['paypal_show_card_logos_not_directly_supported'] = isset($data['paypal_show_card_logos_not_directly_supported']) ? $data['paypal_show_card_logos_not_directly_supported'] : null;
        $this->container['paypal_show_signature'] = isset($data['paypal_show_signature']) ? $data['paypal_show_signature'] : null;
        $this->container['paypal_signature'] = isset($data['paypal_signature']) ? $data['paypal_signature'] : null;
        $this->container['paypal_solution_type'] = isset($data['paypal_solution_type']) ? $data['paypal_solution_type'] : null;
        $this->container['paypal_summary_email'] = isset($data['paypal_summary_email']) ? $data['paypal_summary_email'] : null;
        $this->container['paypal_summary_mode'] = isset($data['paypal_summary_mode']) ? $data['paypal_summary_mode'] : null;
        $this->container['paypal_zero_dollar_penny'] = isset($data['paypal_zero_dollar_penny']) ? $data['paypal_zero_dollar_penny'] : null;
        $this->container['push_pay_pal'] = isset($data['push_pay_pal']) ? $data['push_pay_pal'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
        $this->container['short_pay_pal_marketing_text'] = isset($data['short_pay_pal_marketing_text']) ? $data['short_pay_pal_marketing_text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accept_pay_pal
     *
     * @return bool
     */
    public function getAcceptPayPal()
    {
        return $this->container['accept_pay_pal'];
    }

    /**
     * Sets accept_pay_pal
     *
     * @param bool $accept_pay_pal accept_pay_pal
     *
     * @return $this
     */
    public function setAcceptPayPal($accept_pay_pal)
    {
        $this->container['accept_pay_pal'] = $accept_pay_pal;

        return $this;
    }

    /**
     * Gets paypal_accounting_code
     *
     * @return string
     */
    public function getPaypalAccountingCode()
    {
        return $this->container['paypal_accounting_code'];
    }

    /**
     * Sets paypal_accounting_code
     *
     * @param string $paypal_accounting_code paypal_accounting_code
     *
     * @return $this
     */
    public function setPaypalAccountingCode($paypal_accounting_code)
    {
        $this->container['paypal_accounting_code'] = $paypal_accounting_code;

        return $this;
    }

    /**
     * Gets paypal_api_password
     *
     * @return string
     */
    public function getPaypalApiPassword()
    {
        return $this->container['paypal_api_password'];
    }

    /**
     * Sets paypal_api_password
     *
     * @param string $paypal_api_password paypal_api_password
     *
     * @return $this
     */
    public function setPaypalApiPassword($paypal_api_password)
    {
        $this->container['paypal_api_password'] = $paypal_api_password;

        return $this;
    }

    /**
     * Gets paypal_api_user_name
     *
     * @return string
     */
    public function getPaypalApiUserName()
    {
        return $this->container['paypal_api_user_name'];
    }

    /**
     * Sets paypal_api_user_name
     *
     * @param string $paypal_api_user_name paypal_api_user_name
     *
     * @return $this
     */
    public function setPaypalApiUserName($paypal_api_user_name)
    {
        $this->container['paypal_api_user_name'] = $paypal_api_user_name;

        return $this;
    }

    /**
     * Gets paypal_certificate_on_file
     *
     * @return bool
     */
    public function getPaypalCertificateOnFile()
    {
        return $this->container['paypal_certificate_on_file'];
    }

    /**
     * Sets paypal_certificate_on_file
     *
     * @param bool $paypal_certificate_on_file paypal_certificate_on_file
     *
     * @return $this
     */
    public function setPaypalCertificateOnFile($paypal_certificate_on_file)
    {
        $this->container['paypal_certificate_on_file'] = $paypal_certificate_on_file;

        return $this;
    }

    /**
     * Gets paypal_deposit_to_account
     *
     * @return string
     */
    public function getPaypalDepositToAccount()
    {
        return $this->container['paypal_deposit_to_account'];
    }

    /**
     * Sets paypal_deposit_to_account
     *
     * @param string $paypal_deposit_to_account paypal_deposit_to_account
     *
     * @return $this
     */
    public function setPaypalDepositToAccount($paypal_deposit_to_account)
    {
        $this->container['paypal_deposit_to_account'] = $paypal_deposit_to_account;

        return $this;
    }

    /**
     * Gets paypal_email
     *
     * @return string
     */
    public function getPaypalEmail()
    {
        return $this->container['paypal_email'];
    }

    /**
     * Sets paypal_email
     *
     * @param string $paypal_email paypal_email
     *
     * @return $this
     */
    public function setPaypalEmail($paypal_email)
    {
        $this->container['paypal_email'] = $paypal_email;

        return $this;
    }

    /**
     * Gets paypal_environment
     *
     * @return string
     */
    public function getPaypalEnvironment()
    {
        return $this->container['paypal_environment'];
    }

    /**
     * Sets paypal_environment
     *
     * @param string $paypal_environment paypal_environment
     *
     * @return $this
     */
    public function setPaypalEnvironment($paypal_environment)
    {
        $this->container['paypal_environment'] = $paypal_environment;

        return $this;
    }

    /**
     * Gets paypal_header_image_url
     *
     * @return string
     */
    public function getPaypalHeaderImageUrl()
    {
        return $this->container['paypal_header_image_url'];
    }

    /**
     * Sets paypal_header_image_url
     *
     * @param string $paypal_header_image_url paypal_header_image_url
     *
     * @return $this
     */
    public function setPaypalHeaderImageUrl($paypal_header_image_url)
    {
        $this->container['paypal_header_image_url'] = $paypal_header_image_url;

        return $this;
    }

    /**
     * Gets paypal_hide_bill_me_later
     *
     * @return bool
     */
    public function getPaypalHideBillMeLater()
    {
        return $this->container['paypal_hide_bill_me_later'];
    }

    /**
     * Sets paypal_hide_bill_me_later
     *
     * @param bool $paypal_hide_bill_me_later paypal_hide_bill_me_later
     *
     * @return $this
     */
    public function setPaypalHideBillMeLater($paypal_hide_bill_me_later)
    {
        $this->container['paypal_hide_bill_me_later'] = $paypal_hide_bill_me_later;

        return $this;
    }

    /**
     * Gets paypal_hide_express_checkout_on_view_cart
     *
     * @return bool
     */
    public function getPaypalHideExpressCheckoutOnViewCart()
    {
        return $this->container['paypal_hide_express_checkout_on_view_cart'];
    }

    /**
     * Sets paypal_hide_express_checkout_on_view_cart
     *
     * @param bool $paypal_hide_express_checkout_on_view_cart paypal_hide_express_checkout_on_view_cart
     *
     * @return $this
     */
    public function setPaypalHideExpressCheckoutOnViewCart($paypal_hide_express_checkout_on_view_cart)
    {
        $this->container['paypal_hide_express_checkout_on_view_cart'] = $paypal_hide_express_checkout_on_view_cart;

        return $this;
    }

    /**
     * Gets paypal_hide_for_unshipped_orders
     *
     * @return bool
     */
    public function getPaypalHideForUnshippedOrders()
    {
        return $this->container['paypal_hide_for_unshipped_orders'];
    }

    /**
     * Sets paypal_hide_for_unshipped_orders
     *
     * @param bool $paypal_hide_for_unshipped_orders paypal_hide_for_unshipped_orders
     *
     * @return $this
     */
    public function setPaypalHideForUnshippedOrders($paypal_hide_for_unshipped_orders)
    {
        $this->container['paypal_hide_for_unshipped_orders'] = $paypal_hide_for_unshipped_orders;

        return $this;
    }

    /**
     * Gets paypal_hold_in_ar
     *
     * @return bool
     */
    public function getPaypalHoldInAr()
    {
        return $this->container['paypal_hold_in_ar'];
    }

    /**
     * Sets paypal_hold_in_ar
     *
     * @param bool $paypal_hold_in_ar paypal_hold_in_ar
     *
     * @return $this
     */
    public function setPaypalHoldInAr($paypal_hold_in_ar)
    {
        $this->container['paypal_hold_in_ar'] = $paypal_hold_in_ar;

        return $this;
    }

    /**
     * Gets paypal_landing_page
     *
     * @return string
     */
    public function getPaypalLandingPage()
    {
        return $this->container['paypal_landing_page'];
    }

    /**
     * Sets paypal_landing_page
     *
     * @param string $paypal_landing_page paypal_landing_page
     *
     * @return $this
     */
    public function setPaypalLandingPage($paypal_landing_page)
    {
        $this->container['paypal_landing_page'] = $paypal_landing_page;

        return $this;
    }

    /**
     * Gets paypal_mode
     *
     * @return string
     */
    public function getPaypalMode()
    {
        return $this->container['paypal_mode'];
    }

    /**
     * Sets paypal_mode
     *
     * @param string $paypal_mode paypal_mode
     *
     * @return $this
     */
    public function setPaypalMode($paypal_mode)
    {
        $this->container['paypal_mode'] = $paypal_mode;

        return $this;
    }

    /**
     * Gets paypal_private_key_password
     *
     * @return string
     */
    public function getPaypalPrivateKeyPassword()
    {
        return $this->container['paypal_private_key_password'];
    }

    /**
     * Sets paypal_private_key_password
     *
     * @param string $paypal_private_key_password paypal_private_key_password
     *
     * @return $this
     */
    public function setPaypalPrivateKeyPassword($paypal_private_key_password)
    {
        $this->container['paypal_private_key_password'] = $paypal_private_key_password;

        return $this;
    }

    /**
     * Gets paypal_processing_fee
     *
     * @return string
     */
    public function getPaypalProcessingFee()
    {
        return $this->container['paypal_processing_fee'];
    }

    /**
     * Sets paypal_processing_fee
     *
     * @param string $paypal_processing_fee paypal_processing_fee
     *
     * @return $this
     */
    public function setPaypalProcessingFee($paypal_processing_fee)
    {
        $this->container['paypal_processing_fee'] = $paypal_processing_fee;

        return $this;
    }

    /**
     * Gets paypal_processing_perc
     *
     * @return string
     */
    public function getPaypalProcessingPerc()
    {
        return $this->container['paypal_processing_perc'];
    }

    /**
     * Sets paypal_processing_perc
     *
     * @param string $paypal_processing_perc paypal_processing_perc
     *
     * @return $this
     */
    public function setPaypalProcessingPerc($paypal_processing_perc)
    {
        $this->container['paypal_processing_perc'] = $paypal_processing_perc;

        return $this;
    }

    /**
     * Gets paypal_send_recurring
     *
     * @return string
     */
    public function getPaypalSendRecurring()
    {
        return $this->container['paypal_send_recurring'];
    }

    /**
     * Sets paypal_send_recurring
     *
     * @param string $paypal_send_recurring paypal_send_recurring
     *
     * @return $this
     */
    public function setPaypalSendRecurring($paypal_send_recurring)
    {
        $this->container['paypal_send_recurring'] = $paypal_send_recurring;

        return $this;
    }

    /**
     * Gets paypal_show_card_logos_not_directly_supported
     *
     * @return bool
     */
    public function getPaypalShowCardLogosNotDirectlySupported()
    {
        return $this->container['paypal_show_card_logos_not_directly_supported'];
    }

    /**
     * Sets paypal_show_card_logos_not_directly_supported
     *
     * @param bool $paypal_show_card_logos_not_directly_supported paypal_show_card_logos_not_directly_supported
     *
     * @return $this
     */
    public function setPaypalShowCardLogosNotDirectlySupported($paypal_show_card_logos_not_directly_supported)
    {
        $this->container['paypal_show_card_logos_not_directly_supported'] = $paypal_show_card_logos_not_directly_supported;

        return $this;
    }

    /**
     * Gets paypal_show_signature
     *
     * @return bool
     */
    public function getPaypalShowSignature()
    {
        return $this->container['paypal_show_signature'];
    }

    /**
     * Sets paypal_show_signature
     *
     * @param bool $paypal_show_signature paypal_show_signature
     *
     * @return $this
     */
    public function setPaypalShowSignature($paypal_show_signature)
    {
        $this->container['paypal_show_signature'] = $paypal_show_signature;

        return $this;
    }

    /**
     * Gets paypal_signature
     *
     * @return string
     */
    public function getPaypalSignature()
    {
        return $this->container['paypal_signature'];
    }

    /**
     * Sets paypal_signature
     *
     * @param string $paypal_signature paypal_signature
     *
     * @return $this
     */
    public function setPaypalSignature($paypal_signature)
    {
        $this->container['paypal_signature'] = $paypal_signature;

        return $this;
    }

    /**
     * Gets paypal_solution_type
     *
     * @return string
     */
    public function getPaypalSolutionType()
    {
        return $this->container['paypal_solution_type'];
    }

    /**
     * Sets paypal_solution_type
     *
     * @param string $paypal_solution_type paypal_solution_type
     *
     * @return $this
     */
    public function setPaypalSolutionType($paypal_solution_type)
    {
        $this->container['paypal_solution_type'] = $paypal_solution_type;

        return $this;
    }

    /**
     * Gets paypal_summary_email
     *
     * @return string
     */
    public function getPaypalSummaryEmail()
    {
        return $this->container['paypal_summary_email'];
    }

    /**
     * Sets paypal_summary_email
     *
     * @param string $paypal_summary_email paypal_summary_email
     *
     * @return $this
     */
    public function setPaypalSummaryEmail($paypal_summary_email)
    {
        $this->container['paypal_summary_email'] = $paypal_summary_email;

        return $this;
    }

    /**
     * Gets paypal_summary_mode
     *
     * @return string
     */
    public function getPaypalSummaryMode()
    {
        return $this->container['paypal_summary_mode'];
    }

    /**
     * Sets paypal_summary_mode
     *
     * @param string $paypal_summary_mode paypal_summary_mode
     *
     * @return $this
     */
    public function setPaypalSummaryMode($paypal_summary_mode)
    {
        $this->container['paypal_summary_mode'] = $paypal_summary_mode;

        return $this;
    }

    /**
     * Gets paypal_zero_dollar_penny
     *
     * @return bool
     */
    public function getPaypalZeroDollarPenny()
    {
        return $this->container['paypal_zero_dollar_penny'];
    }

    /**
     * Sets paypal_zero_dollar_penny
     *
     * @param bool $paypal_zero_dollar_penny paypal_zero_dollar_penny
     *
     * @return $this
     */
    public function setPaypalZeroDollarPenny($paypal_zero_dollar_penny)
    {
        $this->container['paypal_zero_dollar_penny'] = $paypal_zero_dollar_penny;

        return $this;
    }

    /**
     * Gets push_pay_pal
     *
     * @return bool
     */
    public function getPushPayPal()
    {
        return $this->container['push_pay_pal'];
    }

    /**
     * Sets push_pay_pal
     *
     * @param bool $push_pay_pal push_pay_pal
     *
     * @return $this
     */
    public function setPushPayPal($push_pay_pal)
    {
        $this->container['push_pay_pal'] = $push_pay_pal;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \ultracart\v2\models\PaymentsConfigurationRestrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \ultracart\v2\models\PaymentsConfigurationRestrictions $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets short_pay_pal_marketing_text
     *
     * @return bool
     */
    public function getShortPayPalMarketingText()
    {
        return $this->container['short_pay_pal_marketing_text'];
    }

    /**
     * Sets short_pay_pal_marketing_text
     *
     * @param bool $short_pay_pal_marketing_text short_pay_pal_marketing_text
     *
     * @return $this
     */
    public function setShortPayPalMarketingText($short_pay_pal_marketing_text)
    {
        $this->container['short_pay_pal_marketing_text'] = $short_pay_pal_marketing_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


