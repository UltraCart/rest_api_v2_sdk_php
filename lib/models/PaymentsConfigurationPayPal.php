<?php
/**
 * PaymentsConfigurationPayPal
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsConfigurationPayPal Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsConfigurationPayPal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsConfigurationPayPal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accept_paypal' => 'bool',
        'accounting_code' => 'string',
        'api_password' => 'string',
        'api_username' => 'string',
        'certificate_on_file' => 'bool',
        'deposit_to_account' => 'string',
        'email' => 'string',
        'environment' => 'string',
        'header_image_url' => 'string',
        'hide_bill_me_later' => 'bool',
        'hide_express_checkout_on_view_cart' => 'bool',
        'hide_for_unshipped_orders' => 'bool',
        'hold_in_ar' => 'bool',
        'landing_page' => 'string',
        'mode' => 'string',
        'private_key_password' => 'string',
        'processing_fee' => 'string',
        'processing_percentage' => 'string',
        'push_paypal' => 'bool',
        'restrictions' => '\ultracart\v2\models\PaymentsConfigurationRestrictions',
        'send_recurring' => 'bool',
        'short_paypal_marketing_text' => 'bool',
        'show_card_logos_not_directly_supported' => 'bool',
        'show_signature' => 'bool',
        'signature' => 'string',
        'solution_type' => 'string',
        'summary_email' => 'string',
        'summary_mode' => 'string',
        'zero_dollar_penny' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accept_paypal' => null,
        'accounting_code' => null,
        'api_password' => null,
        'api_username' => null,
        'certificate_on_file' => null,
        'deposit_to_account' => null,
        'email' => null,
        'environment' => null,
        'header_image_url' => null,
        'hide_bill_me_later' => null,
        'hide_express_checkout_on_view_cart' => null,
        'hide_for_unshipped_orders' => null,
        'hold_in_ar' => null,
        'landing_page' => null,
        'mode' => null,
        'private_key_password' => null,
        'processing_fee' => null,
        'processing_percentage' => null,
        'push_paypal' => null,
        'restrictions' => null,
        'send_recurring' => null,
        'short_paypal_marketing_text' => null,
        'show_card_logos_not_directly_supported' => null,
        'show_signature' => null,
        'signature' => null,
        'solution_type' => null,
        'summary_email' => null,
        'summary_mode' => null,
        'zero_dollar_penny' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accept_paypal' => 'accept_paypal',
        'accounting_code' => 'accounting_code',
        'api_password' => 'api_password',
        'api_username' => 'api_username',
        'certificate_on_file' => 'certificate_on_file',
        'deposit_to_account' => 'deposit_to_account',
        'email' => 'email',
        'environment' => 'environment',
        'header_image_url' => 'header_image_url',
        'hide_bill_me_later' => 'hide_bill_me_later',
        'hide_express_checkout_on_view_cart' => 'hide_express_checkout_on_view_cart',
        'hide_for_unshipped_orders' => 'hide_for_unshipped_orders',
        'hold_in_ar' => 'hold_in_ar',
        'landing_page' => 'landing_page',
        'mode' => 'mode',
        'private_key_password' => 'private_key_password',
        'processing_fee' => 'processing_fee',
        'processing_percentage' => 'processing_percentage',
        'push_paypal' => 'push_paypal',
        'restrictions' => 'restrictions',
        'send_recurring' => 'send_recurring',
        'short_paypal_marketing_text' => 'short_paypal_marketing_text',
        'show_card_logos_not_directly_supported' => 'show_card_logos_not_directly_supported',
        'show_signature' => 'show_signature',
        'signature' => 'signature',
        'solution_type' => 'solution_type',
        'summary_email' => 'summary_email',
        'summary_mode' => 'summary_mode',
        'zero_dollar_penny' => 'zero_dollar_penny'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accept_paypal' => 'setAcceptPaypal',
        'accounting_code' => 'setAccountingCode',
        'api_password' => 'setApiPassword',
        'api_username' => 'setApiUsername',
        'certificate_on_file' => 'setCertificateOnFile',
        'deposit_to_account' => 'setDepositToAccount',
        'email' => 'setEmail',
        'environment' => 'setEnvironment',
        'header_image_url' => 'setHeaderImageUrl',
        'hide_bill_me_later' => 'setHideBillMeLater',
        'hide_express_checkout_on_view_cart' => 'setHideExpressCheckoutOnViewCart',
        'hide_for_unshipped_orders' => 'setHideForUnshippedOrders',
        'hold_in_ar' => 'setHoldInAr',
        'landing_page' => 'setLandingPage',
        'mode' => 'setMode',
        'private_key_password' => 'setPrivateKeyPassword',
        'processing_fee' => 'setProcessingFee',
        'processing_percentage' => 'setProcessingPercentage',
        'push_paypal' => 'setPushPaypal',
        'restrictions' => 'setRestrictions',
        'send_recurring' => 'setSendRecurring',
        'short_paypal_marketing_text' => 'setShortPaypalMarketingText',
        'show_card_logos_not_directly_supported' => 'setShowCardLogosNotDirectlySupported',
        'show_signature' => 'setShowSignature',
        'signature' => 'setSignature',
        'solution_type' => 'setSolutionType',
        'summary_email' => 'setSummaryEmail',
        'summary_mode' => 'setSummaryMode',
        'zero_dollar_penny' => 'setZeroDollarPenny'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accept_paypal' => 'getAcceptPaypal',
        'accounting_code' => 'getAccountingCode',
        'api_password' => 'getApiPassword',
        'api_username' => 'getApiUsername',
        'certificate_on_file' => 'getCertificateOnFile',
        'deposit_to_account' => 'getDepositToAccount',
        'email' => 'getEmail',
        'environment' => 'getEnvironment',
        'header_image_url' => 'getHeaderImageUrl',
        'hide_bill_me_later' => 'getHideBillMeLater',
        'hide_express_checkout_on_view_cart' => 'getHideExpressCheckoutOnViewCart',
        'hide_for_unshipped_orders' => 'getHideForUnshippedOrders',
        'hold_in_ar' => 'getHoldInAr',
        'landing_page' => 'getLandingPage',
        'mode' => 'getMode',
        'private_key_password' => 'getPrivateKeyPassword',
        'processing_fee' => 'getProcessingFee',
        'processing_percentage' => 'getProcessingPercentage',
        'push_paypal' => 'getPushPaypal',
        'restrictions' => 'getRestrictions',
        'send_recurring' => 'getSendRecurring',
        'short_paypal_marketing_text' => 'getShortPaypalMarketingText',
        'show_card_logos_not_directly_supported' => 'getShowCardLogosNotDirectlySupported',
        'show_signature' => 'getShowSignature',
        'signature' => 'getSignature',
        'solution_type' => 'getSolutionType',
        'summary_email' => 'getSummaryEmail',
        'summary_mode' => 'getSummaryMode',
        'zero_dollar_penny' => 'getZeroDollarPenny'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENVIRONMENT_LIVE = 'Live';
    const ENVIRONMENT_SANDBOX = 'Sandbox';
    const LANDING_PAGE_BILLING = 'Billing';
    const LANDING_PAGE_LOGIN = 'Login';
    const MODE_WPPECO = 'WPPECO';
    const MODE_WPPECDP = 'WPPECDP';
    const SOLUTION_TYPE_SOLE = 'Sole';
    const SOLUTION_TYPE_MARK = 'Mark';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvironmentAllowableValues()
    {
        return [
            self::ENVIRONMENT_LIVE,
            self::ENVIRONMENT_SANDBOX,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLandingPageAllowableValues()
    {
        return [
            self::LANDING_PAGE_BILLING,
            self::LANDING_PAGE_LOGIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_WPPECO,
            self::MODE_WPPECDP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSolutionTypeAllowableValues()
    {
        return [
            self::SOLUTION_TYPE_SOLE,
            self::SOLUTION_TYPE_MARK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accept_paypal'] = isset($data['accept_paypal']) ? $data['accept_paypal'] : null;
        $this->container['accounting_code'] = isset($data['accounting_code']) ? $data['accounting_code'] : null;
        $this->container['api_password'] = isset($data['api_password']) ? $data['api_password'] : null;
        $this->container['api_username'] = isset($data['api_username']) ? $data['api_username'] : null;
        $this->container['certificate_on_file'] = isset($data['certificate_on_file']) ? $data['certificate_on_file'] : null;
        $this->container['deposit_to_account'] = isset($data['deposit_to_account']) ? $data['deposit_to_account'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['environment'] = isset($data['environment']) ? $data['environment'] : null;
        $this->container['header_image_url'] = isset($data['header_image_url']) ? $data['header_image_url'] : null;
        $this->container['hide_bill_me_later'] = isset($data['hide_bill_me_later']) ? $data['hide_bill_me_later'] : null;
        $this->container['hide_express_checkout_on_view_cart'] = isset($data['hide_express_checkout_on_view_cart']) ? $data['hide_express_checkout_on_view_cart'] : null;
        $this->container['hide_for_unshipped_orders'] = isset($data['hide_for_unshipped_orders']) ? $data['hide_for_unshipped_orders'] : null;
        $this->container['hold_in_ar'] = isset($data['hold_in_ar']) ? $data['hold_in_ar'] : null;
        $this->container['landing_page'] = isset($data['landing_page']) ? $data['landing_page'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['private_key_password'] = isset($data['private_key_password']) ? $data['private_key_password'] : null;
        $this->container['processing_fee'] = isset($data['processing_fee']) ? $data['processing_fee'] : null;
        $this->container['processing_percentage'] = isset($data['processing_percentage']) ? $data['processing_percentage'] : null;
        $this->container['push_paypal'] = isset($data['push_paypal']) ? $data['push_paypal'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
        $this->container['send_recurring'] = isset($data['send_recurring']) ? $data['send_recurring'] : null;
        $this->container['short_paypal_marketing_text'] = isset($data['short_paypal_marketing_text']) ? $data['short_paypal_marketing_text'] : null;
        $this->container['show_card_logos_not_directly_supported'] = isset($data['show_card_logos_not_directly_supported']) ? $data['show_card_logos_not_directly_supported'] : null;
        $this->container['show_signature'] = isset($data['show_signature']) ? $data['show_signature'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
        $this->container['solution_type'] = isset($data['solution_type']) ? $data['solution_type'] : null;
        $this->container['summary_email'] = isset($data['summary_email']) ? $data['summary_email'] : null;
        $this->container['summary_mode'] = isset($data['summary_mode']) ? $data['summary_mode'] : null;
        $this->container['zero_dollar_penny'] = isset($data['zero_dollar_penny']) ? $data['zero_dollar_penny'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEnvironmentAllowableValues();
        if (!is_null($this->container['environment']) && !in_array($this->container['environment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'environment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLandingPageAllowableValues();
        if (!is_null($this->container['landing_page']) && !in_array($this->container['landing_page'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'landing_page', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSolutionTypeAllowableValues();
        if (!is_null($this->container['solution_type']) && !in_array($this->container['solution_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'solution_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accept_paypal
     *
     * @return bool
     */
    public function getAcceptPaypal()
    {
        return $this->container['accept_paypal'];
    }

    /**
     * Sets accept_paypal
     *
     * @param bool $accept_paypal Master flag that determine if PayPal is an active payment for this account
     *
     * @return $this
     */
    public function setAcceptPaypal($accept_paypal)
    {
        $this->container['accept_paypal'] = $accept_paypal;

        return $this;
    }

    /**
     * Gets accounting_code
     *
     * @return string
     */
    public function getAccountingCode()
    {
        return $this->container['accounting_code'];
    }

    /**
     * Sets accounting_code
     *
     * @param string $accounting_code Optional accounting code that is set to Quickbooks when an order uses this payment method.
     *
     * @return $this
     */
    public function setAccountingCode($accounting_code)
    {
        $this->container['accounting_code'] = $accounting_code;

        return $this;
    }

    /**
     * Gets api_password
     *
     * @return string
     */
    public function getApiPassword()
    {
        return $this->container['api_password'];
    }

    /**
     * Sets api_password
     *
     * @param string $api_password PayPal API password
     *
     * @return $this
     */
    public function setApiPassword($api_password)
    {
        $this->container['api_password'] = $api_password;

        return $this;
    }

    /**
     * Gets api_username
     *
     * @return string
     */
    public function getApiUsername()
    {
        return $this->container['api_username'];
    }

    /**
     * Sets api_username
     *
     * @param string $api_username PayPal API username
     *
     * @return $this
     */
    public function setApiUsername($api_username)
    {
        $this->container['api_username'] = $api_username;

        return $this;
    }

    /**
     * Gets certificate_on_file
     *
     * @return bool
     */
    public function getCertificateOnFile()
    {
        return $this->container['certificate_on_file'];
    }

    /**
     * Sets certificate_on_file
     *
     * @param bool $certificate_on_file (Legacy) true if there is a PayPal certificate already on file. Used to manage the internal UI
     *
     * @return $this
     */
    public function setCertificateOnFile($certificate_on_file)
    {
        $this->container['certificate_on_file'] = $certificate_on_file;

        return $this;
    }

    /**
     * Gets deposit_to_account
     *
     * @return string
     */
    public function getDepositToAccount()
    {
        return $this->container['deposit_to_account'];
    }

    /**
     * Sets deposit_to_account
     *
     * @param string $deposit_to_account The account to deposit funds
     *
     * @return $this
     */
    public function setDepositToAccount($deposit_to_account)
    {
        $this->container['deposit_to_account'] = $deposit_to_account;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The main PayPal email address
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string $environment PayPal configuration, live or sandbox
     *
     * @return $this
     */
    public function setEnvironment($environment)
    {
        $allowedValues = $this->getEnvironmentAllowableValues();
        if (!is_null($environment) && !in_array($environment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'environment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets header_image_url
     *
     * @return string
     */
    public function getHeaderImageUrl()
    {
        return $this->container['header_image_url'];
    }

    /**
     * Sets header_image_url
     *
     * @param string $header_image_url The URL for the PayPal header
     *
     * @return $this
     */
    public function setHeaderImageUrl($header_image_url)
    {
        $this->container['header_image_url'] = $header_image_url;

        return $this;
    }

    /**
     * Gets hide_bill_me_later
     *
     * @return bool
     */
    public function getHideBillMeLater()
    {
        return $this->container['hide_bill_me_later'];
    }

    /**
     * Sets hide_bill_me_later
     *
     * @param bool $hide_bill_me_later True if the Bill Me Later button should be hidden during checkout
     *
     * @return $this
     */
    public function setHideBillMeLater($hide_bill_me_later)
    {
        $this->container['hide_bill_me_later'] = $hide_bill_me_later;

        return $this;
    }

    /**
     * Gets hide_express_checkout_on_view_cart
     *
     * @return bool
     */
    public function getHideExpressCheckoutOnViewCart()
    {
        return $this->container['hide_express_checkout_on_view_cart'];
    }

    /**
     * Sets hide_express_checkout_on_view_cart
     *
     * @param bool $hide_express_checkout_on_view_cart True if the PayPal express checkout button should be hidden on the view cart page.  This will force the customer to enter address information before being able to checkout with PayPal
     *
     * @return $this
     */
    public function setHideExpressCheckoutOnViewCart($hide_express_checkout_on_view_cart)
    {
        $this->container['hide_express_checkout_on_view_cart'] = $hide_express_checkout_on_view_cart;

        return $this;
    }

    /**
     * Gets hide_for_unshipped_orders
     *
     * @return bool
     */
    public function getHideForUnshippedOrders()
    {
        return $this->container['hide_for_unshipped_orders'];
    }

    /**
     * Sets hide_for_unshipped_orders
     *
     * @param bool $hide_for_unshipped_orders True if PayPal should be hidden for orders with no shippable product, such as digital orders
     *
     * @return $this
     */
    public function setHideForUnshippedOrders($hide_for_unshipped_orders)
    {
        $this->container['hide_for_unshipped_orders'] = $hide_for_unshipped_orders;

        return $this;
    }

    /**
     * Gets hold_in_ar
     *
     * @return bool
     */
    public function getHoldInAr()
    {
        return $this->container['hold_in_ar'];
    }

    /**
     * Sets hold_in_ar
     *
     * @param bool $hold_in_ar If true, PayPal orders are held in Accounts Receivable for review
     *
     * @return $this
     */
    public function setHoldInAr($hold_in_ar)
    {
        $this->container['hold_in_ar'] = $hold_in_ar;

        return $this;
    }

    /**
     * Gets landing_page
     *
     * @return string
     */
    public function getLandingPage()
    {
        return $this->container['landing_page'];
    }

    /**
     * Sets landing_page
     *
     * @param string $landing_page PayPal landing page
     *
     * @return $this
     */
    public function setLandingPage($landing_page)
    {
        $allowedValues = $this->getLandingPageAllowableValues();
        if (!is_null($landing_page) && !in_array($landing_page, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'landing_page', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['landing_page'] = $landing_page;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode The PayPal mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets private_key_password
     *
     * @return string
     */
    public function getPrivateKeyPassword()
    {
        return $this->container['private_key_password'];
    }

    /**
     * Sets private_key_password
     *
     * @param string $private_key_password PayPal API private key password
     *
     * @return $this
     */
    public function setPrivateKeyPassword($private_key_password)
    {
        $this->container['private_key_password'] = $private_key_password;

        return $this;
    }

    /**
     * Gets processing_fee
     *
     * @return string
     */
    public function getProcessingFee()
    {
        return $this->container['processing_fee'];
    }

    /**
     * Sets processing_fee
     *
     * @param string $processing_fee Optional additional fee to charge if PayPal is used.  It is rare for this to be used.
     *
     * @return $this
     */
    public function setProcessingFee($processing_fee)
    {
        $this->container['processing_fee'] = $processing_fee;

        return $this;
    }

    /**
     * Gets processing_percentage
     *
     * @return string
     */
    public function getProcessingPercentage()
    {
        return $this->container['processing_percentage'];
    }

    /**
     * Sets processing_percentage
     *
     * @param string $processing_percentage The processing percentage charged by PayPal
     *
     * @return $this
     */
    public function setProcessingPercentage($processing_percentage)
    {
        $this->container['processing_percentage'] = $processing_percentage;

        return $this;
    }

    /**
     * Gets push_paypal
     *
     * @return bool
     */
    public function getPushPaypal()
    {
        return $this->container['push_paypal'];
    }

    /**
     * Sets push_paypal
     *
     * @param bool $push_paypal True if the internal UI should recommend opening a PayPal account
     *
     * @return $this
     */
    public function setPushPaypal($push_paypal)
    {
        $this->container['push_paypal'] = $push_paypal;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \ultracart\v2\models\PaymentsConfigurationRestrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \ultracart\v2\models\PaymentsConfigurationRestrictions $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets send_recurring
     *
     * @return bool
     */
    public function getSendRecurring()
    {
        return $this->container['send_recurring'];
    }

    /**
     * Sets send_recurring
     *
     * @param bool $send_recurring True if UltraCart should send recurring orders to PayPal.  There are restrictions to what PayPal will accept for recurring orders.  Be careful.
     *
     * @return $this
     */
    public function setSendRecurring($send_recurring)
    {
        $this->container['send_recurring'] = $send_recurring;

        return $this;
    }

    /**
     * Gets short_paypal_marketing_text
     *
     * @return bool
     */
    public function getShortPaypalMarketingText()
    {
        return $this->container['short_paypal_marketing_text'];
    }

    /**
     * Sets short_paypal_marketing_text
     *
     * @param bool $short_paypal_marketing_text Short marketing text
     *
     * @return $this
     */
    public function setShortPaypalMarketingText($short_paypal_marketing_text)
    {
        $this->container['short_paypal_marketing_text'] = $short_paypal_marketing_text;

        return $this;
    }

    /**
     * Gets show_card_logos_not_directly_supported
     *
     * @return bool
     */
    public function getShowCardLogosNotDirectlySupported()
    {
        return $this->container['show_card_logos_not_directly_supported'];
    }

    /**
     * Sets show_card_logos_not_directly_supported
     *
     * @param bool $show_card_logos_not_directly_supported internal ui flag
     *
     * @return $this
     */
    public function setShowCardLogosNotDirectlySupported($show_card_logos_not_directly_supported)
    {
        $this->container['show_card_logos_not_directly_supported'] = $show_card_logos_not_directly_supported;

        return $this;
    }

    /**
     * Gets show_signature
     *
     * @return bool
     */
    public function getShowSignature()
    {
        return $this->container['show_signature'];
    }

    /**
     * Sets show_signature
     *
     * @param bool $show_signature Internal flag used to manage UI
     *
     * @return $this
     */
    public function setShowSignature($show_signature)
    {
        $this->container['show_signature'] = $show_signature;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string $signature PayPal signature
     *
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets solution_type
     *
     * @return string
     */
    public function getSolutionType()
    {
        return $this->container['solution_type'];
    }

    /**
     * Sets solution_type
     *
     * @param string $solution_type PayPal solution type
     *
     * @return $this
     */
    public function setSolutionType($solution_type)
    {
        $allowedValues = $this->getSolutionTypeAllowableValues();
        if (!is_null($solution_type) && !in_array($solution_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'solution_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['solution_type'] = $solution_type;

        return $this;
    }

    /**
     * Gets summary_email
     *
     * @return string
     */
    public function getSummaryEmail()
    {
        return $this->container['summary_email'];
    }

    /**
     * Sets summary_email
     *
     * @param string $summary_email The email where PayPal summaries should be sent
     *
     * @return $this
     */
    public function setSummaryEmail($summary_email)
    {
        $this->container['summary_email'] = $summary_email;

        return $this;
    }

    /**
     * Gets summary_mode
     *
     * @return string
     */
    public function getSummaryMode()
    {
        return $this->container['summary_mode'];
    }

    /**
     * Sets summary_mode
     *
     * @param string $summary_mode Description of what mode PayPal is operating
     *
     * @return $this
     */
    public function setSummaryMode($summary_mode)
    {
        $this->container['summary_mode'] = $summary_mode;

        return $this;
    }

    /**
     * Gets zero_dollar_penny
     *
     * @return bool
     */
    public function getZeroDollarPenny()
    {
        return $this->container['zero_dollar_penny'];
    }

    /**
     * Sets zero_dollar_penny
     *
     * @param bool $zero_dollar_penny Send free items to PayPal as one cent items and subtract this penny from shipping.  PayPal does not allow the sale of free items.
     *
     * @return $this
     */
    public function setZeroDollarPenny($zero_dollar_penny)
    {
        $this->container['zero_dollar_penny'] = $zero_dollar_penny;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


