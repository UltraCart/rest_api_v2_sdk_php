<?php
/**
 * FileManagerDirectory
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * FileManagerDirectory Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FileManagerDirectory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FileManagerDirectory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_theme_directory' => 'bool',
        'favorite' => 'bool',
        'hostname' => 'string',
        'icon' => 'string',
        'last_modified' => 'string',
        'name' => 'string',
        'parent_storefront_fs_directory_oid' => 'int',
        'part_of_active_theme' => 'bool',
        'selected' => 'bool',
        'storefront_fs_directory_oid' => 'int',
        'storefront_fs_file_oid' => 'int',
        'storefront_oid' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_theme_directory' => null,
        'favorite' => null,
        'hostname' => null,
        'icon' => null,
        'last_modified' => null,
        'name' => null,
        'parent_storefront_fs_directory_oid' => 'int32',
        'part_of_active_theme' => null,
        'selected' => null,
        'storefront_fs_directory_oid' => 'int32',
        'storefront_fs_file_oid' => 'int32',
        'storefront_oid' => 'int32',
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_theme_directory' => 'active_theme_directory',
        'favorite' => 'favorite',
        'hostname' => 'hostname',
        'icon' => 'icon',
        'last_modified' => 'last_modified',
        'name' => 'name',
        'parent_storefront_fs_directory_oid' => 'parent_storefront_fs_directory_oid',
        'part_of_active_theme' => 'part_of_active_theme',
        'selected' => 'selected',
        'storefront_fs_directory_oid' => 'storefront_fs_directory_oid',
        'storefront_fs_file_oid' => 'storefront_fs_file_oid',
        'storefront_oid' => 'storefront_oid',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_theme_directory' => 'setActiveThemeDirectory',
        'favorite' => 'setFavorite',
        'hostname' => 'setHostname',
        'icon' => 'setIcon',
        'last_modified' => 'setLastModified',
        'name' => 'setName',
        'parent_storefront_fs_directory_oid' => 'setParentStorefrontFsDirectoryOid',
        'part_of_active_theme' => 'setPartOfActiveTheme',
        'selected' => 'setSelected',
        'storefront_fs_directory_oid' => 'setStorefrontFsDirectoryOid',
        'storefront_fs_file_oid' => 'setStorefrontFsFileOid',
        'storefront_oid' => 'setStorefrontOid',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_theme_directory' => 'getActiveThemeDirectory',
        'favorite' => 'getFavorite',
        'hostname' => 'getHostname',
        'icon' => 'getIcon',
        'last_modified' => 'getLastModified',
        'name' => 'getName',
        'parent_storefront_fs_directory_oid' => 'getParentStorefrontFsDirectoryOid',
        'part_of_active_theme' => 'getPartOfActiveTheme',
        'selected' => 'getSelected',
        'storefront_fs_directory_oid' => 'getStorefrontFsDirectoryOid',
        'storefront_fs_file_oid' => 'getStorefrontFsFileOid',
        'storefront_oid' => 'getStorefrontOid',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_theme_directory'] = isset($data['active_theme_directory']) ? $data['active_theme_directory'] : null;
        $this->container['favorite'] = isset($data['favorite']) ? $data['favorite'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_storefront_fs_directory_oid'] = isset($data['parent_storefront_fs_directory_oid']) ? $data['parent_storefront_fs_directory_oid'] : null;
        $this->container['part_of_active_theme'] = isset($data['part_of_active_theme']) ? $data['part_of_active_theme'] : null;
        $this->container['selected'] = isset($data['selected']) ? $data['selected'] : null;
        $this->container['storefront_fs_directory_oid'] = isset($data['storefront_fs_directory_oid']) ? $data['storefront_fs_directory_oid'] : null;
        $this->container['storefront_fs_file_oid'] = isset($data['storefront_fs_file_oid']) ? $data['storefront_fs_file_oid'] : null;
        $this->container['storefront_oid'] = isset($data['storefront_oid']) ? $data['storefront_oid'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_theme_directory
     *
     * @return bool
     */
    public function getActiveThemeDirectory()
    {
        return $this->container['active_theme_directory'];
    }

    /**
     * Sets active_theme_directory
     *
     * @param bool $active_theme_directory active_theme_directory
     *
     * @return $this
     */
    public function setActiveThemeDirectory($active_theme_directory)
    {
        $this->container['active_theme_directory'] = $active_theme_directory;

        return $this;
    }

    /**
     * Gets favorite
     *
     * @return bool
     */
    public function getFavorite()
    {
        return $this->container['favorite'];
    }

    /**
     * Sets favorite
     *
     * @param bool $favorite favorite
     *
     * @return $this
     */
    public function setFavorite($favorite)
    {
        $this->container['favorite'] = $favorite;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon icon
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return string
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param string $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_storefront_fs_directory_oid
     *
     * @return int
     */
    public function getParentStorefrontFsDirectoryOid()
    {
        return $this->container['parent_storefront_fs_directory_oid'];
    }

    /**
     * Sets parent_storefront_fs_directory_oid
     *
     * @param int $parent_storefront_fs_directory_oid parent_storefront_fs_directory_oid
     *
     * @return $this
     */
    public function setParentStorefrontFsDirectoryOid($parent_storefront_fs_directory_oid)
    {
        $this->container['parent_storefront_fs_directory_oid'] = $parent_storefront_fs_directory_oid;

        return $this;
    }

    /**
     * Gets part_of_active_theme
     *
     * @return bool
     */
    public function getPartOfActiveTheme()
    {
        return $this->container['part_of_active_theme'];
    }

    /**
     * Sets part_of_active_theme
     *
     * @param bool $part_of_active_theme part_of_active_theme
     *
     * @return $this
     */
    public function setPartOfActiveTheme($part_of_active_theme)
    {
        $this->container['part_of_active_theme'] = $part_of_active_theme;

        return $this;
    }

    /**
     * Gets selected
     *
     * @return bool
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * Sets selected
     *
     * @param bool $selected selected
     *
     * @return $this
     */
    public function setSelected($selected)
    {
        $this->container['selected'] = $selected;

        return $this;
    }

    /**
     * Gets storefront_fs_directory_oid
     *
     * @return int
     */
    public function getStorefrontFsDirectoryOid()
    {
        return $this->container['storefront_fs_directory_oid'];
    }

    /**
     * Sets storefront_fs_directory_oid
     *
     * @param int $storefront_fs_directory_oid storefront_fs_directory_oid
     *
     * @return $this
     */
    public function setStorefrontFsDirectoryOid($storefront_fs_directory_oid)
    {
        $this->container['storefront_fs_directory_oid'] = $storefront_fs_directory_oid;

        return $this;
    }

    /**
     * Gets storefront_fs_file_oid
     *
     * @return int
     */
    public function getStorefrontFsFileOid()
    {
        return $this->container['storefront_fs_file_oid'];
    }

    /**
     * Sets storefront_fs_file_oid
     *
     * @param int $storefront_fs_file_oid storefront_fs_file_oid
     *
     * @return $this
     */
    public function setStorefrontFsFileOid($storefront_fs_file_oid)
    {
        $this->container['storefront_fs_file_oid'] = $storefront_fs_file_oid;

        return $this;
    }

    /**
     * Gets storefront_oid
     *
     * @return int
     */
    public function getStorefrontOid()
    {
        return $this->container['storefront_oid'];
    }

    /**
     * Sets storefront_oid
     *
     * @param int $storefront_oid storefront_oid
     *
     * @return $this
     */
    public function setStorefrontOid($storefront_oid)
    {
        $this->container['storefront_oid'] = $storefront_oid;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


