<?php
/**
 * ReportExecuteQueriesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ReportExecuteQueriesRequest Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportExecuteQueriesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportExecuteQueriesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_uuid' => 'string',
        'connection_id' => 'string',
        'default_dataset_id' => 'string',
        'default_project_id' => 'string',
        'merchant_id' => 'string',
        'queries' => '\ultracart\v2\models\ReportDataSetQuery[]',
        'security_level' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_uuid' => null,
        'connection_id' => null,
        'default_dataset_id' => null,
        'default_project_id' => null,
        'merchant_id' => null,
        'queries' => null,
        'security_level' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_uuid' => 'client_uuid',
        'connection_id' => 'connection_id',
        'default_dataset_id' => 'default_dataset_id',
        'default_project_id' => 'default_project_id',
        'merchant_id' => 'merchant_id',
        'queries' => 'queries',
        'security_level' => 'security_level'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_uuid' => 'setClientUuid',
        'connection_id' => 'setConnectionId',
        'default_dataset_id' => 'setDefaultDatasetId',
        'default_project_id' => 'setDefaultProjectId',
        'merchant_id' => 'setMerchantId',
        'queries' => 'setQueries',
        'security_level' => 'setSecurityLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_uuid' => 'getClientUuid',
        'connection_id' => 'getConnectionId',
        'default_dataset_id' => 'getDefaultDatasetId',
        'default_project_id' => 'getDefaultProjectId',
        'merchant_id' => 'getMerchantId',
        'queries' => 'getQueries',
        'security_level' => 'getSecurityLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SECURITY_LEVEL_STANDARD = 'standard';
    const SECURITY_LEVEL_LOW = 'low';
    const SECURITY_LEVEL_MEDIUM = 'medium';
    const SECURITY_LEVEL_HIGH = 'high';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityLevelAllowableValues()
    {
        return [
            self::SECURITY_LEVEL_STANDARD,
            self::SECURITY_LEVEL_LOW,
            self::SECURITY_LEVEL_MEDIUM,
            self::SECURITY_LEVEL_HIGH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_uuid'] = isset($data['client_uuid']) ? $data['client_uuid'] : null;
        $this->container['connection_id'] = isset($data['connection_id']) ? $data['connection_id'] : null;
        $this->container['default_dataset_id'] = isset($data['default_dataset_id']) ? $data['default_dataset_id'] : null;
        $this->container['default_project_id'] = isset($data['default_project_id']) ? $data['default_project_id'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['queries'] = isset($data['queries']) ? $data['queries'] : null;
        $this->container['security_level'] = isset($data['security_level']) ? $data['security_level'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSecurityLevelAllowableValues();
        if (!is_null($this->container['security_level']) && !in_array($this->container['security_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'security_level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_uuid
     *
     * @return string
     */
    public function getClientUuid()
    {
        return $this->container['client_uuid'];
    }

    /**
     * Sets client_uuid
     *
     * @param string $client_uuid Unique UUID assigned to this client during the auth.  This will be used to locate the websocket connect id.
     *
     * @return $this
     */
    public function setClientUuid($client_uuid)
    {
        $this->container['client_uuid'] = $client_uuid;

        return $this;
    }

    /**
     * Gets connection_id
     *
     * @return string
     */
    public function getConnectionId()
    {
        return $this->container['connection_id'];
    }

    /**
     * Sets connection_id
     *
     * @param string $connection_id The websocket connection id that should receive back notices of query completion.
     *
     * @return $this
     */
    public function setConnectionId($connection_id)
    {
        $this->container['connection_id'] = $connection_id;

        return $this;
    }

    /**
     * Gets default_dataset_id
     *
     * @return string
     */
    public function getDefaultDatasetId()
    {
        return $this->container['default_dataset_id'];
    }

    /**
     * Sets default_dataset_id
     *
     * @param string $default_dataset_id default_dataset_id
     *
     * @return $this
     */
    public function setDefaultDatasetId($default_dataset_id)
    {
        $this->container['default_dataset_id'] = $default_dataset_id;

        return $this;
    }

    /**
     * Gets default_project_id
     *
     * @return string
     */
    public function getDefaultProjectId()
    {
        return $this->container['default_project_id'];
    }

    /**
     * Sets default_project_id
     *
     * @param string $default_project_id default_project_id
     *
     * @return $this
     */
    public function setDefaultProjectId($default_project_id)
    {
        $this->container['default_project_id'] = $default_project_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets queries
     *
     * @return \ultracart\v2\models\ReportDataSetQuery[]
     */
    public function getQueries()
    {
        return $this->container['queries'];
    }

    /**
     * Sets queries
     *
     * @param \ultracart\v2\models\ReportDataSetQuery[] $queries An array of queries that we want the lambda function to execute.
     *
     * @return $this
     */
    public function setQueries($queries)
    {
        $this->container['queries'] = $queries;

        return $this;
    }

    /**
     * Gets security_level
     *
     * @return string
     */
    public function getSecurityLevel()
    {
        return $this->container['security_level'];
    }

    /**
     * Sets security_level
     *
     * @param string $security_level Security level to execute report under
     *
     * @return $this
     */
    public function setSecurityLevel($security_level)
    {
        $allowedValues = $this->getSecurityLevelAllowableValues();
        if (!is_null($security_level) && !in_array($security_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'security_level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['security_level'] = $security_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


