<?php
/**
 * ConversationWebchatQueueStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationWebchatQueueStatus Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationWebchatQueueStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationWebchatQueueStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_available_count' => 'int',
        'agent_busy_count' => 'int',
        'agent_count' => 'int',
        'agent_unavailable_count' => 'int',
        'agents' => '\ultracart\v2\models\ConversationWebchatQueueStatusAgent[]',
        'customer_abandon_count' => 'int',
        'customer_active_count' => 'int',
        'customer_average_abandon_time_seconds' => 'int',
        'customer_average_chat_time_seconds' => 'int',
        'customer_average_hold_time_seconds' => 'int',
        'customer_waiting_count' => 'int',
        'customer_waiting_join_dts' => 'string',
        'queue_entries' => '\ultracart\v2\models\ConversationWebchatQueueStatusQueueEntry[]',
        'queue_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_available_count' => 'int32',
        'agent_busy_count' => 'int32',
        'agent_count' => 'int32',
        'agent_unavailable_count' => 'int32',
        'agents' => null,
        'customer_abandon_count' => 'int32',
        'customer_active_count' => 'int32',
        'customer_average_abandon_time_seconds' => 'int32',
        'customer_average_chat_time_seconds' => 'int32',
        'customer_average_hold_time_seconds' => 'int32',
        'customer_waiting_count' => 'int32',
        'customer_waiting_join_dts' => 'dateTime',
        'queue_entries' => null,
        'queue_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_available_count' => 'agent_available_count',
        'agent_busy_count' => 'agent_busy_count',
        'agent_count' => 'agent_count',
        'agent_unavailable_count' => 'agent_unavailable_count',
        'agents' => 'agents',
        'customer_abandon_count' => 'customer_abandon_count',
        'customer_active_count' => 'customer_active_count',
        'customer_average_abandon_time_seconds' => 'customer_average_abandon_time_seconds',
        'customer_average_chat_time_seconds' => 'customer_average_chat_time_seconds',
        'customer_average_hold_time_seconds' => 'customer_average_hold_time_seconds',
        'customer_waiting_count' => 'customer_waiting_count',
        'customer_waiting_join_dts' => 'customer_waiting_join_dts',
        'queue_entries' => 'queue_entries',
        'queue_name' => 'queue_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_available_count' => 'setAgentAvailableCount',
        'agent_busy_count' => 'setAgentBusyCount',
        'agent_count' => 'setAgentCount',
        'agent_unavailable_count' => 'setAgentUnavailableCount',
        'agents' => 'setAgents',
        'customer_abandon_count' => 'setCustomerAbandonCount',
        'customer_active_count' => 'setCustomerActiveCount',
        'customer_average_abandon_time_seconds' => 'setCustomerAverageAbandonTimeSeconds',
        'customer_average_chat_time_seconds' => 'setCustomerAverageChatTimeSeconds',
        'customer_average_hold_time_seconds' => 'setCustomerAverageHoldTimeSeconds',
        'customer_waiting_count' => 'setCustomerWaitingCount',
        'customer_waiting_join_dts' => 'setCustomerWaitingJoinDts',
        'queue_entries' => 'setQueueEntries',
        'queue_name' => 'setQueueName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_available_count' => 'getAgentAvailableCount',
        'agent_busy_count' => 'getAgentBusyCount',
        'agent_count' => 'getAgentCount',
        'agent_unavailable_count' => 'getAgentUnavailableCount',
        'agents' => 'getAgents',
        'customer_abandon_count' => 'getCustomerAbandonCount',
        'customer_active_count' => 'getCustomerActiveCount',
        'customer_average_abandon_time_seconds' => 'getCustomerAverageAbandonTimeSeconds',
        'customer_average_chat_time_seconds' => 'getCustomerAverageChatTimeSeconds',
        'customer_average_hold_time_seconds' => 'getCustomerAverageHoldTimeSeconds',
        'customer_waiting_count' => 'getCustomerWaitingCount',
        'customer_waiting_join_dts' => 'getCustomerWaitingJoinDts',
        'queue_entries' => 'getQueueEntries',
        'queue_name' => 'getQueueName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_available_count'] = isset($data['agent_available_count']) ? $data['agent_available_count'] : null;
        $this->container['agent_busy_count'] = isset($data['agent_busy_count']) ? $data['agent_busy_count'] : null;
        $this->container['agent_count'] = isset($data['agent_count']) ? $data['agent_count'] : null;
        $this->container['agent_unavailable_count'] = isset($data['agent_unavailable_count']) ? $data['agent_unavailable_count'] : null;
        $this->container['agents'] = isset($data['agents']) ? $data['agents'] : null;
        $this->container['customer_abandon_count'] = isset($data['customer_abandon_count']) ? $data['customer_abandon_count'] : null;
        $this->container['customer_active_count'] = isset($data['customer_active_count']) ? $data['customer_active_count'] : null;
        $this->container['customer_average_abandon_time_seconds'] = isset($data['customer_average_abandon_time_seconds']) ? $data['customer_average_abandon_time_seconds'] : null;
        $this->container['customer_average_chat_time_seconds'] = isset($data['customer_average_chat_time_seconds']) ? $data['customer_average_chat_time_seconds'] : null;
        $this->container['customer_average_hold_time_seconds'] = isset($data['customer_average_hold_time_seconds']) ? $data['customer_average_hold_time_seconds'] : null;
        $this->container['customer_waiting_count'] = isset($data['customer_waiting_count']) ? $data['customer_waiting_count'] : null;
        $this->container['customer_waiting_join_dts'] = isset($data['customer_waiting_join_dts']) ? $data['customer_waiting_join_dts'] : null;
        $this->container['queue_entries'] = isset($data['queue_entries']) ? $data['queue_entries'] : null;
        $this->container['queue_name'] = isset($data['queue_name']) ? $data['queue_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_available_count
     *
     * @return int
     */
    public function getAgentAvailableCount()
    {
        return $this->container['agent_available_count'];
    }

    /**
     * Sets agent_available_count
     *
     * @param int $agent_available_count agent_available_count
     *
     * @return $this
     */
    public function setAgentAvailableCount($agent_available_count)
    {
        $this->container['agent_available_count'] = $agent_available_count;

        return $this;
    }

    /**
     * Gets agent_busy_count
     *
     * @return int
     */
    public function getAgentBusyCount()
    {
        return $this->container['agent_busy_count'];
    }

    /**
     * Sets agent_busy_count
     *
     * @param int $agent_busy_count agent_busy_count
     *
     * @return $this
     */
    public function setAgentBusyCount($agent_busy_count)
    {
        $this->container['agent_busy_count'] = $agent_busy_count;

        return $this;
    }

    /**
     * Gets agent_count
     *
     * @return int
     */
    public function getAgentCount()
    {
        return $this->container['agent_count'];
    }

    /**
     * Sets agent_count
     *
     * @param int $agent_count agent_count
     *
     * @return $this
     */
    public function setAgentCount($agent_count)
    {
        $this->container['agent_count'] = $agent_count;

        return $this;
    }

    /**
     * Gets agent_unavailable_count
     *
     * @return int
     */
    public function getAgentUnavailableCount()
    {
        return $this->container['agent_unavailable_count'];
    }

    /**
     * Sets agent_unavailable_count
     *
     * @param int $agent_unavailable_count agent_unavailable_count
     *
     * @return $this
     */
    public function setAgentUnavailableCount($agent_unavailable_count)
    {
        $this->container['agent_unavailable_count'] = $agent_unavailable_count;

        return $this;
    }

    /**
     * Gets agents
     *
     * @return \ultracart\v2\models\ConversationWebchatQueueStatusAgent[]
     */
    public function getAgents()
    {
        return $this->container['agents'];
    }

    /**
     * Sets agents
     *
     * @param \ultracart\v2\models\ConversationWebchatQueueStatusAgent[] $agents agents
     *
     * @return $this
     */
    public function setAgents($agents)
    {
        $this->container['agents'] = $agents;

        return $this;
    }

    /**
     * Gets customer_abandon_count
     *
     * @return int
     */
    public function getCustomerAbandonCount()
    {
        return $this->container['customer_abandon_count'];
    }

    /**
     * Sets customer_abandon_count
     *
     * @param int $customer_abandon_count customer_abandon_count
     *
     * @return $this
     */
    public function setCustomerAbandonCount($customer_abandon_count)
    {
        $this->container['customer_abandon_count'] = $customer_abandon_count;

        return $this;
    }

    /**
     * Gets customer_active_count
     *
     * @return int
     */
    public function getCustomerActiveCount()
    {
        return $this->container['customer_active_count'];
    }

    /**
     * Sets customer_active_count
     *
     * @param int $customer_active_count customer_active_count
     *
     * @return $this
     */
    public function setCustomerActiveCount($customer_active_count)
    {
        $this->container['customer_active_count'] = $customer_active_count;

        return $this;
    }

    /**
     * Gets customer_average_abandon_time_seconds
     *
     * @return int
     */
    public function getCustomerAverageAbandonTimeSeconds()
    {
        return $this->container['customer_average_abandon_time_seconds'];
    }

    /**
     * Sets customer_average_abandon_time_seconds
     *
     * @param int $customer_average_abandon_time_seconds customer_average_abandon_time_seconds
     *
     * @return $this
     */
    public function setCustomerAverageAbandonTimeSeconds($customer_average_abandon_time_seconds)
    {
        $this->container['customer_average_abandon_time_seconds'] = $customer_average_abandon_time_seconds;

        return $this;
    }

    /**
     * Gets customer_average_chat_time_seconds
     *
     * @return int
     */
    public function getCustomerAverageChatTimeSeconds()
    {
        return $this->container['customer_average_chat_time_seconds'];
    }

    /**
     * Sets customer_average_chat_time_seconds
     *
     * @param int $customer_average_chat_time_seconds customer_average_chat_time_seconds
     *
     * @return $this
     */
    public function setCustomerAverageChatTimeSeconds($customer_average_chat_time_seconds)
    {
        $this->container['customer_average_chat_time_seconds'] = $customer_average_chat_time_seconds;

        return $this;
    }

    /**
     * Gets customer_average_hold_time_seconds
     *
     * @return int
     */
    public function getCustomerAverageHoldTimeSeconds()
    {
        return $this->container['customer_average_hold_time_seconds'];
    }

    /**
     * Sets customer_average_hold_time_seconds
     *
     * @param int $customer_average_hold_time_seconds customer_average_hold_time_seconds
     *
     * @return $this
     */
    public function setCustomerAverageHoldTimeSeconds($customer_average_hold_time_seconds)
    {
        $this->container['customer_average_hold_time_seconds'] = $customer_average_hold_time_seconds;

        return $this;
    }

    /**
     * Gets customer_waiting_count
     *
     * @return int
     */
    public function getCustomerWaitingCount()
    {
        return $this->container['customer_waiting_count'];
    }

    /**
     * Sets customer_waiting_count
     *
     * @param int $customer_waiting_count customer_waiting_count
     *
     * @return $this
     */
    public function setCustomerWaitingCount($customer_waiting_count)
    {
        $this->container['customer_waiting_count'] = $customer_waiting_count;

        return $this;
    }

    /**
     * Gets customer_waiting_join_dts
     *
     * @return string
     */
    public function getCustomerWaitingJoinDts()
    {
        return $this->container['customer_waiting_join_dts'];
    }

    /**
     * Sets customer_waiting_join_dts
     *
     * @param string $customer_waiting_join_dts Date/time that the oldest person joined the queue
     *
     * @return $this
     */
    public function setCustomerWaitingJoinDts($customer_waiting_join_dts)
    {
        $this->container['customer_waiting_join_dts'] = $customer_waiting_join_dts;

        return $this;
    }

    /**
     * Gets queue_entries
     *
     * @return \ultracart\v2\models\ConversationWebchatQueueStatusQueueEntry[]
     */
    public function getQueueEntries()
    {
        return $this->container['queue_entries'];
    }

    /**
     * Sets queue_entries
     *
     * @param \ultracart\v2\models\ConversationWebchatQueueStatusQueueEntry[] $queue_entries queue_entries
     *
     * @return $this
     */
    public function setQueueEntries($queue_entries)
    {
        $this->container['queue_entries'] = $queue_entries;

        return $this;
    }

    /**
     * Gets queue_name
     *
     * @return string
     */
    public function getQueueName()
    {
        return $this->container['queue_name'];
    }

    /**
     * Sets queue_name
     *
     * @param string $queue_name queue_name
     *
     * @return $this
     */
    public function setQueueName($queue_name)
    {
        $this->container['queue_name'] = $queue_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


