<?php
/**
 * CustomReportQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomReportQuery Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomReportQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomReportQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conditional_formatting_start_column' => 'int',
        'freeze_columns' => 'int',
        'pii_columns' => 'string[]',
        'query' => 'string',
        'sheet_name' => 'string',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conditional_formatting_start_column' => 'int32',
        'freeze_columns' => 'int32',
        'pii_columns' => null,
        'query' => null,
        'sheet_name' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conditional_formatting_start_column' => 'conditional_formatting_start_column',
        'freeze_columns' => 'freeze_columns',
        'pii_columns' => 'pii_columns',
        'query' => 'query',
        'sheet_name' => 'sheet_name',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conditional_formatting_start_column' => 'setConditionalFormattingStartColumn',
        'freeze_columns' => 'setFreezeColumns',
        'pii_columns' => 'setPiiColumns',
        'query' => 'setQuery',
        'sheet_name' => 'setSheetName',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conditional_formatting_start_column' => 'getConditionalFormattingStartColumn',
        'freeze_columns' => 'getFreezeColumns',
        'pii_columns' => 'getPiiColumns',
        'query' => 'getQuery',
        'sheet_name' => 'getSheetName',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conditional_formatting_start_column'] = isset($data['conditional_formatting_start_column']) ? $data['conditional_formatting_start_column'] : null;
        $this->container['freeze_columns'] = isset($data['freeze_columns']) ? $data['freeze_columns'] : null;
        $this->container['pii_columns'] = isset($data['pii_columns']) ? $data['pii_columns'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['sheet_name'] = isset($data['sheet_name']) ? $data['sheet_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conditional_formatting_start_column
     *
     * @return int
     */
    public function getConditionalFormattingStartColumn()
    {
        return $this->container['conditional_formatting_start_column'];
    }

    /**
     * Sets conditional_formatting_start_column
     *
     * @param int $conditional_formatting_start_column conditional_formatting_start_column
     *
     * @return $this
     */
    public function setConditionalFormattingStartColumn($conditional_formatting_start_column)
    {
        $this->container['conditional_formatting_start_column'] = $conditional_formatting_start_column;

        return $this;
    }

    /**
     * Gets freeze_columns
     *
     * @return int
     */
    public function getFreezeColumns()
    {
        return $this->container['freeze_columns'];
    }

    /**
     * Sets freeze_columns
     *
     * @param int $freeze_columns freeze_columns
     *
     * @return $this
     */
    public function setFreezeColumns($freeze_columns)
    {
        $this->container['freeze_columns'] = $freeze_columns;

        return $this;
    }

    /**
     * Gets pii_columns
     *
     * @return string[]
     */
    public function getPiiColumns()
    {
        return $this->container['pii_columns'];
    }

    /**
     * Sets pii_columns
     *
     * @param string[] $pii_columns pii_columns
     *
     * @return $this
     */
    public function setPiiColumns($pii_columns)
    {
        $this->container['pii_columns'] = $pii_columns;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query query
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets sheet_name
     *
     * @return string
     */
    public function getSheetName()
    {
        return $this->container['sheet_name'];
    }

    /**
     * Sets sheet_name
     *
     * @param string $sheet_name sheet_name
     *
     * @return $this
     */
    public function setSheetName($sheet_name)
    {
        $this->container['sheet_name'] = $sheet_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


