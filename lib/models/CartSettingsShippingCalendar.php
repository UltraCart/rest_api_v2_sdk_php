<?php
/**
 * CartSettingsShippingCalendar
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CartSettingsShippingCalendar Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartSettingsShippingCalendar implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CartSettingsShippingCalendar';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'blackouts' => 'string[]',
        'days_of_week' => 'bool[]',
        'earliest' => 'string',
        'require' => 'bool',
        'show' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'blackouts' => null,
        'days_of_week' => null,
        'earliest' => null,
        'require' => null,
        'show' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'blackouts' => 'blackouts',
        'days_of_week' => 'days_of_week',
        'earliest' => 'earliest',
        'require' => 'require',
        'show' => 'show'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'blackouts' => 'setBlackouts',
        'days_of_week' => 'setDaysOfWeek',
        'earliest' => 'setEarliest',
        'require' => 'setRequire',
        'show' => 'setShow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'blackouts' => 'getBlackouts',
        'days_of_week' => 'getDaysOfWeek',
        'earliest' => 'getEarliest',
        'require' => 'getRequire',
        'show' => 'getShow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['blackouts'] = $data['blackouts'] ?? null;
        $this->container['days_of_week'] = $data['days_of_week'] ?? null;
        $this->container['earliest'] = $data['earliest'] ?? null;
        $this->container['require'] = $data['require'] ?? null;
        $this->container['show'] = $data['show'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets blackouts
     *
     * @return string[]|null
     */
    public function getBlackouts()
    {
        return $this->container['blackouts'];
    }

    /**
     * Sets blackouts
     *
     * @param string[]|null $blackouts Specified dates that are blacked out on the calendar in ISO8601 format
     *
     * @return self
     */
    public function setBlackouts($blackouts)
    {
        $this->container['blackouts'] = $blackouts;

        return $this;
    }

    /**
     * Gets days_of_week
     *
     * @return bool[]|null
     */
    public function getDaysOfWeek()
    {
        return $this->container['days_of_week'];
    }

    /**
     * Sets days_of_week
     *
     * @param bool[]|null $days_of_week Days of week that should be enabled on the calendar (0 - Sunday through 6 - Saturday)
     *
     * @return self
     */
    public function setDaysOfWeek($days_of_week)
    {
        $this->container['days_of_week'] = $days_of_week;

        return $this;
    }

    /**
     * Gets earliest
     *
     * @return string|null
     */
    public function getEarliest()
    {
        return $this->container['earliest'];
    }

    /**
     * Sets earliest
     *
     * @param string|null $earliest The earliest date that can be selected on the calendar
     *
     * @return self
     */
    public function setEarliest($earliest)
    {
        $this->container['earliest'] = $earliest;

        return $this;
    }

    /**
     * Gets require
     *
     * @return bool|null
     */
    public function getRequire()
    {
        return $this->container['require'];
    }

    /**
     * Sets require
     *
     * @param bool|null $require True if the customer is required to select a date
     *
     * @return self
     */
    public function setRequire($require)
    {
        $this->container['require'] = $require;

        return $this;
    }

    /**
     * Gets show
     *
     * @return bool|null
     */
    public function getShow()
    {
        return $this->container['show'];
    }

    /**
     * Sets show
     *
     * @param bool|null $show True if this calendar should be shown to the customer
     *
     * @return self
     */
    public function setShow($show)
    {
        $this->container['show'] = $show;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


