<?php
/**
 * CustomerLoyalty
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomerLoyalty Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerLoyalty implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerLoyalty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'current_points' => 'int',
        'internal_gift_certificate' => '\ultracart\v2\models\GiftCertificate',
        'internal_gift_certificate_balance' => 'string',
        'internal_gift_certificate_oid' => 'int',
        'ledger_entries' => '\ultracart\v2\models\CustomerLoyaltyLedger[]',
        'loyalty_tier_expiration_dts' => 'string',
        'loyalty_tier_name' => 'string',
        'loyalty_tier_oid' => 'int',
        'pending_points' => 'int',
        'redemptions' => '\ultracart\v2\models\CustomerLoyaltyRedemption[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'current_points' => 'int32',
        'internal_gift_certificate' => null,
        'internal_gift_certificate_balance' => null,
        'internal_gift_certificate_oid' => 'int32',
        'ledger_entries' => null,
        'loyalty_tier_expiration_dts' => 'dateTime',
        'loyalty_tier_name' => null,
        'loyalty_tier_oid' => 'int32',
        'pending_points' => 'int32',
        'redemptions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_points' => 'current_points',
        'internal_gift_certificate' => 'internal_gift_certificate',
        'internal_gift_certificate_balance' => 'internal_gift_certificate_balance',
        'internal_gift_certificate_oid' => 'internal_gift_certificate_oid',
        'ledger_entries' => 'ledger_entries',
        'loyalty_tier_expiration_dts' => 'loyalty_tier_expiration_dts',
        'loyalty_tier_name' => 'loyalty_tier_name',
        'loyalty_tier_oid' => 'loyalty_tier_oid',
        'pending_points' => 'pending_points',
        'redemptions' => 'redemptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_points' => 'setCurrentPoints',
        'internal_gift_certificate' => 'setInternalGiftCertificate',
        'internal_gift_certificate_balance' => 'setInternalGiftCertificateBalance',
        'internal_gift_certificate_oid' => 'setInternalGiftCertificateOid',
        'ledger_entries' => 'setLedgerEntries',
        'loyalty_tier_expiration_dts' => 'setLoyaltyTierExpirationDts',
        'loyalty_tier_name' => 'setLoyaltyTierName',
        'loyalty_tier_oid' => 'setLoyaltyTierOid',
        'pending_points' => 'setPendingPoints',
        'redemptions' => 'setRedemptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_points' => 'getCurrentPoints',
        'internal_gift_certificate' => 'getInternalGiftCertificate',
        'internal_gift_certificate_balance' => 'getInternalGiftCertificateBalance',
        'internal_gift_certificate_oid' => 'getInternalGiftCertificateOid',
        'ledger_entries' => 'getLedgerEntries',
        'loyalty_tier_expiration_dts' => 'getLoyaltyTierExpirationDts',
        'loyalty_tier_name' => 'getLoyaltyTierName',
        'loyalty_tier_oid' => 'getLoyaltyTierOid',
        'pending_points' => 'getPendingPoints',
        'redemptions' => 'getRedemptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_points'] = $data['current_points'] ?? null;
        $this->container['internal_gift_certificate'] = $data['internal_gift_certificate'] ?? null;
        $this->container['internal_gift_certificate_balance'] = $data['internal_gift_certificate_balance'] ?? null;
        $this->container['internal_gift_certificate_oid'] = $data['internal_gift_certificate_oid'] ?? null;
        $this->container['ledger_entries'] = $data['ledger_entries'] ?? null;
        $this->container['loyalty_tier_expiration_dts'] = $data['loyalty_tier_expiration_dts'] ?? null;
        $this->container['loyalty_tier_name'] = $data['loyalty_tier_name'] ?? null;
        $this->container['loyalty_tier_oid'] = $data['loyalty_tier_oid'] ?? null;
        $this->container['pending_points'] = $data['pending_points'] ?? null;
        $this->container['redemptions'] = $data['redemptions'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_points
     *
     * @return int|null
     */
    public function getCurrentPoints()
    {
        return $this->container['current_points'];
    }

    /**
     * Sets current_points
     *
     * @param int|null $current_points Current points
     *
     * @return self
     */
    public function setCurrentPoints($current_points)
    {
        $this->container['current_points'] = $current_points;

        return $this;
    }

    /**
     * Gets internal_gift_certificate
     *
     * @return \ultracart\v2\models\GiftCertificate|null
     */
    public function getInternalGiftCertificate()
    {
        return $this->container['internal_gift_certificate'];
    }

    /**
     * Sets internal_gift_certificate
     *
     * @param \ultracart\v2\models\GiftCertificate|null $internal_gift_certificate internal_gift_certificate
     *
     * @return self
     */
    public function setInternalGiftCertificate($internal_gift_certificate)
    {
        $this->container['internal_gift_certificate'] = $internal_gift_certificate;

        return $this;
    }

    /**
     * Gets internal_gift_certificate_balance
     *
     * @return string|null
     */
    public function getInternalGiftCertificateBalance()
    {
        return $this->container['internal_gift_certificate_balance'];
    }

    /**
     * Sets internal_gift_certificate_balance
     *
     * @param string|null $internal_gift_certificate_balance Loyalty Cashback / Store credit balance (internal gift certificate balance)
     *
     * @return self
     */
    public function setInternalGiftCertificateBalance($internal_gift_certificate_balance)
    {
        $this->container['internal_gift_certificate_balance'] = $internal_gift_certificate_balance;

        return $this;
    }

    /**
     * Gets internal_gift_certificate_oid
     *
     * @return int|null
     */
    public function getInternalGiftCertificateOid()
    {
        return $this->container['internal_gift_certificate_oid'];
    }

    /**
     * Sets internal_gift_certificate_oid
     *
     * @param int|null $internal_gift_certificate_oid Internal gift certificate oid used to tracking loyalty cashback / store credit.
     *
     * @return self
     */
    public function setInternalGiftCertificateOid($internal_gift_certificate_oid)
    {
        $this->container['internal_gift_certificate_oid'] = $internal_gift_certificate_oid;

        return $this;
    }

    /**
     * Gets ledger_entries
     *
     * @return \ultracart\v2\models\CustomerLoyaltyLedger[]|null
     */
    public function getLedgerEntries()
    {
        return $this->container['ledger_entries'];
    }

    /**
     * Sets ledger_entries
     *
     * @param \ultracart\v2\models\CustomerLoyaltyLedger[]|null $ledger_entries Ledger entries
     *
     * @return self
     */
    public function setLedgerEntries($ledger_entries)
    {
        $this->container['ledger_entries'] = $ledger_entries;

        return $this;
    }

    /**
     * Gets loyalty_tier_expiration_dts
     *
     * @return string|null
     */
    public function getLoyaltyTierExpirationDts()
    {
        return $this->container['loyalty_tier_expiration_dts'];
    }

    /**
     * Sets loyalty_tier_expiration_dts
     *
     * @param string|null $loyalty_tier_expiration_dts Loyalty tier expiration date (read only because of SDK addition)
     *
     * @return self
     */
    public function setLoyaltyTierExpirationDts($loyalty_tier_expiration_dts)
    {
        $this->container['loyalty_tier_expiration_dts'] = $loyalty_tier_expiration_dts;

        return $this;
    }

    /**
     * Gets loyalty_tier_name
     *
     * @return string|null
     */
    public function getLoyaltyTierName()
    {
        return $this->container['loyalty_tier_name'];
    }

    /**
     * Sets loyalty_tier_name
     *
     * @param string|null $loyalty_tier_name Loyalty tier name
     *
     * @return self
     */
    public function setLoyaltyTierName($loyalty_tier_name)
    {
        $this->container['loyalty_tier_name'] = $loyalty_tier_name;

        return $this;
    }

    /**
     * Gets loyalty_tier_oid
     *
     * @return int|null
     */
    public function getLoyaltyTierOid()
    {
        return $this->container['loyalty_tier_oid'];
    }

    /**
     * Sets loyalty_tier_oid
     *
     * @param int|null $loyalty_tier_oid Loyalty tier oid (set to zero to remove the tier)
     *
     * @return self
     */
    public function setLoyaltyTierOid($loyalty_tier_oid)
    {
        $this->container['loyalty_tier_oid'] = $loyalty_tier_oid;

        return $this;
    }

    /**
     * Gets pending_points
     *
     * @return int|null
     */
    public function getPendingPoints()
    {
        return $this->container['pending_points'];
    }

    /**
     * Sets pending_points
     *
     * @param int|null $pending_points Pending Points
     *
     * @return self
     */
    public function setPendingPoints($pending_points)
    {
        $this->container['pending_points'] = $pending_points;

        return $this;
    }

    /**
     * Gets redemptions
     *
     * @return \ultracart\v2\models\CustomerLoyaltyRedemption[]|null
     */
    public function getRedemptions()
    {
        return $this->container['redemptions'];
    }

    /**
     * Sets redemptions
     *
     * @param \ultracart\v2\models\CustomerLoyaltyRedemption[]|null $redemptions Redemptions
     *
     * @return self
     */
    public function setRedemptions($redemptions)
    {
        $this->container['redemptions'] = $redemptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


