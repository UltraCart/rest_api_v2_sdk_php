<?php
/**
 * ItemReviews
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * ItemReviews Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemReviews implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ItemReviews';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'has_approved_review' => 'bool',
        'has_review' => 'bool',
        'review_count' => 'int',
        'review_overall' => 'float',
        'review_template_name' => 'string',
        'review_template_oid' => 'int',
        'reviewable' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'has_approved_review' => 'has_approved_review',
        'has_review' => 'has_review',
        'review_count' => 'review_count',
        'review_overall' => 'review_overall',
        'review_template_name' => 'review_template_name',
        'review_template_oid' => 'review_template_oid',
        'reviewable' => 'reviewable'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'has_approved_review' => 'setHasApprovedReview',
        'has_review' => 'setHasReview',
        'review_count' => 'setReviewCount',
        'review_overall' => 'setReviewOverall',
        'review_template_name' => 'setReviewTemplateName',
        'review_template_oid' => 'setReviewTemplateOid',
        'reviewable' => 'setReviewable'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'has_approved_review' => 'getHasApprovedReview',
        'has_review' => 'getHasReview',
        'review_count' => 'getReviewCount',
        'review_overall' => 'getReviewOverall',
        'review_template_name' => 'getReviewTemplateName',
        'review_template_oid' => 'getReviewTemplateOid',
        'reviewable' => 'getReviewable'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_approved_review'] = isset($data['has_approved_review']) ? $data['has_approved_review'] : null;
        $this->container['has_review'] = isset($data['has_review']) ? $data['has_review'] : null;
        $this->container['review_count'] = isset($data['review_count']) ? $data['review_count'] : null;
        $this->container['review_overall'] = isset($data['review_overall']) ? $data['review_overall'] : null;
        $this->container['review_template_name'] = isset($data['review_template_name']) ? $data['review_template_name'] : null;
        $this->container['review_template_oid'] = isset($data['review_template_oid']) ? $data['review_template_oid'] : null;
        $this->container['reviewable'] = isset($data['reviewable']) ? $data['reviewable'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets has_approved_review
     * @return bool
     */
    public function getHasApprovedReview()
    {
        return $this->container['has_approved_review'];
    }

    /**
     * Sets has_approved_review
     * @param bool $has_approved_review True if the item has an approved review
     * @return $this
     */
    public function setHasApprovedReview($has_approved_review)
    {
        $this->container['has_approved_review'] = $has_approved_review;

        return $this;
    }

    /**
     * Gets has_review
     * @return bool
     */
    public function getHasReview()
    {
        return $this->container['has_review'];
    }

    /**
     * Sets has_review
     * @param bool $has_review True if the item has a review
     * @return $this
     */
    public function setHasReview($has_review)
    {
        $this->container['has_review'] = $has_review;

        return $this;
    }

    /**
     * Gets review_count
     * @return int
     */
    public function getReviewCount()
    {
        return $this->container['review_count'];
    }

    /**
     * Sets review_count
     * @param int $review_count Number of approved reviews
     * @return $this
     */
    public function setReviewCount($review_count)
    {
        $this->container['review_count'] = $review_count;

        return $this;
    }

    /**
     * Gets review_overall
     * @return float
     */
    public function getReviewOverall()
    {
        return $this->container['review_overall'];
    }

    /**
     * Sets review_overall
     * @param float $review_overall Overall score of reviews
     * @return $this
     */
    public function setReviewOverall($review_overall)
    {
        $this->container['review_overall'] = $review_overall;

        return $this;
    }

    /**
     * Gets review_template_name
     * @return string
     */
    public function getReviewTemplateName()
    {
        return $this->container['review_template_name'];
    }

    /**
     * Sets review_template_name
     * @param string $review_template_name Review template name
     * @return $this
     */
    public function setReviewTemplateName($review_template_name)
    {
        $this->container['review_template_name'] = $review_template_name;

        return $this;
    }

    /**
     * Gets review_template_oid
     * @return int
     */
    public function getReviewTemplateOid()
    {
        return $this->container['review_template_oid'];
    }

    /**
     * Sets review_template_oid
     * @param int $review_template_oid Review template object identifier
     * @return $this
     */
    public function setReviewTemplateOid($review_template_oid)
    {
        $this->container['review_template_oid'] = $review_template_oid;

        return $this;
    }

    /**
     * Gets reviewable
     * @return bool
     */
    public function getReviewable()
    {
        return $this->container['reviewable'];
    }

    /**
     * Sets reviewable
     * @param bool $reviewable True if the item is reviewable
     * @return $this
     */
    public function setReviewable($reviewable)
    {
        $this->container['reviewable'] = $reviewable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


