<?php
/**
 * ItemReviews
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemReviews Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemReviews implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemReviews';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'has_approved_review' => 'bool',
        'has_review' => 'bool',
        'review_count' => 'int',
        'review_overall' => 'float',
        'review_template_name' => 'string',
        'review_template_oid' => 'int',
        'reviewable' => 'bool',
        'share_reviews_with_merchant_item_id' => 'string',
        'share_reviews_with_merchant_item_oid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'has_approved_review' => null,
        'has_review' => null,
        'review_count' => 'int32',
        'review_overall' => null,
        'review_template_name' => null,
        'review_template_oid' => 'int32',
        'reviewable' => null,
        'share_reviews_with_merchant_item_id' => null,
        'share_reviews_with_merchant_item_oid' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_approved_review' => 'has_approved_review',
        'has_review' => 'has_review',
        'review_count' => 'review_count',
        'review_overall' => 'review_overall',
        'review_template_name' => 'review_template_name',
        'review_template_oid' => 'review_template_oid',
        'reviewable' => 'reviewable',
        'share_reviews_with_merchant_item_id' => 'share_reviews_with_merchant_item_id',
        'share_reviews_with_merchant_item_oid' => 'share_reviews_with_merchant_item_oid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_approved_review' => 'setHasApprovedReview',
        'has_review' => 'setHasReview',
        'review_count' => 'setReviewCount',
        'review_overall' => 'setReviewOverall',
        'review_template_name' => 'setReviewTemplateName',
        'review_template_oid' => 'setReviewTemplateOid',
        'reviewable' => 'setReviewable',
        'share_reviews_with_merchant_item_id' => 'setShareReviewsWithMerchantItemId',
        'share_reviews_with_merchant_item_oid' => 'setShareReviewsWithMerchantItemOid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_approved_review' => 'getHasApprovedReview',
        'has_review' => 'getHasReview',
        'review_count' => 'getReviewCount',
        'review_overall' => 'getReviewOverall',
        'review_template_name' => 'getReviewTemplateName',
        'review_template_oid' => 'getReviewTemplateOid',
        'reviewable' => 'getReviewable',
        'share_reviews_with_merchant_item_id' => 'getShareReviewsWithMerchantItemId',
        'share_reviews_with_merchant_item_oid' => 'getShareReviewsWithMerchantItemOid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_approved_review'] = $data['has_approved_review'] ?? null;
        $this->container['has_review'] = $data['has_review'] ?? null;
        $this->container['review_count'] = $data['review_count'] ?? null;
        $this->container['review_overall'] = $data['review_overall'] ?? null;
        $this->container['review_template_name'] = $data['review_template_name'] ?? null;
        $this->container['review_template_oid'] = $data['review_template_oid'] ?? null;
        $this->container['reviewable'] = $data['reviewable'] ?? null;
        $this->container['share_reviews_with_merchant_item_id'] = $data['share_reviews_with_merchant_item_id'] ?? null;
        $this->container['share_reviews_with_merchant_item_oid'] = $data['share_reviews_with_merchant_item_oid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_approved_review
     *
     * @return bool|null
     */
    public function getHasApprovedReview()
    {
        return $this->container['has_approved_review'];
    }

    /**
     * Sets has_approved_review
     *
     * @param bool|null $has_approved_review True if the item has an approved review
     *
     * @return self
     */
    public function setHasApprovedReview($has_approved_review)
    {
        $this->container['has_approved_review'] = $has_approved_review;

        return $this;
    }

    /**
     * Gets has_review
     *
     * @return bool|null
     */
    public function getHasReview()
    {
        return $this->container['has_review'];
    }

    /**
     * Sets has_review
     *
     * @param bool|null $has_review True if the item has a review
     *
     * @return self
     */
    public function setHasReview($has_review)
    {
        $this->container['has_review'] = $has_review;

        return $this;
    }

    /**
     * Gets review_count
     *
     * @return int|null
     */
    public function getReviewCount()
    {
        return $this->container['review_count'];
    }

    /**
     * Sets review_count
     *
     * @param int|null $review_count Number of approved reviews
     *
     * @return self
     */
    public function setReviewCount($review_count)
    {
        $this->container['review_count'] = $review_count;

        return $this;
    }

    /**
     * Gets review_overall
     *
     * @return float|null
     */
    public function getReviewOverall()
    {
        return $this->container['review_overall'];
    }

    /**
     * Sets review_overall
     *
     * @param float|null $review_overall Overall score of reviews
     *
     * @return self
     */
    public function setReviewOverall($review_overall)
    {
        $this->container['review_overall'] = $review_overall;

        return $this;
    }

    /**
     * Gets review_template_name
     *
     * @return string|null
     */
    public function getReviewTemplateName()
    {
        return $this->container['review_template_name'];
    }

    /**
     * Sets review_template_name
     *
     * @param string|null $review_template_name Review template name
     *
     * @return self
     */
    public function setReviewTemplateName($review_template_name)
    {
        $this->container['review_template_name'] = $review_template_name;

        return $this;
    }

    /**
     * Gets review_template_oid
     *
     * @return int|null
     */
    public function getReviewTemplateOid()
    {
        return $this->container['review_template_oid'];
    }

    /**
     * Sets review_template_oid
     *
     * @param int|null $review_template_oid Review template object identifier
     *
     * @return self
     */
    public function setReviewTemplateOid($review_template_oid)
    {
        $this->container['review_template_oid'] = $review_template_oid;

        return $this;
    }

    /**
     * Gets reviewable
     *
     * @return bool|null
     */
    public function getReviewable()
    {
        return $this->container['reviewable'];
    }

    /**
     * Sets reviewable
     *
     * @param bool|null $reviewable True if the item is reviewable
     *
     * @return self
     */
    public function setReviewable($reviewable)
    {
        $this->container['reviewable'] = $reviewable;

        return $this;
    }

    /**
     * Gets share_reviews_with_merchant_item_id
     *
     * @return string|null
     */
    public function getShareReviewsWithMerchantItemId()
    {
        return $this->container['share_reviews_with_merchant_item_id'];
    }

    /**
     * Sets share_reviews_with_merchant_item_id
     *
     * @param string|null $share_reviews_with_merchant_item_id Share reviews with item id.  To set, use the share_reviews_with_merchant_item_oid field.
     *
     * @return self
     */
    public function setShareReviewsWithMerchantItemId($share_reviews_with_merchant_item_id)
    {
        $this->container['share_reviews_with_merchant_item_id'] = $share_reviews_with_merchant_item_id;

        return $this;
    }

    /**
     * Gets share_reviews_with_merchant_item_oid
     *
     * @return int|null
     */
    public function getShareReviewsWithMerchantItemOid()
    {
        return $this->container['share_reviews_with_merchant_item_oid'];
    }

    /**
     * Sets share_reviews_with_merchant_item_oid
     *
     * @param int|null $share_reviews_with_merchant_item_oid Share reviews with item oid.  To null out this field, set teh value to zero.
     *
     * @return self
     */
    public function setShareReviewsWithMerchantItemOid($share_reviews_with_merchant_item_oid)
    {
        $this->container['share_reviews_with_merchant_item_oid'] = $share_reviews_with_merchant_item_oid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


