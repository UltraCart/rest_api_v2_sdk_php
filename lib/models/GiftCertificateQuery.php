<?php
/**
 * GiftCertificateQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * GiftCertificateQuery Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GiftCertificateQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GiftCertificateQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'email' => 'string',
        'expiration_dts_end' => 'string',
        'expiration_dts_start' => 'string',
        'original_balance_end' => 'float',
        'original_balance_start' => 'float',
        'reference_order_id' => 'string',
        'remaining_balance_end' => 'float',
        'remaining_balance_start' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'email' => null,
        'expiration_dts_end' => 'dateTime',
        'expiration_dts_start' => 'dateTime',
        'original_balance_end' => null,
        'original_balance_start' => null,
        'reference_order_id' => null,
        'remaining_balance_end' => null,
        'remaining_balance_start' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'email' => 'email',
        'expiration_dts_end' => 'expiration_dts_end',
        'expiration_dts_start' => 'expiration_dts_start',
        'original_balance_end' => 'original_balance_end',
        'original_balance_start' => 'original_balance_start',
        'reference_order_id' => 'reference_order_id',
        'remaining_balance_end' => 'remaining_balance_end',
        'remaining_balance_start' => 'remaining_balance_start'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'email' => 'setEmail',
        'expiration_dts_end' => 'setExpirationDtsEnd',
        'expiration_dts_start' => 'setExpirationDtsStart',
        'original_balance_end' => 'setOriginalBalanceEnd',
        'original_balance_start' => 'setOriginalBalanceStart',
        'reference_order_id' => 'setReferenceOrderId',
        'remaining_balance_end' => 'setRemainingBalanceEnd',
        'remaining_balance_start' => 'setRemainingBalanceStart'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'email' => 'getEmail',
        'expiration_dts_end' => 'getExpirationDtsEnd',
        'expiration_dts_start' => 'getExpirationDtsStart',
        'original_balance_end' => 'getOriginalBalanceEnd',
        'original_balance_start' => 'getOriginalBalanceStart',
        'reference_order_id' => 'getReferenceOrderId',
        'remaining_balance_end' => 'getRemainingBalanceEnd',
        'remaining_balance_start' => 'getRemainingBalanceStart'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['expiration_dts_end'] = isset($data['expiration_dts_end']) ? $data['expiration_dts_end'] : null;
        $this->container['expiration_dts_start'] = isset($data['expiration_dts_start']) ? $data['expiration_dts_start'] : null;
        $this->container['original_balance_end'] = isset($data['original_balance_end']) ? $data['original_balance_end'] : null;
        $this->container['original_balance_start'] = isset($data['original_balance_start']) ? $data['original_balance_start'] : null;
        $this->container['reference_order_id'] = isset($data['reference_order_id']) ? $data['reference_order_id'] : null;
        $this->container['remaining_balance_end'] = isset($data['remaining_balance_end']) ? $data['remaining_balance_end'] : null;
        $this->container['remaining_balance_start'] = isset($data['remaining_balance_start']) ? $data['remaining_balance_start'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Gift certificate code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address of this gift certificate
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets expiration_dts_end
     *
     * @return string
     */
    public function getExpirationDtsEnd()
    {
        return $this->container['expiration_dts_end'];
    }

    /**
     * Sets expiration_dts_end
     *
     * @param string $expiration_dts_end Expiration date end
     *
     * @return $this
     */
    public function setExpirationDtsEnd($expiration_dts_end)
    {
        $this->container['expiration_dts_end'] = $expiration_dts_end;

        return $this;
    }

    /**
     * Gets expiration_dts_start
     *
     * @return string
     */
    public function getExpirationDtsStart()
    {
        return $this->container['expiration_dts_start'];
    }

    /**
     * Sets expiration_dts_start
     *
     * @param string $expiration_dts_start Expiration date start
     *
     * @return $this
     */
    public function setExpirationDtsStart($expiration_dts_start)
    {
        $this->container['expiration_dts_start'] = $expiration_dts_start;

        return $this;
    }

    /**
     * Gets original_balance_end
     *
     * @return float
     */
    public function getOriginalBalanceEnd()
    {
        return $this->container['original_balance_end'];
    }

    /**
     * Sets original_balance_end
     *
     * @param float $original_balance_end Original balance end
     *
     * @return $this
     */
    public function setOriginalBalanceEnd($original_balance_end)
    {
        $this->container['original_balance_end'] = $original_balance_end;

        return $this;
    }

    /**
     * Gets original_balance_start
     *
     * @return float
     */
    public function getOriginalBalanceStart()
    {
        return $this->container['original_balance_start'];
    }

    /**
     * Sets original_balance_start
     *
     * @param float $original_balance_start Original balance start
     *
     * @return $this
     */
    public function setOriginalBalanceStart($original_balance_start)
    {
        $this->container['original_balance_start'] = $original_balance_start;

        return $this;
    }

    /**
     * Gets reference_order_id
     *
     * @return string
     */
    public function getReferenceOrderId()
    {
        return $this->container['reference_order_id'];
    }

    /**
     * Sets reference_order_id
     *
     * @param string $reference_order_id Gift certificate reference order id
     *
     * @return $this
     */
    public function setReferenceOrderId($reference_order_id)
    {
        $this->container['reference_order_id'] = $reference_order_id;

        return $this;
    }

    /**
     * Gets remaining_balance_end
     *
     * @return float
     */
    public function getRemainingBalanceEnd()
    {
        return $this->container['remaining_balance_end'];
    }

    /**
     * Sets remaining_balance_end
     *
     * @param float $remaining_balance_end Remaining balance end
     *
     * @return $this
     */
    public function setRemainingBalanceEnd($remaining_balance_end)
    {
        $this->container['remaining_balance_end'] = $remaining_balance_end;

        return $this;
    }

    /**
     * Gets remaining_balance_start
     *
     * @return float
     */
    public function getRemainingBalanceStart()
    {
        return $this->container['remaining_balance_start'];
    }

    /**
     * Sets remaining_balance_start
     *
     * @param float $remaining_balance_start Remaining balance start
     *
     * @return $this
     */
    public function setRemainingBalanceStart($remaining_balance_start)
    {
        $this->container['remaining_balance_start'] = $remaining_balance_start;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


