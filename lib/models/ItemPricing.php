<?php
/**
 * ItemPricing
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemPricing Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemPricing implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemPricing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_arbitrary_cost' => 'bool',
        'arbitrary_cost_velocity_code' => 'string',
        'auto_order_cost' => 'float',
        'automatic_pricing_tier_name' => 'string',
        'automatic_pricing_tier_oid' => 'int',
        'cogs' => 'float',
        'cost' => 'float',
        'currency_code' => 'string',
        'manufacturer_suggested_retail_price' => 'float',
        'maximum_arbitrary_cost' => 'float',
        'minimum_advertised_price' => 'float',
        'minimum_arbitrary_cost' => 'float',
        'mix_and_match_group' => 'string',
        'mix_and_match_group_oid' => 'int',
        'sale_cost' => 'float',
        'sale_end' => 'string',
        'sale_start' => 'string',
        'tiers' => '\ultracart\v2\models\ItemPricingTier[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_arbitrary_cost' => null,
        'arbitrary_cost_velocity_code' => null,
        'auto_order_cost' => null,
        'automatic_pricing_tier_name' => null,
        'automatic_pricing_tier_oid' => 'int32',
        'cogs' => null,
        'cost' => null,
        'currency_code' => null,
        'manufacturer_suggested_retail_price' => null,
        'maximum_arbitrary_cost' => null,
        'minimum_advertised_price' => null,
        'minimum_arbitrary_cost' => null,
        'mix_and_match_group' => null,
        'mix_and_match_group_oid' => 'int32',
        'sale_cost' => null,
        'sale_end' => 'dateTime',
        'sale_start' => 'dateTime',
        'tiers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_arbitrary_cost' => 'allow_arbitrary_cost',
        'arbitrary_cost_velocity_code' => 'arbitrary_cost_velocity_code',
        'auto_order_cost' => 'auto_order_cost',
        'automatic_pricing_tier_name' => 'automatic_pricing_tier_name',
        'automatic_pricing_tier_oid' => 'automatic_pricing_tier_oid',
        'cogs' => 'cogs',
        'cost' => 'cost',
        'currency_code' => 'currency_code',
        'manufacturer_suggested_retail_price' => 'manufacturer_suggested_retail_price',
        'maximum_arbitrary_cost' => 'maximum_arbitrary_cost',
        'minimum_advertised_price' => 'minimum_advertised_price',
        'minimum_arbitrary_cost' => 'minimum_arbitrary_cost',
        'mix_and_match_group' => 'mix_and_match_group',
        'mix_and_match_group_oid' => 'mix_and_match_group_oid',
        'sale_cost' => 'sale_cost',
        'sale_end' => 'sale_end',
        'sale_start' => 'sale_start',
        'tiers' => 'tiers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_arbitrary_cost' => 'setAllowArbitraryCost',
        'arbitrary_cost_velocity_code' => 'setArbitraryCostVelocityCode',
        'auto_order_cost' => 'setAutoOrderCost',
        'automatic_pricing_tier_name' => 'setAutomaticPricingTierName',
        'automatic_pricing_tier_oid' => 'setAutomaticPricingTierOid',
        'cogs' => 'setCogs',
        'cost' => 'setCost',
        'currency_code' => 'setCurrencyCode',
        'manufacturer_suggested_retail_price' => 'setManufacturerSuggestedRetailPrice',
        'maximum_arbitrary_cost' => 'setMaximumArbitraryCost',
        'minimum_advertised_price' => 'setMinimumAdvertisedPrice',
        'minimum_arbitrary_cost' => 'setMinimumArbitraryCost',
        'mix_and_match_group' => 'setMixAndMatchGroup',
        'mix_and_match_group_oid' => 'setMixAndMatchGroupOid',
        'sale_cost' => 'setSaleCost',
        'sale_end' => 'setSaleEnd',
        'sale_start' => 'setSaleStart',
        'tiers' => 'setTiers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_arbitrary_cost' => 'getAllowArbitraryCost',
        'arbitrary_cost_velocity_code' => 'getArbitraryCostVelocityCode',
        'auto_order_cost' => 'getAutoOrderCost',
        'automatic_pricing_tier_name' => 'getAutomaticPricingTierName',
        'automatic_pricing_tier_oid' => 'getAutomaticPricingTierOid',
        'cogs' => 'getCogs',
        'cost' => 'getCost',
        'currency_code' => 'getCurrencyCode',
        'manufacturer_suggested_retail_price' => 'getManufacturerSuggestedRetailPrice',
        'maximum_arbitrary_cost' => 'getMaximumArbitraryCost',
        'minimum_advertised_price' => 'getMinimumAdvertisedPrice',
        'minimum_arbitrary_cost' => 'getMinimumArbitraryCost',
        'mix_and_match_group' => 'getMixAndMatchGroup',
        'mix_and_match_group_oid' => 'getMixAndMatchGroupOid',
        'sale_cost' => 'getSaleCost',
        'sale_end' => 'getSaleEnd',
        'sale_start' => 'getSaleStart',
        'tiers' => 'getTiers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_arbitrary_cost'] = $data['allow_arbitrary_cost'] ?? null;
        $this->container['arbitrary_cost_velocity_code'] = $data['arbitrary_cost_velocity_code'] ?? null;
        $this->container['auto_order_cost'] = $data['auto_order_cost'] ?? null;
        $this->container['automatic_pricing_tier_name'] = $data['automatic_pricing_tier_name'] ?? null;
        $this->container['automatic_pricing_tier_oid'] = $data['automatic_pricing_tier_oid'] ?? null;
        $this->container['cogs'] = $data['cogs'] ?? null;
        $this->container['cost'] = $data['cost'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['manufacturer_suggested_retail_price'] = $data['manufacturer_suggested_retail_price'] ?? null;
        $this->container['maximum_arbitrary_cost'] = $data['maximum_arbitrary_cost'] ?? null;
        $this->container['minimum_advertised_price'] = $data['minimum_advertised_price'] ?? null;
        $this->container['minimum_arbitrary_cost'] = $data['minimum_arbitrary_cost'] ?? null;
        $this->container['mix_and_match_group'] = $data['mix_and_match_group'] ?? null;
        $this->container['mix_and_match_group_oid'] = $data['mix_and_match_group_oid'] ?? null;
        $this->container['sale_cost'] = $data['sale_cost'] ?? null;
        $this->container['sale_end'] = $data['sale_end'] ?? null;
        $this->container['sale_start'] = $data['sale_start'] ?? null;
        $this->container['tiers'] = $data['tiers'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['arbitrary_cost_velocity_code']) && (mb_strlen($this->container['arbitrary_cost_velocity_code']) > 10000)) {
            $invalidProperties[] = "invalid value for 'arbitrary_cost_velocity_code', the character length must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_arbitrary_cost
     *
     * @return bool|null
     */
    public function getAllowArbitraryCost()
    {
        return $this->container['allow_arbitrary_cost'];
    }

    /**
     * Sets allow_arbitrary_cost
     *
     * @param bool|null $allow_arbitrary_cost Allow arbitrary cost
     *
     * @return self
     */
    public function setAllowArbitraryCost($allow_arbitrary_cost)
    {
        $this->container['allow_arbitrary_cost'] = $allow_arbitrary_cost;

        return $this;
    }

    /**
     * Gets arbitrary_cost_velocity_code
     *
     * @return string|null
     */
    public function getArbitraryCostVelocityCode()
    {
        return $this->container['arbitrary_cost_velocity_code'];
    }

    /**
     * Sets arbitrary_cost_velocity_code
     *
     * @param string|null $arbitrary_cost_velocity_code Arbitrary cost velocity code
     *
     * @return self
     */
    public function setArbitraryCostVelocityCode($arbitrary_cost_velocity_code)
    {
        if (!is_null($arbitrary_cost_velocity_code) && (mb_strlen($arbitrary_cost_velocity_code) > 10000)) {
            throw new \InvalidArgumentException('invalid length for $arbitrary_cost_velocity_code when calling ItemPricing., must be smaller than or equal to 10000.');
        }

        $this->container['arbitrary_cost_velocity_code'] = $arbitrary_cost_velocity_code;

        return $this;
    }

    /**
     * Gets auto_order_cost
     *
     * @return float|null
     */
    public function getAutoOrderCost()
    {
        return $this->container['auto_order_cost'];
    }

    /**
     * Sets auto_order_cost
     *
     * @param float|null $auto_order_cost Cost if customer selects to receive item on auto order.  Set to zero to delete.
     *
     * @return self
     */
    public function setAutoOrderCost($auto_order_cost)
    {
        $this->container['auto_order_cost'] = $auto_order_cost;

        return $this;
    }

    /**
     * Gets automatic_pricing_tier_name
     *
     * @return string|null
     */
    public function getAutomaticPricingTierName()
    {
        return $this->container['automatic_pricing_tier_name'];
    }

    /**
     * Sets automatic_pricing_tier_name
     *
     * @param string|null $automatic_pricing_tier_name Automatic pricing tier name
     *
     * @return self
     */
    public function setAutomaticPricingTierName($automatic_pricing_tier_name)
    {
        $this->container['automatic_pricing_tier_name'] = $automatic_pricing_tier_name;

        return $this;
    }

    /**
     * Gets automatic_pricing_tier_oid
     *
     * @return int|null
     */
    public function getAutomaticPricingTierOid()
    {
        return $this->container['automatic_pricing_tier_oid'];
    }

    /**
     * Sets automatic_pricing_tier_oid
     *
     * @param int|null $automatic_pricing_tier_oid Automatic pricing tier object identifier
     *
     * @return self
     */
    public function setAutomaticPricingTierOid($automatic_pricing_tier_oid)
    {
        $this->container['automatic_pricing_tier_oid'] = $automatic_pricing_tier_oid;

        return $this;
    }

    /**
     * Gets cogs
     *
     * @return float|null
     */
    public function getCogs()
    {
        return $this->container['cogs'];
    }

    /**
     * Sets cogs
     *
     * @param float|null $cogs Cost of goods sold
     *
     * @return self
     */
    public function setCogs($cogs)
    {
        $this->container['cogs'] = $cogs;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost Cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Currency code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (!is_null($currency_code) && (mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling ItemPricing., must be smaller than or equal to 3.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets manufacturer_suggested_retail_price
     *
     * @return float|null
     */
    public function getManufacturerSuggestedRetailPrice()
    {
        return $this->container['manufacturer_suggested_retail_price'];
    }

    /**
     * Sets manufacturer_suggested_retail_price
     *
     * @param float|null $manufacturer_suggested_retail_price Manufacturer suggested retail price
     *
     * @return self
     */
    public function setManufacturerSuggestedRetailPrice($manufacturer_suggested_retail_price)
    {
        $this->container['manufacturer_suggested_retail_price'] = $manufacturer_suggested_retail_price;

        return $this;
    }

    /**
     * Gets maximum_arbitrary_cost
     *
     * @return float|null
     */
    public function getMaximumArbitraryCost()
    {
        return $this->container['maximum_arbitrary_cost'];
    }

    /**
     * Sets maximum_arbitrary_cost
     *
     * @param float|null $maximum_arbitrary_cost Maximum arbitrary cost
     *
     * @return self
     */
    public function setMaximumArbitraryCost($maximum_arbitrary_cost)
    {
        $this->container['maximum_arbitrary_cost'] = $maximum_arbitrary_cost;

        return $this;
    }

    /**
     * Gets minimum_advertised_price
     *
     * @return float|null
     */
    public function getMinimumAdvertisedPrice()
    {
        return $this->container['minimum_advertised_price'];
    }

    /**
     * Sets minimum_advertised_price
     *
     * @param float|null $minimum_advertised_price Minimum advertised price
     *
     * @return self
     */
    public function setMinimumAdvertisedPrice($minimum_advertised_price)
    {
        $this->container['minimum_advertised_price'] = $minimum_advertised_price;

        return $this;
    }

    /**
     * Gets minimum_arbitrary_cost
     *
     * @return float|null
     */
    public function getMinimumArbitraryCost()
    {
        return $this->container['minimum_arbitrary_cost'];
    }

    /**
     * Sets minimum_arbitrary_cost
     *
     * @param float|null $minimum_arbitrary_cost Minimum arbitrary cost
     *
     * @return self
     */
    public function setMinimumArbitraryCost($minimum_arbitrary_cost)
    {
        $this->container['minimum_arbitrary_cost'] = $minimum_arbitrary_cost;

        return $this;
    }

    /**
     * Gets mix_and_match_group
     *
     * @return string|null
     */
    public function getMixAndMatchGroup()
    {
        return $this->container['mix_and_match_group'];
    }

    /**
     * Sets mix_and_match_group
     *
     * @param string|null $mix_and_match_group Mix and match group
     *
     * @return self
     */
    public function setMixAndMatchGroup($mix_and_match_group)
    {
        $this->container['mix_and_match_group'] = $mix_and_match_group;

        return $this;
    }

    /**
     * Gets mix_and_match_group_oid
     *
     * @return int|null
     */
    public function getMixAndMatchGroupOid()
    {
        return $this->container['mix_and_match_group_oid'];
    }

    /**
     * Sets mix_and_match_group_oid
     *
     * @param int|null $mix_and_match_group_oid Mix and match group object identifier
     *
     * @return self
     */
    public function setMixAndMatchGroupOid($mix_and_match_group_oid)
    {
        $this->container['mix_and_match_group_oid'] = $mix_and_match_group_oid;

        return $this;
    }

    /**
     * Gets sale_cost
     *
     * @return float|null
     */
    public function getSaleCost()
    {
        return $this->container['sale_cost'];
    }

    /**
     * Sets sale_cost
     *
     * @param float|null $sale_cost Sale cost
     *
     * @return self
     */
    public function setSaleCost($sale_cost)
    {
        $this->container['sale_cost'] = $sale_cost;

        return $this;
    }

    /**
     * Gets sale_end
     *
     * @return string|null
     */
    public function getSaleEnd()
    {
        return $this->container['sale_end'];
    }

    /**
     * Sets sale_end
     *
     * @param string|null $sale_end Sale end
     *
     * @return self
     */
    public function setSaleEnd($sale_end)
    {
        $this->container['sale_end'] = $sale_end;

        return $this;
    }

    /**
     * Gets sale_start
     *
     * @return string|null
     */
    public function getSaleStart()
    {
        return $this->container['sale_start'];
    }

    /**
     * Sets sale_start
     *
     * @param string|null $sale_start Sale start
     *
     * @return self
     */
    public function setSaleStart($sale_start)
    {
        $this->container['sale_start'] = $sale_start;

        return $this;
    }

    /**
     * Gets tiers
     *
     * @return \ultracart\v2\models\ItemPricingTier[]|null
     */
    public function getTiers()
    {
        return $this->container['tiers'];
    }

    /**
     * Sets tiers
     *
     * @param \ultracart\v2\models\ItemPricingTier[]|null $tiers Tiers
     *
     * @return self
     */
    public function setTiers($tiers)
    {
        $this->container['tiers'] = $tiers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


