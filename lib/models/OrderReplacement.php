<?php
/**
 * OrderReplacement
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderReplacement Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderReplacement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderReplacement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_merchant_notes_new_order' => 'string',
        'additional_merchant_notes_original_order' => 'string',
        'custom_field1' => 'string',
        'custom_field2' => 'string',
        'custom_field3' => 'string',
        'custom_field4' => 'string',
        'custom_field5' => 'string',
        'custom_field6' => 'string',
        'custom_field7' => 'string',
        'free' => 'bool',
        'immediate_charge' => 'bool',
        'items' => '\ultracart\v2\models\OrderReplacementItem[]',
        'original_order_id' => 'string',
        'shipping_method' => 'string',
        'skip_payment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_merchant_notes_new_order' => null,
        'additional_merchant_notes_original_order' => null,
        'custom_field1' => null,
        'custom_field2' => null,
        'custom_field3' => null,
        'custom_field4' => null,
        'custom_field5' => null,
        'custom_field6' => null,
        'custom_field7' => null,
        'free' => null,
        'immediate_charge' => null,
        'items' => null,
        'original_order_id' => null,
        'shipping_method' => null,
        'skip_payment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_merchant_notes_new_order' => 'additional_merchant_notes_new_order',
        'additional_merchant_notes_original_order' => 'additional_merchant_notes_original_order',
        'custom_field1' => 'custom_field1',
        'custom_field2' => 'custom_field2',
        'custom_field3' => 'custom_field3',
        'custom_field4' => 'custom_field4',
        'custom_field5' => 'custom_field5',
        'custom_field6' => 'custom_field6',
        'custom_field7' => 'custom_field7',
        'free' => 'free',
        'immediate_charge' => 'immediate_charge',
        'items' => 'items',
        'original_order_id' => 'original_order_id',
        'shipping_method' => 'shipping_method',
        'skip_payment' => 'skip_payment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_merchant_notes_new_order' => 'setAdditionalMerchantNotesNewOrder',
        'additional_merchant_notes_original_order' => 'setAdditionalMerchantNotesOriginalOrder',
        'custom_field1' => 'setCustomField1',
        'custom_field2' => 'setCustomField2',
        'custom_field3' => 'setCustomField3',
        'custom_field4' => 'setCustomField4',
        'custom_field5' => 'setCustomField5',
        'custom_field6' => 'setCustomField6',
        'custom_field7' => 'setCustomField7',
        'free' => 'setFree',
        'immediate_charge' => 'setImmediateCharge',
        'items' => 'setItems',
        'original_order_id' => 'setOriginalOrderId',
        'shipping_method' => 'setShippingMethod',
        'skip_payment' => 'setSkipPayment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_merchant_notes_new_order' => 'getAdditionalMerchantNotesNewOrder',
        'additional_merchant_notes_original_order' => 'getAdditionalMerchantNotesOriginalOrder',
        'custom_field1' => 'getCustomField1',
        'custom_field2' => 'getCustomField2',
        'custom_field3' => 'getCustomField3',
        'custom_field4' => 'getCustomField4',
        'custom_field5' => 'getCustomField5',
        'custom_field6' => 'getCustomField6',
        'custom_field7' => 'getCustomField7',
        'free' => 'getFree',
        'immediate_charge' => 'getImmediateCharge',
        'items' => 'getItems',
        'original_order_id' => 'getOriginalOrderId',
        'shipping_method' => 'getShippingMethod',
        'skip_payment' => 'getSkipPayment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_merchant_notes_new_order'] = isset($data['additional_merchant_notes_new_order']) ? $data['additional_merchant_notes_new_order'] : null;
        $this->container['additional_merchant_notes_original_order'] = isset($data['additional_merchant_notes_original_order']) ? $data['additional_merchant_notes_original_order'] : null;
        $this->container['custom_field1'] = isset($data['custom_field1']) ? $data['custom_field1'] : null;
        $this->container['custom_field2'] = isset($data['custom_field2']) ? $data['custom_field2'] : null;
        $this->container['custom_field3'] = isset($data['custom_field3']) ? $data['custom_field3'] : null;
        $this->container['custom_field4'] = isset($data['custom_field4']) ? $data['custom_field4'] : null;
        $this->container['custom_field5'] = isset($data['custom_field5']) ? $data['custom_field5'] : null;
        $this->container['custom_field6'] = isset($data['custom_field6']) ? $data['custom_field6'] : null;
        $this->container['custom_field7'] = isset($data['custom_field7']) ? $data['custom_field7'] : null;
        $this->container['free'] = isset($data['free']) ? $data['free'] : null;
        $this->container['immediate_charge'] = isset($data['immediate_charge']) ? $data['immediate_charge'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['original_order_id'] = isset($data['original_order_id']) ? $data['original_order_id'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['skip_payment'] = isset($data['skip_payment']) ? $data['skip_payment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['custom_field1']) && (mb_strlen($this->container['custom_field1']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field2']) && (mb_strlen($this->container['custom_field2']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field3']) && (mb_strlen($this->container['custom_field3']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field4']) && (mb_strlen($this->container['custom_field4']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field4', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field5']) && (mb_strlen($this->container['custom_field5']) > 75)) {
            $invalidProperties[] = "invalid value for 'custom_field5', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['custom_field6']) && (mb_strlen($this->container['custom_field6']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field6', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['custom_field7']) && (mb_strlen($this->container['custom_field7']) > 50)) {
            $invalidProperties[] = "invalid value for 'custom_field7', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (mb_strlen($this->container['custom_field1']) > 50) {
            return false;
        }
        if (mb_strlen($this->container['custom_field2']) > 50) {
            return false;
        }
        if (mb_strlen($this->container['custom_field3']) > 50) {
            return false;
        }
        if (mb_strlen($this->container['custom_field4']) > 50) {
            return false;
        }
        if (mb_strlen($this->container['custom_field5']) > 75) {
            return false;
        }
        if (mb_strlen($this->container['custom_field6']) > 50) {
            return false;
        }
        if (mb_strlen($this->container['custom_field7']) > 50) {
            return false;
        }
        return true;
    }


    /**
     * Gets additional_merchant_notes_new_order
     *
     * @return string
     */
    public function getAdditionalMerchantNotesNewOrder()
    {
        return $this->container['additional_merchant_notes_new_order'];
    }

    /**
     * Sets additional_merchant_notes_new_order
     *
     * @param string $additional_merchant_notes_new_order Additional merchant notes to append to the new order
     *
     * @return $this
     */
    public function setAdditionalMerchantNotesNewOrder($additional_merchant_notes_new_order)
    {
        $this->container['additional_merchant_notes_new_order'] = $additional_merchant_notes_new_order;

        return $this;
    }

    /**
     * Gets additional_merchant_notes_original_order
     *
     * @return string
     */
    public function getAdditionalMerchantNotesOriginalOrder()
    {
        return $this->container['additional_merchant_notes_original_order'];
    }

    /**
     * Sets additional_merchant_notes_original_order
     *
     * @param string $additional_merchant_notes_original_order Additional merchant notes to append to the original order
     *
     * @return $this
     */
    public function setAdditionalMerchantNotesOriginalOrder($additional_merchant_notes_original_order)
    {
        $this->container['additional_merchant_notes_original_order'] = $additional_merchant_notes_original_order;

        return $this;
    }

    /**
     * Gets custom_field1
     *
     * @return string
     */
    public function getCustomField1()
    {
        return $this->container['custom_field1'];
    }

    /**
     * Sets custom_field1
     *
     * @param string $custom_field1 Custom field 1
     *
     * @return $this
     */
    public function setCustomField1($custom_field1)
    {
        if (!is_null($custom_field1) && (mb_strlen($custom_field1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field1 when calling OrderReplacement., must be smaller than or equal to 50.');
        }

        $this->container['custom_field1'] = $custom_field1;

        return $this;
    }

    /**
     * Gets custom_field2
     *
     * @return string
     */
    public function getCustomField2()
    {
        return $this->container['custom_field2'];
    }

    /**
     * Sets custom_field2
     *
     * @param string $custom_field2 Custom field 2
     *
     * @return $this
     */
    public function setCustomField2($custom_field2)
    {
        if (!is_null($custom_field2) && (mb_strlen($custom_field2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field2 when calling OrderReplacement., must be smaller than or equal to 50.');
        }

        $this->container['custom_field2'] = $custom_field2;

        return $this;
    }

    /**
     * Gets custom_field3
     *
     * @return string
     */
    public function getCustomField3()
    {
        return $this->container['custom_field3'];
    }

    /**
     * Sets custom_field3
     *
     * @param string $custom_field3 Custom field 3
     *
     * @return $this
     */
    public function setCustomField3($custom_field3)
    {
        if (!is_null($custom_field3) && (mb_strlen($custom_field3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field3 when calling OrderReplacement., must be smaller than or equal to 50.');
        }

        $this->container['custom_field3'] = $custom_field3;

        return $this;
    }

    /**
     * Gets custom_field4
     *
     * @return string
     */
    public function getCustomField4()
    {
        return $this->container['custom_field4'];
    }

    /**
     * Sets custom_field4
     *
     * @param string $custom_field4 Custom field 4
     *
     * @return $this
     */
    public function setCustomField4($custom_field4)
    {
        if (!is_null($custom_field4) && (mb_strlen($custom_field4) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field4 when calling OrderReplacement., must be smaller than or equal to 50.');
        }

        $this->container['custom_field4'] = $custom_field4;

        return $this;
    }

    /**
     * Gets custom_field5
     *
     * @return string
     */
    public function getCustomField5()
    {
        return $this->container['custom_field5'];
    }

    /**
     * Sets custom_field5
     *
     * @param string $custom_field5 Custom field 5
     *
     * @return $this
     */
    public function setCustomField5($custom_field5)
    {
        if (!is_null($custom_field5) && (mb_strlen($custom_field5) > 75)) {
            throw new \InvalidArgumentException('invalid length for $custom_field5 when calling OrderReplacement., must be smaller than or equal to 75.');
        }

        $this->container['custom_field5'] = $custom_field5;

        return $this;
    }

    /**
     * Gets custom_field6
     *
     * @return string
     */
    public function getCustomField6()
    {
        return $this->container['custom_field6'];
    }

    /**
     * Sets custom_field6
     *
     * @param string $custom_field6 Custom field 6
     *
     * @return $this
     */
    public function setCustomField6($custom_field6)
    {
        if (!is_null($custom_field6) && (mb_strlen($custom_field6) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field6 when calling OrderReplacement., must be smaller than or equal to 50.');
        }

        $this->container['custom_field6'] = $custom_field6;

        return $this;
    }

    /**
     * Gets custom_field7
     *
     * @return string
     */
    public function getCustomField7()
    {
        return $this->container['custom_field7'];
    }

    /**
     * Sets custom_field7
     *
     * @param string $custom_field7 Custom field 7
     *
     * @return $this
     */
    public function setCustomField7($custom_field7)
    {
        if (!is_null($custom_field7) && (mb_strlen($custom_field7) > 50)) {
            throw new \InvalidArgumentException('invalid length for $custom_field7 when calling OrderReplacement., must be smaller than or equal to 50.');
        }

        $this->container['custom_field7'] = $custom_field7;

        return $this;
    }

    /**
     * Gets free
     *
     * @return bool
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param bool $free Set to true if this replacement shipment should be free for the customer.
     *
     * @return $this
     */
    public function setFree($free)
    {
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets immediate_charge
     *
     * @return bool
     */
    public function getImmediateCharge()
    {
        return $this->container['immediate_charge'];
    }

    /**
     * Sets immediate_charge
     *
     * @param bool $immediate_charge Set to true if you want to immediately charge the payment on this order, otherwise it will go to Accounts Receivable.
     *
     * @return $this
     */
    public function setImmediateCharge($immediate_charge)
    {
        $this->container['immediate_charge'] = $immediate_charge;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \ultracart\v2\models\OrderReplacementItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \ultracart\v2\models\OrderReplacementItem[] $items Items to include in the replacement order
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets original_order_id
     *
     * @return string
     */
    public function getOriginalOrderId()
    {
        return $this->container['original_order_id'];
    }

    /**
     * Sets original_order_id
     *
     * @param string $original_order_id Original order id
     *
     * @return $this
     */
    public function setOriginalOrderId($original_order_id)
    {
        $this->container['original_order_id'] = $original_order_id;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string $shipping_method Shipping method to use.  If not specified or invalid then least cost shipping will take place.
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets skip_payment
     *
     * @return bool
     */
    public function getSkipPayment()
    {
        return $this->container['skip_payment'];
    }

    /**
     * Sets skip_payment
     *
     * @param bool $skip_payment Set to true if you want to skip the payment as if it was successful.
     *
     * @return $this
     */
    public function setSkipPayment($skip_payment)
    {
        $this->container['skip_payment'] = $skip_payment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


