<?php
/**
 * DistributionCenter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * DistributionCenter Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DistributionCenter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DistributionCenter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address1' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'code' => 'string',
        'country_code' => 'string',
        'default_center' => 'bool',
        'default_handles_all_items' => 'bool',
        'distribution_center_oid' => 'int',
        'duns' => 'string',
        'estimate_from_distribution_center_oid' => 'int',
        'ftp_password' => 'string',
        'hold_before_shipment_minutes' => 'int',
        'hold_before_transmission' => 'bool',
        'hold_auto_order_before_shipment_minutes' => 'int',
        'latitude' => 'float',
        'longitude' => 'float',
        'name' => 'string',
        'no_customer_direct_shipments' => 'bool',
        'no_split_shipment' => 'bool',
        'pickup_cutoff_time_friday' => 'string',
        'pickup_cutoff_time_monday' => 'string',
        'pickup_cutoff_time_saturday' => 'string',
        'pickup_cutoff_time_sunday' => 'string',
        'pickup_cutoff_time_thursday' => 'string',
        'pickup_cutoff_time_tuesday' => 'string',
        'pickup_cutoff_time_wednesday' => 'string',
        'pickup_start_time_friday' => 'string',
        'pickup_start_time_monday' => 'string',
        'pickup_start_time_saturday' => 'string',
        'pickup_start_time_sunday' => 'string',
        'pickup_start_time_thursday' => 'string',
        'pickup_start_time_tuesday' => 'string',
        'pickup_start_time_wednesday' => 'string',
        'pickup_tz' => 'string',
        'postal_code' => 'string',
        'process_days' => 'int',
        'process_inventory_start_time' => 'string',
        'process_inventory_stop_time' => 'string',
        'require_asn' => 'bool',
        'send_kit_instead_of_components' => 'bool',
        'shipment_cutoff_time_friday' => 'string',
        'shipment_cutoff_time_monday' => 'string',
        'shipment_cutoff_time_saturday' => 'string',
        'shipment_cutoff_time_sunday' => 'string',
        'shipment_cutoff_time_thursday' => 'string',
        'shipment_cutoff_time_tuesday' => 'string',
        'shipment_cutoff_time_wednesday' => 'string',
        'state' => 'string',
        'transmit_blank_costs' => 'bool',
        'transport' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address1' => null,
        'address2' => null,
        'city' => null,
        'code' => null,
        'country_code' => null,
        'default_center' => null,
        'default_handles_all_items' => null,
        'distribution_center_oid' => 'int32',
        'duns' => null,
        'estimate_from_distribution_center_oid' => 'int32',
        'ftp_password' => null,
        'hold_before_shipment_minutes' => 'int32',
        'hold_before_transmission' => null,
        'hold_auto_order_before_shipment_minutes' => 'int32',
        'latitude' => null,
        'longitude' => null,
        'name' => null,
        'no_customer_direct_shipments' => null,
        'no_split_shipment' => null,
        'pickup_cutoff_time_friday' => null,
        'pickup_cutoff_time_monday' => null,
        'pickup_cutoff_time_saturday' => null,
        'pickup_cutoff_time_sunday' => null,
        'pickup_cutoff_time_thursday' => null,
        'pickup_cutoff_time_tuesday' => null,
        'pickup_cutoff_time_wednesday' => null,
        'pickup_start_time_friday' => null,
        'pickup_start_time_monday' => null,
        'pickup_start_time_saturday' => null,
        'pickup_start_time_sunday' => null,
        'pickup_start_time_thursday' => null,
        'pickup_start_time_tuesday' => null,
        'pickup_start_time_wednesday' => null,
        'pickup_tz' => null,
        'postal_code' => null,
        'process_days' => 'int32',
        'process_inventory_start_time' => null,
        'process_inventory_stop_time' => null,
        'require_asn' => null,
        'send_kit_instead_of_components' => null,
        'shipment_cutoff_time_friday' => null,
        'shipment_cutoff_time_monday' => null,
        'shipment_cutoff_time_saturday' => null,
        'shipment_cutoff_time_sunday' => null,
        'shipment_cutoff_time_thursday' => null,
        'shipment_cutoff_time_tuesday' => null,
        'shipment_cutoff_time_wednesday' => null,
        'state' => null,
        'transmit_blank_costs' => null,
        'transport' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address1' => 'address1',
        'address2' => 'address2',
        'city' => 'city',
        'code' => 'code',
        'country_code' => 'country_code',
        'default_center' => 'default_center',
        'default_handles_all_items' => 'default_handles_all_items',
        'distribution_center_oid' => 'distribution_center_oid',
        'duns' => 'duns',
        'estimate_from_distribution_center_oid' => 'estimate_from_distribution_center_oid',
        'ftp_password' => 'ftp_password',
        'hold_before_shipment_minutes' => 'hold_before_shipment_minutes',
        'hold_before_transmission' => 'hold_before_transmission',
        'hold_auto_order_before_shipment_minutes' => 'holdAutoOrderBeforeShipmentMinutes',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'name' => 'name',
        'no_customer_direct_shipments' => 'no_customer_direct_shipments',
        'no_split_shipment' => 'no_split_shipment',
        'pickup_cutoff_time_friday' => 'pickup_cutoff_time_friday',
        'pickup_cutoff_time_monday' => 'pickup_cutoff_time_monday',
        'pickup_cutoff_time_saturday' => 'pickup_cutoff_time_saturday',
        'pickup_cutoff_time_sunday' => 'pickup_cutoff_time_sunday',
        'pickup_cutoff_time_thursday' => 'pickup_cutoff_time_thursday',
        'pickup_cutoff_time_tuesday' => 'pickup_cutoff_time_tuesday',
        'pickup_cutoff_time_wednesday' => 'pickup_cutoff_time_wednesday',
        'pickup_start_time_friday' => 'pickup_start_time_friday',
        'pickup_start_time_monday' => 'pickup_start_time_monday',
        'pickup_start_time_saturday' => 'pickup_start_time_saturday',
        'pickup_start_time_sunday' => 'pickup_start_time_sunday',
        'pickup_start_time_thursday' => 'pickup_start_time_thursday',
        'pickup_start_time_tuesday' => 'pickup_start_time_tuesday',
        'pickup_start_time_wednesday' => 'pickup_start_time_wednesday',
        'pickup_tz' => 'pickup_tz',
        'postal_code' => 'postal_code',
        'process_days' => 'process_days',
        'process_inventory_start_time' => 'process_inventory_start_time',
        'process_inventory_stop_time' => 'process_inventory_stop_time',
        'require_asn' => 'require_asn',
        'send_kit_instead_of_components' => 'send_kit_instead_of_components',
        'shipment_cutoff_time_friday' => 'shipment_cutoff_time_friday',
        'shipment_cutoff_time_monday' => 'shipment_cutoff_time_monday',
        'shipment_cutoff_time_saturday' => 'shipment_cutoff_time_saturday',
        'shipment_cutoff_time_sunday' => 'shipment_cutoff_time_sunday',
        'shipment_cutoff_time_thursday' => 'shipment_cutoff_time_thursday',
        'shipment_cutoff_time_tuesday' => 'shipment_cutoff_time_tuesday',
        'shipment_cutoff_time_wednesday' => 'shipment_cutoff_time_wednesday',
        'state' => 'state',
        'transmit_blank_costs' => 'transmit_blank_costs',
        'transport' => 'transport'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'code' => 'setCode',
        'country_code' => 'setCountryCode',
        'default_center' => 'setDefaultCenter',
        'default_handles_all_items' => 'setDefaultHandlesAllItems',
        'distribution_center_oid' => 'setDistributionCenterOid',
        'duns' => 'setDuns',
        'estimate_from_distribution_center_oid' => 'setEstimateFromDistributionCenterOid',
        'ftp_password' => 'setFtpPassword',
        'hold_before_shipment_minutes' => 'setHoldBeforeShipmentMinutes',
        'hold_before_transmission' => 'setHoldBeforeTransmission',
        'hold_auto_order_before_shipment_minutes' => 'setHoldAutoOrderBeforeShipmentMinutes',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'name' => 'setName',
        'no_customer_direct_shipments' => 'setNoCustomerDirectShipments',
        'no_split_shipment' => 'setNoSplitShipment',
        'pickup_cutoff_time_friday' => 'setPickupCutoffTimeFriday',
        'pickup_cutoff_time_monday' => 'setPickupCutoffTimeMonday',
        'pickup_cutoff_time_saturday' => 'setPickupCutoffTimeSaturday',
        'pickup_cutoff_time_sunday' => 'setPickupCutoffTimeSunday',
        'pickup_cutoff_time_thursday' => 'setPickupCutoffTimeThursday',
        'pickup_cutoff_time_tuesday' => 'setPickupCutoffTimeTuesday',
        'pickup_cutoff_time_wednesday' => 'setPickupCutoffTimeWednesday',
        'pickup_start_time_friday' => 'setPickupStartTimeFriday',
        'pickup_start_time_monday' => 'setPickupStartTimeMonday',
        'pickup_start_time_saturday' => 'setPickupStartTimeSaturday',
        'pickup_start_time_sunday' => 'setPickupStartTimeSunday',
        'pickup_start_time_thursday' => 'setPickupStartTimeThursday',
        'pickup_start_time_tuesday' => 'setPickupStartTimeTuesday',
        'pickup_start_time_wednesday' => 'setPickupStartTimeWednesday',
        'pickup_tz' => 'setPickupTz',
        'postal_code' => 'setPostalCode',
        'process_days' => 'setProcessDays',
        'process_inventory_start_time' => 'setProcessInventoryStartTime',
        'process_inventory_stop_time' => 'setProcessInventoryStopTime',
        'require_asn' => 'setRequireAsn',
        'send_kit_instead_of_components' => 'setSendKitInsteadOfComponents',
        'shipment_cutoff_time_friday' => 'setShipmentCutoffTimeFriday',
        'shipment_cutoff_time_monday' => 'setShipmentCutoffTimeMonday',
        'shipment_cutoff_time_saturday' => 'setShipmentCutoffTimeSaturday',
        'shipment_cutoff_time_sunday' => 'setShipmentCutoffTimeSunday',
        'shipment_cutoff_time_thursday' => 'setShipmentCutoffTimeThursday',
        'shipment_cutoff_time_tuesday' => 'setShipmentCutoffTimeTuesday',
        'shipment_cutoff_time_wednesday' => 'setShipmentCutoffTimeWednesday',
        'state' => 'setState',
        'transmit_blank_costs' => 'setTransmitBlankCosts',
        'transport' => 'setTransport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'code' => 'getCode',
        'country_code' => 'getCountryCode',
        'default_center' => 'getDefaultCenter',
        'default_handles_all_items' => 'getDefaultHandlesAllItems',
        'distribution_center_oid' => 'getDistributionCenterOid',
        'duns' => 'getDuns',
        'estimate_from_distribution_center_oid' => 'getEstimateFromDistributionCenterOid',
        'ftp_password' => 'getFtpPassword',
        'hold_before_shipment_minutes' => 'getHoldBeforeShipmentMinutes',
        'hold_before_transmission' => 'getHoldBeforeTransmission',
        'hold_auto_order_before_shipment_minutes' => 'getHoldAutoOrderBeforeShipmentMinutes',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'name' => 'getName',
        'no_customer_direct_shipments' => 'getNoCustomerDirectShipments',
        'no_split_shipment' => 'getNoSplitShipment',
        'pickup_cutoff_time_friday' => 'getPickupCutoffTimeFriday',
        'pickup_cutoff_time_monday' => 'getPickupCutoffTimeMonday',
        'pickup_cutoff_time_saturday' => 'getPickupCutoffTimeSaturday',
        'pickup_cutoff_time_sunday' => 'getPickupCutoffTimeSunday',
        'pickup_cutoff_time_thursday' => 'getPickupCutoffTimeThursday',
        'pickup_cutoff_time_tuesday' => 'getPickupCutoffTimeTuesday',
        'pickup_cutoff_time_wednesday' => 'getPickupCutoffTimeWednesday',
        'pickup_start_time_friday' => 'getPickupStartTimeFriday',
        'pickup_start_time_monday' => 'getPickupStartTimeMonday',
        'pickup_start_time_saturday' => 'getPickupStartTimeSaturday',
        'pickup_start_time_sunday' => 'getPickupStartTimeSunday',
        'pickup_start_time_thursday' => 'getPickupStartTimeThursday',
        'pickup_start_time_tuesday' => 'getPickupStartTimeTuesday',
        'pickup_start_time_wednesday' => 'getPickupStartTimeWednesday',
        'pickup_tz' => 'getPickupTz',
        'postal_code' => 'getPostalCode',
        'process_days' => 'getProcessDays',
        'process_inventory_start_time' => 'getProcessInventoryStartTime',
        'process_inventory_stop_time' => 'getProcessInventoryStopTime',
        'require_asn' => 'getRequireAsn',
        'send_kit_instead_of_components' => 'getSendKitInsteadOfComponents',
        'shipment_cutoff_time_friday' => 'getShipmentCutoffTimeFriday',
        'shipment_cutoff_time_monday' => 'getShipmentCutoffTimeMonday',
        'shipment_cutoff_time_saturday' => 'getShipmentCutoffTimeSaturday',
        'shipment_cutoff_time_sunday' => 'getShipmentCutoffTimeSunday',
        'shipment_cutoff_time_thursday' => 'getShipmentCutoffTimeThursday',
        'shipment_cutoff_time_tuesday' => 'getShipmentCutoffTimeTuesday',
        'shipment_cutoff_time_wednesday' => 'getShipmentCutoffTimeWednesday',
        'state' => 'getState',
        'transmit_blank_costs' => 'getTransmitBlankCosts',
        'transport' => 'getTransport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address1'] = $data['address1'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['default_center'] = $data['default_center'] ?? null;
        $this->container['default_handles_all_items'] = $data['default_handles_all_items'] ?? null;
        $this->container['distribution_center_oid'] = $data['distribution_center_oid'] ?? null;
        $this->container['duns'] = $data['duns'] ?? null;
        $this->container['estimate_from_distribution_center_oid'] = $data['estimate_from_distribution_center_oid'] ?? null;
        $this->container['ftp_password'] = $data['ftp_password'] ?? null;
        $this->container['hold_before_shipment_minutes'] = $data['hold_before_shipment_minutes'] ?? null;
        $this->container['hold_before_transmission'] = $data['hold_before_transmission'] ?? null;
        $this->container['hold_auto_order_before_shipment_minutes'] = $data['hold_auto_order_before_shipment_minutes'] ?? null;
        $this->container['latitude'] = $data['latitude'] ?? null;
        $this->container['longitude'] = $data['longitude'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['no_customer_direct_shipments'] = $data['no_customer_direct_shipments'] ?? null;
        $this->container['no_split_shipment'] = $data['no_split_shipment'] ?? null;
        $this->container['pickup_cutoff_time_friday'] = $data['pickup_cutoff_time_friday'] ?? null;
        $this->container['pickup_cutoff_time_monday'] = $data['pickup_cutoff_time_monday'] ?? null;
        $this->container['pickup_cutoff_time_saturday'] = $data['pickup_cutoff_time_saturday'] ?? null;
        $this->container['pickup_cutoff_time_sunday'] = $data['pickup_cutoff_time_sunday'] ?? null;
        $this->container['pickup_cutoff_time_thursday'] = $data['pickup_cutoff_time_thursday'] ?? null;
        $this->container['pickup_cutoff_time_tuesday'] = $data['pickup_cutoff_time_tuesday'] ?? null;
        $this->container['pickup_cutoff_time_wednesday'] = $data['pickup_cutoff_time_wednesday'] ?? null;
        $this->container['pickup_start_time_friday'] = $data['pickup_start_time_friday'] ?? null;
        $this->container['pickup_start_time_monday'] = $data['pickup_start_time_monday'] ?? null;
        $this->container['pickup_start_time_saturday'] = $data['pickup_start_time_saturday'] ?? null;
        $this->container['pickup_start_time_sunday'] = $data['pickup_start_time_sunday'] ?? null;
        $this->container['pickup_start_time_thursday'] = $data['pickup_start_time_thursday'] ?? null;
        $this->container['pickup_start_time_tuesday'] = $data['pickup_start_time_tuesday'] ?? null;
        $this->container['pickup_start_time_wednesday'] = $data['pickup_start_time_wednesday'] ?? null;
        $this->container['pickup_tz'] = $data['pickup_tz'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['process_days'] = $data['process_days'] ?? null;
        $this->container['process_inventory_start_time'] = $data['process_inventory_start_time'] ?? null;
        $this->container['process_inventory_stop_time'] = $data['process_inventory_stop_time'] ?? null;
        $this->container['require_asn'] = $data['require_asn'] ?? null;
        $this->container['send_kit_instead_of_components'] = $data['send_kit_instead_of_components'] ?? null;
        $this->container['shipment_cutoff_time_friday'] = $data['shipment_cutoff_time_friday'] ?? null;
        $this->container['shipment_cutoff_time_monday'] = $data['shipment_cutoff_time_monday'] ?? null;
        $this->container['shipment_cutoff_time_saturday'] = $data['shipment_cutoff_time_saturday'] ?? null;
        $this->container['shipment_cutoff_time_sunday'] = $data['shipment_cutoff_time_sunday'] ?? null;
        $this->container['shipment_cutoff_time_thursday'] = $data['shipment_cutoff_time_thursday'] ?? null;
        $this->container['shipment_cutoff_time_tuesday'] = $data['shipment_cutoff_time_tuesday'] ?? null;
        $this->container['shipment_cutoff_time_wednesday'] = $data['shipment_cutoff_time_wednesday'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['transmit_blank_costs'] = $data['transmit_blank_costs'] ?? null;
        $this->container['transport'] = $data['transport'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 Address line 1 of the distribution center
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2 of the distribution center
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City of the distribution center
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Unique code for this distribution center
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Country code of the distribution center
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets default_center
     *
     * @return bool|null
     */
    public function getDefaultCenter()
    {
        return $this->container['default_center'];
    }

    /**
     * Sets default_center
     *
     * @param bool|null $default_center True if this is the default distribution center on the account
     *
     * @return self
     */
    public function setDefaultCenter($default_center)
    {
        $this->container['default_center'] = $default_center;

        return $this;
    }

    /**
     * Gets default_handles_all_items
     *
     * @return bool|null
     */
    public function getDefaultHandlesAllItems()
    {
        return $this->container['default_handles_all_items'];
    }

    /**
     * Sets default_handles_all_items
     *
     * @param bool|null $default_handles_all_items True if this distribution center handles all new items by default
     *
     * @return self
     */
    public function setDefaultHandlesAllItems($default_handles_all_items)
    {
        $this->container['default_handles_all_items'] = $default_handles_all_items;

        return $this;
    }

    /**
     * Gets distribution_center_oid
     *
     * @return int|null
     */
    public function getDistributionCenterOid()
    {
        return $this->container['distribution_center_oid'];
    }

    /**
     * Sets distribution_center_oid
     *
     * @param int|null $distribution_center_oid Distribution center object identifier
     *
     * @return self
     */
    public function setDistributionCenterOid($distribution_center_oid)
    {
        $this->container['distribution_center_oid'] = $distribution_center_oid;

        return $this;
    }

    /**
     * Gets duns
     *
     * @return string|null
     */
    public function getDuns()
    {
        return $this->container['duns'];
    }

    /**
     * Sets duns
     *
     * @param string|null $duns DUNS number assigned to this distribution center (EDI)
     *
     * @return self
     */
    public function setDuns($duns)
    {
        $this->container['duns'] = $duns;

        return $this;
    }

    /**
     * Gets estimate_from_distribution_center_oid
     *
     * @return int|null
     */
    public function getEstimateFromDistributionCenterOid()
    {
        return $this->container['estimate_from_distribution_center_oid'];
    }

    /**
     * Sets estimate_from_distribution_center_oid
     *
     * @param int|null $estimate_from_distribution_center_oid Estimate shipments for this distribution center as if they came from the other distribution center
     *
     * @return self
     */
    public function setEstimateFromDistributionCenterOid($estimate_from_distribution_center_oid)
    {
        $this->container['estimate_from_distribution_center_oid'] = $estimate_from_distribution_center_oid;

        return $this;
    }

    /**
     * Gets ftp_password
     *
     * @return string|null
     */
    public function getFtpPassword()
    {
        return $this->container['ftp_password'];
    }

    /**
     * Sets ftp_password
     *
     * @param string|null $ftp_password Password associated with the virtual FTP
     *
     * @return self
     */
    public function setFtpPassword($ftp_password)
    {
        $this->container['ftp_password'] = $ftp_password;

        return $this;
    }

    /**
     * Gets hold_before_shipment_minutes
     *
     * @return int|null
     */
    public function getHoldBeforeShipmentMinutes()
    {
        return $this->container['hold_before_shipment_minutes'];
    }

    /**
     * Sets hold_before_shipment_minutes
     *
     * @param int|null $hold_before_shipment_minutes The number of minutes to hold a shipment
     *
     * @return self
     */
    public function setHoldBeforeShipmentMinutes($hold_before_shipment_minutes)
    {
        $this->container['hold_before_shipment_minutes'] = $hold_before_shipment_minutes;

        return $this;
    }

    /**
     * Gets hold_before_transmission
     *
     * @return bool|null
     */
    public function getHoldBeforeTransmission()
    {
        return $this->container['hold_before_transmission'];
    }

    /**
     * Sets hold_before_transmission
     *
     * @param bool|null $hold_before_transmission True if the shipment should be held before transmission and require a manual release
     *
     * @return self
     */
    public function setHoldBeforeTransmission($hold_before_transmission)
    {
        $this->container['hold_before_transmission'] = $hold_before_transmission;

        return $this;
    }

    /**
     * Gets hold_auto_order_before_shipment_minutes
     *
     * @return int|null
     */
    public function getHoldAutoOrderBeforeShipmentMinutes()
    {
        return $this->container['hold_auto_order_before_shipment_minutes'];
    }

    /**
     * Sets hold_auto_order_before_shipment_minutes
     *
     * @param int|null $hold_auto_order_before_shipment_minutes hold_auto_order_before_shipment_minutes
     *
     * @return self
     */
    public function setHoldAutoOrderBeforeShipmentMinutes($hold_auto_order_before_shipment_minutes)
    {
        $this->container['hold_auto_order_before_shipment_minutes'] = $hold_auto_order_before_shipment_minutes;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude Latitude where the distribution center is located
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude Longitude where the distribution center is located
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of this distribution center
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets no_customer_direct_shipments
     *
     * @return bool|null
     */
    public function getNoCustomerDirectShipments()
    {
        return $this->container['no_customer_direct_shipments'];
    }

    /**
     * Sets no_customer_direct_shipments
     *
     * @param bool|null $no_customer_direct_shipments True if this distribution center does not handle customer direct shipments
     *
     * @return self
     */
    public function setNoCustomerDirectShipments($no_customer_direct_shipments)
    {
        $this->container['no_customer_direct_shipments'] = $no_customer_direct_shipments;

        return $this;
    }

    /**
     * Gets no_split_shipment
     *
     * @return bool|null
     */
    public function getNoSplitShipment()
    {
        return $this->container['no_split_shipment'];
    }

    /**
     * Sets no_split_shipment
     *
     * @param bool|null $no_split_shipment True if this distribution center is not allowed to participate in a split shipment.
     *
     * @return self
     */
    public function setNoSplitShipment($no_split_shipment)
    {
        $this->container['no_split_shipment'] = $no_split_shipment;

        return $this;
    }

    /**
     * Gets pickup_cutoff_time_friday
     *
     * @return string|null
     */
    public function getPickupCutoffTimeFriday()
    {
        return $this->container['pickup_cutoff_time_friday'];
    }

    /**
     * Sets pickup_cutoff_time_friday
     *
     * @param string|null $pickup_cutoff_time_friday The time (EST) after which pickups will not be available on Friday
     *
     * @return self
     */
    public function setPickupCutoffTimeFriday($pickup_cutoff_time_friday)
    {
        $this->container['pickup_cutoff_time_friday'] = $pickup_cutoff_time_friday;

        return $this;
    }

    /**
     * Gets pickup_cutoff_time_monday
     *
     * @return string|null
     */
    public function getPickupCutoffTimeMonday()
    {
        return $this->container['pickup_cutoff_time_monday'];
    }

    /**
     * Sets pickup_cutoff_time_monday
     *
     * @param string|null $pickup_cutoff_time_monday The time (EST) after which pickups will not be available on Monday
     *
     * @return self
     */
    public function setPickupCutoffTimeMonday($pickup_cutoff_time_monday)
    {
        $this->container['pickup_cutoff_time_monday'] = $pickup_cutoff_time_monday;

        return $this;
    }

    /**
     * Gets pickup_cutoff_time_saturday
     *
     * @return string|null
     */
    public function getPickupCutoffTimeSaturday()
    {
        return $this->container['pickup_cutoff_time_saturday'];
    }

    /**
     * Sets pickup_cutoff_time_saturday
     *
     * @param string|null $pickup_cutoff_time_saturday The time (EST) after which pickups will not be available on Saturday
     *
     * @return self
     */
    public function setPickupCutoffTimeSaturday($pickup_cutoff_time_saturday)
    {
        $this->container['pickup_cutoff_time_saturday'] = $pickup_cutoff_time_saturday;

        return $this;
    }

    /**
     * Gets pickup_cutoff_time_sunday
     *
     * @return string|null
     */
    public function getPickupCutoffTimeSunday()
    {
        return $this->container['pickup_cutoff_time_sunday'];
    }

    /**
     * Sets pickup_cutoff_time_sunday
     *
     * @param string|null $pickup_cutoff_time_sunday The time (EST) after which pickups will not be available on Sunday
     *
     * @return self
     */
    public function setPickupCutoffTimeSunday($pickup_cutoff_time_sunday)
    {
        $this->container['pickup_cutoff_time_sunday'] = $pickup_cutoff_time_sunday;

        return $this;
    }

    /**
     * Gets pickup_cutoff_time_thursday
     *
     * @return string|null
     */
    public function getPickupCutoffTimeThursday()
    {
        return $this->container['pickup_cutoff_time_thursday'];
    }

    /**
     * Sets pickup_cutoff_time_thursday
     *
     * @param string|null $pickup_cutoff_time_thursday The time (EST) after which pickups will not be available on Thursday
     *
     * @return self
     */
    public function setPickupCutoffTimeThursday($pickup_cutoff_time_thursday)
    {
        $this->container['pickup_cutoff_time_thursday'] = $pickup_cutoff_time_thursday;

        return $this;
    }

    /**
     * Gets pickup_cutoff_time_tuesday
     *
     * @return string|null
     */
    public function getPickupCutoffTimeTuesday()
    {
        return $this->container['pickup_cutoff_time_tuesday'];
    }

    /**
     * Sets pickup_cutoff_time_tuesday
     *
     * @param string|null $pickup_cutoff_time_tuesday The time (EST) after which pickups will not be available on Tuesday
     *
     * @return self
     */
    public function setPickupCutoffTimeTuesday($pickup_cutoff_time_tuesday)
    {
        $this->container['pickup_cutoff_time_tuesday'] = $pickup_cutoff_time_tuesday;

        return $this;
    }

    /**
     * Gets pickup_cutoff_time_wednesday
     *
     * @return string|null
     */
    public function getPickupCutoffTimeWednesday()
    {
        return $this->container['pickup_cutoff_time_wednesday'];
    }

    /**
     * Sets pickup_cutoff_time_wednesday
     *
     * @param string|null $pickup_cutoff_time_wednesday The time (EST) after which pickups will not be available on Wednesday
     *
     * @return self
     */
    public function setPickupCutoffTimeWednesday($pickup_cutoff_time_wednesday)
    {
        $this->container['pickup_cutoff_time_wednesday'] = $pickup_cutoff_time_wednesday;

        return $this;
    }

    /**
     * Gets pickup_start_time_friday
     *
     * @return string|null
     */
    public function getPickupStartTimeFriday()
    {
        return $this->container['pickup_start_time_friday'];
    }

    /**
     * Sets pickup_start_time_friday
     *
     * @param string|null $pickup_start_time_friday The time (EST) after which pickups are available on Friday
     *
     * @return self
     */
    public function setPickupStartTimeFriday($pickup_start_time_friday)
    {
        $this->container['pickup_start_time_friday'] = $pickup_start_time_friday;

        return $this;
    }

    /**
     * Gets pickup_start_time_monday
     *
     * @return string|null
     */
    public function getPickupStartTimeMonday()
    {
        return $this->container['pickup_start_time_monday'];
    }

    /**
     * Sets pickup_start_time_monday
     *
     * @param string|null $pickup_start_time_monday The time (EST) after which pickups are available on Monday
     *
     * @return self
     */
    public function setPickupStartTimeMonday($pickup_start_time_monday)
    {
        $this->container['pickup_start_time_monday'] = $pickup_start_time_monday;

        return $this;
    }

    /**
     * Gets pickup_start_time_saturday
     *
     * @return string|null
     */
    public function getPickupStartTimeSaturday()
    {
        return $this->container['pickup_start_time_saturday'];
    }

    /**
     * Sets pickup_start_time_saturday
     *
     * @param string|null $pickup_start_time_saturday The time (EST) after which pickups are available on Saturday
     *
     * @return self
     */
    public function setPickupStartTimeSaturday($pickup_start_time_saturday)
    {
        $this->container['pickup_start_time_saturday'] = $pickup_start_time_saturday;

        return $this;
    }

    /**
     * Gets pickup_start_time_sunday
     *
     * @return string|null
     */
    public function getPickupStartTimeSunday()
    {
        return $this->container['pickup_start_time_sunday'];
    }

    /**
     * Sets pickup_start_time_sunday
     *
     * @param string|null $pickup_start_time_sunday The time (EST) after which pickups are available on Sunday
     *
     * @return self
     */
    public function setPickupStartTimeSunday($pickup_start_time_sunday)
    {
        $this->container['pickup_start_time_sunday'] = $pickup_start_time_sunday;

        return $this;
    }

    /**
     * Gets pickup_start_time_thursday
     *
     * @return string|null
     */
    public function getPickupStartTimeThursday()
    {
        return $this->container['pickup_start_time_thursday'];
    }

    /**
     * Sets pickup_start_time_thursday
     *
     * @param string|null $pickup_start_time_thursday The time (EST) after which pickups are available on Thursday
     *
     * @return self
     */
    public function setPickupStartTimeThursday($pickup_start_time_thursday)
    {
        $this->container['pickup_start_time_thursday'] = $pickup_start_time_thursday;

        return $this;
    }

    /**
     * Gets pickup_start_time_tuesday
     *
     * @return string|null
     */
    public function getPickupStartTimeTuesday()
    {
        return $this->container['pickup_start_time_tuesday'];
    }

    /**
     * Sets pickup_start_time_tuesday
     *
     * @param string|null $pickup_start_time_tuesday The time (EST) after which pickups are available on Tuesday
     *
     * @return self
     */
    public function setPickupStartTimeTuesday($pickup_start_time_tuesday)
    {
        $this->container['pickup_start_time_tuesday'] = $pickup_start_time_tuesday;

        return $this;
    }

    /**
     * Gets pickup_start_time_wednesday
     *
     * @return string|null
     */
    public function getPickupStartTimeWednesday()
    {
        return $this->container['pickup_start_time_wednesday'];
    }

    /**
     * Sets pickup_start_time_wednesday
     *
     * @param string|null $pickup_start_time_wednesday The time (EST) after which pickups are available on Wednesday
     *
     * @return self
     */
    public function setPickupStartTimeWednesday($pickup_start_time_wednesday)
    {
        $this->container['pickup_start_time_wednesday'] = $pickup_start_time_wednesday;

        return $this;
    }

    /**
     * Gets pickup_tz
     *
     * @return string|null
     */
    public function getPickupTz()
    {
        return $this->container['pickup_tz'];
    }

    /**
     * Sets pickup_tz
     *
     * @param string|null $pickup_tz The IANA timezone for all pickup times
     *
     * @return self
     */
    public function setPickupTz($pickup_tz)
    {
        $this->container['pickup_tz'] = $pickup_tz;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal code of the distribution center
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets process_days
     *
     * @return int|null
     */
    public function getProcessDays()
    {
        return $this->container['process_days'];
    }

    /**
     * Sets process_days
     *
     * @param int|null $process_days The number of processing days required before an order ships
     *
     * @return self
     */
    public function setProcessDays($process_days)
    {
        $this->container['process_days'] = $process_days;

        return $this;
    }

    /**
     * Gets process_inventory_start_time
     *
     * @return string|null
     */
    public function getProcessInventoryStartTime()
    {
        return $this->container['process_inventory_start_time'];
    }

    /**
     * Sets process_inventory_start_time
     *
     * @param string|null $process_inventory_start_time The time (EST) after which inventory updates will be processed
     *
     * @return self
     */
    public function setProcessInventoryStartTime($process_inventory_start_time)
    {
        $this->container['process_inventory_start_time'] = $process_inventory_start_time;

        return $this;
    }

    /**
     * Gets process_inventory_stop_time
     *
     * @return string|null
     */
    public function getProcessInventoryStopTime()
    {
        return $this->container['process_inventory_stop_time'];
    }

    /**
     * Sets process_inventory_stop_time
     *
     * @param string|null $process_inventory_stop_time The time (EST) before which inventory updates will be processed
     *
     * @return self
     */
    public function setProcessInventoryStopTime($process_inventory_stop_time)
    {
        $this->container['process_inventory_stop_time'] = $process_inventory_stop_time;

        return $this;
    }

    /**
     * Gets require_asn
     *
     * @return bool|null
     */
    public function getRequireAsn()
    {
        return $this->container['require_asn'];
    }

    /**
     * Sets require_asn
     *
     * @param bool|null $require_asn True if ASNs are required for this distribution center (EDI)
     *
     * @return self
     */
    public function setRequireAsn($require_asn)
    {
        $this->container['require_asn'] = $require_asn;

        return $this;
    }

    /**
     * Gets send_kit_instead_of_components
     *
     * @return bool|null
     */
    public function getSendKitInsteadOfComponents()
    {
        return $this->container['send_kit_instead_of_components'];
    }

    /**
     * Sets send_kit_instead_of_components
     *
     * @param bool|null $send_kit_instead_of_components True if we should send the kit instead of the components
     *
     * @return self
     */
    public function setSendKitInsteadOfComponents($send_kit_instead_of_components)
    {
        $this->container['send_kit_instead_of_components'] = $send_kit_instead_of_components;

        return $this;
    }

    /**
     * Gets shipment_cutoff_time_friday
     *
     * @return string|null
     */
    public function getShipmentCutoffTimeFriday()
    {
        return $this->container['shipment_cutoff_time_friday'];
    }

    /**
     * Sets shipment_cutoff_time_friday
     *
     * @param string|null $shipment_cutoff_time_friday The time (EST) after which shipments will not be processed on Friday
     *
     * @return self
     */
    public function setShipmentCutoffTimeFriday($shipment_cutoff_time_friday)
    {
        $this->container['shipment_cutoff_time_friday'] = $shipment_cutoff_time_friday;

        return $this;
    }

    /**
     * Gets shipment_cutoff_time_monday
     *
     * @return string|null
     */
    public function getShipmentCutoffTimeMonday()
    {
        return $this->container['shipment_cutoff_time_monday'];
    }

    /**
     * Sets shipment_cutoff_time_monday
     *
     * @param string|null $shipment_cutoff_time_monday The time (EST) after which shipments will not be processed on Monday
     *
     * @return self
     */
    public function setShipmentCutoffTimeMonday($shipment_cutoff_time_monday)
    {
        $this->container['shipment_cutoff_time_monday'] = $shipment_cutoff_time_monday;

        return $this;
    }

    /**
     * Gets shipment_cutoff_time_saturday
     *
     * @return string|null
     */
    public function getShipmentCutoffTimeSaturday()
    {
        return $this->container['shipment_cutoff_time_saturday'];
    }

    /**
     * Sets shipment_cutoff_time_saturday
     *
     * @param string|null $shipment_cutoff_time_saturday The time (EST) after which shipments will not be processed on Saturday
     *
     * @return self
     */
    public function setShipmentCutoffTimeSaturday($shipment_cutoff_time_saturday)
    {
        $this->container['shipment_cutoff_time_saturday'] = $shipment_cutoff_time_saturday;

        return $this;
    }

    /**
     * Gets shipment_cutoff_time_sunday
     *
     * @return string|null
     */
    public function getShipmentCutoffTimeSunday()
    {
        return $this->container['shipment_cutoff_time_sunday'];
    }

    /**
     * Sets shipment_cutoff_time_sunday
     *
     * @param string|null $shipment_cutoff_time_sunday The time (EST) after which shipments will not be processed on Sunday
     *
     * @return self
     */
    public function setShipmentCutoffTimeSunday($shipment_cutoff_time_sunday)
    {
        $this->container['shipment_cutoff_time_sunday'] = $shipment_cutoff_time_sunday;

        return $this;
    }

    /**
     * Gets shipment_cutoff_time_thursday
     *
     * @return string|null
     */
    public function getShipmentCutoffTimeThursday()
    {
        return $this->container['shipment_cutoff_time_thursday'];
    }

    /**
     * Sets shipment_cutoff_time_thursday
     *
     * @param string|null $shipment_cutoff_time_thursday The time (EST) after which shipments will not be processed on Thursday
     *
     * @return self
     */
    public function setShipmentCutoffTimeThursday($shipment_cutoff_time_thursday)
    {
        $this->container['shipment_cutoff_time_thursday'] = $shipment_cutoff_time_thursday;

        return $this;
    }

    /**
     * Gets shipment_cutoff_time_tuesday
     *
     * @return string|null
     */
    public function getShipmentCutoffTimeTuesday()
    {
        return $this->container['shipment_cutoff_time_tuesday'];
    }

    /**
     * Sets shipment_cutoff_time_tuesday
     *
     * @param string|null $shipment_cutoff_time_tuesday The time (EST) after which shipments will not be processed on Tuesday
     *
     * @return self
     */
    public function setShipmentCutoffTimeTuesday($shipment_cutoff_time_tuesday)
    {
        $this->container['shipment_cutoff_time_tuesday'] = $shipment_cutoff_time_tuesday;

        return $this;
    }

    /**
     * Gets shipment_cutoff_time_wednesday
     *
     * @return string|null
     */
    public function getShipmentCutoffTimeWednesday()
    {
        return $this->container['shipment_cutoff_time_wednesday'];
    }

    /**
     * Sets shipment_cutoff_time_wednesday
     *
     * @param string|null $shipment_cutoff_time_wednesday The time (EST) after which shipments will not be processed on Wednesday
     *
     * @return self
     */
    public function setShipmentCutoffTimeWednesday($shipment_cutoff_time_wednesday)
    {
        $this->container['shipment_cutoff_time_wednesday'] = $shipment_cutoff_time_wednesday;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State of the distribution center
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets transmit_blank_costs
     *
     * @return bool|null
     */
    public function getTransmitBlankCosts()
    {
        return $this->container['transmit_blank_costs'];
    }

    /**
     * Sets transmit_blank_costs
     *
     * @param bool|null $transmit_blank_costs True if monetary amounts should be zeroed before transmission
     *
     * @return self
     */
    public function setTransmitBlankCosts($transmit_blank_costs)
    {
        $this->container['transmit_blank_costs'] = $transmit_blank_costs;

        return $this;
    }

    /**
     * Gets transport
     *
     * @return string|null
     */
    public function getTransport()
    {
        return $this->container['transport'];
    }

    /**
     * Sets transport
     *
     * @param string|null $transport Transport mechanism for this distribution center
     *
     * @return self
     */
    public function setTransport($transport)
    {
        $this->container['transport'] = $transport;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


