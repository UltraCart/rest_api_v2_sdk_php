<?php
/**
 * TransactionGateway
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * TransactionGateway Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionGateway implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionGateway';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'arbitrary_html' => 'string',
        'comment' => 'string',
        'credit_card_capable' => 'bool',
        'echeck_capable' => 'bool',
        'echeck_supported' => 'string',
        'enabled' => 'bool',
        'gateway_cert_pem' => 'string',
        'gateway_cert_pem_label' => 'string',
        'gateway_email' => 'string',
        'gateway_email_label' => 'string',
        'gateway_environment' => 'string',
        'gateway_environment_label' => 'string',
        'gateway_environments' => 'string[]',
        'gateway_header_back_color' => 'string',
        'gateway_header_border_color' => 'string',
        'gateway_header_image_url' => 'string',
        'gateway_key' => 'string',
        'gateway_key_label' => 'string',
        'gateway_key_pem' => 'string',
        'gateway_key_pem_label' => 'string',
        'gateway_landing_page' => 'string',
        'gateway_merchant_id' => 'string',
        'gateway_merchant_id_label' => 'string',
        'gateway_mode' => 'string',
        'gateway_mode_label' => 'string',
        'gateway_modes' => 'string[]',
        'gateway_page_style' => 'string',
        'gateway_page_style_label' => 'string',
        'gateway_page_styles' => 'string[]',
        'gateway_partner' => 'string',
        'gateway_partner_label' => 'string',
        'gateway_password' => 'string',
        'gateway_password_label' => 'string',
        'gateway_payflow_color' => 'string',
        'gateway_private_key_password' => 'string',
        'gateway_private_key_password_label' => 'string',
        'gateway_solution_type' => 'string',
        'gateway_solution_type_label' => 'string',
        'gateway_solution_types' => 'string[]',
        'gateway_url' => 'string',
        'gateway_url_label' => 'string',
        'gateway_username' => 'string',
        'gateway_username_label' => 'string',
        'merchant_account_profile_amex' => 'string',
        'merchant_account_profile_diners_club' => 'string',
        'merchant_account_profile_discover' => 'string',
        'merchant_account_profile_jcb' => 'string',
        'merchant_account_profile_mastercard' => 'string',
        'merchant_account_profile_visa' => 'string',
        'merchant_id' => 'string',
        'multi_currency_details' => 'bool',
        'name' => 'string',
        'refund_supported' => 'bool',
        'require_echeck_tax_id_or_drivers_license' => 'bool',
        'support_vbv_3ds' => 'bool',
        'supports_amex' => 'bool',
        'supports_diners_club' => 'bool',
        'supports_discover' => 'bool',
        'supports_echeck' => 'bool',
        'supports_electronic_gift_card' => 'bool',
        'supports_jcb' => 'bool',
        'supports_mastercard' => 'bool',
        'supports_visa' => 'bool',
        'third_party' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'arbitrary_html' => null,
        'comment' => null,
        'credit_card_capable' => null,
        'echeck_capable' => null,
        'echeck_supported' => null,
        'enabled' => null,
        'gateway_cert_pem' => null,
        'gateway_cert_pem_label' => null,
        'gateway_email' => null,
        'gateway_email_label' => null,
        'gateway_environment' => null,
        'gateway_environment_label' => null,
        'gateway_environments' => null,
        'gateway_header_back_color' => null,
        'gateway_header_border_color' => null,
        'gateway_header_image_url' => null,
        'gateway_key' => null,
        'gateway_key_label' => null,
        'gateway_key_pem' => null,
        'gateway_key_pem_label' => null,
        'gateway_landing_page' => null,
        'gateway_merchant_id' => null,
        'gateway_merchant_id_label' => null,
        'gateway_mode' => null,
        'gateway_mode_label' => null,
        'gateway_modes' => null,
        'gateway_page_style' => null,
        'gateway_page_style_label' => null,
        'gateway_page_styles' => null,
        'gateway_partner' => null,
        'gateway_partner_label' => null,
        'gateway_password' => null,
        'gateway_password_label' => null,
        'gateway_payflow_color' => null,
        'gateway_private_key_password' => null,
        'gateway_private_key_password_label' => null,
        'gateway_solution_type' => null,
        'gateway_solution_type_label' => null,
        'gateway_solution_types' => null,
        'gateway_url' => null,
        'gateway_url_label' => null,
        'gateway_username' => null,
        'gateway_username_label' => null,
        'merchant_account_profile_amex' => null,
        'merchant_account_profile_diners_club' => null,
        'merchant_account_profile_discover' => null,
        'merchant_account_profile_jcb' => null,
        'merchant_account_profile_mastercard' => null,
        'merchant_account_profile_visa' => null,
        'merchant_id' => null,
        'multi_currency_details' => null,
        'name' => null,
        'refund_supported' => null,
        'require_echeck_tax_id_or_drivers_license' => null,
        'support_vbv_3ds' => null,
        'supports_amex' => null,
        'supports_diners_club' => null,
        'supports_discover' => null,
        'supports_echeck' => null,
        'supports_electronic_gift_card' => null,
        'supports_jcb' => null,
        'supports_mastercard' => null,
        'supports_visa' => null,
        'third_party' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arbitrary_html' => 'arbitrary_html',
        'comment' => 'comment',
        'credit_card_capable' => 'credit_card_capable',
        'echeck_capable' => 'echeck_capable',
        'echeck_supported' => 'echeck_supported',
        'enabled' => 'enabled',
        'gateway_cert_pem' => 'gateway_cert_pem',
        'gateway_cert_pem_label' => 'gateway_cert_pem_label',
        'gateway_email' => 'gateway_email',
        'gateway_email_label' => 'gateway_email_label',
        'gateway_environment' => 'gateway_environment',
        'gateway_environment_label' => 'gateway_environment_label',
        'gateway_environments' => 'gateway_environments',
        'gateway_header_back_color' => 'gateway_header_back_color',
        'gateway_header_border_color' => 'gateway_header_border_color',
        'gateway_header_image_url' => 'gateway_header_image_url',
        'gateway_key' => 'gateway_key',
        'gateway_key_label' => 'gateway_key_label',
        'gateway_key_pem' => 'gateway_key_pem',
        'gateway_key_pem_label' => 'gateway_key_pem_label',
        'gateway_landing_page' => 'gateway_landing_page',
        'gateway_merchant_id' => 'gateway_merchant_id',
        'gateway_merchant_id_label' => 'gateway_merchant_id_label',
        'gateway_mode' => 'gateway_mode',
        'gateway_mode_label' => 'gateway_mode_label',
        'gateway_modes' => 'gateway_modes',
        'gateway_page_style' => 'gateway_page_style',
        'gateway_page_style_label' => 'gateway_page_style_label',
        'gateway_page_styles' => 'gateway_page_styles',
        'gateway_partner' => 'gateway_partner',
        'gateway_partner_label' => 'gateway_partner_label',
        'gateway_password' => 'gateway_password',
        'gateway_password_label' => 'gateway_password_label',
        'gateway_payflow_color' => 'gateway_payflow_color',
        'gateway_private_key_password' => 'gateway_private_key_password',
        'gateway_private_key_password_label' => 'gateway_private_key_password_label',
        'gateway_solution_type' => 'gateway_solution_type',
        'gateway_solution_type_label' => 'gateway_solution_type_label',
        'gateway_solution_types' => 'gateway_solution_types',
        'gateway_url' => 'gateway_url',
        'gateway_url_label' => 'gateway_url_label',
        'gateway_username' => 'gateway_username',
        'gateway_username_label' => 'gateway_username_label',
        'merchant_account_profile_amex' => 'merchant_account_profile_amex',
        'merchant_account_profile_diners_club' => 'merchant_account_profile_diners_club',
        'merchant_account_profile_discover' => 'merchant_account_profile_discover',
        'merchant_account_profile_jcb' => 'merchant_account_profile_jcb',
        'merchant_account_profile_mastercard' => 'merchant_account_profile_mastercard',
        'merchant_account_profile_visa' => 'merchant_account_profile_visa',
        'merchant_id' => 'merchant_id',
        'multi_currency_details' => 'multi_currency_details',
        'name' => 'name',
        'refund_supported' => 'refund_supported',
        'require_echeck_tax_id_or_drivers_license' => 'require_echeck_tax_id_or_drivers_license',
        'support_vbv_3ds' => 'support_vbv_3ds',
        'supports_amex' => 'supports_amex',
        'supports_diners_club' => 'supports_diners_club',
        'supports_discover' => 'supports_discover',
        'supports_echeck' => 'supports_echeck',
        'supports_electronic_gift_card' => 'supports_electronic_gift_card',
        'supports_jcb' => 'supports_jcb',
        'supports_mastercard' => 'supports_mastercard',
        'supports_visa' => 'supports_visa',
        'third_party' => 'third_party'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arbitrary_html' => 'setArbitraryHtml',
        'comment' => 'setComment',
        'credit_card_capable' => 'setCreditCardCapable',
        'echeck_capable' => 'setEcheckCapable',
        'echeck_supported' => 'setEcheckSupported',
        'enabled' => 'setEnabled',
        'gateway_cert_pem' => 'setGatewayCertPem',
        'gateway_cert_pem_label' => 'setGatewayCertPemLabel',
        'gateway_email' => 'setGatewayEmail',
        'gateway_email_label' => 'setGatewayEmailLabel',
        'gateway_environment' => 'setGatewayEnvironment',
        'gateway_environment_label' => 'setGatewayEnvironmentLabel',
        'gateway_environments' => 'setGatewayEnvironments',
        'gateway_header_back_color' => 'setGatewayHeaderBackColor',
        'gateway_header_border_color' => 'setGatewayHeaderBorderColor',
        'gateway_header_image_url' => 'setGatewayHeaderImageUrl',
        'gateway_key' => 'setGatewayKey',
        'gateway_key_label' => 'setGatewayKeyLabel',
        'gateway_key_pem' => 'setGatewayKeyPem',
        'gateway_key_pem_label' => 'setGatewayKeyPemLabel',
        'gateway_landing_page' => 'setGatewayLandingPage',
        'gateway_merchant_id' => 'setGatewayMerchantId',
        'gateway_merchant_id_label' => 'setGatewayMerchantIdLabel',
        'gateway_mode' => 'setGatewayMode',
        'gateway_mode_label' => 'setGatewayModeLabel',
        'gateway_modes' => 'setGatewayModes',
        'gateway_page_style' => 'setGatewayPageStyle',
        'gateway_page_style_label' => 'setGatewayPageStyleLabel',
        'gateway_page_styles' => 'setGatewayPageStyles',
        'gateway_partner' => 'setGatewayPartner',
        'gateway_partner_label' => 'setGatewayPartnerLabel',
        'gateway_password' => 'setGatewayPassword',
        'gateway_password_label' => 'setGatewayPasswordLabel',
        'gateway_payflow_color' => 'setGatewayPayflowColor',
        'gateway_private_key_password' => 'setGatewayPrivateKeyPassword',
        'gateway_private_key_password_label' => 'setGatewayPrivateKeyPasswordLabel',
        'gateway_solution_type' => 'setGatewaySolutionType',
        'gateway_solution_type_label' => 'setGatewaySolutionTypeLabel',
        'gateway_solution_types' => 'setGatewaySolutionTypes',
        'gateway_url' => 'setGatewayUrl',
        'gateway_url_label' => 'setGatewayUrlLabel',
        'gateway_username' => 'setGatewayUsername',
        'gateway_username_label' => 'setGatewayUsernameLabel',
        'merchant_account_profile_amex' => 'setMerchantAccountProfileAmex',
        'merchant_account_profile_diners_club' => 'setMerchantAccountProfileDinersClub',
        'merchant_account_profile_discover' => 'setMerchantAccountProfileDiscover',
        'merchant_account_profile_jcb' => 'setMerchantAccountProfileJcb',
        'merchant_account_profile_mastercard' => 'setMerchantAccountProfileMastercard',
        'merchant_account_profile_visa' => 'setMerchantAccountProfileVisa',
        'merchant_id' => 'setMerchantId',
        'multi_currency_details' => 'setMultiCurrencyDetails',
        'name' => 'setName',
        'refund_supported' => 'setRefundSupported',
        'require_echeck_tax_id_or_drivers_license' => 'setRequireEcheckTaxIdOrDriversLicense',
        'support_vbv_3ds' => 'setSupportVbv3ds',
        'supports_amex' => 'setSupportsAmex',
        'supports_diners_club' => 'setSupportsDinersClub',
        'supports_discover' => 'setSupportsDiscover',
        'supports_echeck' => 'setSupportsEcheck',
        'supports_electronic_gift_card' => 'setSupportsElectronicGiftCard',
        'supports_jcb' => 'setSupportsJcb',
        'supports_mastercard' => 'setSupportsMastercard',
        'supports_visa' => 'setSupportsVisa',
        'third_party' => 'setThirdParty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arbitrary_html' => 'getArbitraryHtml',
        'comment' => 'getComment',
        'credit_card_capable' => 'getCreditCardCapable',
        'echeck_capable' => 'getEcheckCapable',
        'echeck_supported' => 'getEcheckSupported',
        'enabled' => 'getEnabled',
        'gateway_cert_pem' => 'getGatewayCertPem',
        'gateway_cert_pem_label' => 'getGatewayCertPemLabel',
        'gateway_email' => 'getGatewayEmail',
        'gateway_email_label' => 'getGatewayEmailLabel',
        'gateway_environment' => 'getGatewayEnvironment',
        'gateway_environment_label' => 'getGatewayEnvironmentLabel',
        'gateway_environments' => 'getGatewayEnvironments',
        'gateway_header_back_color' => 'getGatewayHeaderBackColor',
        'gateway_header_border_color' => 'getGatewayHeaderBorderColor',
        'gateway_header_image_url' => 'getGatewayHeaderImageUrl',
        'gateway_key' => 'getGatewayKey',
        'gateway_key_label' => 'getGatewayKeyLabel',
        'gateway_key_pem' => 'getGatewayKeyPem',
        'gateway_key_pem_label' => 'getGatewayKeyPemLabel',
        'gateway_landing_page' => 'getGatewayLandingPage',
        'gateway_merchant_id' => 'getGatewayMerchantId',
        'gateway_merchant_id_label' => 'getGatewayMerchantIdLabel',
        'gateway_mode' => 'getGatewayMode',
        'gateway_mode_label' => 'getGatewayModeLabel',
        'gateway_modes' => 'getGatewayModes',
        'gateway_page_style' => 'getGatewayPageStyle',
        'gateway_page_style_label' => 'getGatewayPageStyleLabel',
        'gateway_page_styles' => 'getGatewayPageStyles',
        'gateway_partner' => 'getGatewayPartner',
        'gateway_partner_label' => 'getGatewayPartnerLabel',
        'gateway_password' => 'getGatewayPassword',
        'gateway_password_label' => 'getGatewayPasswordLabel',
        'gateway_payflow_color' => 'getGatewayPayflowColor',
        'gateway_private_key_password' => 'getGatewayPrivateKeyPassword',
        'gateway_private_key_password_label' => 'getGatewayPrivateKeyPasswordLabel',
        'gateway_solution_type' => 'getGatewaySolutionType',
        'gateway_solution_type_label' => 'getGatewaySolutionTypeLabel',
        'gateway_solution_types' => 'getGatewaySolutionTypes',
        'gateway_url' => 'getGatewayUrl',
        'gateway_url_label' => 'getGatewayUrlLabel',
        'gateway_username' => 'getGatewayUsername',
        'gateway_username_label' => 'getGatewayUsernameLabel',
        'merchant_account_profile_amex' => 'getMerchantAccountProfileAmex',
        'merchant_account_profile_diners_club' => 'getMerchantAccountProfileDinersClub',
        'merchant_account_profile_discover' => 'getMerchantAccountProfileDiscover',
        'merchant_account_profile_jcb' => 'getMerchantAccountProfileJcb',
        'merchant_account_profile_mastercard' => 'getMerchantAccountProfileMastercard',
        'merchant_account_profile_visa' => 'getMerchantAccountProfileVisa',
        'merchant_id' => 'getMerchantId',
        'multi_currency_details' => 'getMultiCurrencyDetails',
        'name' => 'getName',
        'refund_supported' => 'getRefundSupported',
        'require_echeck_tax_id_or_drivers_license' => 'getRequireEcheckTaxIdOrDriversLicense',
        'support_vbv_3ds' => 'getSupportVbv3ds',
        'supports_amex' => 'getSupportsAmex',
        'supports_diners_club' => 'getSupportsDinersClub',
        'supports_discover' => 'getSupportsDiscover',
        'supports_echeck' => 'getSupportsEcheck',
        'supports_electronic_gift_card' => 'getSupportsElectronicGiftCard',
        'supports_jcb' => 'getSupportsJcb',
        'supports_mastercard' => 'getSupportsMastercard',
        'supports_visa' => 'getSupportsVisa',
        'third_party' => 'getThirdParty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arbitrary_html'] = isset($data['arbitrary_html']) ? $data['arbitrary_html'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['credit_card_capable'] = isset($data['credit_card_capable']) ? $data['credit_card_capable'] : null;
        $this->container['echeck_capable'] = isset($data['echeck_capable']) ? $data['echeck_capable'] : null;
        $this->container['echeck_supported'] = isset($data['echeck_supported']) ? $data['echeck_supported'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['gateway_cert_pem'] = isset($data['gateway_cert_pem']) ? $data['gateway_cert_pem'] : null;
        $this->container['gateway_cert_pem_label'] = isset($data['gateway_cert_pem_label']) ? $data['gateway_cert_pem_label'] : null;
        $this->container['gateway_email'] = isset($data['gateway_email']) ? $data['gateway_email'] : null;
        $this->container['gateway_email_label'] = isset($data['gateway_email_label']) ? $data['gateway_email_label'] : null;
        $this->container['gateway_environment'] = isset($data['gateway_environment']) ? $data['gateway_environment'] : null;
        $this->container['gateway_environment_label'] = isset($data['gateway_environment_label']) ? $data['gateway_environment_label'] : null;
        $this->container['gateway_environments'] = isset($data['gateway_environments']) ? $data['gateway_environments'] : null;
        $this->container['gateway_header_back_color'] = isset($data['gateway_header_back_color']) ? $data['gateway_header_back_color'] : null;
        $this->container['gateway_header_border_color'] = isset($data['gateway_header_border_color']) ? $data['gateway_header_border_color'] : null;
        $this->container['gateway_header_image_url'] = isset($data['gateway_header_image_url']) ? $data['gateway_header_image_url'] : null;
        $this->container['gateway_key'] = isset($data['gateway_key']) ? $data['gateway_key'] : null;
        $this->container['gateway_key_label'] = isset($data['gateway_key_label']) ? $data['gateway_key_label'] : null;
        $this->container['gateway_key_pem'] = isset($data['gateway_key_pem']) ? $data['gateway_key_pem'] : null;
        $this->container['gateway_key_pem_label'] = isset($data['gateway_key_pem_label']) ? $data['gateway_key_pem_label'] : null;
        $this->container['gateway_landing_page'] = isset($data['gateway_landing_page']) ? $data['gateway_landing_page'] : null;
        $this->container['gateway_merchant_id'] = isset($data['gateway_merchant_id']) ? $data['gateway_merchant_id'] : null;
        $this->container['gateway_merchant_id_label'] = isset($data['gateway_merchant_id_label']) ? $data['gateway_merchant_id_label'] : null;
        $this->container['gateway_mode'] = isset($data['gateway_mode']) ? $data['gateway_mode'] : null;
        $this->container['gateway_mode_label'] = isset($data['gateway_mode_label']) ? $data['gateway_mode_label'] : null;
        $this->container['gateway_modes'] = isset($data['gateway_modes']) ? $data['gateway_modes'] : null;
        $this->container['gateway_page_style'] = isset($data['gateway_page_style']) ? $data['gateway_page_style'] : null;
        $this->container['gateway_page_style_label'] = isset($data['gateway_page_style_label']) ? $data['gateway_page_style_label'] : null;
        $this->container['gateway_page_styles'] = isset($data['gateway_page_styles']) ? $data['gateway_page_styles'] : null;
        $this->container['gateway_partner'] = isset($data['gateway_partner']) ? $data['gateway_partner'] : null;
        $this->container['gateway_partner_label'] = isset($data['gateway_partner_label']) ? $data['gateway_partner_label'] : null;
        $this->container['gateway_password'] = isset($data['gateway_password']) ? $data['gateway_password'] : null;
        $this->container['gateway_password_label'] = isset($data['gateway_password_label']) ? $data['gateway_password_label'] : null;
        $this->container['gateway_payflow_color'] = isset($data['gateway_payflow_color']) ? $data['gateway_payflow_color'] : null;
        $this->container['gateway_private_key_password'] = isset($data['gateway_private_key_password']) ? $data['gateway_private_key_password'] : null;
        $this->container['gateway_private_key_password_label'] = isset($data['gateway_private_key_password_label']) ? $data['gateway_private_key_password_label'] : null;
        $this->container['gateway_solution_type'] = isset($data['gateway_solution_type']) ? $data['gateway_solution_type'] : null;
        $this->container['gateway_solution_type_label'] = isset($data['gateway_solution_type_label']) ? $data['gateway_solution_type_label'] : null;
        $this->container['gateway_solution_types'] = isset($data['gateway_solution_types']) ? $data['gateway_solution_types'] : null;
        $this->container['gateway_url'] = isset($data['gateway_url']) ? $data['gateway_url'] : null;
        $this->container['gateway_url_label'] = isset($data['gateway_url_label']) ? $data['gateway_url_label'] : null;
        $this->container['gateway_username'] = isset($data['gateway_username']) ? $data['gateway_username'] : null;
        $this->container['gateway_username_label'] = isset($data['gateway_username_label']) ? $data['gateway_username_label'] : null;
        $this->container['merchant_account_profile_amex'] = isset($data['merchant_account_profile_amex']) ? $data['merchant_account_profile_amex'] : null;
        $this->container['merchant_account_profile_diners_club'] = isset($data['merchant_account_profile_diners_club']) ? $data['merchant_account_profile_diners_club'] : null;
        $this->container['merchant_account_profile_discover'] = isset($data['merchant_account_profile_discover']) ? $data['merchant_account_profile_discover'] : null;
        $this->container['merchant_account_profile_jcb'] = isset($data['merchant_account_profile_jcb']) ? $data['merchant_account_profile_jcb'] : null;
        $this->container['merchant_account_profile_mastercard'] = isset($data['merchant_account_profile_mastercard']) ? $data['merchant_account_profile_mastercard'] : null;
        $this->container['merchant_account_profile_visa'] = isset($data['merchant_account_profile_visa']) ? $data['merchant_account_profile_visa'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['multi_currency_details'] = isset($data['multi_currency_details']) ? $data['multi_currency_details'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['refund_supported'] = isset($data['refund_supported']) ? $data['refund_supported'] : null;
        $this->container['require_echeck_tax_id_or_drivers_license'] = isset($data['require_echeck_tax_id_or_drivers_license']) ? $data['require_echeck_tax_id_or_drivers_license'] : null;
        $this->container['support_vbv_3ds'] = isset($data['support_vbv_3ds']) ? $data['support_vbv_3ds'] : null;
        $this->container['supports_amex'] = isset($data['supports_amex']) ? $data['supports_amex'] : null;
        $this->container['supports_diners_club'] = isset($data['supports_diners_club']) ? $data['supports_diners_club'] : null;
        $this->container['supports_discover'] = isset($data['supports_discover']) ? $data['supports_discover'] : null;
        $this->container['supports_echeck'] = isset($data['supports_echeck']) ? $data['supports_echeck'] : null;
        $this->container['supports_electronic_gift_card'] = isset($data['supports_electronic_gift_card']) ? $data['supports_electronic_gift_card'] : null;
        $this->container['supports_jcb'] = isset($data['supports_jcb']) ? $data['supports_jcb'] : null;
        $this->container['supports_mastercard'] = isset($data['supports_mastercard']) ? $data['supports_mastercard'] : null;
        $this->container['supports_visa'] = isset($data['supports_visa']) ? $data['supports_visa'] : null;
        $this->container['third_party'] = isset($data['third_party']) ? $data['third_party'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arbitrary_html
     *
     * @return string
     */
    public function getArbitraryHtml()
    {
        return $this->container['arbitrary_html'];
    }

    /**
     * Sets arbitrary_html
     *
     * @param string $arbitrary_html Additional html to display for this transaction gateway.  This html will include instructions and connection links
     *
     * @return $this
     */
    public function setArbitraryHtml($arbitrary_html)
    {
        $this->container['arbitrary_html'] = $arbitrary_html;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Additional comments
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets credit_card_capable
     *
     * @return bool
     */
    public function getCreditCardCapable()
    {
        return $this->container['credit_card_capable'];
    }

    /**
     * Sets credit_card_capable
     *
     * @param bool $credit_card_capable True if this gateway supports credit cards
     *
     * @return $this
     */
    public function setCreditCardCapable($credit_card_capable)
    {
        $this->container['credit_card_capable'] = $credit_card_capable;

        return $this;
    }

    /**
     * Gets echeck_capable
     *
     * @return bool
     */
    public function getEcheckCapable()
    {
        return $this->container['echeck_capable'];
    }

    /**
     * Sets echeck_capable
     *
     * @param bool $echeck_capable True if this gateway supports eChecks
     *
     * @return $this
     */
    public function setEcheckCapable($echeck_capable)
    {
        $this->container['echeck_capable'] = $echeck_capable;

        return $this;
    }

    /**
     * Gets echeck_supported
     *
     * @return string
     */
    public function getEcheckSupported()
    {
        return $this->container['echeck_supported'];
    }

    /**
     * Sets echeck_supported
     *
     * @param string $echeck_supported True if this gateway supports eChecks
     *
     * @return $this
     */
    public function setEcheckSupported($echeck_supported)
    {
        $this->container['echeck_supported'] = $echeck_supported;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled True if this transaction gateway is the currently active gateway.
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets gateway_cert_pem
     *
     * @return string
     */
    public function getGatewayCertPem()
    {
        return $this->container['gateway_cert_pem'];
    }

    /**
     * Sets gateway_cert_pem
     *
     * @param string $gateway_cert_pem Cryptographic public certificate allowing UltraCart to communicate securely with this gateway.
     *
     * @return $this
     */
    public function setGatewayCertPem($gateway_cert_pem)
    {
        $this->container['gateway_cert_pem'] = $gateway_cert_pem;

        return $this;
    }

    /**
     * Gets gateway_cert_pem_label
     *
     * @return string
     */
    public function getGatewayCertPemLabel()
    {
        return $this->container['gateway_cert_pem_label'];
    }

    /**
     * Sets gateway_cert_pem_label
     *
     * @param string $gateway_cert_pem_label The label for the gateway certificate pem.   The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayCertPemLabel($gateway_cert_pem_label)
    {
        $this->container['gateway_cert_pem_label'] = $gateway_cert_pem_label;

        return $this;
    }

    /**
     * Gets gateway_email
     *
     * @return string
     */
    public function getGatewayEmail()
    {
        return $this->container['gateway_email'];
    }

    /**
     * Sets gateway_email
     *
     * @param string $gateway_email Gateway Email
     *
     * @return $this
     */
    public function setGatewayEmail($gateway_email)
    {
        $this->container['gateway_email'] = $gateway_email;

        return $this;
    }

    /**
     * Gets gateway_email_label
     *
     * @return string
     */
    public function getGatewayEmailLabel()
    {
        return $this->container['gateway_email_label'];
    }

    /**
     * Sets gateway_email_label
     *
     * @param string $gateway_email_label The label for the gateway email.   The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayEmailLabel($gateway_email_label)
    {
        $this->container['gateway_email_label'] = $gateway_email_label;

        return $this;
    }

    /**
     * Gets gateway_environment
     *
     * @return string
     */
    public function getGatewayEnvironment()
    {
        return $this->container['gateway_environment'];
    }

    /**
     * Sets gateway_environment
     *
     * @param string $gateway_environment Gateway Environment to indicate sandbox versus production environments
     *
     * @return $this
     */
    public function setGatewayEnvironment($gateway_environment)
    {
        $this->container['gateway_environment'] = $gateway_environment;

        return $this;
    }

    /**
     * Gets gateway_environment_label
     *
     * @return string
     */
    public function getGatewayEnvironmentLabel()
    {
        return $this->container['gateway_environment_label'];
    }

    /**
     * Sets gateway_environment_label
     *
     * @param string $gateway_environment_label The label for the gateway environment.  The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayEnvironmentLabel($gateway_environment_label)
    {
        $this->container['gateway_environment_label'] = $gateway_environment_label;

        return $this;
    }

    /**
     * Gets gateway_environments
     *
     * @return string[]
     */
    public function getGatewayEnvironments()
    {
        return $this->container['gateway_environments'];
    }

    /**
     * Sets gateway_environments
     *
     * @param string[] $gateway_environments Used to populate drop down lists for the gateway environment.  Varies by gateway.
     *
     * @return $this
     */
    public function setGatewayEnvironments($gateway_environments)
    {
        $this->container['gateway_environments'] = $gateway_environments;

        return $this;
    }

    /**
     * Gets gateway_header_back_color
     *
     * @return string
     */
    public function getGatewayHeaderBackColor()
    {
        return $this->container['gateway_header_back_color'];
    }

    /**
     * Sets gateway_header_back_color
     *
     * @param string $gateway_header_back_color Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
     *
     * @return $this
     */
    public function setGatewayHeaderBackColor($gateway_header_back_color)
    {
        $this->container['gateway_header_back_color'] = $gateway_header_back_color;

        return $this;
    }

    /**
     * Gets gateway_header_border_color
     *
     * @return string
     */
    public function getGatewayHeaderBorderColor()
    {
        return $this->container['gateway_header_border_color'];
    }

    /**
     * Sets gateway_header_border_color
     *
     * @param string $gateway_header_border_color Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
     *
     * @return $this
     */
    public function setGatewayHeaderBorderColor($gateway_header_border_color)
    {
        $this->container['gateway_header_border_color'] = $gateway_header_border_color;

        return $this;
    }

    /**
     * Gets gateway_header_image_url
     *
     * @return string
     */
    public function getGatewayHeaderImageUrl()
    {
        return $this->container['gateway_header_image_url'];
    }

    /**
     * Sets gateway_header_image_url
     *
     * @param string $gateway_header_image_url Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
     *
     * @return $this
     */
    public function setGatewayHeaderImageUrl($gateway_header_image_url)
    {
        $this->container['gateway_header_image_url'] = $gateway_header_image_url;

        return $this;
    }

    /**
     * Gets gateway_key
     *
     * @return string
     */
    public function getGatewayKey()
    {
        return $this->container['gateway_key'];
    }

    /**
     * Sets gateway_key
     *
     * @param string $gateway_key Gateway Key
     *
     * @return $this
     */
    public function setGatewayKey($gateway_key)
    {
        $this->container['gateway_key'] = $gateway_key;

        return $this;
    }

    /**
     * Gets gateway_key_label
     *
     * @return string
     */
    public function getGatewayKeyLabel()
    {
        return $this->container['gateway_key_label'];
    }

    /**
     * Sets gateway_key_label
     *
     * @param string $gateway_key_label The label for the gateway key.   The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayKeyLabel($gateway_key_label)
    {
        $this->container['gateway_key_label'] = $gateway_key_label;

        return $this;
    }

    /**
     * Gets gateway_key_pem
     *
     * @return string
     */
    public function getGatewayKeyPem()
    {
        return $this->container['gateway_key_pem'];
    }

    /**
     * Sets gateway_key_pem
     *
     * @param string $gateway_key_pem Cryptographic private key allowing UltraCart to communicate securely with this gateway.
     *
     * @return $this
     */
    public function setGatewayKeyPem($gateway_key_pem)
    {
        $this->container['gateway_key_pem'] = $gateway_key_pem;

        return $this;
    }

    /**
     * Gets gateway_key_pem_label
     *
     * @return string
     */
    public function getGatewayKeyPemLabel()
    {
        return $this->container['gateway_key_pem_label'];
    }

    /**
     * Sets gateway_key_pem_label
     *
     * @param string $gateway_key_pem_label The label for the gateway key pem.   The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayKeyPemLabel($gateway_key_pem_label)
    {
        $this->container['gateway_key_pem_label'] = $gateway_key_pem_label;

        return $this;
    }

    /**
     * Gets gateway_landing_page
     *
     * @return string
     */
    public function getGatewayLandingPage()
    {
        return $this->container['gateway_landing_page'];
    }

    /**
     * Sets gateway_landing_page
     *
     * @param string $gateway_landing_page Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
     *
     * @return $this
     */
    public function setGatewayLandingPage($gateway_landing_page)
    {
        $this->container['gateway_landing_page'] = $gateway_landing_page;

        return $this;
    }

    /**
     * Gets gateway_merchant_id
     *
     * @return string
     */
    public function getGatewayMerchantId()
    {
        return $this->container['gateway_merchant_id'];
    }

    /**
     * Sets gateway_merchant_id
     *
     * @param string $gateway_merchant_id Gateway Merchant ID
     *
     * @return $this
     */
    public function setGatewayMerchantId($gateway_merchant_id)
    {
        $this->container['gateway_merchant_id'] = $gateway_merchant_id;

        return $this;
    }

    /**
     * Gets gateway_merchant_id_label
     *
     * @return string
     */
    public function getGatewayMerchantIdLabel()
    {
        return $this->container['gateway_merchant_id_label'];
    }

    /**
     * Sets gateway_merchant_id_label
     *
     * @param string $gateway_merchant_id_label The label for the gateway merchant id.  The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayMerchantIdLabel($gateway_merchant_id_label)
    {
        $this->container['gateway_merchant_id_label'] = $gateway_merchant_id_label;

        return $this;
    }

    /**
     * Gets gateway_mode
     *
     * @return string
     */
    public function getGatewayMode()
    {
        return $this->container['gateway_mode'];
    }

    /**
     * Sets gateway_mode
     *
     * @param string $gateway_mode Gateway Mode
     *
     * @return $this
     */
    public function setGatewayMode($gateway_mode)
    {
        $this->container['gateway_mode'] = $gateway_mode;

        return $this;
    }

    /**
     * Gets gateway_mode_label
     *
     * @return string
     */
    public function getGatewayModeLabel()
    {
        return $this->container['gateway_mode_label'];
    }

    /**
     * Sets gateway_mode_label
     *
     * @param string $gateway_mode_label The label for the gateway mode.   The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayModeLabel($gateway_mode_label)
    {
        $this->container['gateway_mode_label'] = $gateway_mode_label;

        return $this;
    }

    /**
     * Gets gateway_modes
     *
     * @return string[]
     */
    public function getGatewayModes()
    {
        return $this->container['gateway_modes'];
    }

    /**
     * Sets gateway_modes
     *
     * @param string[] $gateway_modes Used to populate drop down lists for gateway modes
     *
     * @return $this
     */
    public function setGatewayModes($gateway_modes)
    {
        $this->container['gateway_modes'] = $gateway_modes;

        return $this;
    }

    /**
     * Gets gateway_page_style
     *
     * @return string
     */
    public function getGatewayPageStyle()
    {
        return $this->container['gateway_page_style'];
    }

    /**
     * Sets gateway_page_style
     *
     * @param string $gateway_page_style Gateway Page Style
     *
     * @return $this
     */
    public function setGatewayPageStyle($gateway_page_style)
    {
        $this->container['gateway_page_style'] = $gateway_page_style;

        return $this;
    }

    /**
     * Gets gateway_page_style_label
     *
     * @return string
     */
    public function getGatewayPageStyleLabel()
    {
        return $this->container['gateway_page_style_label'];
    }

    /**
     * Sets gateway_page_style_label
     *
     * @param string $gateway_page_style_label Gateway page style label
     *
     * @return $this
     */
    public function setGatewayPageStyleLabel($gateway_page_style_label)
    {
        $this->container['gateway_page_style_label'] = $gateway_page_style_label;

        return $this;
    }

    /**
     * Gets gateway_page_styles
     *
     * @return string[]
     */
    public function getGatewayPageStyles()
    {
        return $this->container['gateway_page_styles'];
    }

    /**
     * Sets gateway_page_styles
     *
     * @param string[] $gateway_page_styles Used to populate drop down lists for gateway page style
     *
     * @return $this
     */
    public function setGatewayPageStyles($gateway_page_styles)
    {
        $this->container['gateway_page_styles'] = $gateway_page_styles;

        return $this;
    }

    /**
     * Gets gateway_partner
     *
     * @return string
     */
    public function getGatewayPartner()
    {
        return $this->container['gateway_partner'];
    }

    /**
     * Sets gateway_partner
     *
     * @param string $gateway_partner Gateway Partner
     *
     * @return $this
     */
    public function setGatewayPartner($gateway_partner)
    {
        $this->container['gateway_partner'] = $gateway_partner;

        return $this;
    }

    /**
     * Gets gateway_partner_label
     *
     * @return string
     */
    public function getGatewayPartnerLabel()
    {
        return $this->container['gateway_partner_label'];
    }

    /**
     * Sets gateway_partner_label
     *
     * @param string $gateway_partner_label The label for the gateway partner.   The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayPartnerLabel($gateway_partner_label)
    {
        $this->container['gateway_partner_label'] = $gateway_partner_label;

        return $this;
    }

    /**
     * Gets gateway_password
     *
     * @return string
     */
    public function getGatewayPassword()
    {
        return $this->container['gateway_password'];
    }

    /**
     * Sets gateway_password
     *
     * @param string $gateway_password Gateway Password
     *
     * @return $this
     */
    public function setGatewayPassword($gateway_password)
    {
        $this->container['gateway_password'] = $gateway_password;

        return $this;
    }

    /**
     * Gets gateway_password_label
     *
     * @return string
     */
    public function getGatewayPasswordLabel()
    {
        return $this->container['gateway_password_label'];
    }

    /**
     * Sets gateway_password_label
     *
     * @param string $gateway_password_label The label for the gateway password.   The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayPasswordLabel($gateway_password_label)
    {
        $this->container['gateway_password_label'] = $gateway_password_label;

        return $this;
    }

    /**
     * Gets gateway_payflow_color
     *
     * @return string
     */
    public function getGatewayPayflowColor()
    {
        return $this->container['gateway_payflow_color'];
    }

    /**
     * Sets gateway_payflow_color
     *
     * @param string $gateway_payflow_color Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
     *
     * @return $this
     */
    public function setGatewayPayflowColor($gateway_payflow_color)
    {
        $this->container['gateway_payflow_color'] = $gateway_payflow_color;

        return $this;
    }

    /**
     * Gets gateway_private_key_password
     *
     * @return string
     */
    public function getGatewayPrivateKeyPassword()
    {
        return $this->container['gateway_private_key_password'];
    }

    /**
     * Sets gateway_private_key_password
     *
     * @param string $gateway_private_key_password Gateway private key password
     *
     * @return $this
     */
    public function setGatewayPrivateKeyPassword($gateway_private_key_password)
    {
        $this->container['gateway_private_key_password'] = $gateway_private_key_password;

        return $this;
    }

    /**
     * Gets gateway_private_key_password_label
     *
     * @return string
     */
    public function getGatewayPrivateKeyPasswordLabel()
    {
        return $this->container['gateway_private_key_password_label'];
    }

    /**
     * Sets gateway_private_key_password_label
     *
     * @param string $gateway_private_key_password_label The label for the gateway private key password.  The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayPrivateKeyPasswordLabel($gateway_private_key_password_label)
    {
        $this->container['gateway_private_key_password_label'] = $gateway_private_key_password_label;

        return $this;
    }

    /**
     * Gets gateway_solution_type
     *
     * @return string
     */
    public function getGatewaySolutionType()
    {
        return $this->container['gateway_solution_type'];
    }

    /**
     * Sets gateway_solution_type
     *
     * @param string $gateway_solution_type Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS
     *
     * @return $this
     */
    public function setGatewaySolutionType($gateway_solution_type)
    {
        $this->container['gateway_solution_type'] = $gateway_solution_type;

        return $this;
    }

    /**
     * Gets gateway_solution_type_label
     *
     * @return string
     */
    public function getGatewaySolutionTypeLabel()
    {
        return $this->container['gateway_solution_type_label'];
    }

    /**
     * Sets gateway_solution_type_label
     *
     * @param string $gateway_solution_type_label The label for the gateway solution type.  The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewaySolutionTypeLabel($gateway_solution_type_label)
    {
        $this->container['gateway_solution_type_label'] = $gateway_solution_type_label;

        return $this;
    }

    /**
     * Gets gateway_solution_types
     *
     * @return string[]
     */
    public function getGatewaySolutionTypes()
    {
        return $this->container['gateway_solution_types'];
    }

    /**
     * Sets gateway_solution_types
     *
     * @param string[] $gateway_solution_types Used to populate drop down lists for gateway solution types
     *
     * @return $this
     */
    public function setGatewaySolutionTypes($gateway_solution_types)
    {
        $this->container['gateway_solution_types'] = $gateway_solution_types;

        return $this;
    }

    /**
     * Gets gateway_url
     *
     * @return string
     */
    public function getGatewayUrl()
    {
        return $this->container['gateway_url'];
    }

    /**
     * Sets gateway_url
     *
     * @param string $gateway_url Gateway URL
     *
     * @return $this
     */
    public function setGatewayUrl($gateway_url)
    {
        $this->container['gateway_url'] = $gateway_url;

        return $this;
    }

    /**
     * Gets gateway_url_label
     *
     * @return string
     */
    public function getGatewayUrlLabel()
    {
        return $this->container['gateway_url_label'];
    }

    /**
     * Sets gateway_url_label
     *
     * @param string $gateway_url_label The label for the gateway url.   The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayUrlLabel($gateway_url_label)
    {
        $this->container['gateway_url_label'] = $gateway_url_label;

        return $this;
    }

    /**
     * Gets gateway_username
     *
     * @return string
     */
    public function getGatewayUsername()
    {
        return $this->container['gateway_username'];
    }

    /**
     * Sets gateway_username
     *
     * @param string $gateway_username Gateway Username
     *
     * @return $this
     */
    public function setGatewayUsername($gateway_username)
    {
        $this->container['gateway_username'] = $gateway_username;

        return $this;
    }

    /**
     * Gets gateway_username_label
     *
     * @return string
     */
    public function getGatewayUsernameLabel()
    {
        return $this->container['gateway_username_label'];
    }

    /**
     * Sets gateway_username_label
     *
     * @param string $gateway_username_label The label for the gateway username.  The actual value stored may vary by gateway, so the label will vary too.
     *
     * @return $this
     */
    public function setGatewayUsernameLabel($gateway_username_label)
    {
        $this->container['gateway_username_label'] = $gateway_username_label;

        return $this;
    }

    /**
     * Gets merchant_account_profile_amex
     *
     * @return string
     */
    public function getMerchantAccountProfileAmex()
    {
        return $this->container['merchant_account_profile_amex'];
    }

    /**
     * Sets merchant_account_profile_amex
     *
     * @param string $merchant_account_profile_amex If a merchant has multiple card processing accounts, this is the one to use for American Express cards.
     *
     * @return $this
     */
    public function setMerchantAccountProfileAmex($merchant_account_profile_amex)
    {
        $this->container['merchant_account_profile_amex'] = $merchant_account_profile_amex;

        return $this;
    }

    /**
     * Gets merchant_account_profile_diners_club
     *
     * @return string
     */
    public function getMerchantAccountProfileDinersClub()
    {
        return $this->container['merchant_account_profile_diners_club'];
    }

    /**
     * Sets merchant_account_profile_diners_club
     *
     * @param string $merchant_account_profile_diners_club If a merchant has multiple card processing accounts, this is the one to use for Diners Club cards.
     *
     * @return $this
     */
    public function setMerchantAccountProfileDinersClub($merchant_account_profile_diners_club)
    {
        $this->container['merchant_account_profile_diners_club'] = $merchant_account_profile_diners_club;

        return $this;
    }

    /**
     * Gets merchant_account_profile_discover
     *
     * @return string
     */
    public function getMerchantAccountProfileDiscover()
    {
        return $this->container['merchant_account_profile_discover'];
    }

    /**
     * Sets merchant_account_profile_discover
     *
     * @param string $merchant_account_profile_discover If a merchant has multiple card processing accounts, this is the one to use for Discover cards.
     *
     * @return $this
     */
    public function setMerchantAccountProfileDiscover($merchant_account_profile_discover)
    {
        $this->container['merchant_account_profile_discover'] = $merchant_account_profile_discover;

        return $this;
    }

    /**
     * Gets merchant_account_profile_jcb
     *
     * @return string
     */
    public function getMerchantAccountProfileJcb()
    {
        return $this->container['merchant_account_profile_jcb'];
    }

    /**
     * Sets merchant_account_profile_jcb
     *
     * @param string $merchant_account_profile_jcb If a merchant has multiple card processing accounts, this is the one to use for JCB cards.
     *
     * @return $this
     */
    public function setMerchantAccountProfileJcb($merchant_account_profile_jcb)
    {
        $this->container['merchant_account_profile_jcb'] = $merchant_account_profile_jcb;

        return $this;
    }

    /**
     * Gets merchant_account_profile_mastercard
     *
     * @return string
     */
    public function getMerchantAccountProfileMastercard()
    {
        return $this->container['merchant_account_profile_mastercard'];
    }

    /**
     * Sets merchant_account_profile_mastercard
     *
     * @param string $merchant_account_profile_mastercard If a merchant has multiple card processing accounts, this is the one to use for MasterCard cards.
     *
     * @return $this
     */
    public function setMerchantAccountProfileMastercard($merchant_account_profile_mastercard)
    {
        $this->container['merchant_account_profile_mastercard'] = $merchant_account_profile_mastercard;

        return $this;
    }

    /**
     * Gets merchant_account_profile_visa
     *
     * @return string
     */
    public function getMerchantAccountProfileVisa()
    {
        return $this->container['merchant_account_profile_visa'];
    }

    /**
     * Sets merchant_account_profile_visa
     *
     * @param string $merchant_account_profile_visa If a merchant has multiple card processing accounts, this is the one to use for VISA cards.
     *
     * @return $this
     */
    public function setMerchantAccountProfileVisa($merchant_account_profile_visa)
    {
        $this->container['merchant_account_profile_visa'] = $merchant_account_profile_visa;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id UltraCart Merchant ID
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets multi_currency_details
     *
     * @return bool
     */
    public function getMultiCurrencyDetails()
    {
        return $this->container['multi_currency_details'];
    }

    /**
     * Sets multi_currency_details
     *
     * @param bool $multi_currency_details True if this gateway provides details for multiple currency transactions
     *
     * @return $this
     */
    public function setMultiCurrencyDetails($multi_currency_details)
    {
        $this->container['multi_currency_details'] = $multi_currency_details;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of this transaction gateway
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets refund_supported
     *
     * @return bool
     */
    public function getRefundSupported()
    {
        return $this->container['refund_supported'];
    }

    /**
     * Sets refund_supported
     *
     * @param bool $refund_supported True if this gateway supports refunds
     *
     * @return $this
     */
    public function setRefundSupported($refund_supported)
    {
        $this->container['refund_supported'] = $refund_supported;

        return $this;
    }

    /**
     * Gets require_echeck_tax_id_or_drivers_license
     *
     * @return bool
     */
    public function getRequireEcheckTaxIdOrDriversLicense()
    {
        return $this->container['require_echeck_tax_id_or_drivers_license'];
    }

    /**
     * Sets require_echeck_tax_id_or_drivers_license
     *
     * @param bool $require_echeck_tax_id_or_drivers_license If true, e-Check transaction will require either a Tax ID or a Driver License
     *
     * @return $this
     */
    public function setRequireEcheckTaxIdOrDriversLicense($require_echeck_tax_id_or_drivers_license)
    {
        $this->container['require_echeck_tax_id_or_drivers_license'] = $require_echeck_tax_id_or_drivers_license;

        return $this;
    }

    /**
     * Gets support_vbv_3ds
     *
     * @return bool
     */
    public function getSupportVbv3ds()
    {
        return $this->container['support_vbv_3ds'];
    }

    /**
     * Sets support_vbv_3ds
     *
     * @param bool $support_vbv_3ds True if this gateway supported Verified-by-VISA 3D Secure
     *
     * @return $this
     */
    public function setSupportVbv3ds($support_vbv_3ds)
    {
        $this->container['support_vbv_3ds'] = $support_vbv_3ds;

        return $this;
    }

    /**
     * Gets supports_amex
     *
     * @return bool
     */
    public function getSupportsAmex()
    {
        return $this->container['supports_amex'];
    }

    /**
     * Sets supports_amex
     *
     * @param bool $supports_amex If true, this gateway will attempt to process American Express transactions.  If false, the customer will not be allowed to use this type of Credit Card.
     *
     * @return $this
     */
    public function setSupportsAmex($supports_amex)
    {
        $this->container['supports_amex'] = $supports_amex;

        return $this;
    }

    /**
     * Gets supports_diners_club
     *
     * @return bool
     */
    public function getSupportsDinersClub()
    {
        return $this->container['supports_diners_club'];
    }

    /**
     * Sets supports_diners_club
     *
     * @param bool $supports_diners_club If true, this gateway will attempt to process Diners Club transactions.  If false, the customer will not be allowed to use this type of Credit Card.
     *
     * @return $this
     */
    public function setSupportsDinersClub($supports_diners_club)
    {
        $this->container['supports_diners_club'] = $supports_diners_club;

        return $this;
    }

    /**
     * Gets supports_discover
     *
     * @return bool
     */
    public function getSupportsDiscover()
    {
        return $this->container['supports_discover'];
    }

    /**
     * Sets supports_discover
     *
     * @param bool $supports_discover If true, this gateway will attempt to process Discover transactions.  If false, the customer will not be allowed to use this type of Credit Card.
     *
     * @return $this
     */
    public function setSupportsDiscover($supports_discover)
    {
        $this->container['supports_discover'] = $supports_discover;

        return $this;
    }

    /**
     * Gets supports_echeck
     *
     * @return bool
     */
    public function getSupportsEcheck()
    {
        return $this->container['supports_echeck'];
    }

    /**
     * Sets supports_echeck
     *
     * @param bool $supports_echeck If true, this gateway will attempt to process e-Check transactions.  If false, the customer will not be allowed to use e-Checks.
     *
     * @return $this
     */
    public function setSupportsEcheck($supports_echeck)
    {
        $this->container['supports_echeck'] = $supports_echeck;

        return $this;
    }

    /**
     * Gets supports_electronic_gift_card
     *
     * @return bool
     */
    public function getSupportsElectronicGiftCard()
    {
        return $this->container['supports_electronic_gift_card'];
    }

    /**
     * Sets supports_electronic_gift_card
     *
     * @param bool $supports_electronic_gift_card if true, this gateway will attempt to process electronic gift cards.
     *
     * @return $this
     */
    public function setSupportsElectronicGiftCard($supports_electronic_gift_card)
    {
        $this->container['supports_electronic_gift_card'] = $supports_electronic_gift_card;

        return $this;
    }

    /**
     * Gets supports_jcb
     *
     * @return bool
     */
    public function getSupportsJcb()
    {
        return $this->container['supports_jcb'];
    }

    /**
     * Sets supports_jcb
     *
     * @param bool $supports_jcb If true, this gateway will attempt to process JCB transactions.  If false, the customer will not be allowed to use this type of Credit Card.
     *
     * @return $this
     */
    public function setSupportsJcb($supports_jcb)
    {
        $this->container['supports_jcb'] = $supports_jcb;

        return $this;
    }

    /**
     * Gets supports_mastercard
     *
     * @return bool
     */
    public function getSupportsMastercard()
    {
        return $this->container['supports_mastercard'];
    }

    /**
     * Sets supports_mastercard
     *
     * @param bool $supports_mastercard If true, this gateway will attempt to process MasterCard transactions.  If false, the customer will not be allowed to use this type of Credit Card.
     *
     * @return $this
     */
    public function setSupportsMastercard($supports_mastercard)
    {
        $this->container['supports_mastercard'] = $supports_mastercard;

        return $this;
    }

    /**
     * Gets supports_visa
     *
     * @return bool
     */
    public function getSupportsVisa()
    {
        return $this->container['supports_visa'];
    }

    /**
     * Sets supports_visa
     *
     * @param bool $supports_visa If true, this gateway will attempt to process VISA transactions.  If false, the customer will not be allowed to use this type of Credit Card.
     *
     * @return $this
     */
    public function setSupportsVisa($supports_visa)
    {
        $this->container['supports_visa'] = $supports_visa;

        return $this;
    }

    /**
     * Gets third_party
     *
     * @return bool
     */
    public function getThirdParty()
    {
        return $this->container['third_party'];
    }

    /**
     * Sets third_party
     *
     * @param bool $third_party True if this gateway supports third parties
     *
     * @return $this
     */
    public function setThirdParty($third_party)
    {
        $this->container['third_party'] = $third_party;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


