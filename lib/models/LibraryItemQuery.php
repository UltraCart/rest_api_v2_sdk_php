<?php
/**
 * LibraryItemQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * LibraryItemQuery Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LibraryItemQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LibraryItemQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category' => 'string',
        'content_type' => 'string',
        'description' => 'string',
        'industry' => 'string',
        'price_high' => 'float',
        'price_low' => 'float',
        'published_dts_begin' => 'string',
        'published_dts_end' => 'string',
        'source_of_published' => 'bool',
        'style' => 'string',
        'title' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'category' => null,
        'content_type' => null,
        'description' => null,
        'industry' => null,
        'price_high' => null,
        'price_low' => null,
        'published_dts_begin' => null,
        'published_dts_end' => null,
        'source_of_published' => null,
        'style' => null,
        'title' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'content_type' => 'content_type',
        'description' => 'description',
        'industry' => 'industry',
        'price_high' => 'price_high',
        'price_low' => 'price_low',
        'published_dts_begin' => 'published_dts_begin',
        'published_dts_end' => 'published_dts_end',
        'source_of_published' => 'source_of_published',
        'style' => 'style',
        'title' => 'title',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'content_type' => 'setContentType',
        'description' => 'setDescription',
        'industry' => 'setIndustry',
        'price_high' => 'setPriceHigh',
        'price_low' => 'setPriceLow',
        'published_dts_begin' => 'setPublishedDtsBegin',
        'published_dts_end' => 'setPublishedDtsEnd',
        'source_of_published' => 'setSourceOfPublished',
        'style' => 'setStyle',
        'title' => 'setTitle',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'content_type' => 'getContentType',
        'description' => 'getDescription',
        'industry' => 'getIndustry',
        'price_high' => 'getPriceHigh',
        'price_low' => 'getPriceLow',
        'published_dts_begin' => 'getPublishedDtsBegin',
        'published_dts_end' => 'getPublishedDtsEnd',
        'source_of_published' => 'getSourceOfPublished',
        'style' => 'getStyle',
        'title' => 'getTitle',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['price_high'] = isset($data['price_high']) ? $data['price_high'] : null;
        $this->container['price_low'] = isset($data['price_low']) ? $data['price_low'] : null;
        $this->container['published_dts_begin'] = isset($data['published_dts_begin']) ? $data['published_dts_begin'] : null;
        $this->container['published_dts_end'] = isset($data['published_dts_end']) ? $data['published_dts_end'] : null;
        $this->container['source_of_published'] = isset($data['source_of_published']) ? $data['source_of_published'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type Library item content type such as flow, campaign, cjson, email, or transactional_email
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of library item
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string $industry Industry
     *
     * @return $this
     */
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets price_high
     *
     * @return float
     */
    public function getPriceHigh()
    {
        return $this->container['price_high'];
    }

    /**
     * Sets price_high
     *
     * @param float $price_high Maximum price
     *
     * @return $this
     */
    public function setPriceHigh($price_high)
    {
        $this->container['price_high'] = $price_high;

        return $this;
    }

    /**
     * Gets price_low
     *
     * @return float
     */
    public function getPriceLow()
    {
        return $this->container['price_low'];
    }

    /**
     * Sets price_low
     *
     * @param float $price_low Minimum price
     *
     * @return $this
     */
    public function setPriceLow($price_low)
    {
        $this->container['price_low'] = $price_low;

        return $this;
    }

    /**
     * Gets published_dts_begin
     *
     * @return string
     */
    public function getPublishedDtsBegin()
    {
        return $this->container['published_dts_begin'];
    }

    /**
     * Sets published_dts_begin
     *
     * @param string $published_dts_begin Minimum published date/time
     *
     * @return $this
     */
    public function setPublishedDtsBegin($published_dts_begin)
    {
        $this->container['published_dts_begin'] = $published_dts_begin;

        return $this;
    }

    /**
     * Gets published_dts_end
     *
     * @return string
     */
    public function getPublishedDtsEnd()
    {
        return $this->container['published_dts_end'];
    }

    /**
     * Sets published_dts_end
     *
     * @param string $published_dts_end Maximum published date/time
     *
     * @return $this
     */
    public function setPublishedDtsEnd($published_dts_end)
    {
        $this->container['published_dts_end'] = $published_dts_end;

        return $this;
    }

    /**
     * Gets source_of_published
     *
     * @return bool
     */
    public function getSourceOfPublished()
    {
        return $this->container['source_of_published'];
    }

    /**
     * Sets source_of_published
     *
     * @param bool $source_of_published Boolean, true if this library item has been published and is the master copy of that published work
     *
     * @return $this
     */
    public function setSourceOfPublished($source_of_published)
    {
        $this->container['source_of_published'] = $source_of_published;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string $style Library item style
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the library item
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Library item type such as header, footer, shipping block, etc
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


