<?php
/**
 * User
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_ip_address_masks' => 'string[]',
        'change_ftp_password_to' => 'string',
        'change_password_to' => 'string',
        'email' => 'string',
        'full_name' => 'string',
        'groups' => '\ultracart\v2\models\UserGroupMembership[]',
        'linked_accounts' => '\ultracart\v2\models\LinkedAccount[]',
        'login' => 'string',
        'login_histories' => '\ultracart\v2\models\UserLogin[]',
        'notifications' => '\ultracart\v2\models\Notification[]',
        'otp_serial_number' => 'string',
        'permissions' => '\ultracart\v2\models\Permission[]',
        'phone' => 'string',
        'user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_ip_address_masks' => null,
        'change_ftp_password_to' => null,
        'change_password_to' => null,
        'email' => null,
        'full_name' => null,
        'groups' => null,
        'linked_accounts' => null,
        'login' => null,
        'login_histories' => null,
        'notifications' => null,
        'otp_serial_number' => null,
        'permissions' => null,
        'phone' => null,
        'user_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_ip_address_masks' => 'api_ip_address_masks',
        'change_ftp_password_to' => 'change_ftp_password_to',
        'change_password_to' => 'change_password_to',
        'email' => 'email',
        'full_name' => 'full_name',
        'groups' => 'groups',
        'linked_accounts' => 'linked_accounts',
        'login' => 'login',
        'login_histories' => 'login_histories',
        'notifications' => 'notifications',
        'otp_serial_number' => 'otp_serial_number',
        'permissions' => 'permissions',
        'phone' => 'phone',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_ip_address_masks' => 'setApiIpAddressMasks',
        'change_ftp_password_to' => 'setChangeFtpPasswordTo',
        'change_password_to' => 'setChangePasswordTo',
        'email' => 'setEmail',
        'full_name' => 'setFullName',
        'groups' => 'setGroups',
        'linked_accounts' => 'setLinkedAccounts',
        'login' => 'setLogin',
        'login_histories' => 'setLoginHistories',
        'notifications' => 'setNotifications',
        'otp_serial_number' => 'setOtpSerialNumber',
        'permissions' => 'setPermissions',
        'phone' => 'setPhone',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_ip_address_masks' => 'getApiIpAddressMasks',
        'change_ftp_password_to' => 'getChangeFtpPasswordTo',
        'change_password_to' => 'getChangePasswordTo',
        'email' => 'getEmail',
        'full_name' => 'getFullName',
        'groups' => 'getGroups',
        'linked_accounts' => 'getLinkedAccounts',
        'login' => 'getLogin',
        'login_histories' => 'getLoginHistories',
        'notifications' => 'getNotifications',
        'otp_serial_number' => 'getOtpSerialNumber',
        'permissions' => 'getPermissions',
        'phone' => 'getPhone',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_ip_address_masks'] = $data['api_ip_address_masks'] ?? null;
        $this->container['change_ftp_password_to'] = $data['change_ftp_password_to'] ?? null;
        $this->container['change_password_to'] = $data['change_password_to'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['full_name'] = $data['full_name'] ?? null;
        $this->container['groups'] = $data['groups'] ?? null;
        $this->container['linked_accounts'] = $data['linked_accounts'] ?? null;
        $this->container['login'] = $data['login'] ?? null;
        $this->container['login_histories'] = $data['login_histories'] ?? null;
        $this->container['notifications'] = $data['notifications'] ?? null;
        $this->container['otp_serial_number'] = $data['otp_serial_number'] ?? null;
        $this->container['permissions'] = $data['permissions'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 150)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 150.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_ip_address_masks
     *
     * @return string[]|null
     */
    public function getApiIpAddressMasks()
    {
        return $this->container['api_ip_address_masks'];
    }

    /**
     * Sets api_ip_address_masks
     *
     * @param string[]|null $api_ip_address_masks A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers.
     *
     * @return self
     */
    public function setApiIpAddressMasks($api_ip_address_masks)
    {
        $this->container['api_ip_address_masks'] = $api_ip_address_masks;

        return $this;
    }

    /**
     * Gets change_ftp_password_to
     *
     * @return string|null
     */
    public function getChangeFtpPasswordTo()
    {
        return $this->container['change_ftp_password_to'];
    }

    /**
     * Sets change_ftp_password_to
     *
     * @param string|null $change_ftp_password_to Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password.
     *
     * @return self
     */
    public function setChangeFtpPasswordTo($change_ftp_password_to)
    {
        $this->container['change_ftp_password_to'] = $change_ftp_password_to;

        return $this;
    }

    /**
     * Gets change_password_to
     *
     * @return string|null
     */
    public function getChangePasswordTo()
    {
        return $this->container['change_password_to'];
    }

    /**
     * Sets change_password_to
     *
     * @param string|null $change_password_to Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.
     *
     * @return self
     */
    public function setChangePasswordTo($change_password_to)
    {
        $this->container['change_password_to'] = $change_password_to;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address of user
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 150)) {
            throw new \InvalidArgumentException('invalid length for $email when calling User., must be smaller than or equal to 150.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem.
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \ultracart\v2\models\UserGroupMembership[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \ultracart\v2\models\UserGroupMembership[]|null $groups A list of groups for this merchant and whether or not this user is a member of those groups.
     *
     * @return self
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets linked_accounts
     *
     * @return \ultracart\v2\models\LinkedAccount[]|null
     */
    public function getLinkedAccounts()
    {
        return $this->container['linked_accounts'];
    }

    /**
     * Sets linked_accounts
     *
     * @param \ultracart\v2\models\LinkedAccount[]|null $linked_accounts A list of linked accounts and whether or not this user is mirrored to any of those accounts.
     *
     * @return self
     */
    public function setLinkedAccounts($linked_accounts)
    {
        $this->container['linked_accounts'] = $linked_accounts;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login User name of user.  Must be unique across a merchant account.
     *
     * @return self
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets login_histories
     *
     * @return \ultracart\v2\models\UserLogin[]|null
     */
    public function getLoginHistories()
    {
        return $this->container['login_histories'];
    }

    /**
     * Sets login_histories
     *
     * @param \ultracart\v2\models\UserLogin[]|null $login_histories A list of user logins over the past 90 days
     *
     * @return self
     */
    public function setLoginHistories($login_histories)
    {
        $this->container['login_histories'] = $login_histories;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \ultracart\v2\models\Notification[]|null
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \ultracart\v2\models\Notification[]|null $notifications A list of notifications the user receives.
     *
     * @return self
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets otp_serial_number
     *
     * @return string|null
     */
    public function getOtpSerialNumber()
    {
        return $this->container['otp_serial_number'];
    }

    /**
     * Sets otp_serial_number
     *
     * @param string|null $otp_serial_number OTP Serial Number such as Google Authenticator or Crypto Card.
     *
     * @return self
     */
    public function setOtpSerialNumber($otp_serial_number)
    {
        $this->container['otp_serial_number'] = $otp_serial_number;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \ultracart\v2\models\Permission[]|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \ultracart\v2\models\Permission[]|null $permissions A list of permissions the user enjoys for accessing the backend of UltraCart.
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id User id is a unique identifier for this user
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


