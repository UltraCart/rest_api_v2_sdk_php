<?php
/**
 * AdjustInternalCertificateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * AdjustInternalCertificateRequest Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdjustInternalCertificateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdjustInternalCertificateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adjustment_amount' => 'float',
        'description' => 'string',
        'entry_dts' => 'string',
        'expiration_days' => 'int',
        'order_id' => 'string',
        'vesting_days' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'adjustment_amount' => null,
        'description' => null,
        'entry_dts' => 'dateTime',
        'expiration_days' => 'int32',
        'order_id' => null,
        'vesting_days' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adjustment_amount' => 'adjustment_amount',
        'description' => 'description',
        'entry_dts' => 'entry_dts',
        'expiration_days' => 'expiration_days',
        'order_id' => 'order_id',
        'vesting_days' => 'vesting_days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adjustment_amount' => 'setAdjustmentAmount',
        'description' => 'setDescription',
        'entry_dts' => 'setEntryDts',
        'expiration_days' => 'setExpirationDays',
        'order_id' => 'setOrderId',
        'vesting_days' => 'setVestingDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adjustment_amount' => 'getAdjustmentAmount',
        'description' => 'getDescription',
        'entry_dts' => 'getEntryDts',
        'expiration_days' => 'getExpirationDays',
        'order_id' => 'getOrderId',
        'vesting_days' => 'getVestingDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adjustment_amount'] = isset($data['adjustment_amount']) ? $data['adjustment_amount'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['entry_dts'] = isset($data['entry_dts']) ? $data['entry_dts'] : null;
        $this->container['expiration_days'] = isset($data['expiration_days']) ? $data['expiration_days'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['vesting_days'] = isset($data['vesting_days']) ? $data['vesting_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adjustment_amount
     *
     * @return float
     */
    public function getAdjustmentAmount()
    {
        return $this->container['adjustment_amount'];
    }

    /**
     * Sets adjustment_amount
     *
     * @param float $adjustment_amount The adjustment amount
     *
     * @return $this
     */
    public function setAdjustmentAmount($adjustment_amount)
    {
        $this->container['adjustment_amount'] = $adjustment_amount;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of this adjustment, 50 characters max
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entry_dts
     *
     * @return string
     */
    public function getEntryDts()
    {
        return $this->container['entry_dts'];
    }

    /**
     * Sets entry_dts
     *
     * @param string $entry_dts Optional timestamp for the adjustment, defaults to current time
     *
     * @return $this
     */
    public function setEntryDts($entry_dts)
    {
        $this->container['entry_dts'] = $entry_dts;

        return $this;
    }

    /**
     * Gets expiration_days
     *
     * @return int
     */
    public function getExpirationDays()
    {
        return $this->container['expiration_days'];
    }

    /**
     * Sets expiration_days
     *
     * @param int $expiration_days Optional expiration days from the entry_dts when these adjustment becomes worthless
     *
     * @return $this
     */
    public function setExpirationDays($expiration_days)
    {
        $this->container['expiration_days'] = $expiration_days;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Optional order id if this adjustment is related to a particular order
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets vesting_days
     *
     * @return int
     */
    public function getVestingDays()
    {
        return $this->container['vesting_days'];
    }

    /**
     * Sets vesting_days
     *
     * @param int $vesting_days Optional days required for this adjustment to vest
     *
     * @return $this
     */
    public function setVestingDays($vesting_days)
    {
        $this->container['vesting_days'] = $vesting_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


