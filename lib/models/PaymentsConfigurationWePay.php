<?php
/**
 * PaymentsConfigurationWePay
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsConfigurationWePay Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsConfigurationWePay implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsConfigurationWePay';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accept_wepay' => 'bool',
        'hide_credit_cards_non_ultra_cart_payments' => 'bool',
        'hide_surcharge_content' => 'bool',
        'remove_pay_pal_pro' => 'bool',
        'restrictions' => '\ultracart\v2\models\PaymentsConfigurationRestrictions',
        'short_pay_pal_marketing_text' => 'bool',
        'show_ultra_cart_payments_disabled' => 'bool',
        'show_ultra_cart_payments_intro' => 'bool',
        'show_ultra_cart_payments_verification' => 'bool',
        'show_ultra_cart_payments_verified' => 'bool',
        'wepay_account_update_uri' => 'string',
        'wepay_address1' => 'string',
        'wepay_address2' => 'string',
        'wepay_canada_accept_debit_cards' => 'bool',
        'wepay_city' => 'string',
        'wepay_company' => 'string',
        'wepay_company_description' => 'string',
        'wepay_console_hostname' => 'string',
        'wepay_country' => 'string',
        'wepay_currency' => 'string',
        'wepay_expected_revenue' => 'string',
        'wepay_industry' => 'string',
        'wepay_owner_email' => 'string',
        'wepay_owner_name' => 'string',
        'wepay_owner_phone' => 'string',
        'wepay_state' => 'string',
        'wepay_website_url' => 'string',
        'wepay_zip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accept_wepay' => null,
        'hide_credit_cards_non_ultra_cart_payments' => null,
        'hide_surcharge_content' => null,
        'remove_pay_pal_pro' => null,
        'restrictions' => null,
        'short_pay_pal_marketing_text' => null,
        'show_ultra_cart_payments_disabled' => null,
        'show_ultra_cart_payments_intro' => null,
        'show_ultra_cart_payments_verification' => null,
        'show_ultra_cart_payments_verified' => null,
        'wepay_account_update_uri' => null,
        'wepay_address1' => null,
        'wepay_address2' => null,
        'wepay_canada_accept_debit_cards' => null,
        'wepay_city' => null,
        'wepay_company' => null,
        'wepay_company_description' => null,
        'wepay_console_hostname' => null,
        'wepay_country' => null,
        'wepay_currency' => null,
        'wepay_expected_revenue' => null,
        'wepay_industry' => null,
        'wepay_owner_email' => null,
        'wepay_owner_name' => null,
        'wepay_owner_phone' => null,
        'wepay_state' => null,
        'wepay_website_url' => null,
        'wepay_zip' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accept_wepay' => 'acceptWepay',
        'hide_credit_cards_non_ultra_cart_payments' => 'hideCreditCardsNonUltraCartPayments',
        'hide_surcharge_content' => 'hideSurchargeContent',
        'remove_pay_pal_pro' => 'removePayPalPro',
        'restrictions' => 'restrictions',
        'short_pay_pal_marketing_text' => 'shortPayPalMarketingText',
        'show_ultra_cart_payments_disabled' => 'showUltraCartPaymentsDisabled',
        'show_ultra_cart_payments_intro' => 'showUltraCartPaymentsIntro',
        'show_ultra_cart_payments_verification' => 'showUltraCartPaymentsVerification',
        'show_ultra_cart_payments_verified' => 'showUltraCartPaymentsVerified',
        'wepay_account_update_uri' => 'wepayAccountUpdateUri',
        'wepay_address1' => 'wepayAddress1',
        'wepay_address2' => 'wepayAddress2',
        'wepay_canada_accept_debit_cards' => 'wepayCanadaAcceptDebitCards',
        'wepay_city' => 'wepayCity',
        'wepay_company' => 'wepayCompany',
        'wepay_company_description' => 'wepayCompanyDescription',
        'wepay_console_hostname' => 'wepayConsoleHostname',
        'wepay_country' => 'wepayCountry',
        'wepay_currency' => 'wepayCurrency',
        'wepay_expected_revenue' => 'wepayExpectedRevenue',
        'wepay_industry' => 'wepayIndustry',
        'wepay_owner_email' => 'wepayOwnerEmail',
        'wepay_owner_name' => 'wepayOwnerName',
        'wepay_owner_phone' => 'wepayOwnerPhone',
        'wepay_state' => 'wepayState',
        'wepay_website_url' => 'wepayWebsiteUrl',
        'wepay_zip' => 'wepayZip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accept_wepay' => 'setAcceptWepay',
        'hide_credit_cards_non_ultra_cart_payments' => 'setHideCreditCardsNonUltraCartPayments',
        'hide_surcharge_content' => 'setHideSurchargeContent',
        'remove_pay_pal_pro' => 'setRemovePayPalPro',
        'restrictions' => 'setRestrictions',
        'short_pay_pal_marketing_text' => 'setShortPayPalMarketingText',
        'show_ultra_cart_payments_disabled' => 'setShowUltraCartPaymentsDisabled',
        'show_ultra_cart_payments_intro' => 'setShowUltraCartPaymentsIntro',
        'show_ultra_cart_payments_verification' => 'setShowUltraCartPaymentsVerification',
        'show_ultra_cart_payments_verified' => 'setShowUltraCartPaymentsVerified',
        'wepay_account_update_uri' => 'setWepayAccountUpdateUri',
        'wepay_address1' => 'setWepayAddress1',
        'wepay_address2' => 'setWepayAddress2',
        'wepay_canada_accept_debit_cards' => 'setWepayCanadaAcceptDebitCards',
        'wepay_city' => 'setWepayCity',
        'wepay_company' => 'setWepayCompany',
        'wepay_company_description' => 'setWepayCompanyDescription',
        'wepay_console_hostname' => 'setWepayConsoleHostname',
        'wepay_country' => 'setWepayCountry',
        'wepay_currency' => 'setWepayCurrency',
        'wepay_expected_revenue' => 'setWepayExpectedRevenue',
        'wepay_industry' => 'setWepayIndustry',
        'wepay_owner_email' => 'setWepayOwnerEmail',
        'wepay_owner_name' => 'setWepayOwnerName',
        'wepay_owner_phone' => 'setWepayOwnerPhone',
        'wepay_state' => 'setWepayState',
        'wepay_website_url' => 'setWepayWebsiteUrl',
        'wepay_zip' => 'setWepayZip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accept_wepay' => 'getAcceptWepay',
        'hide_credit_cards_non_ultra_cart_payments' => 'getHideCreditCardsNonUltraCartPayments',
        'hide_surcharge_content' => 'getHideSurchargeContent',
        'remove_pay_pal_pro' => 'getRemovePayPalPro',
        'restrictions' => 'getRestrictions',
        'short_pay_pal_marketing_text' => 'getShortPayPalMarketingText',
        'show_ultra_cart_payments_disabled' => 'getShowUltraCartPaymentsDisabled',
        'show_ultra_cart_payments_intro' => 'getShowUltraCartPaymentsIntro',
        'show_ultra_cart_payments_verification' => 'getShowUltraCartPaymentsVerification',
        'show_ultra_cart_payments_verified' => 'getShowUltraCartPaymentsVerified',
        'wepay_account_update_uri' => 'getWepayAccountUpdateUri',
        'wepay_address1' => 'getWepayAddress1',
        'wepay_address2' => 'getWepayAddress2',
        'wepay_canada_accept_debit_cards' => 'getWepayCanadaAcceptDebitCards',
        'wepay_city' => 'getWepayCity',
        'wepay_company' => 'getWepayCompany',
        'wepay_company_description' => 'getWepayCompanyDescription',
        'wepay_console_hostname' => 'getWepayConsoleHostname',
        'wepay_country' => 'getWepayCountry',
        'wepay_currency' => 'getWepayCurrency',
        'wepay_expected_revenue' => 'getWepayExpectedRevenue',
        'wepay_industry' => 'getWepayIndustry',
        'wepay_owner_email' => 'getWepayOwnerEmail',
        'wepay_owner_name' => 'getWepayOwnerName',
        'wepay_owner_phone' => 'getWepayOwnerPhone',
        'wepay_state' => 'getWepayState',
        'wepay_website_url' => 'getWepayWebsiteUrl',
        'wepay_zip' => 'getWepayZip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accept_wepay'] = isset($data['accept_wepay']) ? $data['accept_wepay'] : null;
        $this->container['hide_credit_cards_non_ultra_cart_payments'] = isset($data['hide_credit_cards_non_ultra_cart_payments']) ? $data['hide_credit_cards_non_ultra_cart_payments'] : null;
        $this->container['hide_surcharge_content'] = isset($data['hide_surcharge_content']) ? $data['hide_surcharge_content'] : null;
        $this->container['remove_pay_pal_pro'] = isset($data['remove_pay_pal_pro']) ? $data['remove_pay_pal_pro'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
        $this->container['short_pay_pal_marketing_text'] = isset($data['short_pay_pal_marketing_text']) ? $data['short_pay_pal_marketing_text'] : null;
        $this->container['show_ultra_cart_payments_disabled'] = isset($data['show_ultra_cart_payments_disabled']) ? $data['show_ultra_cart_payments_disabled'] : null;
        $this->container['show_ultra_cart_payments_intro'] = isset($data['show_ultra_cart_payments_intro']) ? $data['show_ultra_cart_payments_intro'] : null;
        $this->container['show_ultra_cart_payments_verification'] = isset($data['show_ultra_cart_payments_verification']) ? $data['show_ultra_cart_payments_verification'] : null;
        $this->container['show_ultra_cart_payments_verified'] = isset($data['show_ultra_cart_payments_verified']) ? $data['show_ultra_cart_payments_verified'] : null;
        $this->container['wepay_account_update_uri'] = isset($data['wepay_account_update_uri']) ? $data['wepay_account_update_uri'] : null;
        $this->container['wepay_address1'] = isset($data['wepay_address1']) ? $data['wepay_address1'] : null;
        $this->container['wepay_address2'] = isset($data['wepay_address2']) ? $data['wepay_address2'] : null;
        $this->container['wepay_canada_accept_debit_cards'] = isset($data['wepay_canada_accept_debit_cards']) ? $data['wepay_canada_accept_debit_cards'] : null;
        $this->container['wepay_city'] = isset($data['wepay_city']) ? $data['wepay_city'] : null;
        $this->container['wepay_company'] = isset($data['wepay_company']) ? $data['wepay_company'] : null;
        $this->container['wepay_company_description'] = isset($data['wepay_company_description']) ? $data['wepay_company_description'] : null;
        $this->container['wepay_console_hostname'] = isset($data['wepay_console_hostname']) ? $data['wepay_console_hostname'] : null;
        $this->container['wepay_country'] = isset($data['wepay_country']) ? $data['wepay_country'] : null;
        $this->container['wepay_currency'] = isset($data['wepay_currency']) ? $data['wepay_currency'] : null;
        $this->container['wepay_expected_revenue'] = isset($data['wepay_expected_revenue']) ? $data['wepay_expected_revenue'] : null;
        $this->container['wepay_industry'] = isset($data['wepay_industry']) ? $data['wepay_industry'] : null;
        $this->container['wepay_owner_email'] = isset($data['wepay_owner_email']) ? $data['wepay_owner_email'] : null;
        $this->container['wepay_owner_name'] = isset($data['wepay_owner_name']) ? $data['wepay_owner_name'] : null;
        $this->container['wepay_owner_phone'] = isset($data['wepay_owner_phone']) ? $data['wepay_owner_phone'] : null;
        $this->container['wepay_state'] = isset($data['wepay_state']) ? $data['wepay_state'] : null;
        $this->container['wepay_website_url'] = isset($data['wepay_website_url']) ? $data['wepay_website_url'] : null;
        $this->container['wepay_zip'] = isset($data['wepay_zip']) ? $data['wepay_zip'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accept_wepay
     *
     * @return bool
     */
    public function getAcceptWepay()
    {
        return $this->container['accept_wepay'];
    }

    /**
     * Sets accept_wepay
     *
     * @param bool $accept_wepay accept_wepay
     *
     * @return $this
     */
    public function setAcceptWepay($accept_wepay)
    {
        $this->container['accept_wepay'] = $accept_wepay;

        return $this;
    }

    /**
     * Gets hide_credit_cards_non_ultra_cart_payments
     *
     * @return bool
     */
    public function getHideCreditCardsNonUltraCartPayments()
    {
        return $this->container['hide_credit_cards_non_ultra_cart_payments'];
    }

    /**
     * Sets hide_credit_cards_non_ultra_cart_payments
     *
     * @param bool $hide_credit_cards_non_ultra_cart_payments hide_credit_cards_non_ultra_cart_payments
     *
     * @return $this
     */
    public function setHideCreditCardsNonUltraCartPayments($hide_credit_cards_non_ultra_cart_payments)
    {
        $this->container['hide_credit_cards_non_ultra_cart_payments'] = $hide_credit_cards_non_ultra_cart_payments;

        return $this;
    }

    /**
     * Gets hide_surcharge_content
     *
     * @return bool
     */
    public function getHideSurchargeContent()
    {
        return $this->container['hide_surcharge_content'];
    }

    /**
     * Sets hide_surcharge_content
     *
     * @param bool $hide_surcharge_content hide_surcharge_content
     *
     * @return $this
     */
    public function setHideSurchargeContent($hide_surcharge_content)
    {
        $this->container['hide_surcharge_content'] = $hide_surcharge_content;

        return $this;
    }

    /**
     * Gets remove_pay_pal_pro
     *
     * @return bool
     */
    public function getRemovePayPalPro()
    {
        return $this->container['remove_pay_pal_pro'];
    }

    /**
     * Sets remove_pay_pal_pro
     *
     * @param bool $remove_pay_pal_pro remove_pay_pal_pro
     *
     * @return $this
     */
    public function setRemovePayPalPro($remove_pay_pal_pro)
    {
        $this->container['remove_pay_pal_pro'] = $remove_pay_pal_pro;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \ultracart\v2\models\PaymentsConfigurationRestrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \ultracart\v2\models\PaymentsConfigurationRestrictions $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets short_pay_pal_marketing_text
     *
     * @return bool
     */
    public function getShortPayPalMarketingText()
    {
        return $this->container['short_pay_pal_marketing_text'];
    }

    /**
     * Sets short_pay_pal_marketing_text
     *
     * @param bool $short_pay_pal_marketing_text short_pay_pal_marketing_text
     *
     * @return $this
     */
    public function setShortPayPalMarketingText($short_pay_pal_marketing_text)
    {
        $this->container['short_pay_pal_marketing_text'] = $short_pay_pal_marketing_text;

        return $this;
    }

    /**
     * Gets show_ultra_cart_payments_disabled
     *
     * @return bool
     */
    public function getShowUltraCartPaymentsDisabled()
    {
        return $this->container['show_ultra_cart_payments_disabled'];
    }

    /**
     * Sets show_ultra_cart_payments_disabled
     *
     * @param bool $show_ultra_cart_payments_disabled show_ultra_cart_payments_disabled
     *
     * @return $this
     */
    public function setShowUltraCartPaymentsDisabled($show_ultra_cart_payments_disabled)
    {
        $this->container['show_ultra_cart_payments_disabled'] = $show_ultra_cart_payments_disabled;

        return $this;
    }

    /**
     * Gets show_ultra_cart_payments_intro
     *
     * @return bool
     */
    public function getShowUltraCartPaymentsIntro()
    {
        return $this->container['show_ultra_cart_payments_intro'];
    }

    /**
     * Sets show_ultra_cart_payments_intro
     *
     * @param bool $show_ultra_cart_payments_intro show_ultra_cart_payments_intro
     *
     * @return $this
     */
    public function setShowUltraCartPaymentsIntro($show_ultra_cart_payments_intro)
    {
        $this->container['show_ultra_cart_payments_intro'] = $show_ultra_cart_payments_intro;

        return $this;
    }

    /**
     * Gets show_ultra_cart_payments_verification
     *
     * @return bool
     */
    public function getShowUltraCartPaymentsVerification()
    {
        return $this->container['show_ultra_cart_payments_verification'];
    }

    /**
     * Sets show_ultra_cart_payments_verification
     *
     * @param bool $show_ultra_cart_payments_verification show_ultra_cart_payments_verification
     *
     * @return $this
     */
    public function setShowUltraCartPaymentsVerification($show_ultra_cart_payments_verification)
    {
        $this->container['show_ultra_cart_payments_verification'] = $show_ultra_cart_payments_verification;

        return $this;
    }

    /**
     * Gets show_ultra_cart_payments_verified
     *
     * @return bool
     */
    public function getShowUltraCartPaymentsVerified()
    {
        return $this->container['show_ultra_cart_payments_verified'];
    }

    /**
     * Sets show_ultra_cart_payments_verified
     *
     * @param bool $show_ultra_cart_payments_verified show_ultra_cart_payments_verified
     *
     * @return $this
     */
    public function setShowUltraCartPaymentsVerified($show_ultra_cart_payments_verified)
    {
        $this->container['show_ultra_cart_payments_verified'] = $show_ultra_cart_payments_verified;

        return $this;
    }

    /**
     * Gets wepay_account_update_uri
     *
     * @return string
     */
    public function getWepayAccountUpdateUri()
    {
        return $this->container['wepay_account_update_uri'];
    }

    /**
     * Sets wepay_account_update_uri
     *
     * @param string $wepay_account_update_uri wepay_account_update_uri
     *
     * @return $this
     */
    public function setWepayAccountUpdateUri($wepay_account_update_uri)
    {
        $this->container['wepay_account_update_uri'] = $wepay_account_update_uri;

        return $this;
    }

    /**
     * Gets wepay_address1
     *
     * @return string
     */
    public function getWepayAddress1()
    {
        return $this->container['wepay_address1'];
    }

    /**
     * Sets wepay_address1
     *
     * @param string $wepay_address1 wepay_address1
     *
     * @return $this
     */
    public function setWepayAddress1($wepay_address1)
    {
        $this->container['wepay_address1'] = $wepay_address1;

        return $this;
    }

    /**
     * Gets wepay_address2
     *
     * @return string
     */
    public function getWepayAddress2()
    {
        return $this->container['wepay_address2'];
    }

    /**
     * Sets wepay_address2
     *
     * @param string $wepay_address2 wepay_address2
     *
     * @return $this
     */
    public function setWepayAddress2($wepay_address2)
    {
        $this->container['wepay_address2'] = $wepay_address2;

        return $this;
    }

    /**
     * Gets wepay_canada_accept_debit_cards
     *
     * @return bool
     */
    public function getWepayCanadaAcceptDebitCards()
    {
        return $this->container['wepay_canada_accept_debit_cards'];
    }

    /**
     * Sets wepay_canada_accept_debit_cards
     *
     * @param bool $wepay_canada_accept_debit_cards wepay_canada_accept_debit_cards
     *
     * @return $this
     */
    public function setWepayCanadaAcceptDebitCards($wepay_canada_accept_debit_cards)
    {
        $this->container['wepay_canada_accept_debit_cards'] = $wepay_canada_accept_debit_cards;

        return $this;
    }

    /**
     * Gets wepay_city
     *
     * @return string
     */
    public function getWepayCity()
    {
        return $this->container['wepay_city'];
    }

    /**
     * Sets wepay_city
     *
     * @param string $wepay_city wepay_city
     *
     * @return $this
     */
    public function setWepayCity($wepay_city)
    {
        $this->container['wepay_city'] = $wepay_city;

        return $this;
    }

    /**
     * Gets wepay_company
     *
     * @return string
     */
    public function getWepayCompany()
    {
        return $this->container['wepay_company'];
    }

    /**
     * Sets wepay_company
     *
     * @param string $wepay_company wepay_company
     *
     * @return $this
     */
    public function setWepayCompany($wepay_company)
    {
        $this->container['wepay_company'] = $wepay_company;

        return $this;
    }

    /**
     * Gets wepay_company_description
     *
     * @return string
     */
    public function getWepayCompanyDescription()
    {
        return $this->container['wepay_company_description'];
    }

    /**
     * Sets wepay_company_description
     *
     * @param string $wepay_company_description wepay_company_description
     *
     * @return $this
     */
    public function setWepayCompanyDescription($wepay_company_description)
    {
        $this->container['wepay_company_description'] = $wepay_company_description;

        return $this;
    }

    /**
     * Gets wepay_console_hostname
     *
     * @return string
     */
    public function getWepayConsoleHostname()
    {
        return $this->container['wepay_console_hostname'];
    }

    /**
     * Sets wepay_console_hostname
     *
     * @param string $wepay_console_hostname wepay_console_hostname
     *
     * @return $this
     */
    public function setWepayConsoleHostname($wepay_console_hostname)
    {
        $this->container['wepay_console_hostname'] = $wepay_console_hostname;

        return $this;
    }

    /**
     * Gets wepay_country
     *
     * @return string
     */
    public function getWepayCountry()
    {
        return $this->container['wepay_country'];
    }

    /**
     * Sets wepay_country
     *
     * @param string $wepay_country wepay_country
     *
     * @return $this
     */
    public function setWepayCountry($wepay_country)
    {
        $this->container['wepay_country'] = $wepay_country;

        return $this;
    }

    /**
     * Gets wepay_currency
     *
     * @return string
     */
    public function getWepayCurrency()
    {
        return $this->container['wepay_currency'];
    }

    /**
     * Sets wepay_currency
     *
     * @param string $wepay_currency wepay_currency
     *
     * @return $this
     */
    public function setWepayCurrency($wepay_currency)
    {
        $this->container['wepay_currency'] = $wepay_currency;

        return $this;
    }

    /**
     * Gets wepay_expected_revenue
     *
     * @return string
     */
    public function getWepayExpectedRevenue()
    {
        return $this->container['wepay_expected_revenue'];
    }

    /**
     * Sets wepay_expected_revenue
     *
     * @param string $wepay_expected_revenue wepay_expected_revenue
     *
     * @return $this
     */
    public function setWepayExpectedRevenue($wepay_expected_revenue)
    {
        $this->container['wepay_expected_revenue'] = $wepay_expected_revenue;

        return $this;
    }

    /**
     * Gets wepay_industry
     *
     * @return string
     */
    public function getWepayIndustry()
    {
        return $this->container['wepay_industry'];
    }

    /**
     * Sets wepay_industry
     *
     * @param string $wepay_industry wepay_industry
     *
     * @return $this
     */
    public function setWepayIndustry($wepay_industry)
    {
        $this->container['wepay_industry'] = $wepay_industry;

        return $this;
    }

    /**
     * Gets wepay_owner_email
     *
     * @return string
     */
    public function getWepayOwnerEmail()
    {
        return $this->container['wepay_owner_email'];
    }

    /**
     * Sets wepay_owner_email
     *
     * @param string $wepay_owner_email wepay_owner_email
     *
     * @return $this
     */
    public function setWepayOwnerEmail($wepay_owner_email)
    {
        $this->container['wepay_owner_email'] = $wepay_owner_email;

        return $this;
    }

    /**
     * Gets wepay_owner_name
     *
     * @return string
     */
    public function getWepayOwnerName()
    {
        return $this->container['wepay_owner_name'];
    }

    /**
     * Sets wepay_owner_name
     *
     * @param string $wepay_owner_name wepay_owner_name
     *
     * @return $this
     */
    public function setWepayOwnerName($wepay_owner_name)
    {
        $this->container['wepay_owner_name'] = $wepay_owner_name;

        return $this;
    }

    /**
     * Gets wepay_owner_phone
     *
     * @return string
     */
    public function getWepayOwnerPhone()
    {
        return $this->container['wepay_owner_phone'];
    }

    /**
     * Sets wepay_owner_phone
     *
     * @param string $wepay_owner_phone wepay_owner_phone
     *
     * @return $this
     */
    public function setWepayOwnerPhone($wepay_owner_phone)
    {
        $this->container['wepay_owner_phone'] = $wepay_owner_phone;

        return $this;
    }

    /**
     * Gets wepay_state
     *
     * @return string
     */
    public function getWepayState()
    {
        return $this->container['wepay_state'];
    }

    /**
     * Sets wepay_state
     *
     * @param string $wepay_state wepay_state
     *
     * @return $this
     */
    public function setWepayState($wepay_state)
    {
        $this->container['wepay_state'] = $wepay_state;

        return $this;
    }

    /**
     * Gets wepay_website_url
     *
     * @return string
     */
    public function getWepayWebsiteUrl()
    {
        return $this->container['wepay_website_url'];
    }

    /**
     * Sets wepay_website_url
     *
     * @param string $wepay_website_url wepay_website_url
     *
     * @return $this
     */
    public function setWepayWebsiteUrl($wepay_website_url)
    {
        $this->container['wepay_website_url'] = $wepay_website_url;

        return $this;
    }

    /**
     * Gets wepay_zip
     *
     * @return string
     */
    public function getWepayZip()
    {
        return $this->container['wepay_zip'];
    }

    /**
     * Sets wepay_zip
     *
     * @param string $wepay_zip wepay_zip
     *
     * @return $this
     */
    public function setWepayZip($wepay_zip)
    {
        $this->container['wepay_zip'] = $wepay_zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


