<?php
/**
 * GiftCertificateLedgerEntry
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * GiftCertificateLedgerEntry Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GiftCertificateLedgerEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GiftCertificateLedgerEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'description' => 'string',
        'entry_dts' => 'string',
        'gift_certificate_ledger_oid' => 'int',
        'gift_certificate_oid' => 'int',
        'reference_order_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'description' => null,
        'entry_dts' => 'dateTime',
        'gift_certificate_ledger_oid' => 'int32',
        'gift_certificate_oid' => 'int32',
        'reference_order_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'description' => 'description',
        'entry_dts' => 'entry_dts',
        'gift_certificate_ledger_oid' => 'gift_certificate_ledger_oid',
        'gift_certificate_oid' => 'gift_certificate_oid',
        'reference_order_id' => 'reference_order_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'description' => 'setDescription',
        'entry_dts' => 'setEntryDts',
        'gift_certificate_ledger_oid' => 'setGiftCertificateLedgerOid',
        'gift_certificate_oid' => 'setGiftCertificateOid',
        'reference_order_id' => 'setReferenceOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'description' => 'getDescription',
        'entry_dts' => 'getEntryDts',
        'gift_certificate_ledger_oid' => 'getGiftCertificateLedgerOid',
        'gift_certificate_oid' => 'getGiftCertificateOid',
        'reference_order_id' => 'getReferenceOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['entry_dts'] = $data['entry_dts'] ?? null;
        $this->container['gift_certificate_ledger_oid'] = $data['gift_certificate_ledger_oid'] ?? null;
        $this->container['gift_certificate_oid'] = $data['gift_certificate_oid'] ?? null;
        $this->container['reference_order_id'] = $data['reference_order_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 50)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The amount of the activity.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of what this ledger entry is used.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $description when calling GiftCertificateLedgerEntry., must be smaller than or equal to 50.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entry_dts
     *
     * @return string|null
     */
    public function getEntryDts()
    {
        return $this->container['entry_dts'];
    }

    /**
     * Sets entry_dts
     *
     * @param string|null $entry_dts Date time of this ledger activity.
     *
     * @return self
     */
    public function setEntryDts($entry_dts)
    {
        $this->container['entry_dts'] = $entry_dts;

        return $this;
    }

    /**
     * Gets gift_certificate_ledger_oid
     *
     * @return int|null
     */
    public function getGiftCertificateLedgerOid()
    {
        return $this->container['gift_certificate_ledger_oid'];
    }

    /**
     * Sets gift_certificate_ledger_oid
     *
     * @param int|null $gift_certificate_ledger_oid Gift certificate ledger oid is a primary key for this object, used internally.
     *
     * @return self
     */
    public function setGiftCertificateLedgerOid($gift_certificate_ledger_oid)
    {
        $this->container['gift_certificate_ledger_oid'] = $gift_certificate_ledger_oid;

        return $this;
    }

    /**
     * Gets gift_certificate_oid
     *
     * @return int|null
     */
    public function getGiftCertificateOid()
    {
        return $this->container['gift_certificate_oid'];
    }

    /**
     * Sets gift_certificate_oid
     *
     * @param int|null $gift_certificate_oid Gift certificate oid.
     *
     * @return self
     */
    public function setGiftCertificateOid($gift_certificate_oid)
    {
        $this->container['gift_certificate_oid'] = $gift_certificate_oid;

        return $this;
    }

    /**
     * Gets reference_order_id
     *
     * @return string|null
     */
    public function getReferenceOrderId()
    {
        return $this->container['reference_order_id'];
    }

    /**
     * Sets reference_order_id
     *
     * @param string|null $reference_order_id The order id if this gift certificate was used as part of the payment.
     *
     * @return self
     */
    public function setReferenceOrderId($reference_order_id)
    {
        $this->container['reference_order_id'] = $reference_order_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


