<?php
/**
 * GiftCertificateLedgerEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * GiftCertificateLedgerEntry Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GiftCertificateLedgerEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GiftCertificateLedgerEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'float',
        'description' => 'string',
        'entry_dts' => 'string',
        'gift_certificate_ledger_oid' => 'int',
        'gift_certificate_oid' => 'int',
        'reference_order_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => null,
        'description' => null,
        'entry_dts' => null,
        'gift_certificate_ledger_oid' => 'int32',
        'gift_certificate_oid' => 'int32',
        'reference_order_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'description' => 'description',
        'entry_dts' => 'entry_dts',
        'gift_certificate_ledger_oid' => 'gift_certificate_ledger_oid',
        'gift_certificate_oid' => 'gift_certificate_oid',
        'reference_order_id' => 'reference_order_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'description' => 'setDescription',
        'entry_dts' => 'setEntryDts',
        'gift_certificate_ledger_oid' => 'setGiftCertificateLedgerOid',
        'gift_certificate_oid' => 'setGiftCertificateOid',
        'reference_order_id' => 'setReferenceOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'description' => 'getDescription',
        'entry_dts' => 'getEntryDts',
        'gift_certificate_ledger_oid' => 'getGiftCertificateLedgerOid',
        'gift_certificate_oid' => 'getGiftCertificateOid',
        'reference_order_id' => 'getReferenceOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['entry_dts'] = isset($data['entry_dts']) ? $data['entry_dts'] : null;
        $this->container['gift_certificate_ledger_oid'] = isset($data['gift_certificate_ledger_oid']) ? $data['gift_certificate_ledger_oid'] : null;
        $this->container['gift_certificate_oid'] = isset($data['gift_certificate_oid']) ? $data['gift_certificate_oid'] : null;
        $this->container['reference_order_id'] = isset($data['reference_order_id']) ? $data['reference_order_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount of the activity.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of what this ledger entry is used.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entry_dts
     *
     * @return string
     */
    public function getEntryDts()
    {
        return $this->container['entry_dts'];
    }

    /**
     * Sets entry_dts
     *
     * @param string $entry_dts Date time of this ledger activity.
     *
     * @return $this
     */
    public function setEntryDts($entry_dts)
    {
        $this->container['entry_dts'] = $entry_dts;

        return $this;
    }

    /**
     * Gets gift_certificate_ledger_oid
     *
     * @return int
     */
    public function getGiftCertificateLedgerOid()
    {
        return $this->container['gift_certificate_ledger_oid'];
    }

    /**
     * Sets gift_certificate_ledger_oid
     *
     * @param int $gift_certificate_ledger_oid Gift certificate ledger oid is a primary key for this object, used internally.
     *
     * @return $this
     */
    public function setGiftCertificateLedgerOid($gift_certificate_ledger_oid)
    {
        $this->container['gift_certificate_ledger_oid'] = $gift_certificate_ledger_oid;

        return $this;
    }

    /**
     * Gets gift_certificate_oid
     *
     * @return int
     */
    public function getGiftCertificateOid()
    {
        return $this->container['gift_certificate_oid'];
    }

    /**
     * Sets gift_certificate_oid
     *
     * @param int $gift_certificate_oid Gift certificate oid.
     *
     * @return $this
     */
    public function setGiftCertificateOid($gift_certificate_oid)
    {
        $this->container['gift_certificate_oid'] = $gift_certificate_oid;

        return $this;
    }

    /**
     * Gets reference_order_id
     *
     * @return string
     */
    public function getReferenceOrderId()
    {
        return $this->container['reference_order_id'];
    }

    /**
     * Sets reference_order_id
     *
     * @param string $reference_order_id The order id if this gift certificate was used as part of the payment.
     *
     * @return $this
     */
    public function setReferenceOrderId($reference_order_id)
    {
        $this->container['reference_order_id'] = $reference_order_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


