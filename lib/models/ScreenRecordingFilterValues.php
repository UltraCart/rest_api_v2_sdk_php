<?php
/**
 * ScreenRecordingFilterValues
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ScreenRecordingFilterValues Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScreenRecordingFilterValues implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScreenRecordingFilterValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'communications_campaign_names' => 'string[]',
        'communications_email_subjects' => 'string[]',
        'communications_flow_names' => 'string[]',
        'geolocation_countries' => 'string[]',
        'geolocation_states' => 'string[]',
        'language_iso_codes' => 'string[]',
        'max_values' => 'int',
        'page_views' => '\ultracart\v2\models\ScreenRecordingFilterValuesPageView[]',
        'time_on_site_max' => 'int',
        'time_on_site_min' => 'int',
        'urls' => 'string[]',
        'user_agent_device_names' => 'string[]',
        'user_agent_device_os_names' => 'string[]',
        'user_agent_device_os_versions' => 'string[]',
        'user_agent_names' => 'string[]',
        'user_agent_originals' => 'string[]',
        'utm_campaigns' => 'string[]',
        'utm_sources' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'communications_campaign_names' => null,
        'communications_email_subjects' => null,
        'communications_flow_names' => null,
        'geolocation_countries' => null,
        'geolocation_states' => null,
        'language_iso_codes' => null,
        'max_values' => 'int32',
        'page_views' => null,
        'time_on_site_max' => 'int32',
        'time_on_site_min' => 'int32',
        'urls' => null,
        'user_agent_device_names' => null,
        'user_agent_device_os_names' => null,
        'user_agent_device_os_versions' => null,
        'user_agent_names' => null,
        'user_agent_originals' => null,
        'utm_campaigns' => null,
        'utm_sources' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'communications_campaign_names' => 'communications_campaign_names',
        'communications_email_subjects' => 'communications_email_subjects',
        'communications_flow_names' => 'communications_flow_names',
        'geolocation_countries' => 'geolocation_countries',
        'geolocation_states' => 'geolocation_states',
        'language_iso_codes' => 'language_iso_codes',
        'max_values' => 'max_values',
        'page_views' => 'page_views',
        'time_on_site_max' => 'time_on_site_max',
        'time_on_site_min' => 'time_on_site_min',
        'urls' => 'urls',
        'user_agent_device_names' => 'user_agent_device_names',
        'user_agent_device_os_names' => 'user_agent_device_os_names',
        'user_agent_device_os_versions' => 'user_agent_device_os_versions',
        'user_agent_names' => 'user_agent_names',
        'user_agent_originals' => 'user_agent_originals',
        'utm_campaigns' => 'utm_campaigns',
        'utm_sources' => 'utm_sources'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'communications_campaign_names' => 'setCommunicationsCampaignNames',
        'communications_email_subjects' => 'setCommunicationsEmailSubjects',
        'communications_flow_names' => 'setCommunicationsFlowNames',
        'geolocation_countries' => 'setGeolocationCountries',
        'geolocation_states' => 'setGeolocationStates',
        'language_iso_codes' => 'setLanguageIsoCodes',
        'max_values' => 'setMaxValues',
        'page_views' => 'setPageViews',
        'time_on_site_max' => 'setTimeOnSiteMax',
        'time_on_site_min' => 'setTimeOnSiteMin',
        'urls' => 'setUrls',
        'user_agent_device_names' => 'setUserAgentDeviceNames',
        'user_agent_device_os_names' => 'setUserAgentDeviceOsNames',
        'user_agent_device_os_versions' => 'setUserAgentDeviceOsVersions',
        'user_agent_names' => 'setUserAgentNames',
        'user_agent_originals' => 'setUserAgentOriginals',
        'utm_campaigns' => 'setUtmCampaigns',
        'utm_sources' => 'setUtmSources'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'communications_campaign_names' => 'getCommunicationsCampaignNames',
        'communications_email_subjects' => 'getCommunicationsEmailSubjects',
        'communications_flow_names' => 'getCommunicationsFlowNames',
        'geolocation_countries' => 'getGeolocationCountries',
        'geolocation_states' => 'getGeolocationStates',
        'language_iso_codes' => 'getLanguageIsoCodes',
        'max_values' => 'getMaxValues',
        'page_views' => 'getPageViews',
        'time_on_site_max' => 'getTimeOnSiteMax',
        'time_on_site_min' => 'getTimeOnSiteMin',
        'urls' => 'getUrls',
        'user_agent_device_names' => 'getUserAgentDeviceNames',
        'user_agent_device_os_names' => 'getUserAgentDeviceOsNames',
        'user_agent_device_os_versions' => 'getUserAgentDeviceOsVersions',
        'user_agent_names' => 'getUserAgentNames',
        'user_agent_originals' => 'getUserAgentOriginals',
        'utm_campaigns' => 'getUtmCampaigns',
        'utm_sources' => 'getUtmSources'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['communications_campaign_names'] = isset($data['communications_campaign_names']) ? $data['communications_campaign_names'] : null;
        $this->container['communications_email_subjects'] = isset($data['communications_email_subjects']) ? $data['communications_email_subjects'] : null;
        $this->container['communications_flow_names'] = isset($data['communications_flow_names']) ? $data['communications_flow_names'] : null;
        $this->container['geolocation_countries'] = isset($data['geolocation_countries']) ? $data['geolocation_countries'] : null;
        $this->container['geolocation_states'] = isset($data['geolocation_states']) ? $data['geolocation_states'] : null;
        $this->container['language_iso_codes'] = isset($data['language_iso_codes']) ? $data['language_iso_codes'] : null;
        $this->container['max_values'] = isset($data['max_values']) ? $data['max_values'] : null;
        $this->container['page_views'] = isset($data['page_views']) ? $data['page_views'] : null;
        $this->container['time_on_site_max'] = isset($data['time_on_site_max']) ? $data['time_on_site_max'] : null;
        $this->container['time_on_site_min'] = isset($data['time_on_site_min']) ? $data['time_on_site_min'] : null;
        $this->container['urls'] = isset($data['urls']) ? $data['urls'] : null;
        $this->container['user_agent_device_names'] = isset($data['user_agent_device_names']) ? $data['user_agent_device_names'] : null;
        $this->container['user_agent_device_os_names'] = isset($data['user_agent_device_os_names']) ? $data['user_agent_device_os_names'] : null;
        $this->container['user_agent_device_os_versions'] = isset($data['user_agent_device_os_versions']) ? $data['user_agent_device_os_versions'] : null;
        $this->container['user_agent_names'] = isset($data['user_agent_names']) ? $data['user_agent_names'] : null;
        $this->container['user_agent_originals'] = isset($data['user_agent_originals']) ? $data['user_agent_originals'] : null;
        $this->container['utm_campaigns'] = isset($data['utm_campaigns']) ? $data['utm_campaigns'] : null;
        $this->container['utm_sources'] = isset($data['utm_sources']) ? $data['utm_sources'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets communications_campaign_names
     *
     * @return string[]
     */
    public function getCommunicationsCampaignNames()
    {
        return $this->container['communications_campaign_names'];
    }

    /**
     * Sets communications_campaign_names
     *
     * @param string[] $communications_campaign_names communications_campaign_names
     *
     * @return $this
     */
    public function setCommunicationsCampaignNames($communications_campaign_names)
    {
        $this->container['communications_campaign_names'] = $communications_campaign_names;

        return $this;
    }

    /**
     * Gets communications_email_subjects
     *
     * @return string[]
     */
    public function getCommunicationsEmailSubjects()
    {
        return $this->container['communications_email_subjects'];
    }

    /**
     * Sets communications_email_subjects
     *
     * @param string[] $communications_email_subjects communications_email_subjects
     *
     * @return $this
     */
    public function setCommunicationsEmailSubjects($communications_email_subjects)
    {
        $this->container['communications_email_subjects'] = $communications_email_subjects;

        return $this;
    }

    /**
     * Gets communications_flow_names
     *
     * @return string[]
     */
    public function getCommunicationsFlowNames()
    {
        return $this->container['communications_flow_names'];
    }

    /**
     * Sets communications_flow_names
     *
     * @param string[] $communications_flow_names communications_flow_names
     *
     * @return $this
     */
    public function setCommunicationsFlowNames($communications_flow_names)
    {
        $this->container['communications_flow_names'] = $communications_flow_names;

        return $this;
    }

    /**
     * Gets geolocation_countries
     *
     * @return string[]
     */
    public function getGeolocationCountries()
    {
        return $this->container['geolocation_countries'];
    }

    /**
     * Sets geolocation_countries
     *
     * @param string[] $geolocation_countries geolocation_countries
     *
     * @return $this
     */
    public function setGeolocationCountries($geolocation_countries)
    {
        $this->container['geolocation_countries'] = $geolocation_countries;

        return $this;
    }

    /**
     * Gets geolocation_states
     *
     * @return string[]
     */
    public function getGeolocationStates()
    {
        return $this->container['geolocation_states'];
    }

    /**
     * Sets geolocation_states
     *
     * @param string[] $geolocation_states geolocation_states
     *
     * @return $this
     */
    public function setGeolocationStates($geolocation_states)
    {
        $this->container['geolocation_states'] = $geolocation_states;

        return $this;
    }

    /**
     * Gets language_iso_codes
     *
     * @return string[]
     */
    public function getLanguageIsoCodes()
    {
        return $this->container['language_iso_codes'];
    }

    /**
     * Sets language_iso_codes
     *
     * @param string[] $language_iso_codes language_iso_codes
     *
     * @return $this
     */
    public function setLanguageIsoCodes($language_iso_codes)
    {
        $this->container['language_iso_codes'] = $language_iso_codes;

        return $this;
    }

    /**
     * Gets max_values
     *
     * @return int
     */
    public function getMaxValues()
    {
        return $this->container['max_values'];
    }

    /**
     * Sets max_values
     *
     * @param int $max_values max_values
     *
     * @return $this
     */
    public function setMaxValues($max_values)
    {
        $this->container['max_values'] = $max_values;

        return $this;
    }

    /**
     * Gets page_views
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterValuesPageView[]
     */
    public function getPageViews()
    {
        return $this->container['page_views'];
    }

    /**
     * Sets page_views
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterValuesPageView[] $page_views page_views
     *
     * @return $this
     */
    public function setPageViews($page_views)
    {
        $this->container['page_views'] = $page_views;

        return $this;
    }

    /**
     * Gets time_on_site_max
     *
     * @return int
     */
    public function getTimeOnSiteMax()
    {
        return $this->container['time_on_site_max'];
    }

    /**
     * Sets time_on_site_max
     *
     * @param int $time_on_site_max time_on_site_max
     *
     * @return $this
     */
    public function setTimeOnSiteMax($time_on_site_max)
    {
        $this->container['time_on_site_max'] = $time_on_site_max;

        return $this;
    }

    /**
     * Gets time_on_site_min
     *
     * @return int
     */
    public function getTimeOnSiteMin()
    {
        return $this->container['time_on_site_min'];
    }

    /**
     * Sets time_on_site_min
     *
     * @param int $time_on_site_min time_on_site_min
     *
     * @return $this
     */
    public function setTimeOnSiteMin($time_on_site_min)
    {
        $this->container['time_on_site_min'] = $time_on_site_min;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return string[]
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param string[] $urls urls
     *
     * @return $this
     */
    public function setUrls($urls)
    {
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets user_agent_device_names
     *
     * @return string[]
     */
    public function getUserAgentDeviceNames()
    {
        return $this->container['user_agent_device_names'];
    }

    /**
     * Sets user_agent_device_names
     *
     * @param string[] $user_agent_device_names user_agent_device_names
     *
     * @return $this
     */
    public function setUserAgentDeviceNames($user_agent_device_names)
    {
        $this->container['user_agent_device_names'] = $user_agent_device_names;

        return $this;
    }

    /**
     * Gets user_agent_device_os_names
     *
     * @return string[]
     */
    public function getUserAgentDeviceOsNames()
    {
        return $this->container['user_agent_device_os_names'];
    }

    /**
     * Sets user_agent_device_os_names
     *
     * @param string[] $user_agent_device_os_names user_agent_device_os_names
     *
     * @return $this
     */
    public function setUserAgentDeviceOsNames($user_agent_device_os_names)
    {
        $this->container['user_agent_device_os_names'] = $user_agent_device_os_names;

        return $this;
    }

    /**
     * Gets user_agent_device_os_versions
     *
     * @return string[]
     */
    public function getUserAgentDeviceOsVersions()
    {
        return $this->container['user_agent_device_os_versions'];
    }

    /**
     * Sets user_agent_device_os_versions
     *
     * @param string[] $user_agent_device_os_versions user_agent_device_os_versions
     *
     * @return $this
     */
    public function setUserAgentDeviceOsVersions($user_agent_device_os_versions)
    {
        $this->container['user_agent_device_os_versions'] = $user_agent_device_os_versions;

        return $this;
    }

    /**
     * Gets user_agent_names
     *
     * @return string[]
     */
    public function getUserAgentNames()
    {
        return $this->container['user_agent_names'];
    }

    /**
     * Sets user_agent_names
     *
     * @param string[] $user_agent_names user_agent_names
     *
     * @return $this
     */
    public function setUserAgentNames($user_agent_names)
    {
        $this->container['user_agent_names'] = $user_agent_names;

        return $this;
    }

    /**
     * Gets user_agent_originals
     *
     * @return string[]
     */
    public function getUserAgentOriginals()
    {
        return $this->container['user_agent_originals'];
    }

    /**
     * Sets user_agent_originals
     *
     * @param string[] $user_agent_originals user_agent_originals
     *
     * @return $this
     */
    public function setUserAgentOriginals($user_agent_originals)
    {
        $this->container['user_agent_originals'] = $user_agent_originals;

        return $this;
    }

    /**
     * Gets utm_campaigns
     *
     * @return string[]
     */
    public function getUtmCampaigns()
    {
        return $this->container['utm_campaigns'];
    }

    /**
     * Sets utm_campaigns
     *
     * @param string[] $utm_campaigns utm_campaigns
     *
     * @return $this
     */
    public function setUtmCampaigns($utm_campaigns)
    {
        $this->container['utm_campaigns'] = $utm_campaigns;

        return $this;
    }

    /**
     * Gets utm_sources
     *
     * @return string[]
     */
    public function getUtmSources()
    {
        return $this->container['utm_sources'];
    }

    /**
     * Sets utm_sources
     *
     * @param string[] $utm_sources utm_sources
     *
     * @return $this
     */
    public function setUtmSources($utm_sources)
    {
        $this->container['utm_sources'] = $utm_sources;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


