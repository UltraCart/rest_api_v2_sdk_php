<?php
/**
 * ScreenRecordingFilterValues
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ScreenRecordingFilterValues Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScreenRecordingFilterValues implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScreenRecordingFilterValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'events' => '\ultracart\v2\models\ScreenRecordingFilterValuesEvent[]',
        'geolocation_countries' => 'string[]',
        'geolocation_states' => 'string[]',
        'max_values' => 'int',
        'urls' => 'string[]',
        'user_agent_device_names' => 'string[]',
        'user_agent_device_os_names' => 'string[]',
        'user_agent_device_os_versions' => 'string[]',
        'user_agent_names' => 'string[]',
        'user_agent_originals' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'events' => null,
        'geolocation_countries' => null,
        'geolocation_states' => null,
        'max_values' => 'int32',
        'urls' => null,
        'user_agent_device_names' => null,
        'user_agent_device_os_names' => null,
        'user_agent_device_os_versions' => null,
        'user_agent_names' => null,
        'user_agent_originals' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'events' => 'events',
        'geolocation_countries' => 'geolocation_countries',
        'geolocation_states' => 'geolocation_states',
        'max_values' => 'max_values',
        'urls' => 'urls',
        'user_agent_device_names' => 'user_agent_device_names',
        'user_agent_device_os_names' => 'user_agent_device_os_names',
        'user_agent_device_os_versions' => 'user_agent_device_os_versions',
        'user_agent_names' => 'user_agent_names',
        'user_agent_originals' => 'user_agent_originals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'events' => 'setEvents',
        'geolocation_countries' => 'setGeolocationCountries',
        'geolocation_states' => 'setGeolocationStates',
        'max_values' => 'setMaxValues',
        'urls' => 'setUrls',
        'user_agent_device_names' => 'setUserAgentDeviceNames',
        'user_agent_device_os_names' => 'setUserAgentDeviceOsNames',
        'user_agent_device_os_versions' => 'setUserAgentDeviceOsVersions',
        'user_agent_names' => 'setUserAgentNames',
        'user_agent_originals' => 'setUserAgentOriginals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'events' => 'getEvents',
        'geolocation_countries' => 'getGeolocationCountries',
        'geolocation_states' => 'getGeolocationStates',
        'max_values' => 'getMaxValues',
        'urls' => 'getUrls',
        'user_agent_device_names' => 'getUserAgentDeviceNames',
        'user_agent_device_os_names' => 'getUserAgentDeviceOsNames',
        'user_agent_device_os_versions' => 'getUserAgentDeviceOsVersions',
        'user_agent_names' => 'getUserAgentNames',
        'user_agent_originals' => 'getUserAgentOriginals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['geolocation_countries'] = isset($data['geolocation_countries']) ? $data['geolocation_countries'] : null;
        $this->container['geolocation_states'] = isset($data['geolocation_states']) ? $data['geolocation_states'] : null;
        $this->container['max_values'] = isset($data['max_values']) ? $data['max_values'] : null;
        $this->container['urls'] = isset($data['urls']) ? $data['urls'] : null;
        $this->container['user_agent_device_names'] = isset($data['user_agent_device_names']) ? $data['user_agent_device_names'] : null;
        $this->container['user_agent_device_os_names'] = isset($data['user_agent_device_os_names']) ? $data['user_agent_device_os_names'] : null;
        $this->container['user_agent_device_os_versions'] = isset($data['user_agent_device_os_versions']) ? $data['user_agent_device_os_versions'] : null;
        $this->container['user_agent_names'] = isset($data['user_agent_names']) ? $data['user_agent_names'] : null;
        $this->container['user_agent_originals'] = isset($data['user_agent_originals']) ? $data['user_agent_originals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets events
     *
     * @return \ultracart\v2\models\ScreenRecordingFilterValuesEvent[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \ultracart\v2\models\ScreenRecordingFilterValuesEvent[] $events events
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets geolocation_countries
     *
     * @return string[]
     */
    public function getGeolocationCountries()
    {
        return $this->container['geolocation_countries'];
    }

    /**
     * Sets geolocation_countries
     *
     * @param string[] $geolocation_countries geolocation_countries
     *
     * @return $this
     */
    public function setGeolocationCountries($geolocation_countries)
    {
        $this->container['geolocation_countries'] = $geolocation_countries;

        return $this;
    }

    /**
     * Gets geolocation_states
     *
     * @return string[]
     */
    public function getGeolocationStates()
    {
        return $this->container['geolocation_states'];
    }

    /**
     * Sets geolocation_states
     *
     * @param string[] $geolocation_states geolocation_states
     *
     * @return $this
     */
    public function setGeolocationStates($geolocation_states)
    {
        $this->container['geolocation_states'] = $geolocation_states;

        return $this;
    }

    /**
     * Gets max_values
     *
     * @return int
     */
    public function getMaxValues()
    {
        return $this->container['max_values'];
    }

    /**
     * Sets max_values
     *
     * @param int $max_values max_values
     *
     * @return $this
     */
    public function setMaxValues($max_values)
    {
        $this->container['max_values'] = $max_values;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return string[]
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param string[] $urls urls
     *
     * @return $this
     */
    public function setUrls($urls)
    {
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets user_agent_device_names
     *
     * @return string[]
     */
    public function getUserAgentDeviceNames()
    {
        return $this->container['user_agent_device_names'];
    }

    /**
     * Sets user_agent_device_names
     *
     * @param string[] $user_agent_device_names user_agent_device_names
     *
     * @return $this
     */
    public function setUserAgentDeviceNames($user_agent_device_names)
    {
        $this->container['user_agent_device_names'] = $user_agent_device_names;

        return $this;
    }

    /**
     * Gets user_agent_device_os_names
     *
     * @return string[]
     */
    public function getUserAgentDeviceOsNames()
    {
        return $this->container['user_agent_device_os_names'];
    }

    /**
     * Sets user_agent_device_os_names
     *
     * @param string[] $user_agent_device_os_names user_agent_device_os_names
     *
     * @return $this
     */
    public function setUserAgentDeviceOsNames($user_agent_device_os_names)
    {
        $this->container['user_agent_device_os_names'] = $user_agent_device_os_names;

        return $this;
    }

    /**
     * Gets user_agent_device_os_versions
     *
     * @return string[]
     */
    public function getUserAgentDeviceOsVersions()
    {
        return $this->container['user_agent_device_os_versions'];
    }

    /**
     * Sets user_agent_device_os_versions
     *
     * @param string[] $user_agent_device_os_versions user_agent_device_os_versions
     *
     * @return $this
     */
    public function setUserAgentDeviceOsVersions($user_agent_device_os_versions)
    {
        $this->container['user_agent_device_os_versions'] = $user_agent_device_os_versions;

        return $this;
    }

    /**
     * Gets user_agent_names
     *
     * @return string[]
     */
    public function getUserAgentNames()
    {
        return $this->container['user_agent_names'];
    }

    /**
     * Sets user_agent_names
     *
     * @param string[] $user_agent_names user_agent_names
     *
     * @return $this
     */
    public function setUserAgentNames($user_agent_names)
    {
        $this->container['user_agent_names'] = $user_agent_names;

        return $this;
    }

    /**
     * Gets user_agent_originals
     *
     * @return string[]
     */
    public function getUserAgentOriginals()
    {
        return $this->container['user_agent_originals'];
    }

    /**
     * Sets user_agent_originals
     *
     * @param string[] $user_agent_originals user_agent_originals
     *
     * @return $this
     */
    public function setUserAgentOriginals($user_agent_originals)
    {
        $this->container['user_agent_originals'] = $user_agent_originals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


