<?php
/**
 * TransactionEmailOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * TransactionEmailOption Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionEmailOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionEmailOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'merchant_email_delivery_option_oid' => 'int',
        'merchant_id' => 'string',
        'name' => 'string',
        'selected' => 'bool',
        'store_front_oid' => 'int',
        'template_display' => 'string',
        'template_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'merchant_email_delivery_option_oid' => 'int32',
        'merchant_id' => null,
        'name' => null,
        'selected' => null,
        'store_front_oid' => 'int32',
        'template_display' => null,
        'template_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'merchant_email_delivery_option_oid' => 'merchantEmailDeliveryOptionOid',
        'merchant_id' => 'merchantId',
        'name' => 'name',
        'selected' => 'selected',
        'store_front_oid' => 'storeFrontOid',
        'template_display' => 'templateDisplay',
        'template_type' => 'templateType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'merchant_email_delivery_option_oid' => 'setMerchantEmailDeliveryOptionOid',
        'merchant_id' => 'setMerchantId',
        'name' => 'setName',
        'selected' => 'setSelected',
        'store_front_oid' => 'setStoreFrontOid',
        'template_display' => 'setTemplateDisplay',
        'template_type' => 'setTemplateType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'merchant_email_delivery_option_oid' => 'getMerchantEmailDeliveryOptionOid',
        'merchant_id' => 'getMerchantId',
        'name' => 'getName',
        'selected' => 'getSelected',
        'store_front_oid' => 'getStoreFrontOid',
        'template_display' => 'getTemplateDisplay',
        'template_type' => 'getTemplateType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['merchant_email_delivery_option_oid'] = isset($data['merchant_email_delivery_option_oid']) ? $data['merchant_email_delivery_option_oid'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['selected'] = isset($data['selected']) ? $data['selected'] : null;
        $this->container['store_front_oid'] = isset($data['store_front_oid']) ? $data['store_front_oid'] : null;
        $this->container['template_display'] = isset($data['template_display']) ? $data['template_display'] : null;
        $this->container['template_type'] = isset($data['template_type']) ? $data['template_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets merchant_email_delivery_option_oid
     *
     * @return int
     */
    public function getMerchantEmailDeliveryOptionOid()
    {
        return $this->container['merchant_email_delivery_option_oid'];
    }

    /**
     * Sets merchant_email_delivery_option_oid
     *
     * @param int $merchant_email_delivery_option_oid merchant_email_delivery_option_oid
     *
     * @return $this
     */
    public function setMerchantEmailDeliveryOptionOid($merchant_email_delivery_option_oid)
    {
        $this->container['merchant_email_delivery_option_oid'] = $merchant_email_delivery_option_oid;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets selected
     *
     * @return bool
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * Sets selected
     *
     * @param bool $selected selected
     *
     * @return $this
     */
    public function setSelected($selected)
    {
        $this->container['selected'] = $selected;

        return $this;
    }

    /**
     * Gets store_front_oid
     *
     * @return int
     */
    public function getStoreFrontOid()
    {
        return $this->container['store_front_oid'];
    }

    /**
     * Sets store_front_oid
     *
     * @param int $store_front_oid store_front_oid
     *
     * @return $this
     */
    public function setStoreFrontOid($store_front_oid)
    {
        $this->container['store_front_oid'] = $store_front_oid;

        return $this;
    }

    /**
     * Gets template_display
     *
     * @return string
     */
    public function getTemplateDisplay()
    {
        return $this->container['template_display'];
    }

    /**
     * Sets template_display
     *
     * @param string $template_display template_display
     *
     * @return $this
     */
    public function setTemplateDisplay($template_display)
    {
        $this->container['template_display'] = $template_display;

        return $this;
    }

    /**
     * Gets template_type
     *
     * @return string
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }

    /**
     * Sets template_type
     *
     * @param string $template_type template_type
     *
     * @return $this
     */
    public function setTemplateType($template_type)
    {
        $this->container['template_type'] = $template_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


