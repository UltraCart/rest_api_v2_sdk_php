<?php
/**
 * OrderFraudScore
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderFraudScore Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderFraudScore implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderFraudScore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'anonymous_proxy' => 'bool',
        'bin_match' => 'string',
        'carder_email' => 'bool',
        'country_code' => 'string',
        'country_match' => 'bool',
        'customer_phone_in_billing_location' => 'string',
        'distance_km' => 'int',
        'free_email' => 'bool',
        'high_risk_country' => 'bool',
        'ip_city' => 'string',
        'ip_isp' => 'string',
        'ip_latitude' => 'string',
        'ip_longitude' => 'string',
        'ip_org' => 'string',
        'ip_region' => 'string',
        'proxy_score' => 'float',
        'score' => 'float',
        'ship_forwarder' => 'bool',
        'spam_score' => 'float',
        'transparent_proxy' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'anonymous_proxy' => null,
        'bin_match' => null,
        'carder_email' => null,
        'country_code' => null,
        'country_match' => null,
        'customer_phone_in_billing_location' => null,
        'distance_km' => 'int32',
        'free_email' => null,
        'high_risk_country' => null,
        'ip_city' => null,
        'ip_isp' => null,
        'ip_latitude' => null,
        'ip_longitude' => null,
        'ip_org' => null,
        'ip_region' => null,
        'proxy_score' => null,
        'score' => null,
        'ship_forwarder' => null,
        'spam_score' => null,
        'transparent_proxy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'anonymous_proxy' => 'anonymous_proxy',
        'bin_match' => 'bin_match',
        'carder_email' => 'carder_email',
        'country_code' => 'country_code',
        'country_match' => 'country_match',
        'customer_phone_in_billing_location' => 'customer_phone_in_billing_location',
        'distance_km' => 'distance_km',
        'free_email' => 'free_email',
        'high_risk_country' => 'high_risk_country',
        'ip_city' => 'ip_city',
        'ip_isp' => 'ip_isp',
        'ip_latitude' => 'ip_latitude',
        'ip_longitude' => 'ip_longitude',
        'ip_org' => 'ip_org',
        'ip_region' => 'ip_region',
        'proxy_score' => 'proxy_score',
        'score' => 'score',
        'ship_forwarder' => 'ship_forwarder',
        'spam_score' => 'spam_score',
        'transparent_proxy' => 'transparent_proxy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'anonymous_proxy' => 'setAnonymousProxy',
        'bin_match' => 'setBinMatch',
        'carder_email' => 'setCarderEmail',
        'country_code' => 'setCountryCode',
        'country_match' => 'setCountryMatch',
        'customer_phone_in_billing_location' => 'setCustomerPhoneInBillingLocation',
        'distance_km' => 'setDistanceKm',
        'free_email' => 'setFreeEmail',
        'high_risk_country' => 'setHighRiskCountry',
        'ip_city' => 'setIpCity',
        'ip_isp' => 'setIpIsp',
        'ip_latitude' => 'setIpLatitude',
        'ip_longitude' => 'setIpLongitude',
        'ip_org' => 'setIpOrg',
        'ip_region' => 'setIpRegion',
        'proxy_score' => 'setProxyScore',
        'score' => 'setScore',
        'ship_forwarder' => 'setShipForwarder',
        'spam_score' => 'setSpamScore',
        'transparent_proxy' => 'setTransparentProxy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'anonymous_proxy' => 'getAnonymousProxy',
        'bin_match' => 'getBinMatch',
        'carder_email' => 'getCarderEmail',
        'country_code' => 'getCountryCode',
        'country_match' => 'getCountryMatch',
        'customer_phone_in_billing_location' => 'getCustomerPhoneInBillingLocation',
        'distance_km' => 'getDistanceKm',
        'free_email' => 'getFreeEmail',
        'high_risk_country' => 'getHighRiskCountry',
        'ip_city' => 'getIpCity',
        'ip_isp' => 'getIpIsp',
        'ip_latitude' => 'getIpLatitude',
        'ip_longitude' => 'getIpLongitude',
        'ip_org' => 'getIpOrg',
        'ip_region' => 'getIpRegion',
        'proxy_score' => 'getProxyScore',
        'score' => 'getScore',
        'ship_forwarder' => 'getShipForwarder',
        'spam_score' => 'getSpamScore',
        'transparent_proxy' => 'getTransparentProxy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BIN_MATCH_NA = 'NA';
    public const BIN_MATCH_NO = 'No';
    public const BIN_MATCH_NOT_FOUND = 'NotFound';
    public const BIN_MATCH_YES = 'Yes';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBinMatchAllowableValues()
    {
        return [
            self::BIN_MATCH_NA,
            self::BIN_MATCH_NO,
            self::BIN_MATCH_NOT_FOUND,
            self::BIN_MATCH_YES,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['anonymous_proxy'] = $data['anonymous_proxy'] ?? null;
        $this->container['bin_match'] = $data['bin_match'] ?? null;
        $this->container['carder_email'] = $data['carder_email'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['country_match'] = $data['country_match'] ?? null;
        $this->container['customer_phone_in_billing_location'] = $data['customer_phone_in_billing_location'] ?? null;
        $this->container['distance_km'] = $data['distance_km'] ?? null;
        $this->container['free_email'] = $data['free_email'] ?? null;
        $this->container['high_risk_country'] = $data['high_risk_country'] ?? null;
        $this->container['ip_city'] = $data['ip_city'] ?? null;
        $this->container['ip_isp'] = $data['ip_isp'] ?? null;
        $this->container['ip_latitude'] = $data['ip_latitude'] ?? null;
        $this->container['ip_longitude'] = $data['ip_longitude'] ?? null;
        $this->container['ip_org'] = $data['ip_org'] ?? null;
        $this->container['ip_region'] = $data['ip_region'] ?? null;
        $this->container['proxy_score'] = $data['proxy_score'] ?? null;
        $this->container['score'] = $data['score'] ?? null;
        $this->container['ship_forwarder'] = $data['ship_forwarder'] ?? null;
        $this->container['spam_score'] = $data['spam_score'] ?? null;
        $this->container['transparent_proxy'] = $data['transparent_proxy'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBinMatchAllowableValues();
        if (!is_null($this->container['bin_match']) && !in_array($this->container['bin_match'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bin_match', must be one of '%s'",
                $this->container['bin_match'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets anonymous_proxy
     *
     * @return bool|null
     */
    public function getAnonymousProxy()
    {
        return $this->container['anonymous_proxy'];
    }

    /**
     * Sets anonymous_proxy
     *
     * @param bool|null $anonymous_proxy True if the IP address is a known anonymous proxy server
     *
     * @return self
     */
    public function setAnonymousProxy($anonymous_proxy)
    {
        $this->container['anonymous_proxy'] = $anonymous_proxy;

        return $this;
    }

    /**
     * Gets bin_match
     *
     * @return string|null
     */
    public function getBinMatch()
    {
        return $this->container['bin_match'];
    }

    /**
     * Sets bin_match
     *
     * @param string|null $bin_match Whether the BIN (first six digits) matched the country
     *
     * @return self
     */
    public function setBinMatch($bin_match)
    {
        $allowedValues = $this->getBinMatchAllowableValues();
        if (!is_null($bin_match) && !in_array($bin_match, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bin_match', must be one of '%s'",
                    $bin_match,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bin_match'] = $bin_match;

        return $this;
    }

    /**
     * Gets carder_email
     *
     * @return bool|null
     */
    public function getCarderEmail()
    {
        return $this->container['carder_email'];
    }

    /**
     * Sets carder_email
     *
     * @param bool|null $carder_email True if the email address belongs to a known credit card fraudster
     *
     * @return self
     */
    public function setCarderEmail($carder_email)
    {
        $this->container['carder_email'] = $carder_email;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Country code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_match
     *
     * @return bool|null
     */
    public function getCountryMatch()
    {
        return $this->container['country_match'];
    }

    /**
     * Sets country_match
     *
     * @param bool|null $country_match Country code matches BIN country
     *
     * @return self
     */
    public function setCountryMatch($country_match)
    {
        $this->container['country_match'] = $country_match;

        return $this;
    }

    /**
     * Gets customer_phone_in_billing_location
     *
     * @return string|null
     */
    public function getCustomerPhoneInBillingLocation()
    {
        return $this->container['customer_phone_in_billing_location'];
    }

    /**
     * Sets customer_phone_in_billing_location
     *
     * @param string|null $customer_phone_in_billing_location Whether the customer's phone number is located in the area of the billing address
     *
     * @return self
     */
    public function setCustomerPhoneInBillingLocation($customer_phone_in_billing_location)
    {
        $this->container['customer_phone_in_billing_location'] = $customer_phone_in_billing_location;

        return $this;
    }

    /**
     * Gets distance_km
     *
     * @return int|null
     */
    public function getDistanceKm()
    {
        return $this->container['distance_km'];
    }

    /**
     * Sets distance_km
     *
     * @param int|null $distance_km Distance in kilometers between the IP address and the BIN
     *
     * @return self
     */
    public function setDistanceKm($distance_km)
    {
        $this->container['distance_km'] = $distance_km;

        return $this;
    }

    /**
     * Gets free_email
     *
     * @return bool|null
     */
    public function getFreeEmail()
    {
        return $this->container['free_email'];
    }

    /**
     * Sets free_email
     *
     * @param bool|null $free_email True if the email address is for a free service like gmail.com
     *
     * @return self
     */
    public function setFreeEmail($free_email)
    {
        $this->container['free_email'] = $free_email;

        return $this;
    }

    /**
     * Gets high_risk_country
     *
     * @return bool|null
     */
    public function getHighRiskCountry()
    {
        return $this->container['high_risk_country'];
    }

    /**
     * Sets high_risk_country
     *
     * @param bool|null $high_risk_country True if the customer is in a high risk country known for internet fraud
     *
     * @return self
     */
    public function setHighRiskCountry($high_risk_country)
    {
        $this->container['high_risk_country'] = $high_risk_country;

        return $this;
    }

    /**
     * Gets ip_city
     *
     * @return string|null
     */
    public function getIpCity()
    {
        return $this->container['ip_city'];
    }

    /**
     * Sets ip_city
     *
     * @param string|null $ip_city City associated with the IP address
     *
     * @return self
     */
    public function setIpCity($ip_city)
    {
        $this->container['ip_city'] = $ip_city;

        return $this;
    }

    /**
     * Gets ip_isp
     *
     * @return string|null
     */
    public function getIpIsp()
    {
        return $this->container['ip_isp'];
    }

    /**
     * Sets ip_isp
     *
     * @param string|null $ip_isp ISP that owns the IP address
     *
     * @return self
     */
    public function setIpIsp($ip_isp)
    {
        $this->container['ip_isp'] = $ip_isp;

        return $this;
    }

    /**
     * Gets ip_latitude
     *
     * @return string|null
     */
    public function getIpLatitude()
    {
        return $this->container['ip_latitude'];
    }

    /**
     * Sets ip_latitude
     *
     * @param string|null $ip_latitude Approximate latitude associated with the IP address
     *
     * @return self
     */
    public function setIpLatitude($ip_latitude)
    {
        $this->container['ip_latitude'] = $ip_latitude;

        return $this;
    }

    /**
     * Gets ip_longitude
     *
     * @return string|null
     */
    public function getIpLongitude()
    {
        return $this->container['ip_longitude'];
    }

    /**
     * Sets ip_longitude
     *
     * @param string|null $ip_longitude Approximate longitude associated with the IP address
     *
     * @return self
     */
    public function setIpLongitude($ip_longitude)
    {
        $this->container['ip_longitude'] = $ip_longitude;

        return $this;
    }

    /**
     * Gets ip_org
     *
     * @return string|null
     */
    public function getIpOrg()
    {
        return $this->container['ip_org'];
    }

    /**
     * Sets ip_org
     *
     * @param string|null $ip_org Organization that owns the IP address
     *
     * @return self
     */
    public function setIpOrg($ip_org)
    {
        $this->container['ip_org'] = $ip_org;

        return $this;
    }

    /**
     * Gets ip_region
     *
     * @return string|null
     */
    public function getIpRegion()
    {
        return $this->container['ip_region'];
    }

    /**
     * Sets ip_region
     *
     * @param string|null $ip_region State/region associated with the IP address
     *
     * @return self
     */
    public function setIpRegion($ip_region)
    {
        $this->container['ip_region'] = $ip_region;

        return $this;
    }

    /**
     * Gets proxy_score
     *
     * @return float|null
     */
    public function getProxyScore()
    {
        return $this->container['proxy_score'];
    }

    /**
     * Sets proxy_score
     *
     * @param float|null $proxy_score Likelihood of the IP address being a proxy server
     *
     * @return self
     */
    public function setProxyScore($proxy_score)
    {
        $this->container['proxy_score'] = $proxy_score;

        return $this;
    }

    /**
     * Gets score
     *
     * @return float|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param float|null $score Overall score.  This is the score that is compared to see if the order is rejected or held for review by the fraud filter rules.
     *
     * @return self
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets ship_forwarder
     *
     * @return bool|null
     */
    public function getShipForwarder()
    {
        return $this->container['ship_forwarder'];
    }

    /**
     * Sets ship_forwarder
     *
     * @param bool|null $ship_forwarder True if the address is a known ship forwarding company
     *
     * @return self
     */
    public function setShipForwarder($ship_forwarder)
    {
        $this->container['ship_forwarder'] = $ship_forwarder;

        return $this;
    }

    /**
     * Gets spam_score
     *
     * @return float|null
     */
    public function getSpamScore()
    {
        return $this->container['spam_score'];
    }

    /**
     * Sets spam_score
     *
     * @param float|null $spam_score Likelihood of the email address being associated with a spammer
     *
     * @return self
     */
    public function setSpamScore($spam_score)
    {
        $this->container['spam_score'] = $spam_score;

        return $this;
    }

    /**
     * Gets transparent_proxy
     *
     * @return bool|null
     */
    public function getTransparentProxy()
    {
        return $this->container['transparent_proxy'];
    }

    /**
     * Sets transparent_proxy
     *
     * @param bool|null $transparent_proxy True if the IP address that placed the order is a transparent proxy server
     *
     * @return self
     */
    public function setTransparentProxy($transparent_proxy)
    {
        $this->container['transparent_proxy'] = $transparent_proxy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


