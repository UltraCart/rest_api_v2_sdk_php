<?php
/**
 * EmailPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * EmailPlan Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_customers' => 'int',
        'additional_emails' => 'int',
        'allow_list_import' => 'bool',
        'allow_tracking_emails' => 'bool',
        'customer_tiers' => '\ultracart\v2\models\EmailPlanAdditional[]',
        'initial_sending_limits' => 'int',
        'plan_customers' => 'int',
        'plan_emails' => 'int',
        'plan_name' => 'string',
        'plan_name_formatted' => 'string',
        'require_order_within_last_days' => 'int',
        'revenue_percent' => 'int',
        'spam_percent_limit' => 'int',
        'total_customers' => 'int',
        'total_emails' => 'int',
        'upgrade_to' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_customers' => 'int32',
        'additional_emails' => 'int32',
        'allow_list_import' => null,
        'allow_tracking_emails' => null,
        'customer_tiers' => null,
        'initial_sending_limits' => 'int32',
        'plan_customers' => 'int32',
        'plan_emails' => 'int32',
        'plan_name' => null,
        'plan_name_formatted' => null,
        'require_order_within_last_days' => 'int32',
        'revenue_percent' => 'int32',
        'spam_percent_limit' => 'int32',
        'total_customers' => 'int32',
        'total_emails' => 'int32',
        'upgrade_to' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_customers' => 'additional_customers',
        'additional_emails' => 'additional_emails',
        'allow_list_import' => 'allow_list_import',
        'allow_tracking_emails' => 'allow_tracking_emails',
        'customer_tiers' => 'customer_tiers',
        'initial_sending_limits' => 'initial_sending_limits',
        'plan_customers' => 'plan_customers',
        'plan_emails' => 'plan_emails',
        'plan_name' => 'plan_name',
        'plan_name_formatted' => 'plan_name_formatted',
        'require_order_within_last_days' => 'require_order_within_last_days',
        'revenue_percent' => 'revenue_percent',
        'spam_percent_limit' => 'spam_percent_limit',
        'total_customers' => 'total_customers',
        'total_emails' => 'total_emails',
        'upgrade_to' => 'upgrade_to'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_customers' => 'setAdditionalCustomers',
        'additional_emails' => 'setAdditionalEmails',
        'allow_list_import' => 'setAllowListImport',
        'allow_tracking_emails' => 'setAllowTrackingEmails',
        'customer_tiers' => 'setCustomerTiers',
        'initial_sending_limits' => 'setInitialSendingLimits',
        'plan_customers' => 'setPlanCustomers',
        'plan_emails' => 'setPlanEmails',
        'plan_name' => 'setPlanName',
        'plan_name_formatted' => 'setPlanNameFormatted',
        'require_order_within_last_days' => 'setRequireOrderWithinLastDays',
        'revenue_percent' => 'setRevenuePercent',
        'spam_percent_limit' => 'setSpamPercentLimit',
        'total_customers' => 'setTotalCustomers',
        'total_emails' => 'setTotalEmails',
        'upgrade_to' => 'setUpgradeTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_customers' => 'getAdditionalCustomers',
        'additional_emails' => 'getAdditionalEmails',
        'allow_list_import' => 'getAllowListImport',
        'allow_tracking_emails' => 'getAllowTrackingEmails',
        'customer_tiers' => 'getCustomerTiers',
        'initial_sending_limits' => 'getInitialSendingLimits',
        'plan_customers' => 'getPlanCustomers',
        'plan_emails' => 'getPlanEmails',
        'plan_name' => 'getPlanName',
        'plan_name_formatted' => 'getPlanNameFormatted',
        'require_order_within_last_days' => 'getRequireOrderWithinLastDays',
        'revenue_percent' => 'getRevenuePercent',
        'spam_percent_limit' => 'getSpamPercentLimit',
        'total_customers' => 'getTotalCustomers',
        'total_emails' => 'getTotalEmails',
        'upgrade_to' => 'getUpgradeTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_customers'] = isset($data['additional_customers']) ? $data['additional_customers'] : null;
        $this->container['additional_emails'] = isset($data['additional_emails']) ? $data['additional_emails'] : null;
        $this->container['allow_list_import'] = isset($data['allow_list_import']) ? $data['allow_list_import'] : null;
        $this->container['allow_tracking_emails'] = isset($data['allow_tracking_emails']) ? $data['allow_tracking_emails'] : null;
        $this->container['customer_tiers'] = isset($data['customer_tiers']) ? $data['customer_tiers'] : null;
        $this->container['initial_sending_limits'] = isset($data['initial_sending_limits']) ? $data['initial_sending_limits'] : null;
        $this->container['plan_customers'] = isset($data['plan_customers']) ? $data['plan_customers'] : null;
        $this->container['plan_emails'] = isset($data['plan_emails']) ? $data['plan_emails'] : null;
        $this->container['plan_name'] = isset($data['plan_name']) ? $data['plan_name'] : null;
        $this->container['plan_name_formatted'] = isset($data['plan_name_formatted']) ? $data['plan_name_formatted'] : null;
        $this->container['require_order_within_last_days'] = isset($data['require_order_within_last_days']) ? $data['require_order_within_last_days'] : null;
        $this->container['revenue_percent'] = isset($data['revenue_percent']) ? $data['revenue_percent'] : null;
        $this->container['spam_percent_limit'] = isset($data['spam_percent_limit']) ? $data['spam_percent_limit'] : null;
        $this->container['total_customers'] = isset($data['total_customers']) ? $data['total_customers'] : null;
        $this->container['total_emails'] = isset($data['total_emails']) ? $data['total_emails'] : null;
        $this->container['upgrade_to'] = isset($data['upgrade_to']) ? $data['upgrade_to'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_customers
     *
     * @return int
     */
    public function getAdditionalCustomers()
    {
        return $this->container['additional_customers'];
    }

    /**
     * Sets additional_customers
     *
     * @param int $additional_customers additional_customers
     *
     * @return $this
     */
    public function setAdditionalCustomers($additional_customers)
    {
        $this->container['additional_customers'] = $additional_customers;

        return $this;
    }

    /**
     * Gets additional_emails
     *
     * @return int
     */
    public function getAdditionalEmails()
    {
        return $this->container['additional_emails'];
    }

    /**
     * Sets additional_emails
     *
     * @param int $additional_emails additional_emails
     *
     * @return $this
     */
    public function setAdditionalEmails($additional_emails)
    {
        $this->container['additional_emails'] = $additional_emails;

        return $this;
    }

    /**
     * Gets allow_list_import
     *
     * @return bool
     */
    public function getAllowListImport()
    {
        return $this->container['allow_list_import'];
    }

    /**
     * Sets allow_list_import
     *
     * @param bool $allow_list_import allow_list_import
     *
     * @return $this
     */
    public function setAllowListImport($allow_list_import)
    {
        $this->container['allow_list_import'] = $allow_list_import;

        return $this;
    }

    /**
     * Gets allow_tracking_emails
     *
     * @return bool
     */
    public function getAllowTrackingEmails()
    {
        return $this->container['allow_tracking_emails'];
    }

    /**
     * Sets allow_tracking_emails
     *
     * @param bool $allow_tracking_emails allow_tracking_emails
     *
     * @return $this
     */
    public function setAllowTrackingEmails($allow_tracking_emails)
    {
        $this->container['allow_tracking_emails'] = $allow_tracking_emails;

        return $this;
    }

    /**
     * Gets customer_tiers
     *
     * @return \ultracart\v2\models\EmailPlanAdditional[]
     */
    public function getCustomerTiers()
    {
        return $this->container['customer_tiers'];
    }

    /**
     * Sets customer_tiers
     *
     * @param \ultracart\v2\models\EmailPlanAdditional[] $customer_tiers customer_tiers
     *
     * @return $this
     */
    public function setCustomerTiers($customer_tiers)
    {
        $this->container['customer_tiers'] = $customer_tiers;

        return $this;
    }

    /**
     * Gets initial_sending_limits
     *
     * @return int
     */
    public function getInitialSendingLimits()
    {
        return $this->container['initial_sending_limits'];
    }

    /**
     * Sets initial_sending_limits
     *
     * @param int $initial_sending_limits initial_sending_limits
     *
     * @return $this
     */
    public function setInitialSendingLimits($initial_sending_limits)
    {
        $this->container['initial_sending_limits'] = $initial_sending_limits;

        return $this;
    }

    /**
     * Gets plan_customers
     *
     * @return int
     */
    public function getPlanCustomers()
    {
        return $this->container['plan_customers'];
    }

    /**
     * Sets plan_customers
     *
     * @param int $plan_customers plan_customers
     *
     * @return $this
     */
    public function setPlanCustomers($plan_customers)
    {
        $this->container['plan_customers'] = $plan_customers;

        return $this;
    }

    /**
     * Gets plan_emails
     *
     * @return int
     */
    public function getPlanEmails()
    {
        return $this->container['plan_emails'];
    }

    /**
     * Sets plan_emails
     *
     * @param int $plan_emails plan_emails
     *
     * @return $this
     */
    public function setPlanEmails($plan_emails)
    {
        $this->container['plan_emails'] = $plan_emails;

        return $this;
    }

    /**
     * Gets plan_name
     *
     * @return string
     */
    public function getPlanName()
    {
        return $this->container['plan_name'];
    }

    /**
     * Sets plan_name
     *
     * @param string $plan_name plan_name
     *
     * @return $this
     */
    public function setPlanName($plan_name)
    {
        $this->container['plan_name'] = $plan_name;

        return $this;
    }

    /**
     * Gets plan_name_formatted
     *
     * @return string
     */
    public function getPlanNameFormatted()
    {
        return $this->container['plan_name_formatted'];
    }

    /**
     * Sets plan_name_formatted
     *
     * @param string $plan_name_formatted plan_name_formatted
     *
     * @return $this
     */
    public function setPlanNameFormatted($plan_name_formatted)
    {
        $this->container['plan_name_formatted'] = $plan_name_formatted;

        return $this;
    }

    /**
     * Gets require_order_within_last_days
     *
     * @return int
     */
    public function getRequireOrderWithinLastDays()
    {
        return $this->container['require_order_within_last_days'];
    }

    /**
     * Sets require_order_within_last_days
     *
     * @param int $require_order_within_last_days require_order_within_last_days
     *
     * @return $this
     */
    public function setRequireOrderWithinLastDays($require_order_within_last_days)
    {
        $this->container['require_order_within_last_days'] = $require_order_within_last_days;

        return $this;
    }

    /**
     * Gets revenue_percent
     *
     * @return int
     */
    public function getRevenuePercent()
    {
        return $this->container['revenue_percent'];
    }

    /**
     * Sets revenue_percent
     *
     * @param int $revenue_percent revenue_percent
     *
     * @return $this
     */
    public function setRevenuePercent($revenue_percent)
    {
        $this->container['revenue_percent'] = $revenue_percent;

        return $this;
    }

    /**
     * Gets spam_percent_limit
     *
     * @return int
     */
    public function getSpamPercentLimit()
    {
        return $this->container['spam_percent_limit'];
    }

    /**
     * Sets spam_percent_limit
     *
     * @param int $spam_percent_limit spam_percent_limit
     *
     * @return $this
     */
    public function setSpamPercentLimit($spam_percent_limit)
    {
        $this->container['spam_percent_limit'] = $spam_percent_limit;

        return $this;
    }

    /**
     * Gets total_customers
     *
     * @return int
     */
    public function getTotalCustomers()
    {
        return $this->container['total_customers'];
    }

    /**
     * Sets total_customers
     *
     * @param int $total_customers total_customers
     *
     * @return $this
     */
    public function setTotalCustomers($total_customers)
    {
        $this->container['total_customers'] = $total_customers;

        return $this;
    }

    /**
     * Gets total_emails
     *
     * @return int
     */
    public function getTotalEmails()
    {
        return $this->container['total_emails'];
    }

    /**
     * Sets total_emails
     *
     * @param int $total_emails total_emails
     *
     * @return $this
     */
    public function setTotalEmails($total_emails)
    {
        $this->container['total_emails'] = $total_emails;

        return $this;
    }

    /**
     * Gets upgrade_to
     *
     * @return int
     */
    public function getUpgradeTo()
    {
        return $this->container['upgrade_to'];
    }

    /**
     * Sets upgrade_to
     *
     * @param int $upgrade_to upgrade_to
     *
     * @return $this
     */
    public function setUpgradeTo($upgrade_to)
    {
        $this->container['upgrade_to'] = $upgrade_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


