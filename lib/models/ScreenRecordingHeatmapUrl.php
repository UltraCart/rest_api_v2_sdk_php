<?php
/**
 * ScreenRecordingHeatmapUrl
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ScreenRecordingHeatmapUrl Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScreenRecordingHeatmapUrl implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScreenRecordingHeatmapUrl';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'histogram_data' => 'int[]',
        'histogram_interval' => 'string',
        'histogram_start_dts' => 'string',
        'page_rank' => 'int',
        'session_count' => 'int',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'histogram_data' => null,
        'histogram_interval' => null,
        'histogram_start_dts' => null,
        'page_rank' => 'int32',
        'session_count' => 'int32',
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'histogram_data' => 'histogram_data',
        'histogram_interval' => 'histogram_interval',
        'histogram_start_dts' => 'histogram_start_dts',
        'page_rank' => 'page_rank',
        'session_count' => 'session_count',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'histogram_data' => 'setHistogramData',
        'histogram_interval' => 'setHistogramInterval',
        'histogram_start_dts' => 'setHistogramStartDts',
        'page_rank' => 'setPageRank',
        'session_count' => 'setSessionCount',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'histogram_data' => 'getHistogramData',
        'histogram_interval' => 'getHistogramInterval',
        'histogram_start_dts' => 'getHistogramStartDts',
        'page_rank' => 'getPageRank',
        'session_count' => 'getSessionCount',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['histogram_data'] = isset($data['histogram_data']) ? $data['histogram_data'] : null;
        $this->container['histogram_interval'] = isset($data['histogram_interval']) ? $data['histogram_interval'] : null;
        $this->container['histogram_start_dts'] = isset($data['histogram_start_dts']) ? $data['histogram_start_dts'] : null;
        $this->container['page_rank'] = isset($data['page_rank']) ? $data['page_rank'] : null;
        $this->container['session_count'] = isset($data['session_count']) ? $data['session_count'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets histogram_data
     *
     * @return int[]
     */
    public function getHistogramData()
    {
        return $this->container['histogram_data'];
    }

    /**
     * Sets histogram_data
     *
     * @param int[] $histogram_data histogram_data
     *
     * @return $this
     */
    public function setHistogramData($histogram_data)
    {
        $this->container['histogram_data'] = $histogram_data;

        return $this;
    }

    /**
     * Gets histogram_interval
     *
     * @return string
     */
    public function getHistogramInterval()
    {
        return $this->container['histogram_interval'];
    }

    /**
     * Sets histogram_interval
     *
     * @param string $histogram_interval histogram_interval
     *
     * @return $this
     */
    public function setHistogramInterval($histogram_interval)
    {
        $this->container['histogram_interval'] = $histogram_interval;

        return $this;
    }

    /**
     * Gets histogram_start_dts
     *
     * @return string
     */
    public function getHistogramStartDts()
    {
        return $this->container['histogram_start_dts'];
    }

    /**
     * Sets histogram_start_dts
     *
     * @param string $histogram_start_dts histogram_start_dts
     *
     * @return $this
     */
    public function setHistogramStartDts($histogram_start_dts)
    {
        $this->container['histogram_start_dts'] = $histogram_start_dts;

        return $this;
    }

    /**
     * Gets page_rank
     *
     * @return int
     */
    public function getPageRank()
    {
        return $this->container['page_rank'];
    }

    /**
     * Sets page_rank
     *
     * @param int $page_rank page_rank
     *
     * @return $this
     */
    public function setPageRank($page_rank)
    {
        $this->container['page_rank'] = $page_rank;

        return $this;
    }

    /**
     * Gets session_count
     *
     * @return int
     */
    public function getSessionCount()
    {
        return $this->container['session_count'];
    }

    /**
     * Sets session_count
     *
     * @param int $session_count session_count
     *
     * @return $this
     */
    public function setSessionCount($session_count)
    {
        $this->container['session_count'] = $session_count;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


