<?php
/**
 * AutoOrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * AutoOrderItem Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AutoOrderItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AutoOrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'arbitrary_item_id' => 'string',
        'arbitrary_percentage_discount' => 'float',
        'arbitrary_quantity' => 'float',
        'arbitrary_schedule_days' => 'int',
        'arbitrary_unit_cost' => 'float',
        'arbitrary_unit_cost_remaining_orders' => 'int',
        'frequency' => 'string',
        'last_order_dts' => 'string',
        'life_time_value' => 'float',
        'next_preshipment_notice_dts' => 'string',
        'next_shipment_dts' => 'string',
        'no_order_after_dts' => 'string',
        'number_of_rebills' => 'int',
        'options' => '\ultracart\v2\models\AutoOrderItemOption[]',
        'original_item_id' => 'string',
        'original_quantity' => 'float',
        'preshipment_notice_sent' => 'bool',
        'rebill_value' => 'float',
        'remaining_repeat_count' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'arbitrary_item_id' => 'arbitrary_item_id',
        'arbitrary_percentage_discount' => 'arbitrary_percentage_discount',
        'arbitrary_quantity' => 'arbitrary_quantity',
        'arbitrary_schedule_days' => 'arbitrary_schedule_days',
        'arbitrary_unit_cost' => 'arbitrary_unit_cost',
        'arbitrary_unit_cost_remaining_orders' => 'arbitrary_unit_cost_remaining_orders',
        'frequency' => 'frequency',
        'last_order_dts' => 'last_order_dts',
        'life_time_value' => 'life_time_value',
        'next_preshipment_notice_dts' => 'next_preshipment_notice_dts',
        'next_shipment_dts' => 'next_shipment_dts',
        'no_order_after_dts' => 'no_order_after_dts',
        'number_of_rebills' => 'number_of_rebills',
        'options' => 'options',
        'original_item_id' => 'original_item_id',
        'original_quantity' => 'original_quantity',
        'preshipment_notice_sent' => 'preshipment_notice_sent',
        'rebill_value' => 'rebill_value',
        'remaining_repeat_count' => 'remaining_repeat_count'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'arbitrary_item_id' => 'setArbitraryItemId',
        'arbitrary_percentage_discount' => 'setArbitraryPercentageDiscount',
        'arbitrary_quantity' => 'setArbitraryQuantity',
        'arbitrary_schedule_days' => 'setArbitraryScheduleDays',
        'arbitrary_unit_cost' => 'setArbitraryUnitCost',
        'arbitrary_unit_cost_remaining_orders' => 'setArbitraryUnitCostRemainingOrders',
        'frequency' => 'setFrequency',
        'last_order_dts' => 'setLastOrderDts',
        'life_time_value' => 'setLifeTimeValue',
        'next_preshipment_notice_dts' => 'setNextPreshipmentNoticeDts',
        'next_shipment_dts' => 'setNextShipmentDts',
        'no_order_after_dts' => 'setNoOrderAfterDts',
        'number_of_rebills' => 'setNumberOfRebills',
        'options' => 'setOptions',
        'original_item_id' => 'setOriginalItemId',
        'original_quantity' => 'setOriginalQuantity',
        'preshipment_notice_sent' => 'setPreshipmentNoticeSent',
        'rebill_value' => 'setRebillValue',
        'remaining_repeat_count' => 'setRemainingRepeatCount'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'arbitrary_item_id' => 'getArbitraryItemId',
        'arbitrary_percentage_discount' => 'getArbitraryPercentageDiscount',
        'arbitrary_quantity' => 'getArbitraryQuantity',
        'arbitrary_schedule_days' => 'getArbitraryScheduleDays',
        'arbitrary_unit_cost' => 'getArbitraryUnitCost',
        'arbitrary_unit_cost_remaining_orders' => 'getArbitraryUnitCostRemainingOrders',
        'frequency' => 'getFrequency',
        'last_order_dts' => 'getLastOrderDts',
        'life_time_value' => 'getLifeTimeValue',
        'next_preshipment_notice_dts' => 'getNextPreshipmentNoticeDts',
        'next_shipment_dts' => 'getNextShipmentDts',
        'no_order_after_dts' => 'getNoOrderAfterDts',
        'number_of_rebills' => 'getNumberOfRebills',
        'options' => 'getOptions',
        'original_item_id' => 'getOriginalItemId',
        'original_quantity' => 'getOriginalQuantity',
        'preshipment_notice_sent' => 'getPreshipmentNoticeSent',
        'rebill_value' => 'getRebillValue',
        'remaining_repeat_count' => 'getRemainingRepeatCount'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const FREQUENCY_WEEKLY = 'Weekly';
    const FREQUENCY_BIWEEKLY = 'Biweekly';
    const FREQUENCY_EVERY = 'Every...';
    const FREQUENCY_EVERY_10_DAYS = 'Every 10 Days';
    const FREQUENCY_EVERY_24_DAYS = 'Every 24 Days';
    const FREQUENCY_EVERY_28_DAYS = 'Every 28 Days';
    const FREQUENCY_MONTHLY = 'Monthly';
    const FREQUENCY_EVERY_45_DAYS = 'Every 45 Days';
    const FREQUENCY_EVERY_2_MONTHS = 'Every 2 Months';
    const FREQUENCY_EVERY_3_MONTHS = 'Every 3 Months';
    const FREQUENCY_EVERY_4_MONTHS = 'Every 4 Months';
    const FREQUENCY_EVERY_6_MONTHS = 'Every 6 Months';
    const FREQUENCY_YEARLY = 'Yearly';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFrequencyAllowableValues()
    {
        return [
            self::FREQUENCY_WEEKLY,
            self::FREQUENCY_BIWEEKLY,
            self::FREQUENCY_EVERY,
            self::FREQUENCY_EVERY_10_DAYS,
            self::FREQUENCY_EVERY_24_DAYS,
            self::FREQUENCY_EVERY_28_DAYS,
            self::FREQUENCY_MONTHLY,
            self::FREQUENCY_EVERY_45_DAYS,
            self::FREQUENCY_EVERY_2_MONTHS,
            self::FREQUENCY_EVERY_3_MONTHS,
            self::FREQUENCY_EVERY_4_MONTHS,
            self::FREQUENCY_EVERY_6_MONTHS,
            self::FREQUENCY_YEARLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arbitrary_item_id'] = isset($data['arbitrary_item_id']) ? $data['arbitrary_item_id'] : null;
        $this->container['arbitrary_percentage_discount'] = isset($data['arbitrary_percentage_discount']) ? $data['arbitrary_percentage_discount'] : null;
        $this->container['arbitrary_quantity'] = isset($data['arbitrary_quantity']) ? $data['arbitrary_quantity'] : null;
        $this->container['arbitrary_schedule_days'] = isset($data['arbitrary_schedule_days']) ? $data['arbitrary_schedule_days'] : null;
        $this->container['arbitrary_unit_cost'] = isset($data['arbitrary_unit_cost']) ? $data['arbitrary_unit_cost'] : null;
        $this->container['arbitrary_unit_cost_remaining_orders'] = isset($data['arbitrary_unit_cost_remaining_orders']) ? $data['arbitrary_unit_cost_remaining_orders'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['last_order_dts'] = isset($data['last_order_dts']) ? $data['last_order_dts'] : null;
        $this->container['life_time_value'] = isset($data['life_time_value']) ? $data['life_time_value'] : null;
        $this->container['next_preshipment_notice_dts'] = isset($data['next_preshipment_notice_dts']) ? $data['next_preshipment_notice_dts'] : null;
        $this->container['next_shipment_dts'] = isset($data['next_shipment_dts']) ? $data['next_shipment_dts'] : null;
        $this->container['no_order_after_dts'] = isset($data['no_order_after_dts']) ? $data['no_order_after_dts'] : null;
        $this->container['number_of_rebills'] = isset($data['number_of_rebills']) ? $data['number_of_rebills'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['original_item_id'] = isset($data['original_item_id']) ? $data['original_item_id'] : null;
        $this->container['original_quantity'] = isset($data['original_quantity']) ? $data['original_quantity'] : null;
        $this->container['preshipment_notice_sent'] = isset($data['preshipment_notice_sent']) ? $data['preshipment_notice_sent'] : null;
        $this->container['rebill_value'] = isset($data['rebill_value']) ? $data['rebill_value'] : null;
        $this->container['remaining_repeat_count'] = isset($data['remaining_repeat_count']) ? $data['remaining_repeat_count'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("Weekly", "Biweekly", "Every...", "Every 10 Days", "Every 24 Days", "Every 28 Days", "Monthly", "Every 45 Days", "Every 2 Months", "Every 3 Months", "Every 4 Months", "Every 6 Months", "Yearly");
        if (!in_array($this->container['frequency'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'frequency', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("Weekly", "Biweekly", "Every...", "Every 10 Days", "Every 24 Days", "Every 28 Days", "Monthly", "Every 45 Days", "Every 2 Months", "Every 3 Months", "Every 4 Months", "Every 6 Months", "Yearly");
        if (!in_array($this->container['frequency'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets arbitrary_item_id
     * @return string
     */
    public function getArbitraryItemId()
    {
        return $this->container['arbitrary_item_id'];
    }

    /**
     * Sets arbitrary_item_id
     * @param string $arbitrary_item_id Arbitrary item id that should be rebilled instead of the normal schedule
     * @return $this
     */
    public function setArbitraryItemId($arbitrary_item_id)
    {
        $this->container['arbitrary_item_id'] = $arbitrary_item_id;

        return $this;
    }

    /**
     * Gets arbitrary_percentage_discount
     * @return float
     */
    public function getArbitraryPercentageDiscount()
    {
        return $this->container['arbitrary_percentage_discount'];
    }

    /**
     * Sets arbitrary_percentage_discount
     * @param float $arbitrary_percentage_discount An arbitrary percentage discount to provide on future rebills
     * @return $this
     */
    public function setArbitraryPercentageDiscount($arbitrary_percentage_discount)
    {
        $this->container['arbitrary_percentage_discount'] = $arbitrary_percentage_discount;

        return $this;
    }

    /**
     * Gets arbitrary_quantity
     * @return float
     */
    public function getArbitraryQuantity()
    {
        return $this->container['arbitrary_quantity'];
    }

    /**
     * Sets arbitrary_quantity
     * @param float $arbitrary_quantity Arbitrary quantity to rebill
     * @return $this
     */
    public function setArbitraryQuantity($arbitrary_quantity)
    {
        $this->container['arbitrary_quantity'] = $arbitrary_quantity;

        return $this;
    }

    /**
     * Gets arbitrary_schedule_days
     * @return int
     */
    public function getArbitraryScheduleDays()
    {
        return $this->container['arbitrary_schedule_days'];
    }

    /**
     * Sets arbitrary_schedule_days
     * @param int $arbitrary_schedule_days The number of days to rebill if the frequency is set to an arbitrary number of days
     * @return $this
     */
    public function setArbitraryScheduleDays($arbitrary_schedule_days)
    {
        $this->container['arbitrary_schedule_days'] = $arbitrary_schedule_days;

        return $this;
    }

    /**
     * Gets arbitrary_unit_cost
     * @return float
     */
    public function getArbitraryUnitCost()
    {
        return $this->container['arbitrary_unit_cost'];
    }

    /**
     * Sets arbitrary_unit_cost
     * @param float $arbitrary_unit_cost Arbitrary unit cost that rebills of this item should occur at
     * @return $this
     */
    public function setArbitraryUnitCost($arbitrary_unit_cost)
    {
        $this->container['arbitrary_unit_cost'] = $arbitrary_unit_cost;

        return $this;
    }

    /**
     * Gets arbitrary_unit_cost_remaining_orders
     * @return int
     */
    public function getArbitraryUnitCostRemainingOrders()
    {
        return $this->container['arbitrary_unit_cost_remaining_orders'];
    }

    /**
     * Sets arbitrary_unit_cost_remaining_orders
     * @param int $arbitrary_unit_cost_remaining_orders The number of rebills to give the arbitrary unit cost on before reverting to normal pricing.
     * @return $this
     */
    public function setArbitraryUnitCostRemainingOrders($arbitrary_unit_cost_remaining_orders)
    {
        $this->container['arbitrary_unit_cost_remaining_orders'] = $arbitrary_unit_cost_remaining_orders;

        return $this;
    }

    /**
     * Gets frequency
     * @return string
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     * @param string $frequency Frequency of the rebill if not a fixed schedule
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $allowed_values = array('Weekly', 'Biweekly', 'Every...', 'Every 10 Days', 'Every 24 Days', 'Every 28 Days', 'Monthly', 'Every 45 Days', 'Every 2 Months', 'Every 3 Months', 'Every 4 Months', 'Every 6 Months', 'Yearly');
        if (!in_array($frequency, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'frequency', must be one of 'Weekly', 'Biweekly', 'Every...', 'Every 10 Days', 'Every 24 Days', 'Every 28 Days', 'Monthly', 'Every 45 Days', 'Every 2 Months', 'Every 3 Months', 'Every 4 Months', 'Every 6 Months', 'Yearly'");
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets last_order_dts
     * @return string
     */
    public function getLastOrderDts()
    {
        return $this->container['last_order_dts'];
    }

    /**
     * Sets last_order_dts
     * @param string $last_order_dts Date/time of the last order of this item
     * @return $this
     */
    public function setLastOrderDts($last_order_dts)
    {
        $this->container['last_order_dts'] = $last_order_dts;

        return $this;
    }

    /**
     * Gets life_time_value
     * @return float
     */
    public function getLifeTimeValue()
    {
        return $this->container['life_time_value'];
    }

    /**
     * Sets life_time_value
     * @param float $life_time_value The life time value of this item including the original purchase
     * @return $this
     */
    public function setLifeTimeValue($life_time_value)
    {
        $this->container['life_time_value'] = $life_time_value;

        return $this;
    }

    /**
     * Gets next_preshipment_notice_dts
     * @return string
     */
    public function getNextPreshipmentNoticeDts()
    {
        return $this->container['next_preshipment_notice_dts'];
    }

    /**
     * Sets next_preshipment_notice_dts
     * @param string $next_preshipment_notice_dts The date/time of when the next pre-shipment notice should be sent
     * @return $this
     */
    public function setNextPreshipmentNoticeDts($next_preshipment_notice_dts)
    {
        $this->container['next_preshipment_notice_dts'] = $next_preshipment_notice_dts;

        return $this;
    }

    /**
     * Gets next_shipment_dts
     * @return string
     */
    public function getNextShipmentDts()
    {
        return $this->container['next_shipment_dts'];
    }

    /**
     * Sets next_shipment_dts
     * @param string $next_shipment_dts Date/time that this item is scheduled to rebill
     * @return $this
     */
    public function setNextShipmentDts($next_shipment_dts)
    {
        $this->container['next_shipment_dts'] = $next_shipment_dts;

        return $this;
    }

    /**
     * Gets no_order_after_dts
     * @return string
     */
    public function getNoOrderAfterDts()
    {
        return $this->container['no_order_after_dts'];
    }

    /**
     * Sets no_order_after_dts
     * @param string $no_order_after_dts Date/time after which no additional rebills of this item should occur
     * @return $this
     */
    public function setNoOrderAfterDts($no_order_after_dts)
    {
        $this->container['no_order_after_dts'] = $no_order_after_dts;

        return $this;
    }

    /**
     * Gets number_of_rebills
     * @return int
     */
    public function getNumberOfRebills()
    {
        return $this->container['number_of_rebills'];
    }

    /**
     * Sets number_of_rebills
     * @param int $number_of_rebills The number of times this item has rebilled
     * @return $this
     */
    public function setNumberOfRebills($number_of_rebills)
    {
        $this->container['number_of_rebills'] = $number_of_rebills;

        return $this;
    }

    /**
     * Gets options
     * @return \ultracart\v2\models\AutoOrderItemOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \ultracart\v2\models\AutoOrderItemOption[] $options Options associated with this item
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets original_item_id
     * @return string
     */
    public function getOriginalItemId()
    {
        return $this->container['original_item_id'];
    }

    /**
     * Sets original_item_id
     * @param string $original_item_id The original item id purchased
     * @return $this
     */
    public function setOriginalItemId($original_item_id)
    {
        $this->container['original_item_id'] = $original_item_id;

        return $this;
    }

    /**
     * Gets original_quantity
     * @return float
     */
    public function getOriginalQuantity()
    {
        return $this->container['original_quantity'];
    }

    /**
     * Sets original_quantity
     * @param float $original_quantity The original quantity purchased
     * @return $this
     */
    public function setOriginalQuantity($original_quantity)
    {
        $this->container['original_quantity'] = $original_quantity;

        return $this;
    }

    /**
     * Gets preshipment_notice_sent
     * @return bool
     */
    public function getPreshipmentNoticeSent()
    {
        return $this->container['preshipment_notice_sent'];
    }

    /**
     * Sets preshipment_notice_sent
     * @param bool $preshipment_notice_sent True if the preshipment notice associated with the next rebill has been sent
     * @return $this
     */
    public function setPreshipmentNoticeSent($preshipment_notice_sent)
    {
        $this->container['preshipment_notice_sent'] = $preshipment_notice_sent;

        return $this;
    }

    /**
     * Gets rebill_value
     * @return float
     */
    public function getRebillValue()
    {
        return $this->container['rebill_value'];
    }

    /**
     * Sets rebill_value
     * @param float $rebill_value The value of the rebills of this item
     * @return $this
     */
    public function setRebillValue($rebill_value)
    {
        $this->container['rebill_value'] = $rebill_value;

        return $this;
    }

    /**
     * Gets remaining_repeat_count
     * @return int
     */
    public function getRemainingRepeatCount()
    {
        return $this->container['remaining_repeat_count'];
    }

    /**
     * Sets remaining_repeat_count
     * @param int $remaining_repeat_count The number of rebills remaining before this item is complete
     * @return $this
     */
    public function setRemainingRepeatCount($remaining_repeat_count)
    {
        $this->container['remaining_repeat_count'] = $remaining_repeat_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


