<?php
/**
 * PaymentsConfigurationCreditCardType
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * PaymentsConfigurationCreditCardType Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsConfigurationCreditCardType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsConfigurationCreditCardType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accounting_code' => 'string',
        'card_type_icon' => 'string',
        'credit_card' => 'string',
        'deposit_to_account' => 'string',
        'enabled' => 'bool',
        'processing_fee' => 'float',
        'processing_percentage' => 'float',
        'restrictions' => '\ultracart\v2\models\PaymentsConfigurationRestrictions',
        'surcharge_accounting_code' => 'string',
        'transaction_fee' => 'float',
        'transaction_percentage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accounting_code' => null,
        'card_type_icon' => null,
        'credit_card' => null,
        'deposit_to_account' => null,
        'enabled' => null,
        'processing_fee' => null,
        'processing_percentage' => null,
        'restrictions' => null,
        'surcharge_accounting_code' => null,
        'transaction_fee' => null,
        'transaction_percentage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounting_code' => 'accounting_code',
        'card_type_icon' => 'card_type_icon',
        'credit_card' => 'credit_card',
        'deposit_to_account' => 'deposit_to_account',
        'enabled' => 'enabled',
        'processing_fee' => 'processing_fee',
        'processing_percentage' => 'processing_percentage',
        'restrictions' => 'restrictions',
        'surcharge_accounting_code' => 'surcharge_accounting_code',
        'transaction_fee' => 'transaction_fee',
        'transaction_percentage' => 'transaction_percentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounting_code' => 'setAccountingCode',
        'card_type_icon' => 'setCardTypeIcon',
        'credit_card' => 'setCreditCard',
        'deposit_to_account' => 'setDepositToAccount',
        'enabled' => 'setEnabled',
        'processing_fee' => 'setProcessingFee',
        'processing_percentage' => 'setProcessingPercentage',
        'restrictions' => 'setRestrictions',
        'surcharge_accounting_code' => 'setSurchargeAccountingCode',
        'transaction_fee' => 'setTransactionFee',
        'transaction_percentage' => 'setTransactionPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounting_code' => 'getAccountingCode',
        'card_type_icon' => 'getCardTypeIcon',
        'credit_card' => 'getCreditCard',
        'deposit_to_account' => 'getDepositToAccount',
        'enabled' => 'getEnabled',
        'processing_fee' => 'getProcessingFee',
        'processing_percentage' => 'getProcessingPercentage',
        'restrictions' => 'getRestrictions',
        'surcharge_accounting_code' => 'getSurchargeAccountingCode',
        'transaction_fee' => 'getTransactionFee',
        'transaction_percentage' => 'getTransactionPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CREDIT_CARD_AMEX = 'AMEX';
    const CREDIT_CARD_DINERS_CLUB = 'Diners Club';
    const CREDIT_CARD_DISCOVER = 'Discover';
    const CREDIT_CARD_MASTER_CARD = 'MasterCard';
    const CREDIT_CARD_JCB = 'JCB';
    const CREDIT_CARD_VISA = 'VISA';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreditCardAllowableValues()
    {
        return [
            self::CREDIT_CARD_AMEX,
            self::CREDIT_CARD_DINERS_CLUB,
            self::CREDIT_CARD_DISCOVER,
            self::CREDIT_CARD_MASTER_CARD,
            self::CREDIT_CARD_JCB,
            self::CREDIT_CARD_VISA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounting_code'] = isset($data['accounting_code']) ? $data['accounting_code'] : null;
        $this->container['card_type_icon'] = isset($data['card_type_icon']) ? $data['card_type_icon'] : null;
        $this->container['credit_card'] = isset($data['credit_card']) ? $data['credit_card'] : null;
        $this->container['deposit_to_account'] = isset($data['deposit_to_account']) ? $data['deposit_to_account'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['processing_fee'] = isset($data['processing_fee']) ? $data['processing_fee'] : null;
        $this->container['processing_percentage'] = isset($data['processing_percentage']) ? $data['processing_percentage'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
        $this->container['surcharge_accounting_code'] = isset($data['surcharge_accounting_code']) ? $data['surcharge_accounting_code'] : null;
        $this->container['transaction_fee'] = isset($data['transaction_fee']) ? $data['transaction_fee'] : null;
        $this->container['transaction_percentage'] = isset($data['transaction_percentage']) ? $data['transaction_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCreditCardAllowableValues();
        if (!is_null($this->container['credit_card']) && !in_array($this->container['credit_card'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'credit_card', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounting_code
     *
     * @return string
     */
    public function getAccountingCode()
    {
        return $this->container['accounting_code'];
    }

    /**
     * Sets accounting_code
     *
     * @param string $accounting_code Optional field used for Quickbooks integrations to match this credit card with the corresponding payment type in Quickbooks
     *
     * @return $this
     */
    public function setAccountingCode($accounting_code)
    {
        $this->container['accounting_code'] = $accounting_code;

        return $this;
    }

    /**
     * Gets card_type_icon
     *
     * @return string
     */
    public function getCardTypeIcon()
    {
        return $this->container['card_type_icon'];
    }

    /**
     * Sets card_type_icon
     *
     * @param string $card_type_icon Internally used icon information for this card type
     *
     * @return $this
     */
    public function setCardTypeIcon($card_type_icon)
    {
        $this->container['card_type_icon'] = $card_type_icon;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return string
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param string $credit_card Credit card type
     *
     * @return $this
     */
    public function setCreditCard($credit_card)
    {
        $allowedValues = $this->getCreditCardAllowableValues();
        if (!is_null($credit_card) && !in_array($credit_card, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'credit_card', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets deposit_to_account
     *
     * @return string
     */
    public function getDepositToAccount()
    {
        return $this->container['deposit_to_account'];
    }

    /**
     * Sets deposit_to_account
     *
     * @param string $deposit_to_account The name of the account to deposit funds
     *
     * @return $this
     */
    public function setDepositToAccount($deposit_to_account)
    {
        $this->container['deposit_to_account'] = $deposit_to_account;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled If true, this card type will be accepted during checkout
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets processing_fee
     *
     * @return float
     */
    public function getProcessingFee()
    {
        return $this->container['processing_fee'];
    }

    /**
     * Sets processing_fee
     *
     * @param float $processing_fee Optional additional fee applied to order for this card
     *
     * @return $this
     */
    public function setProcessingFee($processing_fee)
    {
        $this->container['processing_fee'] = $processing_fee;

        return $this;
    }

    /**
     * Gets processing_percentage
     *
     * @return float
     */
    public function getProcessingPercentage()
    {
        return $this->container['processing_percentage'];
    }

    /**
     * Sets processing_percentage
     *
     * @param float $processing_percentage Optional additional fee applied to order for this card
     *
     * @return $this
     */
    public function setProcessingPercentage($processing_percentage)
    {
        $this->container['processing_percentage'] = $processing_percentage;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \ultracart\v2\models\PaymentsConfigurationRestrictions
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \ultracart\v2\models\PaymentsConfigurationRestrictions $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets surcharge_accounting_code
     *
     * @return string
     */
    public function getSurchargeAccountingCode()
    {
        return $this->container['surcharge_accounting_code'];
    }

    /**
     * Sets surcharge_accounting_code
     *
     * @param string $surcharge_accounting_code Optional field. If integrated with Quickbooks, this code will be used when informing Quickbooks about any surcharges applied to orders
     *
     * @return $this
     */
    public function setSurchargeAccountingCode($surcharge_accounting_code)
    {
        $this->container['surcharge_accounting_code'] = $surcharge_accounting_code;

        return $this;
    }

    /**
     * Gets transaction_fee
     *
     * @return float
     */
    public function getTransactionFee()
    {
        return $this->container['transaction_fee'];
    }

    /**
     * Sets transaction_fee
     *
     * @param float $transaction_fee An optional additional fee to charge the customer for using this card.
     *
     * @return $this
     */
    public function setTransactionFee($transaction_fee)
    {
        $this->container['transaction_fee'] = $transaction_fee;

        return $this;
    }

    /**
     * Gets transaction_percentage
     *
     * @return float
     */
    public function getTransactionPercentage()
    {
        return $this->container['transaction_percentage'];
    }

    /**
     * Sets transaction_percentage
     *
     * @param float $transaction_percentage An optional transaction percentage to charge the customer for using this card
     *
     * @return $this
     */
    public function setTransactionPercentage($transaction_percentage)
    {
        $this->container['transaction_percentage'] = $transaction_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


