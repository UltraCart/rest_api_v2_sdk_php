<?php
/**
 * EmailCommseqEmail
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * EmailCommseqEmail Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailCommseqEmail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailCommseqEmail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deleted' => 'bool',
        'edited_by_user' => 'string',
        'email_communication_sequence_email_uuid' => 'string',
        'email_container_cjson' => 'string',
        'email_container_cjson_last_modified_dts' => 'string',
        'email_template_vm_path' => 'string',
        'filter_profile_equation_json' => 'string',
        'individually_render' => 'bool',
        'merchant_id' => 'string',
        'preview_text' => 'string',
        'smart_sending' => 'bool',
        'storefront_oid' => 'int',
        'subject' => 'string',
        'transactional_email' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deleted' => null,
        'edited_by_user' => null,
        'email_communication_sequence_email_uuid' => null,
        'email_container_cjson' => null,
        'email_container_cjson_last_modified_dts' => 'dateTime',
        'email_template_vm_path' => null,
        'filter_profile_equation_json' => null,
        'individually_render' => null,
        'merchant_id' => null,
        'preview_text' => null,
        'smart_sending' => null,
        'storefront_oid' => 'int32',
        'subject' => null,
        'transactional_email' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deleted' => 'deleted',
        'edited_by_user' => 'edited_by_user',
        'email_communication_sequence_email_uuid' => 'email_communication_sequence_email_uuid',
        'email_container_cjson' => 'email_container_cjson',
        'email_container_cjson_last_modified_dts' => 'email_container_cjson_last_modified_dts',
        'email_template_vm_path' => 'email_template_vm_path',
        'filter_profile_equation_json' => 'filter_profile_equation_json',
        'individually_render' => 'individually_render',
        'merchant_id' => 'merchant_id',
        'preview_text' => 'preview_text',
        'smart_sending' => 'smart_sending',
        'storefront_oid' => 'storefront_oid',
        'subject' => 'subject',
        'transactional_email' => 'transactional_email',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deleted' => 'setDeleted',
        'edited_by_user' => 'setEditedByUser',
        'email_communication_sequence_email_uuid' => 'setEmailCommunicationSequenceEmailUuid',
        'email_container_cjson' => 'setEmailContainerCjson',
        'email_container_cjson_last_modified_dts' => 'setEmailContainerCjsonLastModifiedDts',
        'email_template_vm_path' => 'setEmailTemplateVmPath',
        'filter_profile_equation_json' => 'setFilterProfileEquationJson',
        'individually_render' => 'setIndividuallyRender',
        'merchant_id' => 'setMerchantId',
        'preview_text' => 'setPreviewText',
        'smart_sending' => 'setSmartSending',
        'storefront_oid' => 'setStorefrontOid',
        'subject' => 'setSubject',
        'transactional_email' => 'setTransactionalEmail',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deleted' => 'getDeleted',
        'edited_by_user' => 'getEditedByUser',
        'email_communication_sequence_email_uuid' => 'getEmailCommunicationSequenceEmailUuid',
        'email_container_cjson' => 'getEmailContainerCjson',
        'email_container_cjson_last_modified_dts' => 'getEmailContainerCjsonLastModifiedDts',
        'email_template_vm_path' => 'getEmailTemplateVmPath',
        'filter_profile_equation_json' => 'getFilterProfileEquationJson',
        'individually_render' => 'getIndividuallyRender',
        'merchant_id' => 'getMerchantId',
        'preview_text' => 'getPreviewText',
        'smart_sending' => 'getSmartSending',
        'storefront_oid' => 'getStorefrontOid',
        'subject' => 'getSubject',
        'transactional_email' => 'getTransactionalEmail',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['edited_by_user'] = isset($data['edited_by_user']) ? $data['edited_by_user'] : null;
        $this->container['email_communication_sequence_email_uuid'] = isset($data['email_communication_sequence_email_uuid']) ? $data['email_communication_sequence_email_uuid'] : null;
        $this->container['email_container_cjson'] = isset($data['email_container_cjson']) ? $data['email_container_cjson'] : null;
        $this->container['email_container_cjson_last_modified_dts'] = isset($data['email_container_cjson_last_modified_dts']) ? $data['email_container_cjson_last_modified_dts'] : null;
        $this->container['email_template_vm_path'] = isset($data['email_template_vm_path']) ? $data['email_template_vm_path'] : null;
        $this->container['filter_profile_equation_json'] = isset($data['filter_profile_equation_json']) ? $data['filter_profile_equation_json'] : null;
        $this->container['individually_render'] = isset($data['individually_render']) ? $data['individually_render'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['preview_text'] = isset($data['preview_text']) ? $data['preview_text'] : null;
        $this->container['smart_sending'] = isset($data['smart_sending']) ? $data['smart_sending'] : null;
        $this->container['storefront_oid'] = isset($data['storefront_oid']) ? $data['storefront_oid'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['transactional_email'] = isset($data['transactional_email']) ? $data['transactional_email'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets edited_by_user
     *
     * @return string
     */
    public function getEditedByUser()
    {
        return $this->container['edited_by_user'];
    }

    /**
     * Sets edited_by_user
     *
     * @param string $edited_by_user Edited by user
     *
     * @return $this
     */
    public function setEditedByUser($edited_by_user)
    {
        $this->container['edited_by_user'] = $edited_by_user;

        return $this;
    }

    /**
     * Gets email_communication_sequence_email_uuid
     *
     * @return string
     */
    public function getEmailCommunicationSequenceEmailUuid()
    {
        return $this->container['email_communication_sequence_email_uuid'];
    }

    /**
     * Sets email_communication_sequence_email_uuid
     *
     * @param string $email_communication_sequence_email_uuid Email communication sequence email uuid
     *
     * @return $this
     */
    public function setEmailCommunicationSequenceEmailUuid($email_communication_sequence_email_uuid)
    {
        $this->container['email_communication_sequence_email_uuid'] = $email_communication_sequence_email_uuid;

        return $this;
    }

    /**
     * Gets email_container_cjson
     *
     * @return string
     */
    public function getEmailContainerCjson()
    {
        return $this->container['email_container_cjson'];
    }

    /**
     * Sets email_container_cjson
     *
     * @param string $email_container_cjson Email container cjson
     *
     * @return $this
     */
    public function setEmailContainerCjson($email_container_cjson)
    {
        $this->container['email_container_cjson'] = $email_container_cjson;

        return $this;
    }

    /**
     * Gets email_container_cjson_last_modified_dts
     *
     * @return string
     */
    public function getEmailContainerCjsonLastModifiedDts()
    {
        return $this->container['email_container_cjson_last_modified_dts'];
    }

    /**
     * Sets email_container_cjson_last_modified_dts
     *
     * @param string $email_container_cjson_last_modified_dts Timestamp the last time the container was modified.
     *
     * @return $this
     */
    public function setEmailContainerCjsonLastModifiedDts($email_container_cjson_last_modified_dts)
    {
        $this->container['email_container_cjson_last_modified_dts'] = $email_container_cjson_last_modified_dts;

        return $this;
    }

    /**
     * Gets email_template_vm_path
     *
     * @return string
     */
    public function getEmailTemplateVmPath()
    {
        return $this->container['email_template_vm_path'];
    }

    /**
     * Sets email_template_vm_path
     *
     * @param string $email_template_vm_path Email template virtual path
     *
     * @return $this
     */
    public function setEmailTemplateVmPath($email_template_vm_path)
    {
        $this->container['email_template_vm_path'] = $email_template_vm_path;

        return $this;
    }

    /**
     * Gets filter_profile_equation_json
     *
     * @return string
     */
    public function getFilterProfileEquationJson()
    {
        return $this->container['filter_profile_equation_json'];
    }

    /**
     * Sets filter_profile_equation_json
     *
     * @param string $filter_profile_equation_json Filter profile equation json
     *
     * @return $this
     */
    public function setFilterProfileEquationJson($filter_profile_equation_json)
    {
        $this->container['filter_profile_equation_json'] = $filter_profile_equation_json;

        return $this;
    }

    /**
     * Gets individually_render
     *
     * @return bool
     */
    public function getIndividuallyRender()
    {
        return $this->container['individually_render'];
    }

    /**
     * Sets individually_render
     *
     * @param bool $individually_render Individually render
     *
     * @return $this
     */
    public function setIndividuallyRender($individually_render)
    {
        $this->container['individually_render'] = $individually_render;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id Merchant ID
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets preview_text
     *
     * @return string
     */
    public function getPreviewText()
    {
        return $this->container['preview_text'];
    }

    /**
     * Sets preview_text
     *
     * @param string $preview_text Preview text
     *
     * @return $this
     */
    public function setPreviewText($preview_text)
    {
        $this->container['preview_text'] = $preview_text;

        return $this;
    }

    /**
     * Gets smart_sending
     *
     * @return bool
     */
    public function getSmartSending()
    {
        return $this->container['smart_sending'];
    }

    /**
     * Sets smart_sending
     *
     * @param bool $smart_sending Smart sending
     *
     * @return $this
     */
    public function setSmartSending($smart_sending)
    {
        $this->container['smart_sending'] = $smart_sending;

        return $this;
    }

    /**
     * Gets storefront_oid
     *
     * @return int
     */
    public function getStorefrontOid()
    {
        return $this->container['storefront_oid'];
    }

    /**
     * Sets storefront_oid
     *
     * @param int $storefront_oid Storefront oid
     *
     * @return $this
     */
    public function setStorefrontOid($storefront_oid)
    {
        $this->container['storefront_oid'] = $storefront_oid;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets transactional_email
     *
     * @return bool
     */
    public function getTransactionalEmail()
    {
        return $this->container['transactional_email'];
    }

    /**
     * Sets transactional_email
     *
     * @param bool $transactional_email Transactional email
     *
     * @return $this
     */
    public function setTransactionalEmail($transactional_email)
    {
        $this->container['transactional_email'] = $transactional_email;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


