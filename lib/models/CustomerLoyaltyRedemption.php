<?php
/**
 * CustomerLoyaltyRedemption
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomerLoyaltyRedemption Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerLoyaltyRedemption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerLoyaltyRedemption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coupon_code' => 'string',
        'coupon_code_oid' => 'int',
        'coupon_used' => 'bool',
        'description_for_customer' => 'string',
        'expiration_dts' => 'string',
        'gift_certificate_code' => 'string',
        'gift_certificate_oid' => 'int',
        'loyalty_ledger_oid' => 'int',
        'loyalty_points' => 'int',
        'loyalty_redemption_oid' => 'int',
        'order_id' => 'string',
        'redemption_dts' => 'string',
        'remaining_balance' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coupon_code' => null,
        'coupon_code_oid' => 'int32',
        'coupon_used' => null,
        'description_for_customer' => null,
        'expiration_dts' => 'dateTime',
        'gift_certificate_code' => null,
        'gift_certificate_oid' => 'int32',
        'loyalty_ledger_oid' => 'int32',
        'loyalty_points' => 'int32',
        'loyalty_redemption_oid' => 'int32',
        'order_id' => null,
        'redemption_dts' => 'dateTime',
        'remaining_balance' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coupon_code' => 'coupon_code',
        'coupon_code_oid' => 'coupon_code_oid',
        'coupon_used' => 'coupon_used',
        'description_for_customer' => 'description_for_customer',
        'expiration_dts' => 'expiration_dts',
        'gift_certificate_code' => 'gift_certificate_code',
        'gift_certificate_oid' => 'gift_certificate_oid',
        'loyalty_ledger_oid' => 'loyalty_ledger_oid',
        'loyalty_points' => 'loyalty_points',
        'loyalty_redemption_oid' => 'loyalty_redemption_oid',
        'order_id' => 'order_id',
        'redemption_dts' => 'redemption_dts',
        'remaining_balance' => 'remaining_balance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coupon_code' => 'setCouponCode',
        'coupon_code_oid' => 'setCouponCodeOid',
        'coupon_used' => 'setCouponUsed',
        'description_for_customer' => 'setDescriptionForCustomer',
        'expiration_dts' => 'setExpirationDts',
        'gift_certificate_code' => 'setGiftCertificateCode',
        'gift_certificate_oid' => 'setGiftCertificateOid',
        'loyalty_ledger_oid' => 'setLoyaltyLedgerOid',
        'loyalty_points' => 'setLoyaltyPoints',
        'loyalty_redemption_oid' => 'setLoyaltyRedemptionOid',
        'order_id' => 'setOrderId',
        'redemption_dts' => 'setRedemptionDts',
        'remaining_balance' => 'setRemainingBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coupon_code' => 'getCouponCode',
        'coupon_code_oid' => 'getCouponCodeOid',
        'coupon_used' => 'getCouponUsed',
        'description_for_customer' => 'getDescriptionForCustomer',
        'expiration_dts' => 'getExpirationDts',
        'gift_certificate_code' => 'getGiftCertificateCode',
        'gift_certificate_oid' => 'getGiftCertificateOid',
        'loyalty_ledger_oid' => 'getLoyaltyLedgerOid',
        'loyalty_points' => 'getLoyaltyPoints',
        'loyalty_redemption_oid' => 'getLoyaltyRedemptionOid',
        'order_id' => 'getOrderId',
        'redemption_dts' => 'getRedemptionDts',
        'remaining_balance' => 'getRemainingBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coupon_code'] = isset($data['coupon_code']) ? $data['coupon_code'] : null;
        $this->container['coupon_code_oid'] = isset($data['coupon_code_oid']) ? $data['coupon_code_oid'] : null;
        $this->container['coupon_used'] = isset($data['coupon_used']) ? $data['coupon_used'] : null;
        $this->container['description_for_customer'] = isset($data['description_for_customer']) ? $data['description_for_customer'] : null;
        $this->container['expiration_dts'] = isset($data['expiration_dts']) ? $data['expiration_dts'] : null;
        $this->container['gift_certificate_code'] = isset($data['gift_certificate_code']) ? $data['gift_certificate_code'] : null;
        $this->container['gift_certificate_oid'] = isset($data['gift_certificate_oid']) ? $data['gift_certificate_oid'] : null;
        $this->container['loyalty_ledger_oid'] = isset($data['loyalty_ledger_oid']) ? $data['loyalty_ledger_oid'] : null;
        $this->container['loyalty_points'] = isset($data['loyalty_points']) ? $data['loyalty_points'] : null;
        $this->container['loyalty_redemption_oid'] = isset($data['loyalty_redemption_oid']) ? $data['loyalty_redemption_oid'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['redemption_dts'] = isset($data['redemption_dts']) ? $data['redemption_dts'] : null;
        $this->container['remaining_balance'] = isset($data['remaining_balance']) ? $data['remaining_balance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets coupon_code
     *
     * @return string
     */
    public function getCouponCode()
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string $coupon_code Coupon code
     *
     * @return $this
     */
    public function setCouponCode($coupon_code)
    {
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets coupon_code_oid
     *
     * @return int
     */
    public function getCouponCodeOid()
    {
        return $this->container['coupon_code_oid'];
    }

    /**
     * Sets coupon_code_oid
     *
     * @param int $coupon_code_oid Coupon code OID
     *
     * @return $this
     */
    public function setCouponCodeOid($coupon_code_oid)
    {
        $this->container['coupon_code_oid'] = $coupon_code_oid;

        return $this;
    }

    /**
     * Gets coupon_used
     *
     * @return bool
     */
    public function getCouponUsed()
    {
        return $this->container['coupon_used'];
    }

    /**
     * Sets coupon_used
     *
     * @param bool $coupon_used Coupon used
     *
     * @return $this
     */
    public function setCouponUsed($coupon_used)
    {
        $this->container['coupon_used'] = $coupon_used;

        return $this;
    }

    /**
     * Gets description_for_customer
     *
     * @return string
     */
    public function getDescriptionForCustomer()
    {
        return $this->container['description_for_customer'];
    }

    /**
     * Sets description_for_customer
     *
     * @param string $description_for_customer Description for customer
     *
     * @return $this
     */
    public function setDescriptionForCustomer($description_for_customer)
    {
        $this->container['description_for_customer'] = $description_for_customer;

        return $this;
    }

    /**
     * Gets expiration_dts
     *
     * @return string
     */
    public function getExpirationDts()
    {
        return $this->container['expiration_dts'];
    }

    /**
     * Sets expiration_dts
     *
     * @param string $expiration_dts Expiration date
     *
     * @return $this
     */
    public function setExpirationDts($expiration_dts)
    {
        $this->container['expiration_dts'] = $expiration_dts;

        return $this;
    }

    /**
     * Gets gift_certificate_code
     *
     * @return string
     */
    public function getGiftCertificateCode()
    {
        return $this->container['gift_certificate_code'];
    }

    /**
     * Sets gift_certificate_code
     *
     * @param string $gift_certificate_code Gift certificate code
     *
     * @return $this
     */
    public function setGiftCertificateCode($gift_certificate_code)
    {
        $this->container['gift_certificate_code'] = $gift_certificate_code;

        return $this;
    }

    /**
     * Gets gift_certificate_oid
     *
     * @return int
     */
    public function getGiftCertificateOid()
    {
        return $this->container['gift_certificate_oid'];
    }

    /**
     * Sets gift_certificate_oid
     *
     * @param int $gift_certificate_oid Gift certificate oid
     *
     * @return $this
     */
    public function setGiftCertificateOid($gift_certificate_oid)
    {
        $this->container['gift_certificate_oid'] = $gift_certificate_oid;

        return $this;
    }

    /**
     * Gets loyalty_ledger_oid
     *
     * @return int
     */
    public function getLoyaltyLedgerOid()
    {
        return $this->container['loyalty_ledger_oid'];
    }

    /**
     * Sets loyalty_ledger_oid
     *
     * @param int $loyalty_ledger_oid Loyalty ledger OID
     *
     * @return $this
     */
    public function setLoyaltyLedgerOid($loyalty_ledger_oid)
    {
        $this->container['loyalty_ledger_oid'] = $loyalty_ledger_oid;

        return $this;
    }

    /**
     * Gets loyalty_points
     *
     * @return int
     */
    public function getLoyaltyPoints()
    {
        return $this->container['loyalty_points'];
    }

    /**
     * Sets loyalty_points
     *
     * @param int $loyalty_points Loyalty points
     *
     * @return $this
     */
    public function setLoyaltyPoints($loyalty_points)
    {
        $this->container['loyalty_points'] = $loyalty_points;

        return $this;
    }

    /**
     * Gets loyalty_redemption_oid
     *
     * @return int
     */
    public function getLoyaltyRedemptionOid()
    {
        return $this->container['loyalty_redemption_oid'];
    }

    /**
     * Sets loyalty_redemption_oid
     *
     * @param int $loyalty_redemption_oid Loyalty redemption OID
     *
     * @return $this
     */
    public function setLoyaltyRedemptionOid($loyalty_redemption_oid)
    {
        $this->container['loyalty_redemption_oid'] = $loyalty_redemption_oid;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Order id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets redemption_dts
     *
     * @return string
     */
    public function getRedemptionDts()
    {
        return $this->container['redemption_dts'];
    }

    /**
     * Sets redemption_dts
     *
     * @param string $redemption_dts Redemption date
     *
     * @return $this
     */
    public function setRedemptionDts($redemption_dts)
    {
        $this->container['redemption_dts'] = $redemption_dts;

        return $this;
    }

    /**
     * Gets remaining_balance
     *
     * @return float
     */
    public function getRemainingBalance()
    {
        return $this->container['remaining_balance'];
    }

    /**
     * Sets remaining_balance
     *
     * @param float $remaining_balance Remaining balance
     *
     * @return $this
     */
    public function setRemainingBalance($remaining_balance)
    {
        $this->container['remaining_balance'] = $remaining_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


