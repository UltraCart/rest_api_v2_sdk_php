<?php
/**
 * ConversationAgentAuth
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationAgentAuth Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConversationAgentAuth implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConversationAgentAuth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'conversation_participant_arn' => 'string',
        'conversation_participant_name' => 'string',
        'jwt' => 'string',
        'merchant_id' => 'string',
        'twilio_accounts' => '\ultracart\v2\models\ConversationTwilioAccount[]',
        'websocket_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'conversation_participant_arn' => null,
        'conversation_participant_name' => null,
        'jwt' => null,
        'merchant_id' => null,
        'twilio_accounts' => null,
        'websocket_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversation_participant_arn' => 'conversation_participant_arn',
        'conversation_participant_name' => 'conversation_participant_name',
        'jwt' => 'jwt',
        'merchant_id' => 'merchant_id',
        'twilio_accounts' => 'twilio_accounts',
        'websocket_url' => 'websocket_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversation_participant_arn' => 'setConversationParticipantArn',
        'conversation_participant_name' => 'setConversationParticipantName',
        'jwt' => 'setJwt',
        'merchant_id' => 'setMerchantId',
        'twilio_accounts' => 'setTwilioAccounts',
        'websocket_url' => 'setWebsocketUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversation_participant_arn' => 'getConversationParticipantArn',
        'conversation_participant_name' => 'getConversationParticipantName',
        'jwt' => 'getJwt',
        'merchant_id' => 'getMerchantId',
        'twilio_accounts' => 'getTwilioAccounts',
        'websocket_url' => 'getWebsocketUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conversation_participant_arn'] = $data['conversation_participant_arn'] ?? null;
        $this->container['conversation_participant_name'] = $data['conversation_participant_name'] ?? null;
        $this->container['jwt'] = $data['jwt'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['twilio_accounts'] = $data['twilio_accounts'] ?? null;
        $this->container['websocket_url'] = $data['websocket_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversation_participant_arn
     *
     * @return string|null
     */
    public function getConversationParticipantArn()
    {
        return $this->container['conversation_participant_arn'];
    }

    /**
     * Sets conversation_participant_arn
     *
     * @param string|null $conversation_participant_arn conversation_participant_arn
     *
     * @return self
     */
    public function setConversationParticipantArn($conversation_participant_arn)
    {
        $this->container['conversation_participant_arn'] = $conversation_participant_arn;

        return $this;
    }

    /**
     * Gets conversation_participant_name
     *
     * @return string|null
     */
    public function getConversationParticipantName()
    {
        return $this->container['conversation_participant_name'];
    }

    /**
     * Sets conversation_participant_name
     *
     * @param string|null $conversation_participant_name conversation_participant_name
     *
     * @return self
     */
    public function setConversationParticipantName($conversation_participant_name)
    {
        $this->container['conversation_participant_name'] = $conversation_participant_name;

        return $this;
    }

    /**
     * Gets jwt
     *
     * @return string|null
     */
    public function getJwt()
    {
        return $this->container['jwt'];
    }

    /**
     * Sets jwt
     *
     * @param string|null $jwt jwt
     *
     * @return self
     */
    public function setJwt($jwt)
    {
        $this->container['jwt'] = $jwt;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets twilio_accounts
     *
     * @return \ultracart\v2\models\ConversationTwilioAccount[]|null
     */
    public function getTwilioAccounts()
    {
        return $this->container['twilio_accounts'];
    }

    /**
     * Sets twilio_accounts
     *
     * @param \ultracart\v2\models\ConversationTwilioAccount[]|null $twilio_accounts twilio_accounts
     *
     * @return self
     */
    public function setTwilioAccounts($twilio_accounts)
    {
        $this->container['twilio_accounts'] = $twilio_accounts;

        return $this;
    }

    /**
     * Gets websocket_url
     *
     * @return string|null
     */
    public function getWebsocketUrl()
    {
        return $this->container['websocket_url'];
    }

    /**
     * Sets websocket_url
     *
     * @param string|null $websocket_url websocket_url
     *
     * @return self
     */
    public function setWebsocketUrl($websocket_url)
    {
        $this->container['websocket_url'] = $websocket_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


