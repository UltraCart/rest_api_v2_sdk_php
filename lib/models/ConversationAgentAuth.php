<?php
/**
 * ConversationAgentAuth
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationAgentAuth Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationAgentAuth implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationAgentAuth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conversation_participant_arn' => 'string',
        'conversation_participant_name' => 'string',
        'group_ids' => 'int[]',
        'jwt' => 'string',
        'merchant_id' => 'string',
        'pbx_admin' => 'bool',
        'pbx_jwt' => 'string',
        'pbx_supervisor' => 'bool',
        'pbx_user' => 'bool',
        'pbx_voice_identity' => 'string',
        'pbx_voice_token' => 'string',
        'pbx_worker_token' => 'string',
        'twilio_accounts' => '\ultracart\v2\models\ConversationTwilioAccount[]',
        'user_id' => 'int',
        'websocket_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conversation_participant_arn' => null,
        'conversation_participant_name' => null,
        'group_ids' => null,
        'jwt' => null,
        'merchant_id' => null,
        'pbx_admin' => null,
        'pbx_jwt' => null,
        'pbx_supervisor' => null,
        'pbx_user' => null,
        'pbx_voice_identity' => null,
        'pbx_voice_token' => null,
        'pbx_worker_token' => null,
        'twilio_accounts' => null,
        'user_id' => 'int32',
        'websocket_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversation_participant_arn' => 'conversation_participant_arn',
        'conversation_participant_name' => 'conversation_participant_name',
        'group_ids' => 'group_ids',
        'jwt' => 'jwt',
        'merchant_id' => 'merchant_id',
        'pbx_admin' => 'pbx_admin',
        'pbx_jwt' => 'pbx_jwt',
        'pbx_supervisor' => 'pbx_supervisor',
        'pbx_user' => 'pbx_user',
        'pbx_voice_identity' => 'pbx_voice_identity',
        'pbx_voice_token' => 'pbx_voice_token',
        'pbx_worker_token' => 'pbx_worker_token',
        'twilio_accounts' => 'twilio_accounts',
        'user_id' => 'user_id',
        'websocket_url' => 'websocket_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversation_participant_arn' => 'setConversationParticipantArn',
        'conversation_participant_name' => 'setConversationParticipantName',
        'group_ids' => 'setGroupIds',
        'jwt' => 'setJwt',
        'merchant_id' => 'setMerchantId',
        'pbx_admin' => 'setPbxAdmin',
        'pbx_jwt' => 'setPbxJwt',
        'pbx_supervisor' => 'setPbxSupervisor',
        'pbx_user' => 'setPbxUser',
        'pbx_voice_identity' => 'setPbxVoiceIdentity',
        'pbx_voice_token' => 'setPbxVoiceToken',
        'pbx_worker_token' => 'setPbxWorkerToken',
        'twilio_accounts' => 'setTwilioAccounts',
        'user_id' => 'setUserId',
        'websocket_url' => 'setWebsocketUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversation_participant_arn' => 'getConversationParticipantArn',
        'conversation_participant_name' => 'getConversationParticipantName',
        'group_ids' => 'getGroupIds',
        'jwt' => 'getJwt',
        'merchant_id' => 'getMerchantId',
        'pbx_admin' => 'getPbxAdmin',
        'pbx_jwt' => 'getPbxJwt',
        'pbx_supervisor' => 'getPbxSupervisor',
        'pbx_user' => 'getPbxUser',
        'pbx_voice_identity' => 'getPbxVoiceIdentity',
        'pbx_voice_token' => 'getPbxVoiceToken',
        'pbx_worker_token' => 'getPbxWorkerToken',
        'twilio_accounts' => 'getTwilioAccounts',
        'user_id' => 'getUserId',
        'websocket_url' => 'getWebsocketUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conversation_participant_arn'] = isset($data['conversation_participant_arn']) ? $data['conversation_participant_arn'] : null;
        $this->container['conversation_participant_name'] = isset($data['conversation_participant_name']) ? $data['conversation_participant_name'] : null;
        $this->container['group_ids'] = isset($data['group_ids']) ? $data['group_ids'] : null;
        $this->container['jwt'] = isset($data['jwt']) ? $data['jwt'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['pbx_admin'] = isset($data['pbx_admin']) ? $data['pbx_admin'] : null;
        $this->container['pbx_jwt'] = isset($data['pbx_jwt']) ? $data['pbx_jwt'] : null;
        $this->container['pbx_supervisor'] = isset($data['pbx_supervisor']) ? $data['pbx_supervisor'] : null;
        $this->container['pbx_user'] = isset($data['pbx_user']) ? $data['pbx_user'] : null;
        $this->container['pbx_voice_identity'] = isset($data['pbx_voice_identity']) ? $data['pbx_voice_identity'] : null;
        $this->container['pbx_voice_token'] = isset($data['pbx_voice_token']) ? $data['pbx_voice_token'] : null;
        $this->container['pbx_worker_token'] = isset($data['pbx_worker_token']) ? $data['pbx_worker_token'] : null;
        $this->container['twilio_accounts'] = isset($data['twilio_accounts']) ? $data['twilio_accounts'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['websocket_url'] = isset($data['websocket_url']) ? $data['websocket_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversation_participant_arn
     *
     * @return string
     */
    public function getConversationParticipantArn()
    {
        return $this->container['conversation_participant_arn'];
    }

    /**
     * Sets conversation_participant_arn
     *
     * @param string $conversation_participant_arn conversation_participant_arn
     *
     * @return $this
     */
    public function setConversationParticipantArn($conversation_participant_arn)
    {
        $this->container['conversation_participant_arn'] = $conversation_participant_arn;

        return $this;
    }

    /**
     * Gets conversation_participant_name
     *
     * @return string
     */
    public function getConversationParticipantName()
    {
        return $this->container['conversation_participant_name'];
    }

    /**
     * Sets conversation_participant_name
     *
     * @param string $conversation_participant_name conversation_participant_name
     *
     * @return $this
     */
    public function setConversationParticipantName($conversation_participant_name)
    {
        $this->container['conversation_participant_name'] = $conversation_participant_name;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return int[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param int[] $group_ids UltraCart Groups this user belongs to
     *
     * @return $this
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets jwt
     *
     * @return string
     */
    public function getJwt()
    {
        return $this->container['jwt'];
    }

    /**
     * Sets jwt
     *
     * @param string $jwt jwt
     *
     * @return $this
     */
    public function setJwt($jwt)
    {
        $this->container['jwt'] = $jwt;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets pbx_admin
     *
     * @return bool
     */
    public function getPbxAdmin()
    {
        return $this->container['pbx_admin'];
    }

    /**
     * Sets pbx_admin
     *
     * @param bool $pbx_admin pbx_admin
     *
     * @return $this
     */
    public function setPbxAdmin($pbx_admin)
    {
        $this->container['pbx_admin'] = $pbx_admin;

        return $this;
    }

    /**
     * Gets pbx_jwt
     *
     * @return string
     */
    public function getPbxJwt()
    {
        return $this->container['pbx_jwt'];
    }

    /**
     * Sets pbx_jwt
     *
     * @param string $pbx_jwt pbx_jwt
     *
     * @return $this
     */
    public function setPbxJwt($pbx_jwt)
    {
        $this->container['pbx_jwt'] = $pbx_jwt;

        return $this;
    }

    /**
     * Gets pbx_supervisor
     *
     * @return bool
     */
    public function getPbxSupervisor()
    {
        return $this->container['pbx_supervisor'];
    }

    /**
     * Sets pbx_supervisor
     *
     * @param bool $pbx_supervisor pbx_supervisor
     *
     * @return $this
     */
    public function setPbxSupervisor($pbx_supervisor)
    {
        $this->container['pbx_supervisor'] = $pbx_supervisor;

        return $this;
    }

    /**
     * Gets pbx_user
     *
     * @return bool
     */
    public function getPbxUser()
    {
        return $this->container['pbx_user'];
    }

    /**
     * Sets pbx_user
     *
     * @param bool $pbx_user pbx_user
     *
     * @return $this
     */
    public function setPbxUser($pbx_user)
    {
        $this->container['pbx_user'] = $pbx_user;

        return $this;
    }

    /**
     * Gets pbx_voice_identity
     *
     * @return string
     */
    public function getPbxVoiceIdentity()
    {
        return $this->container['pbx_voice_identity'];
    }

    /**
     * Sets pbx_voice_identity
     *
     * @param string $pbx_voice_identity pbx_voice_identity
     *
     * @return $this
     */
    public function setPbxVoiceIdentity($pbx_voice_identity)
    {
        $this->container['pbx_voice_identity'] = $pbx_voice_identity;

        return $this;
    }

    /**
     * Gets pbx_voice_token
     *
     * @return string
     */
    public function getPbxVoiceToken()
    {
        return $this->container['pbx_voice_token'];
    }

    /**
     * Sets pbx_voice_token
     *
     * @param string $pbx_voice_token pbx_voice_token
     *
     * @return $this
     */
    public function setPbxVoiceToken($pbx_voice_token)
    {
        $this->container['pbx_voice_token'] = $pbx_voice_token;

        return $this;
    }

    /**
     * Gets pbx_worker_token
     *
     * @return string
     */
    public function getPbxWorkerToken()
    {
        return $this->container['pbx_worker_token'];
    }

    /**
     * Sets pbx_worker_token
     *
     * @param string $pbx_worker_token pbx_worker_token
     *
     * @return $this
     */
    public function setPbxWorkerToken($pbx_worker_token)
    {
        $this->container['pbx_worker_token'] = $pbx_worker_token;

        return $this;
    }

    /**
     * Gets twilio_accounts
     *
     * @return \ultracart\v2\models\ConversationTwilioAccount[]
     */
    public function getTwilioAccounts()
    {
        return $this->container['twilio_accounts'];
    }

    /**
     * Sets twilio_accounts
     *
     * @param \ultracart\v2\models\ConversationTwilioAccount[] $twilio_accounts twilio_accounts
     *
     * @return $this
     */
    public function setTwilioAccounts($twilio_accounts)
    {
        $this->container['twilio_accounts'] = $twilio_accounts;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id UltraCart User ID
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets websocket_url
     *
     * @return string
     */
    public function getWebsocketUrl()
    {
        return $this->container['websocket_url'];
    }

    /**
     * Sets websocket_url
     *
     * @param string $websocket_url websocket_url
     *
     * @return $this
     */
    public function setWebsocketUrl($websocket_url)
    {
        $this->container['websocket_url'] = $websocket_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


