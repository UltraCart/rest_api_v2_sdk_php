<?php
/**
 * WebhookEventCategory
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracartv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracartv2\models;

use \ArrayAccess;
use \ultracartv2\ObjectSerializer;

/**
 * WebhookEventCategory Class Doc Comment
 *
 * @category Class
 * @package  ultracartv2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhookEventCategory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebhookEventCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'any_subscribed' => 'bool',
        'available_expansions' => 'string[]',
        'event_category' => 'string',
        'events' => '\ultracartv2\models\WebhookEventSubscription[]',
        'subscribed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'any_subscribed' => null,
        'available_expansions' => null,
        'event_category' => null,
        'events' => null,
        'subscribed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'any_subscribed' => 'any_subscribed',
        'available_expansions' => 'available_expansions',
        'event_category' => 'event_category',
        'events' => 'events',
        'subscribed' => 'subscribed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'any_subscribed' => 'setAnySubscribed',
        'available_expansions' => 'setAvailableExpansions',
        'event_category' => 'setEventCategory',
        'events' => 'setEvents',
        'subscribed' => 'setSubscribed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'any_subscribed' => 'getAnySubscribed',
        'available_expansions' => 'getAvailableExpansions',
        'event_category' => 'getEventCategory',
        'events' => 'getEvents',
        'subscribed' => 'getSubscribed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['any_subscribed'] = isset($data['any_subscribed']) ? $data['any_subscribed'] : null;
        $this->container['available_expansions'] = isset($data['available_expansions']) ? $data['available_expansions'] : null;
        $this->container['event_category'] = isset($data['event_category']) ? $data['event_category'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['subscribed'] = isset($data['subscribed']) ? $data['subscribed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets any_subscribed
     *
     * @return bool
     */
    public function getAnySubscribed()
    {
        return $this->container['any_subscribed'];
    }

    /**
     * Sets any_subscribed
     *
     * @param bool $any_subscribed True if any events are subscribed to.
     *
     * @return $this
     */
    public function setAnySubscribed($any_subscribed)
    {
        $this->container['any_subscribed'] = $any_subscribed;

        return $this;
    }

    /**
     * Gets available_expansions
     *
     * @return string[]
     */
    public function getAvailableExpansions()
    {
        return $this->container['available_expansions'];
    }

    /**
     * Sets available_expansions
     *
     * @param string[] $available_expansions Array of available expansion constants
     *
     * @return $this
     */
    public function setAvailableExpansions($available_expansions)
    {
        $this->container['available_expansions'] = $available_expansions;

        return $this;
    }

    /**
     * Gets event_category
     *
     * @return string
     */
    public function getEventCategory()
    {
        return $this->container['event_category'];
    }

    /**
     * Sets event_category
     *
     * @param string $event_category Name of the event category
     *
     * @return $this
     */
    public function setEventCategory($event_category)
    {
        $this->container['event_category'] = $event_category;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \ultracartv2\models\WebhookEventSubscription[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \ultracartv2\models\WebhookEventSubscription[] $events The events within the category.  Individual subscription flags contained within the child object.
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets subscribed
     *
     * @return bool
     */
    public function getSubscribed()
    {
        return $this->container['subscribed'];
    }

    /**
     * Sets subscribed
     *
     * @param bool $subscribed True if all the events within this category are subscribed.  This is a convenience flag to make user interfaces easier.
     *
     * @return $this
     */
    public function setSubscribed($subscribed)
    {
        $this->container['subscribed'] = $subscribed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


