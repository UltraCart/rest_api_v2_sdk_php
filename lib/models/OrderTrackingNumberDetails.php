<?php
/**
 * OrderTrackingNumberDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * OrderTrackingNumberDetails Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderTrackingNumberDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderTrackingNumberDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actual_delivery_date' => 'string',
        'actual_delivery_date_formatted' => 'string',
        'details' => '\ultracart\v2\models\OrderTrackingNumberDetail[]',
        'easypost_tracker_id' => 'string',
        'expected_delivery_date' => 'string',
        'expected_delivery_date_formatted' => 'string',
        'map_url' => 'string',
        'order_placed_date' => 'string',
        'order_placed_date_formatted' => 'string',
        'payment_processed_date' => 'string',
        'payment_processed_date_formatted' => 'string',
        'shipped_date' => 'string',
        'shipped_date_formatted' => 'string',
        'shipping_method' => 'string',
        'status' => 'string',
        'status_description' => 'string',
        'tracking_number' => 'string',
        'tracking_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actual_delivery_date' => null,
        'actual_delivery_date_formatted' => null,
        'details' => null,
        'easypost_tracker_id' => null,
        'expected_delivery_date' => null,
        'expected_delivery_date_formatted' => null,
        'map_url' => null,
        'order_placed_date' => null,
        'order_placed_date_formatted' => null,
        'payment_processed_date' => null,
        'payment_processed_date_formatted' => null,
        'shipped_date' => null,
        'shipped_date_formatted' => null,
        'shipping_method' => null,
        'status' => null,
        'status_description' => null,
        'tracking_number' => null,
        'tracking_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_delivery_date' => 'actual_delivery_date',
        'actual_delivery_date_formatted' => 'actual_delivery_date_formatted',
        'details' => 'details',
        'easypost_tracker_id' => 'easypost_tracker_id',
        'expected_delivery_date' => 'expected_delivery_date',
        'expected_delivery_date_formatted' => 'expected_delivery_date_formatted',
        'map_url' => 'map_url',
        'order_placed_date' => 'order_placed_date',
        'order_placed_date_formatted' => 'order_placed_date_formatted',
        'payment_processed_date' => 'payment_processed_date',
        'payment_processed_date_formatted' => 'payment_processed_date_formatted',
        'shipped_date' => 'shipped_date',
        'shipped_date_formatted' => 'shipped_date_formatted',
        'shipping_method' => 'shipping_method',
        'status' => 'status',
        'status_description' => 'status_description',
        'tracking_number' => 'tracking_number',
        'tracking_url' => 'tracking_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_delivery_date' => 'setActualDeliveryDate',
        'actual_delivery_date_formatted' => 'setActualDeliveryDateFormatted',
        'details' => 'setDetails',
        'easypost_tracker_id' => 'setEasypostTrackerId',
        'expected_delivery_date' => 'setExpectedDeliveryDate',
        'expected_delivery_date_formatted' => 'setExpectedDeliveryDateFormatted',
        'map_url' => 'setMapUrl',
        'order_placed_date' => 'setOrderPlacedDate',
        'order_placed_date_formatted' => 'setOrderPlacedDateFormatted',
        'payment_processed_date' => 'setPaymentProcessedDate',
        'payment_processed_date_formatted' => 'setPaymentProcessedDateFormatted',
        'shipped_date' => 'setShippedDate',
        'shipped_date_formatted' => 'setShippedDateFormatted',
        'shipping_method' => 'setShippingMethod',
        'status' => 'setStatus',
        'status_description' => 'setStatusDescription',
        'tracking_number' => 'setTrackingNumber',
        'tracking_url' => 'setTrackingUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_delivery_date' => 'getActualDeliveryDate',
        'actual_delivery_date_formatted' => 'getActualDeliveryDateFormatted',
        'details' => 'getDetails',
        'easypost_tracker_id' => 'getEasypostTrackerId',
        'expected_delivery_date' => 'getExpectedDeliveryDate',
        'expected_delivery_date_formatted' => 'getExpectedDeliveryDateFormatted',
        'map_url' => 'getMapUrl',
        'order_placed_date' => 'getOrderPlacedDate',
        'order_placed_date_formatted' => 'getOrderPlacedDateFormatted',
        'payment_processed_date' => 'getPaymentProcessedDate',
        'payment_processed_date_formatted' => 'getPaymentProcessedDateFormatted',
        'shipped_date' => 'getShippedDate',
        'shipped_date_formatted' => 'getShippedDateFormatted',
        'shipping_method' => 'getShippingMethod',
        'status' => 'getStatus',
        'status_description' => 'getStatusDescription',
        'tracking_number' => 'getTrackingNumber',
        'tracking_url' => 'getTrackingUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actual_delivery_date'] = $data['actual_delivery_date'] ?? null;
        $this->container['actual_delivery_date_formatted'] = $data['actual_delivery_date_formatted'] ?? null;
        $this->container['details'] = $data['details'] ?? null;
        $this->container['easypost_tracker_id'] = $data['easypost_tracker_id'] ?? null;
        $this->container['expected_delivery_date'] = $data['expected_delivery_date'] ?? null;
        $this->container['expected_delivery_date_formatted'] = $data['expected_delivery_date_formatted'] ?? null;
        $this->container['map_url'] = $data['map_url'] ?? null;
        $this->container['order_placed_date'] = $data['order_placed_date'] ?? null;
        $this->container['order_placed_date_formatted'] = $data['order_placed_date_formatted'] ?? null;
        $this->container['payment_processed_date'] = $data['payment_processed_date'] ?? null;
        $this->container['payment_processed_date_formatted'] = $data['payment_processed_date_formatted'] ?? null;
        $this->container['shipped_date'] = $data['shipped_date'] ?? null;
        $this->container['shipped_date_formatted'] = $data['shipped_date_formatted'] ?? null;
        $this->container['shipping_method'] = $data['shipping_method'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_description'] = $data['status_description'] ?? null;
        $this->container['tracking_number'] = $data['tracking_number'] ?? null;
        $this->container['tracking_url'] = $data['tracking_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_delivery_date
     *
     * @return string|null
     */
    public function getActualDeliveryDate()
    {
        return $this->container['actual_delivery_date'];
    }

    /**
     * Sets actual_delivery_date
     *
     * @param string|null $actual_delivery_date actual_delivery_date
     *
     * @return self
     */
    public function setActualDeliveryDate($actual_delivery_date)
    {
        $this->container['actual_delivery_date'] = $actual_delivery_date;

        return $this;
    }

    /**
     * Gets actual_delivery_date_formatted
     *
     * @return string|null
     */
    public function getActualDeliveryDateFormatted()
    {
        return $this->container['actual_delivery_date_formatted'];
    }

    /**
     * Sets actual_delivery_date_formatted
     *
     * @param string|null $actual_delivery_date_formatted actual_delivery_date_formatted
     *
     * @return self
     */
    public function setActualDeliveryDateFormatted($actual_delivery_date_formatted)
    {
        $this->container['actual_delivery_date_formatted'] = $actual_delivery_date_formatted;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \ultracart\v2\models\OrderTrackingNumberDetail[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \ultracart\v2\models\OrderTrackingNumberDetail[]|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets easypost_tracker_id
     *
     * @return string|null
     */
    public function getEasypostTrackerId()
    {
        return $this->container['easypost_tracker_id'];
    }

    /**
     * Sets easypost_tracker_id
     *
     * @param string|null $easypost_tracker_id easypost_tracker_id
     *
     * @return self
     */
    public function setEasypostTrackerId($easypost_tracker_id)
    {
        $this->container['easypost_tracker_id'] = $easypost_tracker_id;

        return $this;
    }

    /**
     * Gets expected_delivery_date
     *
     * @return string|null
     */
    public function getExpectedDeliveryDate()
    {
        return $this->container['expected_delivery_date'];
    }

    /**
     * Sets expected_delivery_date
     *
     * @param string|null $expected_delivery_date expected_delivery_date
     *
     * @return self
     */
    public function setExpectedDeliveryDate($expected_delivery_date)
    {
        $this->container['expected_delivery_date'] = $expected_delivery_date;

        return $this;
    }

    /**
     * Gets expected_delivery_date_formatted
     *
     * @return string|null
     */
    public function getExpectedDeliveryDateFormatted()
    {
        return $this->container['expected_delivery_date_formatted'];
    }

    /**
     * Sets expected_delivery_date_formatted
     *
     * @param string|null $expected_delivery_date_formatted expected_delivery_date_formatted
     *
     * @return self
     */
    public function setExpectedDeliveryDateFormatted($expected_delivery_date_formatted)
    {
        $this->container['expected_delivery_date_formatted'] = $expected_delivery_date_formatted;

        return $this;
    }

    /**
     * Gets map_url
     *
     * @return string|null
     */
    public function getMapUrl()
    {
        return $this->container['map_url'];
    }

    /**
     * Sets map_url
     *
     * @param string|null $map_url map_url
     *
     * @return self
     */
    public function setMapUrl($map_url)
    {
        $this->container['map_url'] = $map_url;

        return $this;
    }

    /**
     * Gets order_placed_date
     *
     * @return string|null
     */
    public function getOrderPlacedDate()
    {
        return $this->container['order_placed_date'];
    }

    /**
     * Sets order_placed_date
     *
     * @param string|null $order_placed_date order_placed_date
     *
     * @return self
     */
    public function setOrderPlacedDate($order_placed_date)
    {
        $this->container['order_placed_date'] = $order_placed_date;

        return $this;
    }

    /**
     * Gets order_placed_date_formatted
     *
     * @return string|null
     */
    public function getOrderPlacedDateFormatted()
    {
        return $this->container['order_placed_date_formatted'];
    }

    /**
     * Sets order_placed_date_formatted
     *
     * @param string|null $order_placed_date_formatted order_placed_date_formatted
     *
     * @return self
     */
    public function setOrderPlacedDateFormatted($order_placed_date_formatted)
    {
        $this->container['order_placed_date_formatted'] = $order_placed_date_formatted;

        return $this;
    }

    /**
     * Gets payment_processed_date
     *
     * @return string|null
     */
    public function getPaymentProcessedDate()
    {
        return $this->container['payment_processed_date'];
    }

    /**
     * Sets payment_processed_date
     *
     * @param string|null $payment_processed_date payment_processed_date
     *
     * @return self
     */
    public function setPaymentProcessedDate($payment_processed_date)
    {
        $this->container['payment_processed_date'] = $payment_processed_date;

        return $this;
    }

    /**
     * Gets payment_processed_date_formatted
     *
     * @return string|null
     */
    public function getPaymentProcessedDateFormatted()
    {
        return $this->container['payment_processed_date_formatted'];
    }

    /**
     * Sets payment_processed_date_formatted
     *
     * @param string|null $payment_processed_date_formatted payment_processed_date_formatted
     *
     * @return self
     */
    public function setPaymentProcessedDateFormatted($payment_processed_date_formatted)
    {
        $this->container['payment_processed_date_formatted'] = $payment_processed_date_formatted;

        return $this;
    }

    /**
     * Gets shipped_date
     *
     * @return string|null
     */
    public function getShippedDate()
    {
        return $this->container['shipped_date'];
    }

    /**
     * Sets shipped_date
     *
     * @param string|null $shipped_date shipped_date
     *
     * @return self
     */
    public function setShippedDate($shipped_date)
    {
        $this->container['shipped_date'] = $shipped_date;

        return $this;
    }

    /**
     * Gets shipped_date_formatted
     *
     * @return string|null
     */
    public function getShippedDateFormatted()
    {
        return $this->container['shipped_date_formatted'];
    }

    /**
     * Sets shipped_date_formatted
     *
     * @param string|null $shipped_date_formatted shipped_date_formatted
     *
     * @return self
     */
    public function setShippedDateFormatted($shipped_date_formatted)
    {
        $this->container['shipped_date_formatted'] = $shipped_date_formatted;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method shipping_method
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_description
     *
     * @return string|null
     */
    public function getStatusDescription()
    {
        return $this->container['status_description'];
    }

    /**
     * Sets status_description
     *
     * @param string|null $status_description status_description
     *
     * @return self
     */
    public function setStatusDescription($status_description)
    {
        $this->container['status_description'] = $status_description;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number tracking_number
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string|null
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string|null $tracking_url tracking_url
     *
     * @return self
     */
    public function setTrackingUrl($tracking_url)
    {
        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


