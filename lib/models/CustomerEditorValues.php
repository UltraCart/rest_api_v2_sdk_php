<?php
/**
 * CustomerEditorValues
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * CustomerEditorValues Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerEditorValues implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerEditorValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'affiliates' => '\ultracart\v2\models\CustomerAffiliate[]',
        'card_exp_months' => 'string[]',
        'card_exp_years' => 'string[]',
        'card_types' => 'string[]',
        'countries' => '\ultracart\v2\models\Country[]',
        'qb_classes' => 'string[]',
        'sales_rep_codes' => 'string[]',
        'terms' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'affiliates' => null,
        'card_exp_months' => null,
        'card_exp_years' => null,
        'card_types' => null,
        'countries' => null,
        'qb_classes' => null,
        'sales_rep_codes' => null,
        'terms' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affiliates' => 'affiliates',
        'card_exp_months' => 'card_exp_months',
        'card_exp_years' => 'card_exp_years',
        'card_types' => 'card_types',
        'countries' => 'countries',
        'qb_classes' => 'qb_classes',
        'sales_rep_codes' => 'sales_rep_codes',
        'terms' => 'terms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affiliates' => 'setAffiliates',
        'card_exp_months' => 'setCardExpMonths',
        'card_exp_years' => 'setCardExpYears',
        'card_types' => 'setCardTypes',
        'countries' => 'setCountries',
        'qb_classes' => 'setQbClasses',
        'sales_rep_codes' => 'setSalesRepCodes',
        'terms' => 'setTerms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affiliates' => 'getAffiliates',
        'card_exp_months' => 'getCardExpMonths',
        'card_exp_years' => 'getCardExpYears',
        'card_types' => 'getCardTypes',
        'countries' => 'getCountries',
        'qb_classes' => 'getQbClasses',
        'sales_rep_codes' => 'getSalesRepCodes',
        'terms' => 'getTerms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['affiliates'] = isset($data['affiliates']) ? $data['affiliates'] : null;
        $this->container['card_exp_months'] = isset($data['card_exp_months']) ? $data['card_exp_months'] : null;
        $this->container['card_exp_years'] = isset($data['card_exp_years']) ? $data['card_exp_years'] : null;
        $this->container['card_types'] = isset($data['card_types']) ? $data['card_types'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['qb_classes'] = isset($data['qb_classes']) ? $data['qb_classes'] : null;
        $this->container['sales_rep_codes'] = isset($data['sales_rep_codes']) ? $data['sales_rep_codes'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets affiliates
     *
     * @return \ultracart\v2\models\CustomerAffiliate[]
     */
    public function getAffiliates()
    {
        return $this->container['affiliates'];
    }

    /**
     * Sets affiliates
     *
     * @param \ultracart\v2\models\CustomerAffiliate[] $affiliates affiliates
     *
     * @return $this
     */
    public function setAffiliates($affiliates)
    {
        $this->container['affiliates'] = $affiliates;

        return $this;
    }

    /**
     * Gets card_exp_months
     *
     * @return string[]
     */
    public function getCardExpMonths()
    {
        return $this->container['card_exp_months'];
    }

    /**
     * Sets card_exp_months
     *
     * @param string[] $card_exp_months card_exp_months
     *
     * @return $this
     */
    public function setCardExpMonths($card_exp_months)
    {
        $this->container['card_exp_months'] = $card_exp_months;

        return $this;
    }

    /**
     * Gets card_exp_years
     *
     * @return string[]
     */
    public function getCardExpYears()
    {
        return $this->container['card_exp_years'];
    }

    /**
     * Sets card_exp_years
     *
     * @param string[] $card_exp_years card_exp_years
     *
     * @return $this
     */
    public function setCardExpYears($card_exp_years)
    {
        $this->container['card_exp_years'] = $card_exp_years;

        return $this;
    }

    /**
     * Gets card_types
     *
     * @return string[]
     */
    public function getCardTypes()
    {
        return $this->container['card_types'];
    }

    /**
     * Sets card_types
     *
     * @param string[] $card_types card_types
     *
     * @return $this
     */
    public function setCardTypes($card_types)
    {
        $this->container['card_types'] = $card_types;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return \ultracart\v2\models\Country[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param \ultracart\v2\models\Country[] $countries countries
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets qb_classes
     *
     * @return string[]
     */
    public function getQbClasses()
    {
        return $this->container['qb_classes'];
    }

    /**
     * Sets qb_classes
     *
     * @param string[] $qb_classes qb_classes
     *
     * @return $this
     */
    public function setQbClasses($qb_classes)
    {
        $this->container['qb_classes'] = $qb_classes;

        return $this;
    }

    /**
     * Gets sales_rep_codes
     *
     * @return string[]
     */
    public function getSalesRepCodes()
    {
        return $this->container['sales_rep_codes'];
    }

    /**
     * Sets sales_rep_codes
     *
     * @param string[] $sales_rep_codes sales_rep_codes
     *
     * @return $this
     */
    public function setSalesRepCodes($sales_rep_codes)
    {
        $this->container['sales_rep_codes'] = $sales_rep_codes;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return string[]
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param string[] $terms terms
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


