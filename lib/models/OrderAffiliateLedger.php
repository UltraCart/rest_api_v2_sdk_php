<?php
/**
 * OrderAffiliateLedger
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * OrderAffiliateLedger Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     ultracart\v2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderAffiliateLedger implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderAffiliateLedger';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'assigned_by_user' => 'string',
        'item_id' => 'string',
        'tier_number' => 'int',
        'transaction_amount' => 'float',
        'transaction_amount_paid' => 'float',
        'transaction_dts' => 'string',
        'transaction_memo' => 'string',
        'transaction_percentage' => 'float',
        'transaction_state' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'assigned_by_user' => 'assigned_by_user',
        'item_id' => 'item_id',
        'tier_number' => 'tier_number',
        'transaction_amount' => 'transaction_amount',
        'transaction_amount_paid' => 'transaction_amount_paid',
        'transaction_dts' => 'transaction_dts',
        'transaction_memo' => 'transaction_memo',
        'transaction_percentage' => 'transaction_percentage',
        'transaction_state' => 'transaction_state'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'assigned_by_user' => 'setAssignedByUser',
        'item_id' => 'setItemId',
        'tier_number' => 'setTierNumber',
        'transaction_amount' => 'setTransactionAmount',
        'transaction_amount_paid' => 'setTransactionAmountPaid',
        'transaction_dts' => 'setTransactionDts',
        'transaction_memo' => 'setTransactionMemo',
        'transaction_percentage' => 'setTransactionPercentage',
        'transaction_state' => 'setTransactionState'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'assigned_by_user' => 'getAssignedByUser',
        'item_id' => 'getItemId',
        'tier_number' => 'getTierNumber',
        'transaction_amount' => 'getTransactionAmount',
        'transaction_amount_paid' => 'getTransactionAmountPaid',
        'transaction_dts' => 'getTransactionDts',
        'transaction_memo' => 'getTransactionMemo',
        'transaction_percentage' => 'getTransactionPercentage',
        'transaction_state' => 'getTransactionState'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const TRANSACTION_STATE_PENDING = 'Pending';
    const TRANSACTION_STATE_POSTED = 'Posted';
    const TRANSACTION_STATE_APPROVED = 'Approved';
    const TRANSACTION_STATE_PAID = 'Paid';
    const TRANSACTION_STATE_REJECTED = 'Rejected';
    const TRANSACTION_STATE_PARTIALLY_PAID = 'Partially Paid';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTransactionStateAllowableValues()
    {
        return [
            self::TRANSACTION_STATE_PENDING,
            self::TRANSACTION_STATE_POSTED,
            self::TRANSACTION_STATE_APPROVED,
            self::TRANSACTION_STATE_PAID,
            self::TRANSACTION_STATE_REJECTED,
            self::TRANSACTION_STATE_PARTIALLY_PAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assigned_by_user'] = isset($data['assigned_by_user']) ? $data['assigned_by_user'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['tier_number'] = isset($data['tier_number']) ? $data['tier_number'] : null;
        $this->container['transaction_amount'] = isset($data['transaction_amount']) ? $data['transaction_amount'] : null;
        $this->container['transaction_amount_paid'] = isset($data['transaction_amount_paid']) ? $data['transaction_amount_paid'] : null;
        $this->container['transaction_dts'] = isset($data['transaction_dts']) ? $data['transaction_dts'] : null;
        $this->container['transaction_memo'] = isset($data['transaction_memo']) ? $data['transaction_memo'] : null;
        $this->container['transaction_percentage'] = isset($data['transaction_percentage']) ? $data['transaction_percentage'] : null;
        $this->container['transaction_state'] = isset($data['transaction_state']) ? $data['transaction_state'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("Pending", "Posted", "Approved", "Paid", "Rejected", "Partially Paid");
        if (!in_array($this->container['transaction_state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'transaction_state', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("Pending", "Posted", "Approved", "Paid", "Rejected", "Partially Paid");
        if (!in_array($this->container['transaction_state'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets assigned_by_user
     * @return string
     */
    public function getAssignedByUser()
    {
        return $this->container['assigned_by_user'];
    }

    /**
     * Sets assigned_by_user
     * @param string $assigned_by_user UltraCart user name that assigned this commission if manually assigned
     * @return $this
     */
    public function setAssignedByUser($assigned_by_user)
    {
        $this->container['assigned_by_user'] = $assigned_by_user;

        return $this;
    }

    /**
     * Gets item_id
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     * @param string $item_id Item ID that this ledger record is associated with
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets tier_number
     * @return int
     */
    public function getTierNumber()
    {
        return $this->container['tier_number'];
    }

    /**
     * Sets tier_number
     * @param int $tier_number Tier number of this affiliate in the commission calculation
     * @return $this
     */
    public function setTierNumber($tier_number)
    {
        $this->container['tier_number'] = $tier_number;

        return $this;
    }

    /**
     * Gets transaction_amount
     * @return float
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     * @param float $transaction_amount Amount of the transaction
     * @return $this
     */
    public function setTransactionAmount($transaction_amount)
    {
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets transaction_amount_paid
     * @return float
     */
    public function getTransactionAmountPaid()
    {
        return $this->container['transaction_amount_paid'];
    }

    /**
     * Sets transaction_amount_paid
     * @param float $transaction_amount_paid The amount that has been paid so far on the transaction
     * @return $this
     */
    public function setTransactionAmountPaid($transaction_amount_paid)
    {
        $this->container['transaction_amount_paid'] = $transaction_amount_paid;

        return $this;
    }

    /**
     * Gets transaction_dts
     * @return string
     */
    public function getTransactionDts()
    {
        return $this->container['transaction_dts'];
    }

    /**
     * Sets transaction_dts
     * @param string $transaction_dts The date/time that the affiliate ledger was generated for the transaction
     * @return $this
     */
    public function setTransactionDts($transaction_dts)
    {
        $this->container['transaction_dts'] = $transaction_dts;

        return $this;
    }

    /**
     * Gets transaction_memo
     * @return string
     */
    public function getTransactionMemo()
    {
        return $this->container['transaction_memo'];
    }

    /**
     * Sets transaction_memo
     * @param string $transaction_memo Details of the transaction suitable for display to the affiliate
     * @return $this
     */
    public function setTransactionMemo($transaction_memo)
    {
        $this->container['transaction_memo'] = $transaction_memo;

        return $this;
    }

    /**
     * Gets transaction_percentage
     * @return float
     */
    public function getTransactionPercentage()
    {
        return $this->container['transaction_percentage'];
    }

    /**
     * Sets transaction_percentage
     * @param float $transaction_percentage The percentage earned on the transaction
     * @return $this
     */
    public function setTransactionPercentage($transaction_percentage)
    {
        $this->container['transaction_percentage'] = $transaction_percentage;

        return $this;
    }

    /**
     * Gets transaction_state
     * @return string
     */
    public function getTransactionState()
    {
        return $this->container['transaction_state'];
    }

    /**
     * Sets transaction_state
     * @param string $transaction_state The state of the transaction
     * @return $this
     */
    public function setTransactionState($transaction_state)
    {
        $allowed_values = array('Pending', 'Posted', 'Approved', 'Paid', 'Rejected', 'Partially Paid');
        if (!in_array($transaction_state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'transaction_state', must be one of 'Pending', 'Posted', 'Approved', 'Paid', 'Rejected', 'Partially Paid'");
        }
        $this->container['transaction_state'] = $transaction_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


