<?php
/**
 * EmailPostcardStat
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * EmailPostcardStat Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailPostcardStat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailPostcardStat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'click_count' => 'int',
        'click_count_formatted' => 'string',
        'conversion_count' => 'int',
        'conversion_count_formatted' => 'string',
        'delivered_count' => 'int',
        'delivered_count_formatted' => 'string',
        'merchant_id' => 'string',
        'name' => 'string',
        'order_count' => 'int',
        'order_count_formatted' => 'string',
        'profit' => 'float',
        'profit_formatted' => 'string',
        'return_to_sender_count' => 'int',
        'return_to_sender_count_formatted' => 'string',
        'revenue' => 'float',
        'revenue_formatted' => 'string',
        'send_count' => 'int',
        'send_count_formatted' => 'string',
        'skipped_count' => 'int',
        'skipped_count_formatted' => 'string',
        'spam_count' => 'int',
        'spam_count_formatted' => 'string',
        'stat_type' => 'string',
        'status' => 'string',
        'status_dts' => 'string',
        'steps' => '\ultracart\v2\models\EmailPostcardStat[]',
        'storefront_oid' => 'int',
        'unsubscribe_count' => 'int',
        'unsubscribe_count_formatted' => 'string',
        'uuid' => 'string',
        'view_count' => 'int',
        'view_count_formatted' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'click_count' => 'int32',
        'click_count_formatted' => null,
        'conversion_count' => 'int32',
        'conversion_count_formatted' => null,
        'delivered_count' => 'int32',
        'delivered_count_formatted' => null,
        'merchant_id' => null,
        'name' => null,
        'order_count' => 'int32',
        'order_count_formatted' => null,
        'profit' => null,
        'profit_formatted' => null,
        'return_to_sender_count' => 'int32',
        'return_to_sender_count_formatted' => null,
        'revenue' => null,
        'revenue_formatted' => null,
        'send_count' => 'int32',
        'send_count_formatted' => null,
        'skipped_count' => 'int32',
        'skipped_count_formatted' => null,
        'spam_count' => 'int32',
        'spam_count_formatted' => null,
        'stat_type' => null,
        'status' => null,
        'status_dts' => null,
        'steps' => null,
        'storefront_oid' => 'int32',
        'unsubscribe_count' => 'int32',
        'unsubscribe_count_formatted' => null,
        'uuid' => null,
        'view_count' => 'int32',
        'view_count_formatted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'click_count' => 'click_count',
        'click_count_formatted' => 'click_count_formatted',
        'conversion_count' => 'conversion_count',
        'conversion_count_formatted' => 'conversion_count_formatted',
        'delivered_count' => 'delivered_count',
        'delivered_count_formatted' => 'delivered_count_formatted',
        'merchant_id' => 'merchant_id',
        'name' => 'name',
        'order_count' => 'order_count',
        'order_count_formatted' => 'order_count_formatted',
        'profit' => 'profit',
        'profit_formatted' => 'profit_formatted',
        'return_to_sender_count' => 'return_to_sender_count',
        'return_to_sender_count_formatted' => 'return_to_sender_count_formatted',
        'revenue' => 'revenue',
        'revenue_formatted' => 'revenue_formatted',
        'send_count' => 'send_count',
        'send_count_formatted' => 'send_count_formatted',
        'skipped_count' => 'skipped_count',
        'skipped_count_formatted' => 'skipped_count_formatted',
        'spam_count' => 'spam_count',
        'spam_count_formatted' => 'spam_count_formatted',
        'stat_type' => 'stat_type',
        'status' => 'status',
        'status_dts' => 'status_dts',
        'steps' => 'steps',
        'storefront_oid' => 'storefront_oid',
        'unsubscribe_count' => 'unsubscribe_count',
        'unsubscribe_count_formatted' => 'unsubscribe_count_formatted',
        'uuid' => 'uuid',
        'view_count' => 'view_count',
        'view_count_formatted' => 'view_count_formatted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'click_count' => 'setClickCount',
        'click_count_formatted' => 'setClickCountFormatted',
        'conversion_count' => 'setConversionCount',
        'conversion_count_formatted' => 'setConversionCountFormatted',
        'delivered_count' => 'setDeliveredCount',
        'delivered_count_formatted' => 'setDeliveredCountFormatted',
        'merchant_id' => 'setMerchantId',
        'name' => 'setName',
        'order_count' => 'setOrderCount',
        'order_count_formatted' => 'setOrderCountFormatted',
        'profit' => 'setProfit',
        'profit_formatted' => 'setProfitFormatted',
        'return_to_sender_count' => 'setReturnToSenderCount',
        'return_to_sender_count_formatted' => 'setReturnToSenderCountFormatted',
        'revenue' => 'setRevenue',
        'revenue_formatted' => 'setRevenueFormatted',
        'send_count' => 'setSendCount',
        'send_count_formatted' => 'setSendCountFormatted',
        'skipped_count' => 'setSkippedCount',
        'skipped_count_formatted' => 'setSkippedCountFormatted',
        'spam_count' => 'setSpamCount',
        'spam_count_formatted' => 'setSpamCountFormatted',
        'stat_type' => 'setStatType',
        'status' => 'setStatus',
        'status_dts' => 'setStatusDts',
        'steps' => 'setSteps',
        'storefront_oid' => 'setStorefrontOid',
        'unsubscribe_count' => 'setUnsubscribeCount',
        'unsubscribe_count_formatted' => 'setUnsubscribeCountFormatted',
        'uuid' => 'setUuid',
        'view_count' => 'setViewCount',
        'view_count_formatted' => 'setViewCountFormatted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'click_count' => 'getClickCount',
        'click_count_formatted' => 'getClickCountFormatted',
        'conversion_count' => 'getConversionCount',
        'conversion_count_formatted' => 'getConversionCountFormatted',
        'delivered_count' => 'getDeliveredCount',
        'delivered_count_formatted' => 'getDeliveredCountFormatted',
        'merchant_id' => 'getMerchantId',
        'name' => 'getName',
        'order_count' => 'getOrderCount',
        'order_count_formatted' => 'getOrderCountFormatted',
        'profit' => 'getProfit',
        'profit_formatted' => 'getProfitFormatted',
        'return_to_sender_count' => 'getReturnToSenderCount',
        'return_to_sender_count_formatted' => 'getReturnToSenderCountFormatted',
        'revenue' => 'getRevenue',
        'revenue_formatted' => 'getRevenueFormatted',
        'send_count' => 'getSendCount',
        'send_count_formatted' => 'getSendCountFormatted',
        'skipped_count' => 'getSkippedCount',
        'skipped_count_formatted' => 'getSkippedCountFormatted',
        'spam_count' => 'getSpamCount',
        'spam_count_formatted' => 'getSpamCountFormatted',
        'stat_type' => 'getStatType',
        'status' => 'getStatus',
        'status_dts' => 'getStatusDts',
        'steps' => 'getSteps',
        'storefront_oid' => 'getStorefrontOid',
        'unsubscribe_count' => 'getUnsubscribeCount',
        'unsubscribe_count_formatted' => 'getUnsubscribeCountFormatted',
        'uuid' => 'getUuid',
        'view_count' => 'getViewCount',
        'view_count_formatted' => 'getViewCountFormatted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['click_count'] = $data['click_count'] ?? null;
        $this->container['click_count_formatted'] = $data['click_count_formatted'] ?? null;
        $this->container['conversion_count'] = $data['conversion_count'] ?? null;
        $this->container['conversion_count_formatted'] = $data['conversion_count_formatted'] ?? null;
        $this->container['delivered_count'] = $data['delivered_count'] ?? null;
        $this->container['delivered_count_formatted'] = $data['delivered_count_formatted'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['order_count'] = $data['order_count'] ?? null;
        $this->container['order_count_formatted'] = $data['order_count_formatted'] ?? null;
        $this->container['profit'] = $data['profit'] ?? null;
        $this->container['profit_formatted'] = $data['profit_formatted'] ?? null;
        $this->container['return_to_sender_count'] = $data['return_to_sender_count'] ?? null;
        $this->container['return_to_sender_count_formatted'] = $data['return_to_sender_count_formatted'] ?? null;
        $this->container['revenue'] = $data['revenue'] ?? null;
        $this->container['revenue_formatted'] = $data['revenue_formatted'] ?? null;
        $this->container['send_count'] = $data['send_count'] ?? null;
        $this->container['send_count_formatted'] = $data['send_count_formatted'] ?? null;
        $this->container['skipped_count'] = $data['skipped_count'] ?? null;
        $this->container['skipped_count_formatted'] = $data['skipped_count_formatted'] ?? null;
        $this->container['spam_count'] = $data['spam_count'] ?? null;
        $this->container['spam_count_formatted'] = $data['spam_count_formatted'] ?? null;
        $this->container['stat_type'] = $data['stat_type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_dts'] = $data['status_dts'] ?? null;
        $this->container['steps'] = $data['steps'] ?? null;
        $this->container['storefront_oid'] = $data['storefront_oid'] ?? null;
        $this->container['unsubscribe_count'] = $data['unsubscribe_count'] ?? null;
        $this->container['unsubscribe_count_formatted'] = $data['unsubscribe_count_formatted'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['view_count'] = $data['view_count'] ?? null;
        $this->container['view_count_formatted'] = $data['view_count_formatted'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets click_count
     *
     * @return int|null
     */
    public function getClickCount()
    {
        return $this->container['click_count'];
    }

    /**
     * Sets click_count
     *
     * @param int|null $click_count Count of clicked emails
     *
     * @return self
     */
    public function setClickCount($click_count)
    {
        $this->container['click_count'] = $click_count;

        return $this;
    }

    /**
     * Gets click_count_formatted
     *
     * @return string|null
     */
    public function getClickCountFormatted()
    {
        return $this->container['click_count_formatted'];
    }

    /**
     * Sets click_count_formatted
     *
     * @param string|null $click_count_formatted Count of clicked emails, formatted
     *
     * @return self
     */
    public function setClickCountFormatted($click_count_formatted)
    {
        $this->container['click_count_formatted'] = $click_count_formatted;

        return $this;
    }

    /**
     * Gets conversion_count
     *
     * @return int|null
     */
    public function getConversionCount()
    {
        return $this->container['conversion_count'];
    }

    /**
     * Sets conversion_count
     *
     * @param int|null $conversion_count Count of conversions
     *
     * @return self
     */
    public function setConversionCount($conversion_count)
    {
        $this->container['conversion_count'] = $conversion_count;

        return $this;
    }

    /**
     * Gets conversion_count_formatted
     *
     * @return string|null
     */
    public function getConversionCountFormatted()
    {
        return $this->container['conversion_count_formatted'];
    }

    /**
     * Sets conversion_count_formatted
     *
     * @param string|null $conversion_count_formatted Count of conversions, formatted
     *
     * @return self
     */
    public function setConversionCountFormatted($conversion_count_formatted)
    {
        $this->container['conversion_count_formatted'] = $conversion_count_formatted;

        return $this;
    }

    /**
     * Gets delivered_count
     *
     * @return int|null
     */
    public function getDeliveredCount()
    {
        return $this->container['delivered_count'];
    }

    /**
     * Sets delivered_count
     *
     * @param int|null $delivered_count Count of delivered emails
     *
     * @return self
     */
    public function setDeliveredCount($delivered_count)
    {
        $this->container['delivered_count'] = $delivered_count;

        return $this;
    }

    /**
     * Gets delivered_count_formatted
     *
     * @return string|null
     */
    public function getDeliveredCountFormatted()
    {
        return $this->container['delivered_count_formatted'];
    }

    /**
     * Sets delivered_count_formatted
     *
     * @param string|null $delivered_count_formatted Count of delivered emails, formatted
     *
     * @return self
     */
    public function setDeliveredCountFormatted($delivered_count_formatted)
    {
        $this->container['delivered_count_formatted'] = $delivered_count_formatted;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Merchant ID
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name List or segment name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets order_count
     *
     * @return int|null
     */
    public function getOrderCount()
    {
        return $this->container['order_count'];
    }

    /**
     * Sets order_count
     *
     * @param int|null $order_count Count of orders
     *
     * @return self
     */
    public function setOrderCount($order_count)
    {
        $this->container['order_count'] = $order_count;

        return $this;
    }

    /**
     * Gets order_count_formatted
     *
     * @return string|null
     */
    public function getOrderCountFormatted()
    {
        return $this->container['order_count_formatted'];
    }

    /**
     * Sets order_count_formatted
     *
     * @param string|null $order_count_formatted Count of orders, formatted
     *
     * @return self
     */
    public function setOrderCountFormatted($order_count_formatted)
    {
        $this->container['order_count_formatted'] = $order_count_formatted;

        return $this;
    }

    /**
     * Gets profit
     *
     * @return float|null
     */
    public function getProfit()
    {
        return $this->container['profit'];
    }

    /**
     * Sets profit
     *
     * @param float|null $profit Profit
     *
     * @return self
     */
    public function setProfit($profit)
    {
        $this->container['profit'] = $profit;

        return $this;
    }

    /**
     * Gets profit_formatted
     *
     * @return string|null
     */
    public function getProfitFormatted()
    {
        return $this->container['profit_formatted'];
    }

    /**
     * Sets profit_formatted
     *
     * @param string|null $profit_formatted Profit, formatted
     *
     * @return self
     */
    public function setProfitFormatted($profit_formatted)
    {
        $this->container['profit_formatted'] = $profit_formatted;

        return $this;
    }

    /**
     * Gets return_to_sender_count
     *
     * @return int|null
     */
    public function getReturnToSenderCount()
    {
        return $this->container['return_to_sender_count'];
    }

    /**
     * Sets return_to_sender_count
     *
     * @param int|null $return_to_sender_count Count of return to sender
     *
     * @return self
     */
    public function setReturnToSenderCount($return_to_sender_count)
    {
        $this->container['return_to_sender_count'] = $return_to_sender_count;

        return $this;
    }

    /**
     * Gets return_to_sender_count_formatted
     *
     * @return string|null
     */
    public function getReturnToSenderCountFormatted()
    {
        return $this->container['return_to_sender_count_formatted'];
    }

    /**
     * Sets return_to_sender_count_formatted
     *
     * @param string|null $return_to_sender_count_formatted Count of return to sender, formatted
     *
     * @return self
     */
    public function setReturnToSenderCountFormatted($return_to_sender_count_formatted)
    {
        $this->container['return_to_sender_count_formatted'] = $return_to_sender_count_formatted;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return float|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param float|null $revenue Revenue
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets revenue_formatted
     *
     * @return string|null
     */
    public function getRevenueFormatted()
    {
        return $this->container['revenue_formatted'];
    }

    /**
     * Sets revenue_formatted
     *
     * @param string|null $revenue_formatted Revenue, formatted
     *
     * @return self
     */
    public function setRevenueFormatted($revenue_formatted)
    {
        $this->container['revenue_formatted'] = $revenue_formatted;

        return $this;
    }

    /**
     * Gets send_count
     *
     * @return int|null
     */
    public function getSendCount()
    {
        return $this->container['send_count'];
    }

    /**
     * Sets send_count
     *
     * @param int|null $send_count Count of emails sent
     *
     * @return self
     */
    public function setSendCount($send_count)
    {
        $this->container['send_count'] = $send_count;

        return $this;
    }

    /**
     * Gets send_count_formatted
     *
     * @return string|null
     */
    public function getSendCountFormatted()
    {
        return $this->container['send_count_formatted'];
    }

    /**
     * Sets send_count_formatted
     *
     * @param string|null $send_count_formatted Count of emails sent, formatted
     *
     * @return self
     */
    public function setSendCountFormatted($send_count_formatted)
    {
        $this->container['send_count_formatted'] = $send_count_formatted;

        return $this;
    }

    /**
     * Gets skipped_count
     *
     * @return int|null
     */
    public function getSkippedCount()
    {
        return $this->container['skipped_count'];
    }

    /**
     * Sets skipped_count
     *
     * @param int|null $skipped_count Count of skipped emails
     *
     * @return self
     */
    public function setSkippedCount($skipped_count)
    {
        $this->container['skipped_count'] = $skipped_count;

        return $this;
    }

    /**
     * Gets skipped_count_formatted
     *
     * @return string|null
     */
    public function getSkippedCountFormatted()
    {
        return $this->container['skipped_count_formatted'];
    }

    /**
     * Sets skipped_count_formatted
     *
     * @param string|null $skipped_count_formatted Count of skipped emails, formatted
     *
     * @return self
     */
    public function setSkippedCountFormatted($skipped_count_formatted)
    {
        $this->container['skipped_count_formatted'] = $skipped_count_formatted;

        return $this;
    }

    /**
     * Gets spam_count
     *
     * @return int|null
     */
    public function getSpamCount()
    {
        return $this->container['spam_count'];
    }

    /**
     * Sets spam_count
     *
     * @param int|null $spam_count Count of emails classified as spam
     *
     * @return self
     */
    public function setSpamCount($spam_count)
    {
        $this->container['spam_count'] = $spam_count;

        return $this;
    }

    /**
     * Gets spam_count_formatted
     *
     * @return string|null
     */
    public function getSpamCountFormatted()
    {
        return $this->container['spam_count_formatted'];
    }

    /**
     * Sets spam_count_formatted
     *
     * @param string|null $spam_count_formatted Count of emails classified as spam, formatted
     *
     * @return self
     */
    public function setSpamCountFormatted($spam_count_formatted)
    {
        $this->container['spam_count_formatted'] = $spam_count_formatted;

        return $this;
    }

    /**
     * Gets stat_type
     *
     * @return string|null
     */
    public function getStatType()
    {
        return $this->container['stat_type'];
    }

    /**
     * Sets stat_type
     *
     * @param string|null $stat_type Campaign, Flow or None (for anything else)
     *
     * @return self
     */
    public function setStatType($stat_type)
    {
        $this->container['stat_type'] = $stat_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of campaign or flow
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_dts
     *
     * @return string|null
     */
    public function getStatusDts()
    {
        return $this->container['status_dts'];
    }

    /**
     * Sets status_dts
     *
     * @param string|null $status_dts Status dts of campaign or flow
     *
     * @return self
     */
    public function setStatusDts($status_dts)
    {
        $this->container['status_dts'] = $status_dts;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \ultracart\v2\models\EmailPostcardStat[]|null
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \ultracart\v2\models\EmailPostcardStat[]|null $steps steps
     *
     * @return self
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets storefront_oid
     *
     * @return int|null
     */
    public function getStorefrontOid()
    {
        return $this->container['storefront_oid'];
    }

    /**
     * Sets storefront_oid
     *
     * @param int|null $storefront_oid Storefront oid
     *
     * @return self
     */
    public function setStorefrontOid($storefront_oid)
    {
        $this->container['storefront_oid'] = $storefront_oid;

        return $this;
    }

    /**
     * Gets unsubscribe_count
     *
     * @return int|null
     */
    public function getUnsubscribeCount()
    {
        return $this->container['unsubscribe_count'];
    }

    /**
     * Sets unsubscribe_count
     *
     * @param int|null $unsubscribe_count Count of emails classified as unsubscribe
     *
     * @return self
     */
    public function setUnsubscribeCount($unsubscribe_count)
    {
        $this->container['unsubscribe_count'] = $unsubscribe_count;

        return $this;
    }

    /**
     * Gets unsubscribe_count_formatted
     *
     * @return string|null
     */
    public function getUnsubscribeCountFormatted()
    {
        return $this->container['unsubscribe_count_formatted'];
    }

    /**
     * Sets unsubscribe_count_formatted
     *
     * @param string|null $unsubscribe_count_formatted Count of emails classified as unsubscribe, formatted
     *
     * @return self
     */
    public function setUnsubscribeCountFormatted($unsubscribe_count_formatted)
    {
        $this->container['unsubscribe_count_formatted'] = $unsubscribe_count_formatted;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid List or segment uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return int|null
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param int|null $view_count Count of views
     *
     * @return self
     */
    public function setViewCount($view_count)
    {
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets view_count_formatted
     *
     * @return string|null
     */
    public function getViewCountFormatted()
    {
        return $this->container['view_count_formatted'];
    }

    /**
     * Sets view_count_formatted
     *
     * @param string|null $view_count_formatted Count of views, formatted
     *
     * @return self
     */
    public function setViewCountFormatted($view_count_formatted)
    {
        $this->container['view_count_formatted'] = $view_count_formatted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


