<?php
/**
 * ItemRestriction
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ItemRestriction Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemRestriction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemRestriction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exclude_coupon' => 'bool',
        'exclude_from_free_promotion' => 'bool',
        'items' => '\ultracart\v2\models\ItemRestrictionItem[]',
        'maximum_quantity' => 'int',
        'minimum_quantity' => 'int',
        'multiple_quantity' => 'int',
        'one_per_customer' => 'bool',
        'purchase_separately' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exclude_coupon' => null,
        'exclude_from_free_promotion' => null,
        'items' => null,
        'maximum_quantity' => 'int32',
        'minimum_quantity' => 'int32',
        'multiple_quantity' => 'int32',
        'one_per_customer' => null,
        'purchase_separately' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exclude_coupon' => 'exclude_coupon',
        'exclude_from_free_promotion' => 'exclude_from_free_promotion',
        'items' => 'items',
        'maximum_quantity' => 'maximum_quantity',
        'minimum_quantity' => 'minimum_quantity',
        'multiple_quantity' => 'multiple_quantity',
        'one_per_customer' => 'one_per_customer',
        'purchase_separately' => 'purchase_separately'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exclude_coupon' => 'setExcludeCoupon',
        'exclude_from_free_promotion' => 'setExcludeFromFreePromotion',
        'items' => 'setItems',
        'maximum_quantity' => 'setMaximumQuantity',
        'minimum_quantity' => 'setMinimumQuantity',
        'multiple_quantity' => 'setMultipleQuantity',
        'one_per_customer' => 'setOnePerCustomer',
        'purchase_separately' => 'setPurchaseSeparately'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exclude_coupon' => 'getExcludeCoupon',
        'exclude_from_free_promotion' => 'getExcludeFromFreePromotion',
        'items' => 'getItems',
        'maximum_quantity' => 'getMaximumQuantity',
        'minimum_quantity' => 'getMinimumQuantity',
        'multiple_quantity' => 'getMultipleQuantity',
        'one_per_customer' => 'getOnePerCustomer',
        'purchase_separately' => 'getPurchaseSeparately'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exclude_coupon'] = isset($data['exclude_coupon']) ? $data['exclude_coupon'] : null;
        $this->container['exclude_from_free_promotion'] = isset($data['exclude_from_free_promotion']) ? $data['exclude_from_free_promotion'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['maximum_quantity'] = isset($data['maximum_quantity']) ? $data['maximum_quantity'] : null;
        $this->container['minimum_quantity'] = isset($data['minimum_quantity']) ? $data['minimum_quantity'] : null;
        $this->container['multiple_quantity'] = isset($data['multiple_quantity']) ? $data['multiple_quantity'] : null;
        $this->container['one_per_customer'] = isset($data['one_per_customer']) ? $data['one_per_customer'] : null;
        $this->container['purchase_separately'] = isset($data['purchase_separately']) ? $data['purchase_separately'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets exclude_coupon
     *
     * @return bool
     */
    public function getExcludeCoupon()
    {
        return $this->container['exclude_coupon'];
    }

    /**
     * Sets exclude_coupon
     *
     * @param bool $exclude_coupon Exclude coupons
     *
     * @return $this
     */
    public function setExcludeCoupon($exclude_coupon)
    {
        $this->container['exclude_coupon'] = $exclude_coupon;

        return $this;
    }

    /**
     * Gets exclude_from_free_promotion
     *
     * @return bool
     */
    public function getExcludeFromFreePromotion()
    {
        return $this->container['exclude_from_free_promotion'];
    }

    /**
     * Sets exclude_from_free_promotion
     *
     * @param bool $exclude_from_free_promotion Exclude from free promotion
     *
     * @return $this
     */
    public function setExcludeFromFreePromotion($exclude_from_free_promotion)
    {
        $this->container['exclude_from_free_promotion'] = $exclude_from_free_promotion;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \ultracart\v2\models\ItemRestrictionItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \ultracart\v2\models\ItemRestrictionItem[] $items Items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets maximum_quantity
     *
     * @return int
     */
    public function getMaximumQuantity()
    {
        return $this->container['maximum_quantity'];
    }

    /**
     * Sets maximum_quantity
     *
     * @param int $maximum_quantity Maximum quantity
     *
     * @return $this
     */
    public function setMaximumQuantity($maximum_quantity)
    {
        $this->container['maximum_quantity'] = $maximum_quantity;

        return $this;
    }

    /**
     * Gets minimum_quantity
     *
     * @return int
     */
    public function getMinimumQuantity()
    {
        return $this->container['minimum_quantity'];
    }

    /**
     * Sets minimum_quantity
     *
     * @param int $minimum_quantity Minimum quantity (defaults to 1)
     *
     * @return $this
     */
    public function setMinimumQuantity($minimum_quantity)
    {
        $this->container['minimum_quantity'] = $minimum_quantity;

        return $this;
    }

    /**
     * Gets multiple_quantity
     *
     * @return int
     */
    public function getMultipleQuantity()
    {
        return $this->container['multiple_quantity'];
    }

    /**
     * Sets multiple_quantity
     *
     * @param int $multiple_quantity Multiple of quantity
     *
     * @return $this
     */
    public function setMultipleQuantity($multiple_quantity)
    {
        $this->container['multiple_quantity'] = $multiple_quantity;

        return $this;
    }

    /**
     * Gets one_per_customer
     *
     * @return bool
     */
    public function getOnePerCustomer()
    {
        return $this->container['one_per_customer'];
    }

    /**
     * Sets one_per_customer
     *
     * @param bool $one_per_customer One per customer
     *
     * @return $this
     */
    public function setOnePerCustomer($one_per_customer)
    {
        $this->container['one_per_customer'] = $one_per_customer;

        return $this;
    }

    /**
     * Gets purchase_separately
     *
     * @return bool
     */
    public function getPurchaseSeparately()
    {
        return $this->container['purchase_separately'];
    }

    /**
     * Sets purchase_separately
     *
     * @param bool $purchase_separately Purchase separately
     *
     * @return $this
     */
    public function setPurchaseSeparately($purchase_separately)
    {
        $this->container['purchase_separately'] = $purchase_separately;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


