<?php
/**
 * ConversationCannedMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;
use \ultracart\v2\ObjectSerializer;

/**
 * ConversationCannedMessage Class Doc Comment
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationCannedMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConversationCannedMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'canned_message' => 'string',
        'conversation_canned_message_oid' => 'int',
        'conversation_department_oids' => 'int[]',
        'short_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'canned_message' => null,
        'conversation_canned_message_oid' => 'int32',
        'conversation_department_oids' => null,
        'short_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canned_message' => 'canned_message',
        'conversation_canned_message_oid' => 'conversation_canned_message_oid',
        'conversation_department_oids' => 'conversation_department_oids',
        'short_code' => 'short_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canned_message' => 'setCannedMessage',
        'conversation_canned_message_oid' => 'setConversationCannedMessageOid',
        'conversation_department_oids' => 'setConversationDepartmentOids',
        'short_code' => 'setShortCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canned_message' => 'getCannedMessage',
        'conversation_canned_message_oid' => 'getConversationCannedMessageOid',
        'conversation_department_oids' => 'getConversationDepartmentOids',
        'short_code' => 'getShortCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['canned_message'] = isset($data['canned_message']) ? $data['canned_message'] : null;
        $this->container['conversation_canned_message_oid'] = isset($data['conversation_canned_message_oid']) ? $data['conversation_canned_message_oid'] : null;
        $this->container['conversation_department_oids'] = isset($data['conversation_department_oids']) ? $data['conversation_department_oids'] : null;
        $this->container['short_code'] = isset($data['short_code']) ? $data['short_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canned_message
     *
     * @return string
     */
    public function getCannedMessage()
    {
        return $this->container['canned_message'];
    }

    /**
     * Sets canned_message
     *
     * @param string $canned_message canned_message
     *
     * @return $this
     */
    public function setCannedMessage($canned_message)
    {
        $this->container['canned_message'] = $canned_message;

        return $this;
    }

    /**
     * Gets conversation_canned_message_oid
     *
     * @return int
     */
    public function getConversationCannedMessageOid()
    {
        return $this->container['conversation_canned_message_oid'];
    }

    /**
     * Sets conversation_canned_message_oid
     *
     * @param int $conversation_canned_message_oid conversation_canned_message_oid
     *
     * @return $this
     */
    public function setConversationCannedMessageOid($conversation_canned_message_oid)
    {
        $this->container['conversation_canned_message_oid'] = $conversation_canned_message_oid;

        return $this;
    }

    /**
     * Gets conversation_department_oids
     *
     * @return int[]
     */
    public function getConversationDepartmentOids()
    {
        return $this->container['conversation_department_oids'];
    }

    /**
     * Sets conversation_department_oids
     *
     * @param int[] $conversation_department_oids conversation_department_oids
     *
     * @return $this
     */
    public function setConversationDepartmentOids($conversation_department_oids)
    {
        $this->container['conversation_department_oids'] = $conversation_department_oids;

        return $this;
    }

    /**
     * Gets short_code
     *
     * @return string
     */
    public function getShortCode()
    {
        return $this->container['short_code'];
    }

    /**
     * Sets short_code
     *
     * @param string $short_code short_code
     *
     * @return $this
     */
    public function setShortCode($short_code)
    {
        $this->container['short_code'] = $short_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


