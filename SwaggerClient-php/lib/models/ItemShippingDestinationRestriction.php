<?php
/**
 * ItemShippingDestinationRestriction
 *
 * PHP version 5
 *
 * @category Class
 * @package  ultracart\v2
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UltraCart Rest API V2
 *
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ultracart\v2\models;

use \ArrayAccess;

/**
 * ItemShippingDestinationRestriction Class Doc Comment
 *
 * @category    Class
 * @package     ultracart\v2
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemShippingDestinationRestriction implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ItemShippingDestinationRestriction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country_code' => 'string',
        'state' => 'string',
        'validity' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country_code' => null,
        'state' => null,
        'validity' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'country_code' => 'country_code',
        'state' => 'state',
        'validity' => 'validity'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'country_code' => 'setCountryCode',
        'state' => 'setState',
        'validity' => 'setValidity'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'country_code' => 'getCountryCode',
        'state' => 'getState',
        'validity' => 'getValidity'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const VALIDITY_VALID_ONLY_FOR = 'valid only for';
    const VALIDITY_INVALID_FOR = 'invalid for';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getValidityAllowableValues()
    {
        return [
            self::VALIDITY_VALID_ONLY_FOR,
            self::VALIDITY_INVALID_FOR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['validity'] = isset($data['validity']) ? $data['validity'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['country_code']) && (strlen($this->container['country_code']) > 2)) {
            $invalid_properties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['state']) && (strlen($this->container['state']) > 32)) {
            $invalid_properties[] = "invalid value for 'state', the character length must be smaller than or equal to 32.";
        }

        $allowed_values = $this->getValidityAllowableValues();
        if (!in_array($this->container['validity'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'validity', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['country_code']) > 2) {
            return false;
        }
        if (strlen($this->container['state']) > 32) {
            return false;
        }
        $allowed_values = $this->getValidityAllowableValues();
        if (!in_array($this->container['validity'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code Country code (ISO-3166 two letter)
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling ItemShippingDestinationRestriction., must be smaller than or equal to 2.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state State
     * @return $this
     */
    public function setState($state)
    {
        if (!is_null($state) && (strlen($state) > 32)) {
            throw new \InvalidArgumentException('invalid length for $state when calling ItemShippingDestinationRestriction., must be smaller than or equal to 32.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets validity
     * @return string
     */
    public function getValidity()
    {
        return $this->container['validity'];
    }

    /**
     * Sets validity
     * @param string $validity Validity
     * @return $this
     */
    public function setValidity($validity)
    {
        $allowed_values = $this->getValidityAllowableValues();
        if (!is_null($validity) && !in_array($validity, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'validity', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['validity'] = $validity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\ultracart\v2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


